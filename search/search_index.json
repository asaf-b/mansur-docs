{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Mansur's documentaion page ! Here you can find detailed code documentation, as well as some helful guides to get started as a user, or as a developer. Here are some Quick-Links to get started: about Getting Started Support-Us Documentation","title":"Home"},{"location":"FKChain/","text":"FKChain Defenitions construct Constructor: construct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments: jointStructure Constructor: jointStructure(mansur, guides, GLOB_mnsProjectScale, kwargs) Return: None Arguments: mansur guides GLOB_mnsProjectScale kwargs Keyword Arguments:","title":"FKChain"},{"location":"FKChain/#fkchain","text":"","title":"FKChain"},{"location":"FKChain/#defenitions","text":"","title":"Defenitions"},{"location":"FKChain/#construct","text":"Constructor: construct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"construct"},{"location":"FKChain/#jointstructure","text":"Constructor: jointStructure(mansur, guides, GLOB_mnsProjectScale, kwargs) Return: None Arguments: mansur guides GLOB_mnsProjectScale kwargs Keyword Arguments:","title":"jointStructure"},{"location":"FKChain_construction/","text":"FKChain_construction Defenitions constructBuildModule Constructor: constructBuildModule(mansur, guides = [], customGuides = [], kwargs) Return: None Arguments: mansur guides ( list ) ; [default: []] customGuides ( list ) ; [default: []] kwargs Keyword Arguments:","title":"FKChain construction"},{"location":"FKChain_construction/#fkchain_construction","text":"","title":"FKChain_construction"},{"location":"FKChain_construction/#defenitions","text":"","title":"Defenitions"},{"location":"FKChain_construction/#constructbuildmodule","text":"Constructor: constructBuildModule(mansur, guides = [], customGuides = [], kwargs) Return: None Arguments: mansur guides ( list ) ; [default: []] customGuides ( list ) ; [default: []] kwargs Keyword Arguments:","title":"constructBuildModule"},{"location":"FKChain_jntStruct/","text":"FKChain_jntStruct Defenitions jointStruct Constructor: jointStruct(mansur, guides, GLOB_mnsProjectScale, kwargs) Return: None Arguments: mansur guides GLOB_mnsProjectScale kwargs Keyword Arguments:","title":"FKChain jntStruct"},{"location":"FKChain_jntStruct/#fkchain_jntstruct","text":"","title":"FKChain_jntStruct"},{"location":"FKChain_jntStruct/#defenitions","text":"","title":"Defenitions"},{"location":"FKChain_jntStruct/#jointstruct","text":"Constructor: jointStruct(mansur, guides, GLOB_mnsProjectScale, kwargs) Return: None Arguments: mansur guides GLOB_mnsProjectScale kwargs Keyword Arguments:","title":"jointStruct"},{"location":"Support-Us/","text":"Any time of support goes a long way ! We need it ! So how can you support this project ? Subscribe to the youtube-channel ! Support directly by becoming a Patron! Share it ! Share it with your colleges and friends or share it on any social media platform! Exposure and user-base is the key to keep this project going, so don't hold back ! Every like counts. Likes go a long way, as they help promote the project by promoting videos/posts.","title":"Support Us"},{"location":"Support-Us/#any-time-of-support-goes-a-long-way-we-need-it","text":"","title":"Any time of support goes a long way ! We need it !"},{"location":"Support-Us/#so-how-can-you-support-this-project","text":"Subscribe to the youtube-channel ! Support directly by becoming a Patron! Share it ! Share it with your colleges and friends or share it on any social media platform! Exposure and user-base is the key to keep this project going, so don't hold back ! Every like counts. Likes go a long way, as they help promote the project by promoting videos/posts.","title":"So how can you support this project ?"},{"location":"UIUtils/","text":"UIUtils === Author: Assaf Ben Zur === UI Utility function assembly. This module holds all UI utility functions as well s any QT dynamic draw functions. All UI functions should be held in here for multi-usage of the same UI draw functions. This module also holds the QT ui dynamic conversion to '.py' and the 'get_maya_window' function. Classes CollapsibleFrameWidget [Class] Constructor: CollapsibleFrameWidget( parent ( str ) ; [default: None], title ( str ) ; [default: None]) Inherits from: QFrame Class Members: _is_collasped _title_frame _content _main_v_layout Methods: initCollapsable [method] toggleCollapsed [method] setArrow [method] initArrow [method] initContent [method] initTitleFrame [method] addWidget [method] CollapsibleFrameWidget methods initCollapsable [ CollapsibleFrameWidget class method] Constructor: initCollapsable(self) Return: None Arguments: self Optional Arguments: toggleCollapsed [ CollapsibleFrameWidget class method] Constructor: toggleCollapsed(self) Return: None Arguments: self Optional Arguments: setArrow [ CollapsibleFrameWidget class method] Constructor: setArrow(self, arrow_dir) Return: None Arguments: self arrow_dir Optional Arguments: initArrow [ CollapsibleFrameWidget class method] Constructor: initArrow(self, collapsed) Return: None Arguments: self collapsed Optional Arguments: initContent [ CollapsibleFrameWidget class method] Constructor: initContent(self, collapsed) Return: None Arguments: self collapsed Optional Arguments: initTitleFrame [ CollapsibleFrameWidget class method] Constructor: initTitleFrame(self, title, collapsed) Return: None Arguments: self title collapsed Optional Arguments: addWidget [ CollapsibleFrameWidget class method] Constructor: addWidget(self, widget) Return: None Arguments: self widget Optional Arguments: Defenitions acquireExternalWindow Constructor: acquireExternalWindow(UIName = None) Return: None Arguments: UIName ( str ) ; [default: None] Keyword Arguments: buildFormBaseClassForUI Constructor: buildFormBaseClassForUI(script_dir, rel_path) Return: baseClass, formClass Arguments: script_dir rel_path Keyword Arguments: buildTabForModuleParentDir Main BLOCK dynamiuc tab builder. Builds a tab for a given tab parent including all the neccesary layouts within, returning the main layout that can be inserted with new q items. Constructor: buildTabForModuleParentDir(modDirName, insertIndex, tabWidget, kwargs) Return: None Arguments: modDirName insertIndex tabWidget kwargs Keyword Arguments: modSet ( bool ) checkChannelCommand Constructor: checkChannelCommand(chanBtn,chanCbxs) Return: None Arguments: chanBtn chanCbxs Keyword Arguments: colOverrideBlockDefTriggerCommand Constructor: colOverrideBlockDefTriggerCommand(colorOverrideCbx, sideCB, ovverideBtnList) Return: None Arguments: colorOverrideCbx sideCB ovverideBtnList Keyword Arguments: colOverrideStateChange Constructor: colOverrideStateChange(colorOverrideCbx, sideCB, ovverideBtnList) Return: None Arguments: colorOverrideCbx sideCB ovverideBtnList Keyword Arguments: deleteAllLayoutItems A method to delete all widgets/object from a given layout Constructor: deleteAllLayoutItems(layout, kwargs) Return: None Arguments: layout kwargs Keyword Arguments: drawBooleanChk Main dynamic check-box UI draw. Creates a simple boolean check-box (QCheckBox) as well as a connected 'default' button. Constructor: drawBooleanChk(MnsArgumentObj, layoutParent) Return: QCheckBox Arguments: MnsArgumentObj layoutParent Keyword Arguments: drawButtonAndField Main dynamic 'button and field' draw. Draws a deault button, text field and an 'Insert items from scene' button into the given parent layout. This function makes all relevant connections between the QItems created- - 'Load command' from the QPushButton (insert) to the text field - 'Clear' trigger for the text field. - 'Set default' from the QPushButton 'default' to the text field. These connections are made within in order the return the QLEdit only, with no need to worrie about the 'functionallity' buttons created, only the value within the text field. Constructor: drawButtonAndField(MnsArgumentObj, layoutParent, alphaLimit = False) Return: QLEdit Arguments: MnsArgumentObj layoutParent alphaLimit ( bool ) ; [default: False] Keyword Arguments: drawButtonAndFieldUnknown Main 'unknown' button and field UI draw. In case the MnsArgument.type in question is an unknown type, draw a button and field style item for it. Constructor: drawButtonAndFieldUnknown(MnsArgumentObj, layoutParent) Return: QLEdit Arguments: MnsArgumentObj layoutParent Keyword Arguments: drawChannelColumnAndConnect Constructor: drawChannelColumnAndConnect(MnsArgumentObj, channel) Return: None Arguments: MnsArgumentObj channel Keyword Arguments: drawChannelControl Constructor: drawChannelControl(MnsArgumentObj, layoutParent) Return: list (all channel cbxs) Arguments: MnsArgumentObj layoutParent Keyword Arguments: drawColorBox Main dynamic 'draw color box' creation function. Will create a new QPushButton with its 'color picker' style display and inserts it into the given layoutParent. An automatic connection to the 'getColor' function is made, as well as a 'default' button creation and connection is made. Constructor: drawColorBox(MnsArgumentObj, layoutParent) Return: QPushButton Arguments: MnsArgumentObj layoutParent Keyword Arguments: drawColorBtnAndConnect Constructor: drawColorBtnAndConnect(default, kwargs) Return: QPushButton Arguments: default kwargs Keyword Arguments: buttonSize ( int ) ; [default: 25] colOverrideCbx ( str ) ; [default: None] drawColorScheme Main block 'draw color scheme box' creation function. Will create a new QPushButton series with 'color picker's style display and inserts it into the given layoutParent. An automatic connection to the 'getColor' function is made, as well as a 'default' button creation and connection is made. Constructor: drawColorScheme(MnsArgumentObj, layoutParent) Return: list Arguments: MnsArgumentObj layoutParent Keyword Arguments: drawColorSchemeOverride Constructor: drawColorSchemeOverride(MnsArgumentObj, layoutParent, kwargs) Return: list Arguments: MnsArgumentObj layoutParent kwargs Keyword Arguments: sideCB ( str ) ; [default: None] colOverride ( bool ) rigTop ( str ) ; [default: None] drawFloatScroll Main dynamic \"Float spinner\" UI draw Creates a Float QDoubleSpinBox widget, and a default button connected to it. Constructor: drawFloatScroll(MnsArgumentObj, layoutParent) Return: QDoubleSpinBox Arguments: MnsArgumentObj layoutParent Keyword Arguments: drawIntSpinner Main dynamic 'int field' field and spinner UI draw. Creates an int QSpinBox widget, and a default button connected to it. Constructor: drawIntSpinner(MnsArgumentObj, layoutParent) Return: QSpinBox Arguments: MnsArgumentObj layoutParent Keyword Arguments: drawModuleButton Main BLOCK dynamic build module buttom function draw. Builds a new QPushButoon for a given module, return the QPushButton created after connecting it to the given 'connectFunction'. The QPush buttom created will then to be inserted into a layout by the caller function. Constructor: drawModuleButton(MnsBuildModuleObj, connectFunction) Return: QPushButton Arguments: MnsBuildModuleObj connectFunction Keyword Arguments: drawOptionBox Main dynamic 'option box' draw. Drawing a new ob based on parameters within the MnsArgument object passed in. The QComboBox is inserted into the parent layout passed in. A default button and connection is made. Constructor: drawOptionBox(MnsArgumentObj, layoutParent) Return: QComboBox Arguments: MnsArgumentObj layoutParent Keyword Arguments: drawPathField Main Path row draw Constructor: drawPathField(MnsArgumentObj, layoutParent) Return: QLEdit Arguments: MnsArgumentObj layoutParent Keyword Arguments: drawPrimaryButton Constructor: drawPrimaryButton(plg, tabWidget, pickerBase, picker) Return: None Arguments: plg tabWidget pickerBase picker Keyword Arguments: drawSpacesBox Main dynamic 'draw spaces box' creation function. Constructor: drawSpacesBox(MnsArgumentObj, layoutParent) Return: QListWidget Arguments: MnsArgumentObj layoutParent Keyword Arguments: getColor Simple 'get color for a color PButton'. Creates a new QColorDialog asking the user for a color choice. When color selected sets the caller QPushButton color to the selected color Constructor: getColor(btn, kwargs) Return: None Arguments: btn kwargs Keyword Arguments: colOverrideCbx ( str ) ; [default: None] getColorArrayFromColorScheme Constructor: getColorArrayFromColorScheme(side, colorScheme) Return: None Arguments: side colorScheme Keyword Arguments: getObjectScreenSpaceByFilmGate Constructor: getObjectScreenSpaceByFilmGate(objectProj, cam) Return: None Arguments: objectProj cam Keyword Arguments: getPathCommand Constructor: getPathCommand(LEdit, mode = 0, fileTypes = []) Return: None Arguments: LEdit mode ( int ) ; [default: 0] fileTypes ( list ) ; [default: []] Keyword Arguments: getPlgPosition Constructor: getPlgPosition(plg, pickerBase) Return: None Arguments: plg pickerBase Keyword Arguments: get_maya_window Main maya window get for a global UI parent Constructor: get_maya_window() Return: qtWindow (main maya window as a qt window) Arguments: Keyword Arguments: listLoadCmd Constructor: listLoadCmd(QListWidget) Return: None Arguments: QListWidget Keyword Arguments: listRemoveCommand Constructor: listRemoveCommand(QListWidget) Return: None Arguments: QListWidget Keyword Arguments: loadCmd Main text field 'load from scene' trigger command. This command will update the given QLEdit with members of the maya scene when triggered. Three main cases: 1. Nothing is selected - if the field is empty- do nothing, else clear the field. 2. objects are selected, without any CB selection - load the object names in, seperated by commas. 3. Objects are selected and there is a CB selection as well - load all objects and chnnels in a 'object.channel' format, seperated by commas. Constructor: loadCmd(LEdit) Return: None Arguments: LEdit Keyword Arguments: load_ui_type This function converts a '.ui' file into a '.py' file live. This means that all UI's are derived from a QT designer ui files that are converted directly to form the UI. This keeps a live connection between the '.ui' file and the actul UI in maya. Meaning that any edit or a change to the UI base needs to be done only from the QT designer, without any further action by the user. It reruns a baseClass and a formClass to be used when creating any UI. Constructor: load_ui_type(ui_file) Return: baseClass, formClass Arguments: ui_file Keyword Arguments: setBooleanDefaultCmd 'Set default' trigger for a QCheckBox item. Constructor: setBooleanDefaultCmd(cbx,default) Return: None Arguments: cbx default Keyword Arguments: setChennelControlDefaultCmd Constructor: setChennelControlDefaultCmd(cbxList, MnsArgumentObj) Return: None Arguments: cbxList MnsArgumentObj Keyword Arguments: setColorDefaultCmd A 'set color back to default command. A command to be triggered by an outside 'default' button, or when initializing to set the specified QPushButton color back to it's default value. Constructor: setColorDefaultCmd(btn, colorDef) Return: None Arguments: btn colorDef Keyword Arguments: setColorSchemeDefaultCmd Constructor: setColorSchemeDefaultCmd(btnList, default) Return: None Arguments: btnList default Keyword Arguments: setFloatDefaultCmd 'Set default' trigger for a QDoubleSpinBox item. Constructor: setFloatDefaultCmd(spinner,default) Return: None Arguments: spinner default Keyword Arguments: setIntDefaultCmd 'Set deafult' command trigget for an int QSpinBox. Constructor: setIntDefaultCmd(spinner,default) Return: None Arguments: spinner default Keyword Arguments: setListWidgetDefaultCommand Constructor: setListWidgetDefaultCommand(QListWidget, default) Return: None Arguments: QListWidget default Keyword Arguments: setOtionBoxDefaultCmd A 'set default' command to be triggered for a combo box item. Constructor: setOtionBoxDefaultCmd(cbox, default) Return: None Arguments: cbox default Keyword Arguments: setStringDefaultCmd 'Set default' command trigger from a text field Constructor: setStringDefaultCmd(LEdit,default) Return: None Arguments: LEdit default Keyword Arguments: sideCBChangedTriggerCommand Constructor: sideCBChangedTriggerCommand(colorOverrideCbx, sideCB, ovverideBtnList, rigTop, ignoreOvverideCheckbox = False) Return: None Arguments: colorOverrideCbx sideCB ovverideBtnList rigTop ignoreOvverideCheckbox ( bool ) ; [default: False] Keyword Arguments: tearOffWindow Constructor: tearOffWindow(name, title, width, height, cameraToView) Return: None Arguments: name title width height cameraToView Keyword Arguments:","title":"UIUtils"},{"location":"UIUtils/#uiutils","text":"=== Author: Assaf Ben Zur === UI Utility function assembly. This module holds all UI utility functions as well s any QT dynamic draw functions. All UI functions should be held in here for multi-usage of the same UI draw functions. This module also holds the QT ui dynamic conversion to '.py' and the 'get_maya_window' function.","title":"UIUtils"},{"location":"UIUtils/#classes","text":"","title":"Classes"},{"location":"UIUtils/#collapsibleframewidget-class","text":"Constructor: CollapsibleFrameWidget( parent ( str ) ; [default: None], title ( str ) ; [default: None]) Inherits from: QFrame Class Members: _is_collasped _title_frame _content _main_v_layout Methods: initCollapsable [method] toggleCollapsed [method] setArrow [method] initArrow [method] initContent [method] initTitleFrame [method] addWidget [method]","title":"CollapsibleFrameWidget [Class]"},{"location":"UIUtils/#collapsibleframewidget-methods","text":"","title":"CollapsibleFrameWidget  methods"},{"location":"UIUtils/#defenitions","text":"","title":"Defenitions"},{"location":"UIUtils/#acquireexternalwindow","text":"Constructor: acquireExternalWindow(UIName = None) Return: None Arguments: UIName ( str ) ; [default: None] Keyword Arguments:","title":"acquireExternalWindow"},{"location":"UIUtils/#buildformbaseclassforui","text":"Constructor: buildFormBaseClassForUI(script_dir, rel_path) Return: baseClass, formClass Arguments: script_dir rel_path Keyword Arguments:","title":"buildFormBaseClassForUI"},{"location":"UIUtils/#buildtabformoduleparentdir","text":"Main BLOCK dynamiuc tab builder. Builds a tab for a given tab parent including all the neccesary layouts within, returning the main layout that can be inserted with new q items. Constructor: buildTabForModuleParentDir(modDirName, insertIndex, tabWidget, kwargs) Return: None Arguments: modDirName insertIndex tabWidget kwargs Keyword Arguments: modSet ( bool )","title":"buildTabForModuleParentDir"},{"location":"UIUtils/#checkchannelcommand","text":"Constructor: checkChannelCommand(chanBtn,chanCbxs) Return: None Arguments: chanBtn chanCbxs Keyword Arguments:","title":"checkChannelCommand"},{"location":"UIUtils/#coloverrideblockdeftriggercommand","text":"Constructor: colOverrideBlockDefTriggerCommand(colorOverrideCbx, sideCB, ovverideBtnList) Return: None Arguments: colorOverrideCbx sideCB ovverideBtnList Keyword Arguments:","title":"colOverrideBlockDefTriggerCommand"},{"location":"UIUtils/#coloverridestatechange","text":"Constructor: colOverrideStateChange(colorOverrideCbx, sideCB, ovverideBtnList) Return: None Arguments: colorOverrideCbx sideCB ovverideBtnList Keyword Arguments:","title":"colOverrideStateChange"},{"location":"UIUtils/#deletealllayoutitems","text":"A method to delete all widgets/object from a given layout Constructor: deleteAllLayoutItems(layout, kwargs) Return: None Arguments: layout kwargs Keyword Arguments:","title":"deleteAllLayoutItems"},{"location":"UIUtils/#drawbooleanchk","text":"Main dynamic check-box UI draw. Creates a simple boolean check-box (QCheckBox) as well as a connected 'default' button. Constructor: drawBooleanChk(MnsArgumentObj, layoutParent) Return: QCheckBox Arguments: MnsArgumentObj layoutParent Keyword Arguments:","title":"drawBooleanChk"},{"location":"UIUtils/#drawbuttonandfield","text":"Main dynamic 'button and field' draw. Draws a deault button, text field and an 'Insert items from scene' button into the given parent layout. This function makes all relevant connections between the QItems created- - 'Load command' from the QPushButton (insert) to the text field - 'Clear' trigger for the text field. - 'Set default' from the QPushButton 'default' to the text field. These connections are made within in order the return the QLEdit only, with no need to worrie about the 'functionallity' buttons created, only the value within the text field. Constructor: drawButtonAndField(MnsArgumentObj, layoutParent, alphaLimit = False) Return: QLEdit Arguments: MnsArgumentObj layoutParent alphaLimit ( bool ) ; [default: False] Keyword Arguments:","title":"drawButtonAndField"},{"location":"UIUtils/#drawbuttonandfieldunknown","text":"Main 'unknown' button and field UI draw. In case the MnsArgument.type in question is an unknown type, draw a button and field style item for it. Constructor: drawButtonAndFieldUnknown(MnsArgumentObj, layoutParent) Return: QLEdit Arguments: MnsArgumentObj layoutParent Keyword Arguments:","title":"drawButtonAndFieldUnknown"},{"location":"UIUtils/#drawchannelcolumnandconnect","text":"Constructor: drawChannelColumnAndConnect(MnsArgumentObj, channel) Return: None Arguments: MnsArgumentObj channel Keyword Arguments:","title":"drawChannelColumnAndConnect"},{"location":"UIUtils/#drawchannelcontrol","text":"Constructor: drawChannelControl(MnsArgumentObj, layoutParent) Return: list (all channel cbxs) Arguments: MnsArgumentObj layoutParent Keyword Arguments:","title":"drawChannelControl"},{"location":"UIUtils/#drawcolorbox","text":"Main dynamic 'draw color box' creation function. Will create a new QPushButton with its 'color picker' style display and inserts it into the given layoutParent. An automatic connection to the 'getColor' function is made, as well as a 'default' button creation and connection is made. Constructor: drawColorBox(MnsArgumentObj, layoutParent) Return: QPushButton Arguments: MnsArgumentObj layoutParent Keyword Arguments:","title":"drawColorBox"},{"location":"UIUtils/#drawcolorbtnandconnect","text":"Constructor: drawColorBtnAndConnect(default, kwargs) Return: QPushButton Arguments: default kwargs Keyword Arguments: buttonSize ( int ) ; [default: 25] colOverrideCbx ( str ) ; [default: None]","title":"drawColorBtnAndConnect"},{"location":"UIUtils/#drawcolorscheme","text":"Main block 'draw color scheme box' creation function. Will create a new QPushButton series with 'color picker's style display and inserts it into the given layoutParent. An automatic connection to the 'getColor' function is made, as well as a 'default' button creation and connection is made. Constructor: drawColorScheme(MnsArgumentObj, layoutParent) Return: list Arguments: MnsArgumentObj layoutParent Keyword Arguments:","title":"drawColorScheme"},{"location":"UIUtils/#drawcolorschemeoverride","text":"Constructor: drawColorSchemeOverride(MnsArgumentObj, layoutParent, kwargs) Return: list Arguments: MnsArgumentObj layoutParent kwargs Keyword Arguments: sideCB ( str ) ; [default: None] colOverride ( bool ) rigTop ( str ) ; [default: None]","title":"drawColorSchemeOverride"},{"location":"UIUtils/#drawfloatscroll","text":"Main dynamic \"Float spinner\" UI draw Creates a Float QDoubleSpinBox widget, and a default button connected to it. Constructor: drawFloatScroll(MnsArgumentObj, layoutParent) Return: QDoubleSpinBox Arguments: MnsArgumentObj layoutParent Keyword Arguments:","title":"drawFloatScroll"},{"location":"UIUtils/#drawintspinner","text":"Main dynamic 'int field' field and spinner UI draw. Creates an int QSpinBox widget, and a default button connected to it. Constructor: drawIntSpinner(MnsArgumentObj, layoutParent) Return: QSpinBox Arguments: MnsArgumentObj layoutParent Keyword Arguments:","title":"drawIntSpinner"},{"location":"UIUtils/#drawmodulebutton","text":"Main BLOCK dynamic build module buttom function draw. Builds a new QPushButoon for a given module, return the QPushButton created after connecting it to the given 'connectFunction'. The QPush buttom created will then to be inserted into a layout by the caller function. Constructor: drawModuleButton(MnsBuildModuleObj, connectFunction) Return: QPushButton Arguments: MnsBuildModuleObj connectFunction Keyword Arguments:","title":"drawModuleButton"},{"location":"UIUtils/#drawoptionbox","text":"Main dynamic 'option box' draw. Drawing a new ob based on parameters within the MnsArgument object passed in. The QComboBox is inserted into the parent layout passed in. A default button and connection is made. Constructor: drawOptionBox(MnsArgumentObj, layoutParent) Return: QComboBox Arguments: MnsArgumentObj layoutParent Keyword Arguments:","title":"drawOptionBox"},{"location":"UIUtils/#drawpathfield","text":"Main Path row draw Constructor: drawPathField(MnsArgumentObj, layoutParent) Return: QLEdit Arguments: MnsArgumentObj layoutParent Keyword Arguments:","title":"drawPathField"},{"location":"UIUtils/#drawprimarybutton","text":"Constructor: drawPrimaryButton(plg, tabWidget, pickerBase, picker) Return: None Arguments: plg tabWidget pickerBase picker Keyword Arguments:","title":"drawPrimaryButton"},{"location":"UIUtils/#drawspacesbox","text":"Main dynamic 'draw spaces box' creation function. Constructor: drawSpacesBox(MnsArgumentObj, layoutParent) Return: QListWidget Arguments: MnsArgumentObj layoutParent Keyword Arguments:","title":"drawSpacesBox"},{"location":"UIUtils/#getcolor","text":"Simple 'get color for a color PButton'. Creates a new QColorDialog asking the user for a color choice. When color selected sets the caller QPushButton color to the selected color Constructor: getColor(btn, kwargs) Return: None Arguments: btn kwargs Keyword Arguments: colOverrideCbx ( str ) ; [default: None]","title":"getColor"},{"location":"UIUtils/#getcolorarrayfromcolorscheme","text":"Constructor: getColorArrayFromColorScheme(side, colorScheme) Return: None Arguments: side colorScheme Keyword Arguments:","title":"getColorArrayFromColorScheme"},{"location":"UIUtils/#getobjectscreenspacebyfilmgate","text":"Constructor: getObjectScreenSpaceByFilmGate(objectProj, cam) Return: None Arguments: objectProj cam Keyword Arguments:","title":"getObjectScreenSpaceByFilmGate"},{"location":"UIUtils/#getpathcommand","text":"Constructor: getPathCommand(LEdit, mode = 0, fileTypes = []) Return: None Arguments: LEdit mode ( int ) ; [default: 0] fileTypes ( list ) ; [default: []] Keyword Arguments:","title":"getPathCommand"},{"location":"UIUtils/#getplgposition","text":"Constructor: getPlgPosition(plg, pickerBase) Return: None Arguments: plg pickerBase Keyword Arguments:","title":"getPlgPosition"},{"location":"UIUtils/#get_maya_window","text":"Main maya window get for a global UI parent Constructor: get_maya_window() Return: qtWindow (main maya window as a qt window) Arguments: Keyword Arguments:","title":"get_maya_window"},{"location":"UIUtils/#listloadcmd","text":"Constructor: listLoadCmd(QListWidget) Return: None Arguments: QListWidget Keyword Arguments:","title":"listLoadCmd"},{"location":"UIUtils/#listremovecommand","text":"Constructor: listRemoveCommand(QListWidget) Return: None Arguments: QListWidget Keyword Arguments:","title":"listRemoveCommand"},{"location":"UIUtils/#loadcmd","text":"Main text field 'load from scene' trigger command. This command will update the given QLEdit with members of the maya scene when triggered. Three main cases: 1. Nothing is selected - if the field is empty- do nothing, else clear the field. 2. objects are selected, without any CB selection - load the object names in, seperated by commas. 3. Objects are selected and there is a CB selection as well - load all objects and chnnels in a 'object.channel' format, seperated by commas. Constructor: loadCmd(LEdit) Return: None Arguments: LEdit Keyword Arguments:","title":"loadCmd"},{"location":"UIUtils/#load_ui_type","text":"This function converts a '.ui' file into a '.py' file live. This means that all UI's are derived from a QT designer ui files that are converted directly to form the UI. This keeps a live connection between the '.ui' file and the actul UI in maya. Meaning that any edit or a change to the UI base needs to be done only from the QT designer, without any further action by the user. It reruns a baseClass and a formClass to be used when creating any UI. Constructor: load_ui_type(ui_file) Return: baseClass, formClass Arguments: ui_file Keyword Arguments:","title":"load_ui_type"},{"location":"UIUtils/#setbooleandefaultcmd","text":"'Set default' trigger for a QCheckBox item. Constructor: setBooleanDefaultCmd(cbx,default) Return: None Arguments: cbx default Keyword Arguments:","title":"setBooleanDefaultCmd"},{"location":"UIUtils/#setchennelcontroldefaultcmd","text":"Constructor: setChennelControlDefaultCmd(cbxList, MnsArgumentObj) Return: None Arguments: cbxList MnsArgumentObj Keyword Arguments:","title":"setChennelControlDefaultCmd"},{"location":"UIUtils/#setcolordefaultcmd","text":"A 'set color back to default command. A command to be triggered by an outside 'default' button, or when initializing to set the specified QPushButton color back to it's default value. Constructor: setColorDefaultCmd(btn, colorDef) Return: None Arguments: btn colorDef Keyword Arguments:","title":"setColorDefaultCmd"},{"location":"UIUtils/#setcolorschemedefaultcmd","text":"Constructor: setColorSchemeDefaultCmd(btnList, default) Return: None Arguments: btnList default Keyword Arguments:","title":"setColorSchemeDefaultCmd"},{"location":"UIUtils/#setfloatdefaultcmd","text":"'Set default' trigger for a QDoubleSpinBox item. Constructor: setFloatDefaultCmd(spinner,default) Return: None Arguments: spinner default Keyword Arguments:","title":"setFloatDefaultCmd"},{"location":"UIUtils/#setintdefaultcmd","text":"'Set deafult' command trigget for an int QSpinBox. Constructor: setIntDefaultCmd(spinner,default) Return: None Arguments: spinner default Keyword Arguments:","title":"setIntDefaultCmd"},{"location":"UIUtils/#setlistwidgetdefaultcommand","text":"Constructor: setListWidgetDefaultCommand(QListWidget, default) Return: None Arguments: QListWidget default Keyword Arguments:","title":"setListWidgetDefaultCommand"},{"location":"UIUtils/#setotionboxdefaultcmd","text":"A 'set default' command to be triggered for a combo box item. Constructor: setOtionBoxDefaultCmd(cbox, default) Return: None Arguments: cbox default Keyword Arguments:","title":"setOtionBoxDefaultCmd"},{"location":"UIUtils/#setstringdefaultcmd","text":"'Set default' command trigger from a text field Constructor: setStringDefaultCmd(LEdit,default) Return: None Arguments: LEdit default Keyword Arguments:","title":"setStringDefaultCmd"},{"location":"UIUtils/#sidecbchangedtriggercommand","text":"Constructor: sideCBChangedTriggerCommand(colorOverrideCbx, sideCB, ovverideBtnList, rigTop, ignoreOvverideCheckbox = False) Return: None Arguments: colorOverrideCbx sideCB ovverideBtnList rigTop ignoreOvverideCheckbox ( bool ) ; [default: False] Keyword Arguments:","title":"sideCBChangedTriggerCommand"},{"location":"UIUtils/#tearoffwindow","text":"Constructor: tearOffWindow(name, title, width, height, cameraToView) Return: None Arguments: name title width height cameraToView Keyword Arguments:","title":"tearOffWindow"},{"location":"about/","text":"My name is Asaf Ben Zur and I'm a 3D Rigger Developer for 3D Animation. I know first hand how difficult it is to survive in the VFX Animation world, and i believe that the only ones who can change that are the artists. The fact that in-order to survive as an Animation or a VFX artist, you have to constantly strive for a higher position or a bigger studio- there you will be a part of a higher-budget projects, and higher-level tools as a result. As a Rigger, I know for a fact that any 3D animation is limited to the rig provided. And when the rig fails- the animator's vision fails with it- forcing them to compremise. I want to support creation by sharing some higher-end developments and tools- which are created mainly with animators in mind, to try and provide artists with a better envioroment to work in and tools that will allow better behavior, faster performance, and easier control. The videos I make are mainly technical currently (which will change soon), but I try and make it as clear as possible for artists to recognize the potential to produce some amazing results with minimum effort- while trying to ignore my terrible animation skills. The plugins I present are a part of a big modular rig builder I'm working on called BLOCK- which will use all of these plugins under the hood of the build-modules.","title":"About"},{"location":"arguments/","text":"arguments === Author: Assaf Ben Zur === MNS main arguments core functions and Classes. This module holds the MnsArgument class as well as all argument handeling functions. This module was designed to procedurally handle function arguments in order to manipulate them, generate dynamic UI's from them, and pass them along back to their creator function as an execute. Classes MnsArgument [Class] MnsArgument Convieniency Class. A class instance holds all relevant information regarding an extracted single function argument. These class members will dectate any behavior derived from an actual function object or a method object. Constructor: MnsArgument( **kwargs ) Inherits from: object Class Members: name type default min max comment ob side pathMode pathFileTypes blockCreationOnly jntStructMember Defenitions extractArgsFromDef This function will extract all arguments and optional arguments from a given function object. Returns two lists containing MnsArgument instances. Constructor: extractArgsFromDef(defenition) Return: list (arguments MnsArgument list), list (optional arguments MnsArgument list) Arguments: defenition Keyword Arguments: extractArgsFromSource This function will extract all arguments and optional arguments from a given function source. Returns two lists containing MnsArgument instances. Constructor: extractArgsFromSource(src) Return: list (arguments MnsArgument list), list (optional arguments MnsArgument list) Arguments: src Keyword Arguments: extractChennelControlDefaultFromLine Constructor: extractChennelControlDefaultFromLine(line = \"\", argAame = \"\") Return: dict Arguments: line ( str ) ; [default: \"\"] argAame ( str ) ; [default: \"\"] Keyword Arguments: extractColorSchemeDefaultFromLine Constructor: extractColorSchemeDefaultFromLine(line = \"\", argAame = \"\") Return: None Arguments: line ( str ) ; [default: \"\"] argAame ( str ) ; [default: \"\"] Keyword Arguments: formatArgumetsAsDict Constructor: formatArgumetsAsDict(mnsArgsList = []) Return: None Arguments: mnsArgsList ( list ) ; [default: []] Keyword Arguments: recompileArgumetsAsString A reverse function to the 'extractArgsFromDef'. In order to pass any arguments back to it's creator, comes a need to re-compile an argument list into a single callable formatted string. This function covers this need. Constructor: recompileArgumetsAsString(defenition, arguments, optArgs, values) Return: string (re-compiled arguments as string) Arguments: defenition arguments optArgs values Keyword Arguments: returnValueAndTypeFromArgString This function will return a value (as its actual type) and a type (as a type object) from a given extracted argument string Constructor: returnValueAndTypeFromArgString(argString = \"\") Return: value (Dynamic type), type (type object) Arguments: argString ( str ) ; [default: \"\"] Keyword Arguments: splitStringToArg This function return a MnsArgument object from a given argument string. It will split the argument string into actual elemnts and values and directly ingest them into the class members. Constructor: splitStringToArg(argAsString) Return: MnsArgument Arguments: argAsString Keyword Arguments:","title":"Arguments"},{"location":"arguments/#arguments","text":"=== Author: Assaf Ben Zur === MNS main arguments core functions and Classes. This module holds the MnsArgument class as well as all argument handeling functions. This module was designed to procedurally handle function arguments in order to manipulate them, generate dynamic UI's from them, and pass them along back to their creator function as an execute.","title":"arguments"},{"location":"arguments/#classes","text":"","title":"Classes"},{"location":"arguments/#mnsargument-class","text":"MnsArgument Convieniency Class. A class instance holds all relevant information regarding an extracted single function argument. These class members will dectate any behavior derived from an actual function object or a method object. Constructor: MnsArgument( **kwargs ) Inherits from: object Class Members: name type default min max comment ob side pathMode pathFileTypes blockCreationOnly jntStructMember","title":"MnsArgument [Class]"},{"location":"arguments/#defenitions","text":"","title":"Defenitions"},{"location":"arguments/#extractargsfromdef","text":"This function will extract all arguments and optional arguments from a given function object. Returns two lists containing MnsArgument instances. Constructor: extractArgsFromDef(defenition) Return: list (arguments MnsArgument list), list (optional arguments MnsArgument list) Arguments: defenition Keyword Arguments:","title":"extractArgsFromDef"},{"location":"arguments/#extractargsfromsource","text":"This function will extract all arguments and optional arguments from a given function source. Returns two lists containing MnsArgument instances. Constructor: extractArgsFromSource(src) Return: list (arguments MnsArgument list), list (optional arguments MnsArgument list) Arguments: src Keyword Arguments:","title":"extractArgsFromSource"},{"location":"arguments/#extractchennelcontroldefaultfromline","text":"Constructor: extractChennelControlDefaultFromLine(line = \"\", argAame = \"\") Return: dict Arguments: line ( str ) ; [default: \"\"] argAame ( str ) ; [default: \"\"] Keyword Arguments:","title":"extractChennelControlDefaultFromLine"},{"location":"arguments/#extractcolorschemedefaultfromline","text":"Constructor: extractColorSchemeDefaultFromLine(line = \"\", argAame = \"\") Return: None Arguments: line ( str ) ; [default: \"\"] argAame ( str ) ; [default: \"\"] Keyword Arguments:","title":"extractColorSchemeDefaultFromLine"},{"location":"arguments/#formatargumetsasdict","text":"Constructor: formatArgumetsAsDict(mnsArgsList = []) Return: None Arguments: mnsArgsList ( list ) ; [default: []] Keyword Arguments:","title":"formatArgumetsAsDict"},{"location":"arguments/#recompileargumetsasstring","text":"A reverse function to the 'extractArgsFromDef'. In order to pass any arguments back to it's creator, comes a need to re-compile an argument list into a single callable formatted string. This function covers this need. Constructor: recompileArgumetsAsString(defenition, arguments, optArgs, values) Return: string (re-compiled arguments as string) Arguments: defenition arguments optArgs values Keyword Arguments:","title":"recompileArgumetsAsString"},{"location":"arguments/#returnvalueandtypefromargstring","text":"This function will return a value (as its actual type) and a type (as a type object) from a given extracted argument string Constructor: returnValueAndTypeFromArgString(argString = \"\") Return: value (Dynamic type), type (type object) Arguments: argString ( str ) ; [default: \"\"] Keyword Arguments:","title":"returnValueAndTypeFromArgString"},{"location":"arguments/#splitstringtoarg","text":"This function return a MnsArgument object from a given argument string. It will split the argument string into actual elemnts and values and directly ingest them into the class members. Constructor: splitStringToArg(argAsString) Return: MnsArgument Arguments: argAsString Keyword Arguments:","title":"splitStringToArg"},{"location":"blockBuildUI/","text":"blockBuildUI Classes MnsBlockBuildUI [Class] Constructor: MnsBlockBuildUI( parent ( str ) ; [default: mnsUIUtils.get_maya_window()]) Inherits from: form_class, base_class Class Members: iconsDir tabIndex buildModulesBtns sidePlaceHolder Methods: addModulePath [method] applyModulePathsChange [method] connectSignals [method] defineBuildParentModules [method] duplicateModule [method] fixModulePathForRigTop [method] gatherAdditionalModulePaths [method] getConstructMode [method] initView [method] loadRigSettings [method] loadWindow [method] newRigTopTrig [method] removeModelPath [method] symmetrizeModule [method] constructRigInit [method] deconstructRigInit [method] extractControlShapes [method] initializeAdditionalModulePaths [method] poseSaveLoadTrigger [method] updateRigStructure [method] updateSettings [method] moduleBuildGuide [method] loadModuleSettings [method] buildModulesDefine [method] pureDuplicate [method] collectPartialModulesRoots [method] getCorrespondingModuleButtonForModule [method] getModuleSettings [method] MnsBlockBuildUI methods addModulePath [ MnsBlockBuildUI class method] Constructor: addModulePath(self) Return: None Arguments: self Optional Arguments: applyModulePathsChange [ MnsBlockBuildUI class method] Constructor: applyModulePathsChange(self) Return: None Arguments: self Optional Arguments: connectSignals [ MnsBlockBuildUI class method] Constructor: connectSignals(self) Return: None Arguments: self Optional Arguments: defineBuildParentModules [ MnsBlockBuildUI class method] Constructor: defineBuildParentModules(self) Return: None Arguments: self Optional Arguments: duplicateModule [ MnsBlockBuildUI class method] Constructor: duplicateModule(self) Return: None Arguments: self Optional Arguments: fixModulePathForRigTop [ MnsBlockBuildUI class method] Constructor: fixModulePathForRigTop(self) Return: None Arguments: self Optional Arguments: gatherAdditionalModulePaths [ MnsBlockBuildUI class method] Constructor: gatherAdditionalModulePaths(self) Return: None Arguments: self Optional Arguments: getConstructMode [ MnsBlockBuildUI class method] Constructor: getConstructMode(self) Return: None Arguments: self Optional Arguments: initView [ MnsBlockBuildUI class method] Constructor: initView(self) Return: None Arguments: self Optional Arguments: loadRigSettings [ MnsBlockBuildUI class method] Constructor: loadRigSettings(self) Return: None Arguments: self Optional Arguments: loadWindow [ MnsBlockBuildUI class method] Constructor: loadWindow(self) Return: None Arguments: self Optional Arguments: newRigTopTrig [ MnsBlockBuildUI class method] Constructor: newRigTopTrig(self) Return: None Arguments: self Optional Arguments: removeModelPath [ MnsBlockBuildUI class method] Constructor: removeModelPath(self) Return: None Arguments: self Optional Arguments: symmetrizeModule [ MnsBlockBuildUI class method] Constructor: symmetrizeModule(self) Return: None Arguments: self Optional Arguments: constructRigInit [ MnsBlockBuildUI class method] Constructor: constructRigInit(self, kwargs) Return: None Arguments: self kwargs Optional Arguments: deconstructRigInit [ MnsBlockBuildUI class method] Constructor: deconstructRigInit(self, kwargs) Return: None Arguments: self kwargs Optional Arguments: extractControlShapes [ MnsBlockBuildUI class method] Constructor: extractControlShapes(self, kwargs) Return: None Arguments: self kwargs Optional Arguments: initializeAdditionalModulePaths [ MnsBlockBuildUI class method] Constructor: initializeAdditionalModulePaths(self, kwargs) Return: None Arguments: self kwargs Optional Arguments: poseSaveLoadTrigger [ MnsBlockBuildUI class method] Constructor: poseSaveLoadTrigger(self, kwargs) Return: None Arguments: self kwargs Optional Arguments: updateRigStructure [ MnsBlockBuildUI class method] Constructor: updateRigStructure(self, kwargs) Return: None Arguments: self kwargs Optional Arguments: updateSettings [ MnsBlockBuildUI class method] Constructor: updateSettings(self, kwargs) Return: None Arguments: self kwargs Optional Arguments: moduleBuildGuide [ MnsBlockBuildUI class method] Constructor: moduleBuildGuide(self, MnsBuildModuleButton) Return: None Arguments: self MnsBuildModuleButton Optional Arguments: loadModuleSettings [ MnsBlockBuildUI class method] Constructor: loadModuleSettings(self, firstAttempt = True) Return: None Arguments: self firstAttempt ( bool ) ; [default: True] Optional Arguments: buildModulesDefine [ MnsBlockBuildUI class method] Constructor: buildModulesDefine(self, modParentPath, dirLayout) Return: None Arguments: self modParentPath dirLayout Optional Arguments: pureDuplicate [ MnsBlockBuildUI class method] Constructor: pureDuplicate(self, modRoot) Return: None Arguments: self modRoot Optional Arguments: collectPartialModulesRoots [ MnsBlockBuildUI class method] Constructor: collectPartialModulesRoots(self, mode) Return: None Arguments: self mode Optional Arguments: getCorrespondingModuleButtonForModule [ MnsBlockBuildUI class method] Constructor: getCorrespondingModuleButtonForModule(self, rootGuide) Return: None Arguments: self rootGuide Optional Arguments: getModuleSettings [ MnsBlockBuildUI class method] Constructor: getModuleSettings(self, rootGuide, firstAttempt = True) Return: None Arguments: self rootGuide firstAttempt ( bool ) ; [default: True] Optional Arguments:","title":"blockBuildUI"},{"location":"blockBuildUI/#blockbuildui","text":"","title":"blockBuildUI"},{"location":"blockBuildUI/#classes","text":"","title":"Classes"},{"location":"blockBuildUI/#mnsblockbuildui-class","text":"Constructor: MnsBlockBuildUI( parent ( str ) ; [default: mnsUIUtils.get_maya_window()]) Inherits from: form_class, base_class Class Members: iconsDir tabIndex buildModulesBtns sidePlaceHolder Methods: addModulePath [method] applyModulePathsChange [method] connectSignals [method] defineBuildParentModules [method] duplicateModule [method] fixModulePathForRigTop [method] gatherAdditionalModulePaths [method] getConstructMode [method] initView [method] loadRigSettings [method] loadWindow [method] newRigTopTrig [method] removeModelPath [method] symmetrizeModule [method] constructRigInit [method] deconstructRigInit [method] extractControlShapes [method] initializeAdditionalModulePaths [method] poseSaveLoadTrigger [method] updateRigStructure [method] updateSettings [method] moduleBuildGuide [method] loadModuleSettings [method] buildModulesDefine [method] pureDuplicate [method] collectPartialModulesRoots [method] getCorrespondingModuleButtonForModule [method] getModuleSettings [method]","title":"MnsBlockBuildUI [Class]"},{"location":"blockBuildUI/#mnsblockbuildui-methods","text":"","title":"MnsBlockBuildUI  methods"},{"location":"blockUtility/","text":"blockUtility Defenitions addDefaultAttrsToPlg For a newly created plg, create all of it's default predefined attributes. Constructor: addDefaultAttrsToPlg(plg, kwargs) Return: None Arguments: plg kwargs Keyword Arguments: alignPLGuides This is the main 'align' trigger to all 'align tools' in BLOCK. This method will calidate and collect the current scene slection, then align the collected PLG's based on the mode passed in. Constructor: alignPLGuides(border = \"left\", mode = 0) Return: None Arguments: border ( str ) ; [default: \"left\"] mode ( int ) ; [default: 0] Keyword Arguments: attemptModulePathFixFroRigTop Run through all existing rig component (in rigTop) and validate the module directories against all existing module directories. If a module path was found invalid, attempt to re-find it in the existing modules. Constructor: attemptModulePathFixFroRigTop(rigTop, existingBtns) Return: None Arguments: rigTop existingBtns Keyword Arguments: buildShapes This method will be called from a rig construction. This method will look for any contol shapes stored within the given rig (rigTop), and replace the default shapes with any corresponding control shape. Shape replacement method will be done according to the 'mode' flag (relative/absulote). Constructor: buildShapes(ctrls = [], rigTop = None, kwargs) Return: None Arguments: ctrls ( list ) ; [default: []] rigTop ( str ) ; [default: None] kwargs Keyword Arguments: mode ( int ) collectCtrls Collect ALL related controls for th given rigTop. Constructor: collectCtrls(rigTop = None) Return: list (controls) Arguments: rigTop ( str ) ; [default: None] Keyword Arguments: collectGuides Based on the oprional arguments passed in, collect all matching related guides to the input root list. Constructor: collectGuides(roots = pm.ls(sl = 1), kwargs) Return: dict (Related guides), list (sparseGuides, guide without any relations) Arguments: roots ( str ) ; [default: selection] kwargs Keyword Arguments: rigTop ( str ) ; [default: None] includeDecendents ( bool ) includeDecendentBranch ( bool ) getGuides ( bool ) ; [default: True] getCustomGuides ( bool ) ; [default: True] allAsSparse ( bool ) collectPLGuidesToAlign This is the main collect wrapper for all 'align plg' tools in BLOCK. This methods will validate and collect all PLG to align from the current scene selection Constructor: collectPLGuidesToAlign(mode = 0) Return: dict (PLGs to align) Arguments: mode ( int ) ; [default: 0] Keyword Arguments: collectSlavesFromNdr Collect all slaves related to the passed in 'mnsNodeRelationship' node. Constructor: collectSlavesFromNdr(ndrNode) Return: list (slave nodes) Arguments: ndrNode Keyword Arguments: connectPlgToVisChannel This method handles the vis channel connection of a plg to it's related layoutBase attributes based on it's type. Constructor: connectPlgToVisChannel(plg) Return: None Arguments: plg Keyword Arguments: connectSlaveToDeleteMaster Connect the passed in 'slave' node to the passed in 'master' node using 'mnsNodeRelationship'. This method will be successfull only if the master already has a related 'mnsNodeRelationship' node. Constructor: connectSlaveToDeleteMaster(slave, master) Return: None Arguments: slave master Keyword Arguments: createAndConnectModuleVisChannelsToPuppetRootCtrl This method will create and connect the pedefined visibility graph to a given 'Module Top Group'. The driver attribute will be created within the puppet's 'world control', and the connection graph (using animCurvesUU node) will input into the group's visibility channels. The channels are split (predefined) as follows: 0. None 1. primaries 2. Secondaries 3. Tertiaries 4. Secondaries Only 5. Tertiaries Only 6. No Primaries Constructor: createAndConnectModuleVisChannelsToPuppetRootCtrl(moduleTopNode = None) Return: None Arguments: moduleTopNode ( str ) ; [default: None] Keyword Arguments: createModuleTopNode This method is used to create the genric 'module top group' on module construction. Constructor: createModuleTopNode(MnsBuildModuleA = None, kwargs) Return: MnsNameStd (Module Top Group) Arguments: MnsBuildModuleA ( str ) ; [default: None] kwargs Keyword Arguments: createPickerLayoutGuide The main creation method for PLG creation. This method will create a new 'Pikcer Layout Guide' based on the passed in parameters. 1. get picker layout base. 2. collect projection position if requested. 3. create and set all attributes 4. create the related title (mnsAnnotate node) Constructor: createPickerLayoutGuide(ctrl, override, rigTop = None, kwargs) Return: MnsNameStd (plg) Arguments: ctrl override rigTop ( str ) ; [default: None] kwargs Keyword Arguments: createPickerLayoutGuides Warpper method that handles multiple PLGs creation. Constructor: createPickerLayoutGuides(ctrlsToProject, rigTop, msgPrompt = True, kwargs) Return: None Arguments: ctrlsToProject rigTop msgPrompt ( bool ) ; [default: True] kwargs Keyword Arguments: createVisibilityBridgeMdl This method will check wether the 'target' has a visibility channel connection. In the case the given 'target' has input visibility connection, a 'bridge' multiplyDoubleLinear node will be created. The brigde node will accomidate both sources as an input, instead of replacing the original visibility by simple multiplication. By creating the 'bridge', both old and new sources will be kept as drivers, setting the visibility to 'False' if ANY of the given sources is 'False'. In case there is no connection input to the target's visibility channel, a simple connection will be made using the input source. Constructor: createVisibilityBridgeMdl(source = None, target = None) Return: None Arguments: source ( str ) ; [default: None] target ( str ) ; [default: None] Keyword Arguments: ctrlPickerGuideToggle Atempt to toggle between a selection \"control\" and \"PLG\" if possible. Constructor: ctrlPickerGuideToggle() Return: None Arguments: Keyword Arguments: deletePoseForGuides Block's delete pose wrapper. Constructor: deletePoseForGuides(guides = [], poseSet = \"T\") Return: None Arguments: guides ( list ) ; [default: []] poseSet ( str ) ; [default: \"T\"] Keyword Arguments: deletePuppetName This method will filter and delete the rigTops' puppet curves title. Constructor: deletePuppetName(rigTop, kwargs) Return: None Arguments: rigTop kwargs Keyword Arguments: disconnectSlaveFromMaster Disconnect the slave passed in from it's master, if there is one. Constructor: disconnectSlaveFromMaster(slave) Return: None Arguments: slave Keyword Arguments: duplicatePlg Block \"PLG duplicate\" trigger. This method will handle PLG validation and duplication. Constructor: duplicatePlg(guide = None) Return: None Arguments: guide ( str ) ; [default: None] Keyword Arguments: duplicatePlgs A simple wrapper mwthod to handle multiple PLG duplication (Based on scene selection). Constructor: duplicatePlgs() Return: None Arguments: Keyword Arguments: extractControlShapes Trigger method for BLOCK - 'extract control shapes' method. This method will extract and store the current state of control shapes within the given rig (rigTop). The extracted shapes will be re-constructed once a rig-rebuild is initiated. In case of any control shape already exists, it will be replaced by default. Constructor: extractControlShapes(ctrls = [], rigTop = None) Return: list (controls) Arguments: ctrls ( list ) ; [default: []] rigTop ( str ) ; [default: None] Keyword Arguments: filterCreationOnlyFromArgs A simple method to filter out the \"creationOnly\" flag for an argument. This method is called on a dynamicUI creation call if it NOT a \"new creation\" mode in BLOCK. In case any arguments within the list passed in is flagged as \"creationOnly\", it is removed from the list Constructor: filterCreationOnlyFromArgs(argsList) Return: list (filtered arguments) Arguments: argsList Keyword Arguments: filterSettings Filter all pre-defined settings to their corresponding gathering methods, and re-collect Constructor: filterSettings(fileSettings, node) Return: list (settings), string (current side place holder) Arguments: fileSettings node Keyword Arguments: getAllGuideRootsForRigTop Gather all guide roots for the passed in rigTop node. Constructor: getAllGuideRootsForRigTop(rigTop) Return: list (rootGuides) Arguments: rigTop Keyword Arguments: getAllPlgsForRigTop Collect all 'picker layout guides' from the rig passed in (as rigTop) Constructor: getAllPlgsForRigTop(rigTop) Return: list (All PLGs) Arguments: rigTop Keyword Arguments: getAllcolCtrlforRigTop Collect all 'color associated' nodes within the passed in rigTop. All returned nodes are considered 'color associated', meaning they are nodes that all of their shapes need to be directly colored. Constructor: getAllcolCtrlforRigTop(rigTop) Return: list (colorControls) Arguments: rigTop Keyword Arguments: getChildModules Recusrsivly collect all child modules from the given rootGuide's decendents. Constructor: getChildModules(rootGuide) Return: list (module decendents) Arguments: rootGuide Keyword Arguments: getCsGrpFromRigTop Attempt to collect the 'Control Shapes Group' from the passed in rigTop. Constructor: getCsGrpFromRigTop(rigTop = None) Return: MnsNameStd (ctrlShapes group) Arguments: rigTop ( str ) ; [default: None] Keyword Arguments: getCtrlCol Get the passed in node's color based on it's type, heirarchy and attributes. Constructor: getCtrlCol(ctrl, rigTop) Return: tuple[3] (color) Arguments: ctrl rigTop Keyword Arguments: getDeleteMasterFromSlave Collect the delete master from a slave's related 'mnsNodeRelationship' node, if there is one. This method will collect the master connected to the 'deleteMaster' attribute of the node. Constructor: getDeleteMasterFromSlave(slave) Return: MnsNameStd (master) Arguments: slave Keyword Arguments: getExistingSpaceConstraintForControl Collect existing 'spaces' constraints for a passed in (built) control, in order to re-build them in turn, after correct filtering and validation (in case of a partial build for example). Constructor: getExistingSpaceConstraintForControl(ctrl = None) Return: list (mnsMatrixConstraint nodes) Arguments: ctrl ( str ) ; [default: None] Keyword Arguments: getExistingSpaceConstraintForControls Wrapper mwthod to collect 'spaces' constraints for multiple controls. Constructor: getExistingSpaceConstraintForControls(controls = []) Return: dict (constraintSpaces dictionary) Arguments: controls ( list ) ; [default: []] Keyword Arguments: getGuideParent Collect a ctrl type object's 'Guide Authority', or related guide object. Constructor: getGuideParent(objectSel = None) Return: PyNode Arguments: objectSel ( str ) ; [default: None] Keyword Arguments: getModuleDecendentsWildcard Collect all given module dendents using a 'wild-card' search method. This will collect all relatives using a * search within the root decendents, and return all of the passed in node types. Constructor: getModuleDecendentsWildcard(guideRoot, kwargs) Return: list (matching decendents) Arguments: guideRoot kwargs Keyword Arguments: getModuleFromGuide This method will attempt to collect a related PyModule from the given guideRoot passed in. This method will not return the module's methods, only the PyModule as an object. This method also contains override optional arguments to specify a direct path or module name. Constructor: getModuleFromGuide(guideRoot, kwargs) Return: PyModule (object) Arguments: guideRoot kwargs Keyword Arguments: methodName ( str ) ; [default: jointStructure] modPath ( str ) ; [default: None] modName ( str ) ; [default: None] getModuleGuideDecendents Collect all of the root guide module relatives for the passed in moduleRoot (or rootGuide). Constructor: getModuleGuideDecendents(guideRoot) Return: list (sorted by ID module decendents) Arguments: guideRoot Keyword Arguments: getModuleInterpJoints Collect all the given moduleRoot's 'interpolationJoints' relatives. Constructor: getModuleInterpJoints(guideRoot) Return: list (matching interJoints) Arguments: guideRoot Keyword Arguments: getModuleRoot Attempt to collect the root guide relative from the given node. Constructor: getModuleRoot(objectA) Return: PyNode (rootGuide) Arguments: objectA Keyword Arguments: getModuleRootForSel Attempt to collect a 'root guide' relative from the current selection Constructor: getModuleRootForSel() Return: PyNode (moduleRoot) Arguments: Keyword Arguments: getModuleTopForCtrl Collect the 'Module Top Group' related to the passed in control. Constructor: getModuleTopForCtrl(ctrl = None, nameMatch = None) Return: MnsNameStd (Module Top Group) Arguments: ctrl ( str ) ; [default: None] nameMatch ( str ) ; [default: None] Keyword Arguments: getModuleTopFromRootGuide Attempt to collect 'Module Top Group' from a given root guide. Constructor: getModuleTopFromRootGuide(rootGuide = None) Return: MnsNameStd (Module Top Group) Arguments: rootGuide ( str ) ; [default: None] Keyword Arguments: getNodeRelationshipNodeFromObject Collect the related 'mnsNodeRelationship' node from the given input node. Constructor: getNodeRelationshipNodeFromObject(node) Return: PyNode Arguments: node Keyword Arguments: getOffsetGrpForCtrl Collect the offsetGroup related to the passed in control, if it exists. Constructor: getOffsetGrpForCtrl(ctrl, kwargs) Return: MnsNameStd (offset group) Arguments: ctrl kwargs Keyword Arguments: type ( str ) ; [default: offsetGrp] getOppositeSideControl Attempt to collect the opposite related mns object if it exists. Only non 'ceneter components' will be tested of course. Constructor: getOppositeSideControl(obj = None) Return: MnsNameStd (Opposite object) Arguments: obj ( str ) ; [default: None] Keyword Arguments: getPickerGuidesGrpFromRigTop Attempt to collect the 'Picker Guide Group' from the passed in rigTop. Constructor: getPickerGuidesGrpFromRigTop(rigTop = None) Return: MnsNameStd (Picker Guide Group) Arguments: rigTop ( str ) ; [default: None] Keyword Arguments: getPickerLayoutBaseFromRigTop Attempt to collect the 'Picker Layout Base guide' from the passed in rigTop. Constructor: getPickerLayoutBaseFromRigTop(rigTop = None) Return: MnsNameStd (Picker Layout Base guide) Arguments: rigTop ( str ) ; [default: None] Keyword Arguments: getPickerLayoutCamFromRigTop Attempt to collect the 'Picker Layout Camera' from the passed in rigTop. Constructor: getPickerLayoutCamFromRigTop(rigTop = None) Return: MnsNameStd (Picker Layout Base guide) Arguments: rigTop ( str ) ; [default: None] Keyword Arguments: getPickerProjectionCamFromRigTop Attempt to collect the 'Picker Projection Camera' from the passed in rigTop. Constructor: getPickerProjectionCamFromRigTop(rigTop = None) Return: MnsNameStd (Picker Projection Camera) Arguments: rigTop ( str ) ; [default: None] Keyword Arguments: getPickerTitleGrpFromRigTop Attempt to collect the 'Picker Title Group' from the passed in rigTop. Constructor: getPickerTitleGrpFromRigTop(rigTop = None) Return: MnsNameStd (Picker Title Group)) Arguments: rigTop ( str ) ; [default: None] Keyword Arguments: getPuppetBaseFromRigTop Attempt to collect the 'puppet group' from the passed in rigTop. Constructor: getPuppetBaseFromRigTop(rigTop = None) Return: MnsNameStd (puppet base) Arguments: rigTop ( str ) ; [default: None] Keyword Arguments: getPuppetRootFromRigTop Attempt to collect the 'Puppet World Control' from the passed in rigTop. Constructor: getPuppetRootFromRigTop(rigTop = None) Return: MnsNameStd (Puppet world control) Arguments: rigTop ( str ) ; [default: None] Keyword Arguments: getPyModuleFromGuide Attempt to collect a 'Python Module' (or package) related to the given guide node passed in. If a related module was found, this method will return it as a PyModule object not as a directory. This method will also return the module's methods in a dictionary in order to run directly from it. Constructor: getPyModuleFromGuide(guide) Return: PyModule, dict (module methods as keys and method objects as entries) Arguments: guide Keyword Arguments: getRelatedNodeFromObject Collect a related node from the 'messageOut' attribute of the given node's 'mnsNodeRelationship' node. Constructor: getRelatedNodeFromObject(node) Return: PyNode Arguments: node Keyword Arguments: getRelationMasterFromSlave Collect the delete master from a slave's related 'mnsNodeRelationship' node, if there is one. This method will collect the master connected to the 'masterIn' attribute of the node. Constructor: getRelationMasterFromSlave(slave) Return: MnsNameStd (master) Arguments: slave Keyword Arguments: getRigTop Attempt to get a rigTop node from the passed in node to check. Constructor: getRigTop(objectA) Return: MnsNameNameStd (rigTop) Arguments: objectA Keyword Arguments: getRigTopForSel Attempt to get a rigTop node from current selection Constructor: getRigTopForSel() Return: MnsNameStd (rigTop) Arguments: Keyword Arguments: getRootGuideFromCtrl Attempt to collect the related 'rootGuide' from the given control passed in. Constructor: getRootGuideFromCtrl(obj) Return: MnsNameStd (rootGuide) Arguments: obj Keyword Arguments: getRootGuideFromRigTop Attempt to collect the rig's root guide from the passed in rigTop node Constructor: getRootGuideFromRigTop(rigTop = None) Return: MnsNameStd (rig root guide) Arguments: rigTop ( str ) ; [default: None] Keyword Arguments: getSettings Get setting for the requested setting path. The settings are being filtered and set according to a node passed in. Constructor: getSettings(settingsPath, node, blkType) Return: list (optionalArgumentsFromFile), string (current side place holder) Arguments: settingsPath node blkType Keyword Arguments: getSideModuleBranchRoot For a non \"center\" component passed in, recursively attempt to collect the 'side-branch' root guide. In essence look for the highest rootGuide in the selected 'side' heirarchy that has a 'center' component parent- meaning it's the top of the requested branch. Constructor: getSideModuleBranchRoot(guide = None) Return: MnsNameStd (branch root) Arguments: guide ( str ) ; [default: None] Keyword Arguments: loadPerspCam Set Maya's main camera panel, to the default 'persp' camera. Constructor: loadPerspCam() Return: None Arguments: Keyword Arguments: loadPickerProjectionCam Set the main maya camera view to the 'picker projection camera', based on the scene selection (or the related rigTop to selection). Constructor: loadPickerProjectionCam() Return: None Arguments: Keyword Arguments: loadPoseForGuides Block's load pose wrapper. Constructor: loadPoseForGuides(guides = [], poseSet = \"T\") Return: None Arguments: guides ( list ) ; [default: []] poseSet ( str ) ; [default: \"T\"] Keyword Arguments: missingModuleActionTrigger Action trigger for an invalid module path fix attempt Constructor: missingModuleActionTrigger(rigTop, missingModuleName, existingBtns) Return: None Arguments: rigTop missingModuleName existingBtns Keyword Arguments: namePuppet This method is used to create the rig's curves puppet title and connect it to to it's world control as additional shape nodes. Constructor: namePuppet(rigTop, kwargs) Return: None Arguments: rigTop kwargs Keyword Arguments: pickerButtonClickAction The global action trigger for any picker UI button click trigger. This method will trigger the \"controls selection\" and the \"action script\" for the passed in QPushButton passed in. Constructor: pickerButtonClickAction(btn, kwargs) Return: None Arguments: btn kwargs Keyword Arguments: pickerLayoutAdjust Load a new Maya panel, with the 'Picker Layout Camera' related to the scene selction. This will also set the panel settings before loading it, based on the rigTop and 'layout base' attributes. Constructor: pickerLayoutAdjust() Return: None Arguments: Keyword Arguments: pickerTitleToggle Toggle between PLG 'control' view, to 'title' view. Constructor: pickerTitleToggle() Return: None Arguments: Keyword Arguments: preCheckNameForUI A simple method to check for argument duplicates within an argument dict Constructor: preCheckNameForUI(arguments, suffix) Return: dict (recompiled arguments) Arguments: arguments suffix Keyword Arguments: projectPickerLayoutPos Get the passed in Ctrl PLG position, relative to the rig's 'layoutBase'. This method 'projects' the ctrl position based on the rig's 'Projection Camera' into the layout base space, and returns it's processed position. Constructor: projectPickerLayoutPos(ctrl, cam, layoutBase) Return: tuple[3] (posX), tuple[3] (posY) Arguments: ctrl cam layoutBase Keyword Arguments: projectSelectedPickerLayout A wrapper method that handles plg projection from selected scene objects. Constructor: projectSelectedPickerLayout(msgPrompt = True) Return: None Arguments: msgPrompt ( bool ) ; [default: True] Keyword Arguments: recGetModuleTopForCtrl Recursively attempt to collect the 'Module Top Group' related to the ctrl passed in within it's related parents. Constructor: recGetModuleTopForCtrl(ctrl = None) Return: MnsNameStd (Module Top Group) Arguments: ctrl ( str ) ; [default: None] Keyword Arguments: recSearchForGuideRootInParents Recusrsivly look for a 'rootGuide' from the given node's parent relatives. Constructor: recSearchForGuideRootInParents(obj) Return: PyNode (rootGuide) Arguments: obj Keyword Arguments: removeAllAuthority This method is used to delete all 'Authority' from the passsed in slave, if there are any. Constructor: removeAllAuthority(slave = None, kwargs) Return: MnsNameStd (oldAuthority) Arguments: slave ( str ) ; [default: None] kwargs Keyword Arguments: removeModuleVisAttrFromPuppetTop This method will remove the corresponding \"module vis\" channel from the given puppet base control. This method is used when a 'partial deconstruction' is initiated, keeping only relevant vis channels in place, removing the 'deconstructed' modules vis channels. Testing full-procedural Constructor: removeModuleVisAttrFromPuppetTop(moduleTopNode = None, puppetTop = None) Return: None Arguments: moduleTopNode ( str ) ; [default: None] puppetTop ( str ) ; [default: None] Keyword Arguments: saveLoadPose This is the main wrapper for all pose 'save load' triggers of BLOCK. Constructor: saveLoadPose(guides = [], kwargs) Return: None Arguments: guides ( list ) ; [default: []] kwargs Keyword Arguments: rigTop ( str ) ; [default: None] mode ( int ) saveLoad ( int ) msgPrompt ( bool ) pose ( str ) ; [default: T] delete ( bool ) savePoseForGuides Block's save pose wrapper. Constructor: savePoseForGuides(guides = [], poseSet = \"T\", msgPrompt = False) Return: None Arguments: guides ( list ) ; [default: []] poseSet ( str ) ; [default: \"T\"] msgPrompt ( bool ) ; [default: False] Keyword Arguments: searchForRootGuideInRelatives Search for a 'guide authority' or 'rootGuide' in the given node's decendents Constructor: searchForRootGuideInRelatives(obj) Return: PyNode (rootGuide) Arguments: obj Keyword Arguments: setCtrlCol Attempt to collect the passed in node's color (based on its type), and set it if seccessfull. Constructor: setCtrlCol(ctrl, rigTop, kwargs) Return: MnsNameStd (ctrl) Arguments: ctrl rigTop kwargs Keyword Arguments: setgCtrlColorForModule For all relevant decendents of the passed in moduleRoot, get and set it's color. Constructor: setgCtrlColorForModule(rigTop, moduleRoot) Return: None Arguments: rigTop moduleRoot Keyword Arguments: setgCtrlColorForRigTop Set ALL relevnt controls within a rigTop, to their color based on their type. Constructor: setgCtrlColorForRigTop(rigTop) Return: None Arguments: rigTop Keyword Arguments: symmetrizePlg Block 'plg symmetrize' button trigger. This method will handle validation and creation of PLG related symmetrical plg. Constructor: symmetrizePlg(guide = None) Return: None Arguments: guide ( str ) ; [default: None] Keyword Arguments: symmetrizePlgs A simple wrapper method to symmetrize multiple PLG's (based on scene selection). Constructor: symmetrizePlgs() Return: None Arguments: Keyword Arguments: transferAuthorityToCtrl This is a very important method used in BLOCK cosntruction. This method will find the current 'guide control' from the given joint slave. and transfer it's authority to a newly created 'control authority'. This method will be called on every module build and it is the main trigger to flag a module construction. The 'authority' attribute for every guide or control is used to distiguish the module state, and jnt state. When transfering an authority to a ctrl, a 'old authority' attr (of sort) is created, in order for the procedural 'deconstruct' to look for and tranfer the jnt authority back to it's orignal guide, before deleting the constructed module. See also parallel: 'transferAuthorityToGuide' Method. Constructor: transferAuthorityToCtrl(slave = None, ctrlMaster = None, kwargs) Return: None Arguments: slave ( str ) ; [default: None] ctrlMaster ( str ) ; [default: None] kwargs Keyword Arguments: transferAuthorityToGuide This is a very important method used in BLOCK de-construction. This method will find the current 'control' from the given joint slave. and transfer it's authority to a it's original 'guide' authority. This method will be called procedurally on any module deconstruction, before deleting the constructed module. See also parallel: 'transferAuthorityToCtrl' Method. Constructor: transferAuthorityToGuide(ctrl = None, kwargs) Return: None Arguments: ctrl ( str ) ; [default: None] kwargs Keyword Arguments: upParentAllPlgTrigger OBSELETE. PLG parenting is no longer in use. Constructor: upParentAllPlgTrigger() Return: None Arguments: Keyword Arguments:","title":"blockUtility"},{"location":"blockUtility/#blockutility","text":"","title":"blockUtility"},{"location":"blockUtility/#defenitions","text":"","title":"Defenitions"},{"location":"blockUtility/#adddefaultattrstoplg","text":"For a newly created plg, create all of it's default predefined attributes. Constructor: addDefaultAttrsToPlg(plg, kwargs) Return: None Arguments: plg kwargs Keyword Arguments:","title":"addDefaultAttrsToPlg"},{"location":"blockUtility/#alignplguides","text":"This is the main 'align' trigger to all 'align tools' in BLOCK. This method will calidate and collect the current scene slection, then align the collected PLG's based on the mode passed in. Constructor: alignPLGuides(border = \"left\", mode = 0) Return: None Arguments: border ( str ) ; [default: \"left\"] mode ( int ) ; [default: 0] Keyword Arguments:","title":"alignPLGuides"},{"location":"blockUtility/#attemptmodulepathfixfrorigtop","text":"Run through all existing rig component (in rigTop) and validate the module directories against all existing module directories. If a module path was found invalid, attempt to re-find it in the existing modules. Constructor: attemptModulePathFixFroRigTop(rigTop, existingBtns) Return: None Arguments: rigTop existingBtns Keyword Arguments:","title":"attemptModulePathFixFroRigTop"},{"location":"blockUtility/#buildshapes","text":"This method will be called from a rig construction. This method will look for any contol shapes stored within the given rig (rigTop), and replace the default shapes with any corresponding control shape. Shape replacement method will be done according to the 'mode' flag (relative/absulote). Constructor: buildShapes(ctrls = [], rigTop = None, kwargs) Return: None Arguments: ctrls ( list ) ; [default: []] rigTop ( str ) ; [default: None] kwargs Keyword Arguments: mode ( int )","title":"buildShapes"},{"location":"blockUtility/#collectctrls","text":"Collect ALL related controls for th given rigTop. Constructor: collectCtrls(rigTop = None) Return: list (controls) Arguments: rigTop ( str ) ; [default: None] Keyword Arguments:","title":"collectCtrls"},{"location":"blockUtility/#collectguides","text":"Based on the oprional arguments passed in, collect all matching related guides to the input root list. Constructor: collectGuides(roots = pm.ls(sl = 1), kwargs) Return: dict (Related guides), list (sparseGuides, guide without any relations) Arguments: roots ( str ) ; [default: selection] kwargs Keyword Arguments: rigTop ( str ) ; [default: None] includeDecendents ( bool ) includeDecendentBranch ( bool ) getGuides ( bool ) ; [default: True] getCustomGuides ( bool ) ; [default: True] allAsSparse ( bool )","title":"collectGuides"},{"location":"blockUtility/#collectplguidestoalign","text":"This is the main collect wrapper for all 'align plg' tools in BLOCK. This methods will validate and collect all PLG to align from the current scene selection Constructor: collectPLGuidesToAlign(mode = 0) Return: dict (PLGs to align) Arguments: mode ( int ) ; [default: 0] Keyword Arguments:","title":"collectPLGuidesToAlign"},{"location":"blockUtility/#collectslavesfromndr","text":"Collect all slaves related to the passed in 'mnsNodeRelationship' node. Constructor: collectSlavesFromNdr(ndrNode) Return: list (slave nodes) Arguments: ndrNode Keyword Arguments:","title":"collectSlavesFromNdr"},{"location":"blockUtility/#connectplgtovischannel","text":"This method handles the vis channel connection of a plg to it's related layoutBase attributes based on it's type. Constructor: connectPlgToVisChannel(plg) Return: None Arguments: plg Keyword Arguments:","title":"connectPlgToVisChannel"},{"location":"blockUtility/#connectslavetodeletemaster","text":"Connect the passed in 'slave' node to the passed in 'master' node using 'mnsNodeRelationship'. This method will be successfull only if the master already has a related 'mnsNodeRelationship' node. Constructor: connectSlaveToDeleteMaster(slave, master) Return: None Arguments: slave master Keyword Arguments:","title":"connectSlaveToDeleteMaster"},{"location":"blockUtility/#createandconnectmodulevischannelstopuppetrootctrl","text":"This method will create and connect the pedefined visibility graph to a given 'Module Top Group'. The driver attribute will be created within the puppet's 'world control', and the connection graph (using animCurvesUU node) will input into the group's visibility channels. The channels are split (predefined) as follows: 0. None 1. primaries 2. Secondaries 3. Tertiaries 4. Secondaries Only 5. Tertiaries Only 6. No Primaries Constructor: createAndConnectModuleVisChannelsToPuppetRootCtrl(moduleTopNode = None) Return: None Arguments: moduleTopNode ( str ) ; [default: None] Keyword Arguments:","title":"createAndConnectModuleVisChannelsToPuppetRootCtrl"},{"location":"blockUtility/#createmoduletopnode","text":"This method is used to create the genric 'module top group' on module construction. Constructor: createModuleTopNode(MnsBuildModuleA = None, kwargs) Return: MnsNameStd (Module Top Group) Arguments: MnsBuildModuleA ( str ) ; [default: None] kwargs Keyword Arguments:","title":"createModuleTopNode"},{"location":"blockUtility/#createpickerlayoutguide","text":"The main creation method for PLG creation. This method will create a new 'Pikcer Layout Guide' based on the passed in parameters. 1. get picker layout base. 2. collect projection position if requested. 3. create and set all attributes 4. create the related title (mnsAnnotate node) Constructor: createPickerLayoutGuide(ctrl, override, rigTop = None, kwargs) Return: MnsNameStd (plg) Arguments: ctrl override rigTop ( str ) ; [default: None] kwargs Keyword Arguments:","title":"createPickerLayoutGuide"},{"location":"blockUtility/#createpickerlayoutguides","text":"Warpper method that handles multiple PLGs creation. Constructor: createPickerLayoutGuides(ctrlsToProject, rigTop, msgPrompt = True, kwargs) Return: None Arguments: ctrlsToProject rigTop msgPrompt ( bool ) ; [default: True] kwargs Keyword Arguments:","title":"createPickerLayoutGuides"},{"location":"blockUtility/#createvisibilitybridgemdl","text":"This method will check wether the 'target' has a visibility channel connection. In the case the given 'target' has input visibility connection, a 'bridge' multiplyDoubleLinear node will be created. The brigde node will accomidate both sources as an input, instead of replacing the original visibility by simple multiplication. By creating the 'bridge', both old and new sources will be kept as drivers, setting the visibility to 'False' if ANY of the given sources is 'False'. In case there is no connection input to the target's visibility channel, a simple connection will be made using the input source. Constructor: createVisibilityBridgeMdl(source = None, target = None) Return: None Arguments: source ( str ) ; [default: None] target ( str ) ; [default: None] Keyword Arguments:","title":"createVisibilityBridgeMdl"},{"location":"blockUtility/#ctrlpickerguidetoggle","text":"Atempt to toggle between a selection \"control\" and \"PLG\" if possible. Constructor: ctrlPickerGuideToggle() Return: None Arguments: Keyword Arguments:","title":"ctrlPickerGuideToggle"},{"location":"blockUtility/#deleteposeforguides","text":"Block's delete pose wrapper. Constructor: deletePoseForGuides(guides = [], poseSet = \"T\") Return: None Arguments: guides ( list ) ; [default: []] poseSet ( str ) ; [default: \"T\"] Keyword Arguments:","title":"deletePoseForGuides"},{"location":"blockUtility/#deletepuppetname","text":"This method will filter and delete the rigTops' puppet curves title. Constructor: deletePuppetName(rigTop, kwargs) Return: None Arguments: rigTop kwargs Keyword Arguments:","title":"deletePuppetName"},{"location":"blockUtility/#disconnectslavefrommaster","text":"Disconnect the slave passed in from it's master, if there is one. Constructor: disconnectSlaveFromMaster(slave) Return: None Arguments: slave Keyword Arguments:","title":"disconnectSlaveFromMaster"},{"location":"blockUtility/#duplicateplg","text":"Block \"PLG duplicate\" trigger. This method will handle PLG validation and duplication. Constructor: duplicatePlg(guide = None) Return: None Arguments: guide ( str ) ; [default: None] Keyword Arguments:","title":"duplicatePlg"},{"location":"blockUtility/#duplicateplgs","text":"A simple wrapper mwthod to handle multiple PLG duplication (Based on scene selection). Constructor: duplicatePlgs() Return: None Arguments: Keyword Arguments:","title":"duplicatePlgs"},{"location":"blockUtility/#extractcontrolshapes","text":"Trigger method for BLOCK - 'extract control shapes' method. This method will extract and store the current state of control shapes within the given rig (rigTop). The extracted shapes will be re-constructed once a rig-rebuild is initiated. In case of any control shape already exists, it will be replaced by default. Constructor: extractControlShapes(ctrls = [], rigTop = None) Return: list (controls) Arguments: ctrls ( list ) ; [default: []] rigTop ( str ) ; [default: None] Keyword Arguments:","title":"extractControlShapes"},{"location":"blockUtility/#filtercreationonlyfromargs","text":"A simple method to filter out the \"creationOnly\" flag for an argument. This method is called on a dynamicUI creation call if it NOT a \"new creation\" mode in BLOCK. In case any arguments within the list passed in is flagged as \"creationOnly\", it is removed from the list Constructor: filterCreationOnlyFromArgs(argsList) Return: list (filtered arguments) Arguments: argsList Keyword Arguments:","title":"filterCreationOnlyFromArgs"},{"location":"blockUtility/#filtersettings","text":"Filter all pre-defined settings to their corresponding gathering methods, and re-collect Constructor: filterSettings(fileSettings, node) Return: list (settings), string (current side place holder) Arguments: fileSettings node Keyword Arguments:","title":"filterSettings"},{"location":"blockUtility/#getallguiderootsforrigtop","text":"Gather all guide roots for the passed in rigTop node. Constructor: getAllGuideRootsForRigTop(rigTop) Return: list (rootGuides) Arguments: rigTop Keyword Arguments:","title":"getAllGuideRootsForRigTop"},{"location":"blockUtility/#getallplgsforrigtop","text":"Collect all 'picker layout guides' from the rig passed in (as rigTop) Constructor: getAllPlgsForRigTop(rigTop) Return: list (All PLGs) Arguments: rigTop Keyword Arguments:","title":"getAllPlgsForRigTop"},{"location":"blockUtility/#getallcolctrlforrigtop","text":"Collect all 'color associated' nodes within the passed in rigTop. All returned nodes are considered 'color associated', meaning they are nodes that all of their shapes need to be directly colored. Constructor: getAllcolCtrlforRigTop(rigTop) Return: list (colorControls) Arguments: rigTop Keyword Arguments:","title":"getAllcolCtrlforRigTop"},{"location":"blockUtility/#getchildmodules","text":"Recusrsivly collect all child modules from the given rootGuide's decendents. Constructor: getChildModules(rootGuide) Return: list (module decendents) Arguments: rootGuide Keyword Arguments:","title":"getChildModules"},{"location":"blockUtility/#getcsgrpfromrigtop","text":"Attempt to collect the 'Control Shapes Group' from the passed in rigTop. Constructor: getCsGrpFromRigTop(rigTop = None) Return: MnsNameStd (ctrlShapes group) Arguments: rigTop ( str ) ; [default: None] Keyword Arguments:","title":"getCsGrpFromRigTop"},{"location":"blockUtility/#getctrlcol","text":"Get the passed in node's color based on it's type, heirarchy and attributes. Constructor: getCtrlCol(ctrl, rigTop) Return: tuple[3] (color) Arguments: ctrl rigTop Keyword Arguments:","title":"getCtrlCol"},{"location":"blockUtility/#getdeletemasterfromslave","text":"Collect the delete master from a slave's related 'mnsNodeRelationship' node, if there is one. This method will collect the master connected to the 'deleteMaster' attribute of the node. Constructor: getDeleteMasterFromSlave(slave) Return: MnsNameStd (master) Arguments: slave Keyword Arguments:","title":"getDeleteMasterFromSlave"},{"location":"blockUtility/#getexistingspaceconstraintforcontrol","text":"Collect existing 'spaces' constraints for a passed in (built) control, in order to re-build them in turn, after correct filtering and validation (in case of a partial build for example). Constructor: getExistingSpaceConstraintForControl(ctrl = None) Return: list (mnsMatrixConstraint nodes) Arguments: ctrl ( str ) ; [default: None] Keyword Arguments:","title":"getExistingSpaceConstraintForControl"},{"location":"blockUtility/#getexistingspaceconstraintforcontrols","text":"Wrapper mwthod to collect 'spaces' constraints for multiple controls. Constructor: getExistingSpaceConstraintForControls(controls = []) Return: dict (constraintSpaces dictionary) Arguments: controls ( list ) ; [default: []] Keyword Arguments:","title":"getExistingSpaceConstraintForControls"},{"location":"blockUtility/#getguideparent","text":"Collect a ctrl type object's 'Guide Authority', or related guide object. Constructor: getGuideParent(objectSel = None) Return: PyNode Arguments: objectSel ( str ) ; [default: None] Keyword Arguments:","title":"getGuideParent"},{"location":"blockUtility/#getmoduledecendentswildcard","text":"Collect all given module dendents using a 'wild-card' search method. This will collect all relatives using a * search within the root decendents, and return all of the passed in node types. Constructor: getModuleDecendentsWildcard(guideRoot, kwargs) Return: list (matching decendents) Arguments: guideRoot kwargs Keyword Arguments:","title":"getModuleDecendentsWildcard"},{"location":"blockUtility/#getmodulefromguide","text":"This method will attempt to collect a related PyModule from the given guideRoot passed in. This method will not return the module's methods, only the PyModule as an object. This method also contains override optional arguments to specify a direct path or module name. Constructor: getModuleFromGuide(guideRoot, kwargs) Return: PyModule (object) Arguments: guideRoot kwargs Keyword Arguments: methodName ( str ) ; [default: jointStructure] modPath ( str ) ; [default: None] modName ( str ) ; [default: None]","title":"getModuleFromGuide"},{"location":"blockUtility/#getmoduleguidedecendents","text":"Collect all of the root guide module relatives for the passed in moduleRoot (or rootGuide). Constructor: getModuleGuideDecendents(guideRoot) Return: list (sorted by ID module decendents) Arguments: guideRoot Keyword Arguments:","title":"getModuleGuideDecendents"},{"location":"blockUtility/#getmoduleinterpjoints","text":"Collect all the given moduleRoot's 'interpolationJoints' relatives. Constructor: getModuleInterpJoints(guideRoot) Return: list (matching interJoints) Arguments: guideRoot Keyword Arguments:","title":"getModuleInterpJoints"},{"location":"blockUtility/#getmoduleroot","text":"Attempt to collect the root guide relative from the given node. Constructor: getModuleRoot(objectA) Return: PyNode (rootGuide) Arguments: objectA Keyword Arguments:","title":"getModuleRoot"},{"location":"blockUtility/#getmodulerootforsel","text":"Attempt to collect a 'root guide' relative from the current selection Constructor: getModuleRootForSel() Return: PyNode (moduleRoot) Arguments: Keyword Arguments:","title":"getModuleRootForSel"},{"location":"blockUtility/#getmoduletopforctrl","text":"Collect the 'Module Top Group' related to the passed in control. Constructor: getModuleTopForCtrl(ctrl = None, nameMatch = None) Return: MnsNameStd (Module Top Group) Arguments: ctrl ( str ) ; [default: None] nameMatch ( str ) ; [default: None] Keyword Arguments:","title":"getModuleTopForCtrl"},{"location":"blockUtility/#getmoduletopfromrootguide","text":"Attempt to collect 'Module Top Group' from a given root guide. Constructor: getModuleTopFromRootGuide(rootGuide = None) Return: MnsNameStd (Module Top Group) Arguments: rootGuide ( str ) ; [default: None] Keyword Arguments:","title":"getModuleTopFromRootGuide"},{"location":"blockUtility/#getnoderelationshipnodefromobject","text":"Collect the related 'mnsNodeRelationship' node from the given input node. Constructor: getNodeRelationshipNodeFromObject(node) Return: PyNode Arguments: node Keyword Arguments:","title":"getNodeRelationshipNodeFromObject"},{"location":"blockUtility/#getoffsetgrpforctrl","text":"Collect the offsetGroup related to the passed in control, if it exists. Constructor: getOffsetGrpForCtrl(ctrl, kwargs) Return: MnsNameStd (offset group) Arguments: ctrl kwargs Keyword Arguments: type ( str ) ; [default: offsetGrp]","title":"getOffsetGrpForCtrl"},{"location":"blockUtility/#getoppositesidecontrol","text":"Attempt to collect the opposite related mns object if it exists. Only non 'ceneter components' will be tested of course. Constructor: getOppositeSideControl(obj = None) Return: MnsNameStd (Opposite object) Arguments: obj ( str ) ; [default: None] Keyword Arguments:","title":"getOppositeSideControl"},{"location":"blockUtility/#getpickerguidesgrpfromrigtop","text":"Attempt to collect the 'Picker Guide Group' from the passed in rigTop. Constructor: getPickerGuidesGrpFromRigTop(rigTop = None) Return: MnsNameStd (Picker Guide Group) Arguments: rigTop ( str ) ; [default: None] Keyword Arguments:","title":"getPickerGuidesGrpFromRigTop"},{"location":"blockUtility/#getpickerlayoutbasefromrigtop","text":"Attempt to collect the 'Picker Layout Base guide' from the passed in rigTop. Constructor: getPickerLayoutBaseFromRigTop(rigTop = None) Return: MnsNameStd (Picker Layout Base guide) Arguments: rigTop ( str ) ; [default: None] Keyword Arguments:","title":"getPickerLayoutBaseFromRigTop"},{"location":"blockUtility/#getpickerlayoutcamfromrigtop","text":"Attempt to collect the 'Picker Layout Camera' from the passed in rigTop. Constructor: getPickerLayoutCamFromRigTop(rigTop = None) Return: MnsNameStd (Picker Layout Base guide) Arguments: rigTop ( str ) ; [default: None] Keyword Arguments:","title":"getPickerLayoutCamFromRigTop"},{"location":"blockUtility/#getpickerprojectioncamfromrigtop","text":"Attempt to collect the 'Picker Projection Camera' from the passed in rigTop. Constructor: getPickerProjectionCamFromRigTop(rigTop = None) Return: MnsNameStd (Picker Projection Camera) Arguments: rigTop ( str ) ; [default: None] Keyword Arguments:","title":"getPickerProjectionCamFromRigTop"},{"location":"blockUtility/#getpickertitlegrpfromrigtop","text":"Attempt to collect the 'Picker Title Group' from the passed in rigTop. Constructor: getPickerTitleGrpFromRigTop(rigTop = None) Return: MnsNameStd (Picker Title Group)) Arguments: rigTop ( str ) ; [default: None] Keyword Arguments:","title":"getPickerTitleGrpFromRigTop"},{"location":"blockUtility/#getpuppetbasefromrigtop","text":"Attempt to collect the 'puppet group' from the passed in rigTop. Constructor: getPuppetBaseFromRigTop(rigTop = None) Return: MnsNameStd (puppet base) Arguments: rigTop ( str ) ; [default: None] Keyword Arguments:","title":"getPuppetBaseFromRigTop"},{"location":"blockUtility/#getpuppetrootfromrigtop","text":"Attempt to collect the 'Puppet World Control' from the passed in rigTop. Constructor: getPuppetRootFromRigTop(rigTop = None) Return: MnsNameStd (Puppet world control) Arguments: rigTop ( str ) ; [default: None] Keyword Arguments:","title":"getPuppetRootFromRigTop"},{"location":"blockUtility/#getpymodulefromguide","text":"Attempt to collect a 'Python Module' (or package) related to the given guide node passed in. If a related module was found, this method will return it as a PyModule object not as a directory. This method will also return the module's methods in a dictionary in order to run directly from it. Constructor: getPyModuleFromGuide(guide) Return: PyModule, dict (module methods as keys and method objects as entries) Arguments: guide Keyword Arguments:","title":"getPyModuleFromGuide"},{"location":"blockUtility/#getrelatednodefromobject","text":"Collect a related node from the 'messageOut' attribute of the given node's 'mnsNodeRelationship' node. Constructor: getRelatedNodeFromObject(node) Return: PyNode Arguments: node Keyword Arguments:","title":"getRelatedNodeFromObject"},{"location":"blockUtility/#getrelationmasterfromslave","text":"Collect the delete master from a slave's related 'mnsNodeRelationship' node, if there is one. This method will collect the master connected to the 'masterIn' attribute of the node. Constructor: getRelationMasterFromSlave(slave) Return: MnsNameStd (master) Arguments: slave Keyword Arguments:","title":"getRelationMasterFromSlave"},{"location":"blockUtility/#getrigtop","text":"Attempt to get a rigTop node from the passed in node to check. Constructor: getRigTop(objectA) Return: MnsNameNameStd (rigTop) Arguments: objectA Keyword Arguments:","title":"getRigTop"},{"location":"blockUtility/#getrigtopforsel","text":"Attempt to get a rigTop node from current selection Constructor: getRigTopForSel() Return: MnsNameStd (rigTop) Arguments: Keyword Arguments:","title":"getRigTopForSel"},{"location":"blockUtility/#getrootguidefromctrl","text":"Attempt to collect the related 'rootGuide' from the given control passed in. Constructor: getRootGuideFromCtrl(obj) Return: MnsNameStd (rootGuide) Arguments: obj Keyword Arguments:","title":"getRootGuideFromCtrl"},{"location":"blockUtility/#getrootguidefromrigtop","text":"Attempt to collect the rig's root guide from the passed in rigTop node Constructor: getRootGuideFromRigTop(rigTop = None) Return: MnsNameStd (rig root guide) Arguments: rigTop ( str ) ; [default: None] Keyword Arguments:","title":"getRootGuideFromRigTop"},{"location":"blockUtility/#getsettings","text":"Get setting for the requested setting path. The settings are being filtered and set according to a node passed in. Constructor: getSettings(settingsPath, node, blkType) Return: list (optionalArgumentsFromFile), string (current side place holder) Arguments: settingsPath node blkType Keyword Arguments:","title":"getSettings"},{"location":"blockUtility/#getsidemodulebranchroot","text":"For a non \"center\" component passed in, recursively attempt to collect the 'side-branch' root guide. In essence look for the highest rootGuide in the selected 'side' heirarchy that has a 'center' component parent- meaning it's the top of the requested branch. Constructor: getSideModuleBranchRoot(guide = None) Return: MnsNameStd (branch root) Arguments: guide ( str ) ; [default: None] Keyword Arguments:","title":"getSideModuleBranchRoot"},{"location":"blockUtility/#loadperspcam","text":"Set Maya's main camera panel, to the default 'persp' camera. Constructor: loadPerspCam() Return: None Arguments: Keyword Arguments:","title":"loadPerspCam"},{"location":"blockUtility/#loadpickerprojectioncam","text":"Set the main maya camera view to the 'picker projection camera', based on the scene selection (or the related rigTop to selection). Constructor: loadPickerProjectionCam() Return: None Arguments: Keyword Arguments:","title":"loadPickerProjectionCam"},{"location":"blockUtility/#loadposeforguides","text":"Block's load pose wrapper. Constructor: loadPoseForGuides(guides = [], poseSet = \"T\") Return: None Arguments: guides ( list ) ; [default: []] poseSet ( str ) ; [default: \"T\"] Keyword Arguments:","title":"loadPoseForGuides"},{"location":"blockUtility/#missingmoduleactiontrigger","text":"Action trigger for an invalid module path fix attempt Constructor: missingModuleActionTrigger(rigTop, missingModuleName, existingBtns) Return: None Arguments: rigTop missingModuleName existingBtns Keyword Arguments:","title":"missingModuleActionTrigger"},{"location":"blockUtility/#namepuppet","text":"This method is used to create the rig's curves puppet title and connect it to to it's world control as additional shape nodes. Constructor: namePuppet(rigTop, kwargs) Return: None Arguments: rigTop kwargs Keyword Arguments:","title":"namePuppet"},{"location":"blockUtility/#pickerbuttonclickaction","text":"The global action trigger for any picker UI button click trigger. This method will trigger the \"controls selection\" and the \"action script\" for the passed in QPushButton passed in. Constructor: pickerButtonClickAction(btn, kwargs) Return: None Arguments: btn kwargs Keyword Arguments:","title":"pickerButtonClickAction"},{"location":"blockUtility/#pickerlayoutadjust","text":"Load a new Maya panel, with the 'Picker Layout Camera' related to the scene selction. This will also set the panel settings before loading it, based on the rigTop and 'layout base' attributes. Constructor: pickerLayoutAdjust() Return: None Arguments: Keyword Arguments:","title":"pickerLayoutAdjust"},{"location":"blockUtility/#pickertitletoggle","text":"Toggle between PLG 'control' view, to 'title' view. Constructor: pickerTitleToggle() Return: None Arguments: Keyword Arguments:","title":"pickerTitleToggle"},{"location":"blockUtility/#prechecknameforui","text":"A simple method to check for argument duplicates within an argument dict Constructor: preCheckNameForUI(arguments, suffix) Return: dict (recompiled arguments) Arguments: arguments suffix Keyword Arguments:","title":"preCheckNameForUI"},{"location":"blockUtility/#projectpickerlayoutpos","text":"Get the passed in Ctrl PLG position, relative to the rig's 'layoutBase'. This method 'projects' the ctrl position based on the rig's 'Projection Camera' into the layout base space, and returns it's processed position. Constructor: projectPickerLayoutPos(ctrl, cam, layoutBase) Return: tuple[3] (posX), tuple[3] (posY) Arguments: ctrl cam layoutBase Keyword Arguments:","title":"projectPickerLayoutPos"},{"location":"blockUtility/#projectselectedpickerlayout","text":"A wrapper method that handles plg projection from selected scene objects. Constructor: projectSelectedPickerLayout(msgPrompt = True) Return: None Arguments: msgPrompt ( bool ) ; [default: True] Keyword Arguments:","title":"projectSelectedPickerLayout"},{"location":"blockUtility/#recgetmoduletopforctrl","text":"Recursively attempt to collect the 'Module Top Group' related to the ctrl passed in within it's related parents. Constructor: recGetModuleTopForCtrl(ctrl = None) Return: MnsNameStd (Module Top Group) Arguments: ctrl ( str ) ; [default: None] Keyword Arguments:","title":"recGetModuleTopForCtrl"},{"location":"blockUtility/#recsearchforguiderootinparents","text":"Recusrsivly look for a 'rootGuide' from the given node's parent relatives. Constructor: recSearchForGuideRootInParents(obj) Return: PyNode (rootGuide) Arguments: obj Keyword Arguments:","title":"recSearchForGuideRootInParents"},{"location":"blockUtility/#removeallauthority","text":"This method is used to delete all 'Authority' from the passsed in slave, if there are any. Constructor: removeAllAuthority(slave = None, kwargs) Return: MnsNameStd (oldAuthority) Arguments: slave ( str ) ; [default: None] kwargs Keyword Arguments:","title":"removeAllAuthority"},{"location":"blockUtility/#removemodulevisattrfrompuppettop","text":"This method will remove the corresponding \"module vis\" channel from the given puppet base control. This method is used when a 'partial deconstruction' is initiated, keeping only relevant vis channels in place, removing the 'deconstructed' modules vis channels. Testing full-procedural Constructor: removeModuleVisAttrFromPuppetTop(moduleTopNode = None, puppetTop = None) Return: None Arguments: moduleTopNode ( str ) ; [default: None] puppetTop ( str ) ; [default: None] Keyword Arguments:","title":"removeModuleVisAttrFromPuppetTop"},{"location":"blockUtility/#saveloadpose","text":"This is the main wrapper for all pose 'save load' triggers of BLOCK. Constructor: saveLoadPose(guides = [], kwargs) Return: None Arguments: guides ( list ) ; [default: []] kwargs Keyword Arguments: rigTop ( str ) ; [default: None] mode ( int ) saveLoad ( int ) msgPrompt ( bool ) pose ( str ) ; [default: T] delete ( bool )","title":"saveLoadPose"},{"location":"blockUtility/#saveposeforguides","text":"Block's save pose wrapper. Constructor: savePoseForGuides(guides = [], poseSet = \"T\", msgPrompt = False) Return: None Arguments: guides ( list ) ; [default: []] poseSet ( str ) ; [default: \"T\"] msgPrompt ( bool ) ; [default: False] Keyword Arguments:","title":"savePoseForGuides"},{"location":"blockUtility/#searchforrootguideinrelatives","text":"Search for a 'guide authority' or 'rootGuide' in the given node's decendents Constructor: searchForRootGuideInRelatives(obj) Return: PyNode (rootGuide) Arguments: obj Keyword Arguments:","title":"searchForRootGuideInRelatives"},{"location":"blockUtility/#setctrlcol","text":"Attempt to collect the passed in node's color (based on its type), and set it if seccessfull. Constructor: setCtrlCol(ctrl, rigTop, kwargs) Return: MnsNameStd (ctrl) Arguments: ctrl rigTop kwargs Keyword Arguments:","title":"setCtrlCol"},{"location":"blockUtility/#setgctrlcolorformodule","text":"For all relevant decendents of the passed in moduleRoot, get and set it's color. Constructor: setgCtrlColorForModule(rigTop, moduleRoot) Return: None Arguments: rigTop moduleRoot Keyword Arguments:","title":"setgCtrlColorForModule"},{"location":"blockUtility/#setgctrlcolorforrigtop","text":"Set ALL relevnt controls within a rigTop, to their color based on their type. Constructor: setgCtrlColorForRigTop(rigTop) Return: None Arguments: rigTop Keyword Arguments:","title":"setgCtrlColorForRigTop"},{"location":"blockUtility/#symmetrizeplg","text":"Block 'plg symmetrize' button trigger. This method will handle validation and creation of PLG related symmetrical plg. Constructor: symmetrizePlg(guide = None) Return: None Arguments: guide ( str ) ; [default: None] Keyword Arguments:","title":"symmetrizePlg"},{"location":"blockUtility/#symmetrizeplgs","text":"A simple wrapper method to symmetrize multiple PLG's (based on scene selection). Constructor: symmetrizePlgs() Return: None Arguments: Keyword Arguments:","title":"symmetrizePlgs"},{"location":"blockUtility/#transferauthoritytoctrl","text":"This is a very important method used in BLOCK cosntruction. This method will find the current 'guide control' from the given joint slave. and transfer it's authority to a newly created 'control authority'. This method will be called on every module build and it is the main trigger to flag a module construction. The 'authority' attribute for every guide or control is used to distiguish the module state, and jnt state. When transfering an authority to a ctrl, a 'old authority' attr (of sort) is created, in order for the procedural 'deconstruct' to look for and tranfer the jnt authority back to it's orignal guide, before deleting the constructed module. See also parallel: 'transferAuthorityToGuide' Method. Constructor: transferAuthorityToCtrl(slave = None, ctrlMaster = None, kwargs) Return: None Arguments: slave ( str ) ; [default: None] ctrlMaster ( str ) ; [default: None] kwargs Keyword Arguments:","title":"transferAuthorityToCtrl"},{"location":"blockUtility/#transferauthoritytoguide","text":"This is a very important method used in BLOCK de-construction. This method will find the current 'control' from the given joint slave. and transfer it's authority to a it's original 'guide' authority. This method will be called procedurally on any module deconstruction, before deleting the constructed module. See also parallel: 'transferAuthorityToCtrl' Method. Constructor: transferAuthorityToGuide(ctrl = None, kwargs) Return: None Arguments: ctrl ( str ) ; [default: None] kwargs Keyword Arguments:","title":"transferAuthorityToGuide"},{"location":"blockUtility/#upparentallplgtrigger","text":"OBSELETE. PLG parenting is no longer in use. Constructor: upParentAllPlgTrigger() Return: None Arguments: Keyword Arguments:","title":"upParentAllPlgTrigger"},{"location":"buildModules/","text":"buildModules Classes MnsBuildModule [Class] Constructor: MnsBuildModule( MnsBuildModuleButton , **kwargs ) Inherits from: MnsRig Class Members: MnsBuildModuleButton sidePlaceHolder builtGuides rigTop rootGuide rootCtrl guideControls cGuideControls pureParent moduleTop extraSpaces pureTops spaceSwitchCtrls controls allControls puppetTopCtrl Methods: connectVisChannels [method] construct [method] constructSpaces [method] gatherAllDependecies [method] gatherRelatedCtrls [method] gatherRelatedGuides [method] getRigTop [method] reCollectControlsFromLocals [method] buildGuideObjects [method] deconstruct [method] updateCreationArgsToSymmetryMode [method] createGuides [method] buildGuides [method] MnsBuildModule methods connectVisChannels [ MnsBuildModule class method] Constructor: connectVisChannels(self) Return: None Arguments: self Optional Arguments: construct [ MnsBuildModule class method] Constructor: construct(self) Return: None Arguments: self Optional Arguments: constructSpaces [ MnsBuildModule class method] Constructor: constructSpaces(self) Return: None Arguments: self Optional Arguments: gatherAllDependecies [ MnsBuildModule class method] Constructor: gatherAllDependecies(self) Return: None Arguments: self Optional Arguments: gatherRelatedCtrls [ MnsBuildModule class method] Constructor: gatherRelatedCtrls(self) Return: None Arguments: self Optional Arguments: gatherRelatedGuides [ MnsBuildModule class method] Constructor: gatherRelatedGuides(self) Return: None Arguments: self Optional Arguments: getRigTop [ MnsBuildModule class method] Constructor: getRigTop(self) Return: None Arguments: self Optional Arguments: reCollectControlsFromLocals [ MnsBuildModule class method] Constructor: reCollectControlsFromLocals(self) Return: None Arguments: self Optional Arguments: buildGuideObjects [ MnsBuildModule class method] Constructor: buildGuideObjects(self, kwargs) Return: None Arguments: self kwargs Optional Arguments: deconstruct [ MnsBuildModule class method] Constructor: deconstruct(self, mnsRig) Return: None Arguments: self mnsRig Optional Arguments: updateCreationArgsToSymmetryMode [ MnsBuildModule class method] Constructor: updateCreationArgsToSymmetryMode(self, optArgs) Return: None Arguments: self optArgs Optional Arguments: createGuides [ MnsBuildModule class method] Constructor: createGuides(self, kwargs) Return: None Arguments: self kwargs Optional Arguments: blkSide ( str ) ; [default: center] body ( str ) ; [default: guideCtrl] alpha ( str ) ; [default: A] buildGuides [ MnsBuildModule class method] Constructor: buildGuides(self, MnsBuildModuleButton, kwargs) Return: None Arguments: self MnsBuildModuleButton kwargs Optional Arguments: skipUI ( bool ) settingsHolder ( str ) ; [default: None] symmetrize ( bool ) MnsBuildModuleBtn [Class] Constructor: MnsBuildModuleBtn( path , **kwargs ) Inherits from: object Class Members: layoutParent path moduleName groupType shortName mayaNative moduleUISettings MnsRig [Class] Constructor: MnsRig( callerSubClass ( str ) ; [default: None], **kwargs ) Inherits from: object Class Members: rigTop callerSubClass modules buildModulesBtns puppetBase baseGuide rootJnt loadSettingsWindow Methods: cunstructRigSpaces [method] destroyPuppetRootCtrl [method] getGlobalConstructionState [method] setConstructionMode [method] setVisChannelsBasedOnCunstructMode [method] collectBuildModules [method] constructRig [method] createNewRigTop [method] deconstructRig [method] loadSettingsWindow [method] createSubGrpsForRigTop [method] createPickerLayoutBase [method] createPuppetRootCtrl [method] createPickerProjectionCam [method] createPickerCam [method] createPickerGuideGrp [method] createPickerTitleGrp [method] createRootGuide [method] createVisEnumAndConnect [method] createSubGroupForRigTop [method] MnsRig methods cunstructRigSpaces [ MnsRig class method] Constructor: cunstructRigSpaces(self) Return: None Arguments: self Optional Arguments: destroyPuppetRootCtrl [ MnsRig class method] Constructor: destroyPuppetRootCtrl(self) Return: None Arguments: self Optional Arguments: getGlobalConstructionState [ MnsRig class method] Constructor: getGlobalConstructionState(self) Return: None Arguments: self Optional Arguments: setConstructionMode [ MnsRig class method] Constructor: setConstructionMode(self) Return: None Arguments: self Optional Arguments: setVisChannelsBasedOnCunstructMode [ MnsRig class method] Constructor: setVisChannelsBasedOnCunstructMode(self) Return: None Arguments: self Optional Arguments: collectBuildModules [ MnsRig class method] Constructor: collectBuildModules(self, kwargs) Return: None Arguments: self kwargs Optional Arguments: constructRig [ MnsRig class method] Constructor: constructRig(self, kwargs) Return: None Arguments: self kwargs Optional Arguments: createNewRigTop [ MnsRig class method] Constructor: createNewRigTop(self, kwargs) Return: None Arguments: self kwargs Optional Arguments: deconstructRig [ MnsRig class method] Constructor: deconstructRig(self, kwargs) Return: None Arguments: self kwargs Optional Arguments: loadSettingsWindow [ MnsRig class method] Constructor: loadSettingsWindow(self, kwargs) Return: None Arguments: self kwargs Optional Arguments: createSubGrpsForRigTop [ MnsRig class method] Constructor: createSubGrpsForRigTop(self, rigTop) Return: None Arguments: self rigTop Optional Arguments: createPickerLayoutBase [ MnsRig class method] Constructor: createPickerLayoutBase(self, rigTop, kwargs) Return: None Arguments: self rigTop kwargs Optional Arguments: createPuppetRootCtrl [ MnsRig class method] Constructor: createPuppetRootCtrl(self, rigTop, kwargs) Return: None Arguments: self rigTop kwargs Optional Arguments: createPickerProjectionCam [ MnsRig class method] Constructor: createPickerProjectionCam(self, rigTop, pickerLayoutBase) Return: None Arguments: self rigTop pickerLayoutBase Optional Arguments: createPickerCam [ MnsRig class method] Constructor: createPickerCam(self, rigTop, pickerLayoutBase, kwargs) Return: None Arguments: self rigTop pickerLayoutBase kwargs Optional Arguments: createPickerGuideGrp [ MnsRig class method] Constructor: createPickerGuideGrp(self, rigTop, pickerLayoutBase, kwargs) Return: None Arguments: self rigTop pickerLayoutBase kwargs Optional Arguments: createPickerTitleGrp [ MnsRig class method] Constructor: createPickerTitleGrp(self, rigTop, pickerLayoutBase, kwargs) Return: None Arguments: self rigTop pickerLayoutBase kwargs Optional Arguments: createRootGuide [ MnsRig class method] Constructor: createRootGuide(self, rigTopNameStd, kwargs) Return: None Arguments: self rigTopNameStd kwargs Optional Arguments: createVisEnumAndConnect [ MnsRig class method] Constructor: createVisEnumAndConnect(self, masterStd, slaveStd, kwargs) Return: None Arguments: self masterStd slaveStd kwargs Optional Arguments: default ( int ) ; [default: 1] createSubGroupForRigTop [ MnsRig class method] Constructor: createSubGroupForRigTop(self, rigTopNameStd, kwargs) Return: None Arguments: self rigTopNameStd kwargs Optional Arguments: subGrpType ( str ) default ( int ) ; [default: 1]","title":"buildModules"},{"location":"buildModules/#buildmodules","text":"","title":"buildModules"},{"location":"buildModules/#classes","text":"","title":"Classes"},{"location":"buildModules/#mnsbuildmodule-class","text":"Constructor: MnsBuildModule( MnsBuildModuleButton , **kwargs ) Inherits from: MnsRig Class Members: MnsBuildModuleButton sidePlaceHolder builtGuides rigTop rootGuide rootCtrl guideControls cGuideControls pureParent moduleTop extraSpaces pureTops spaceSwitchCtrls controls allControls puppetTopCtrl Methods: connectVisChannels [method] construct [method] constructSpaces [method] gatherAllDependecies [method] gatherRelatedCtrls [method] gatherRelatedGuides [method] getRigTop [method] reCollectControlsFromLocals [method] buildGuideObjects [method] deconstruct [method] updateCreationArgsToSymmetryMode [method] createGuides [method] buildGuides [method]","title":"MnsBuildModule [Class]"},{"location":"buildModules/#mnsbuildmodule-methods","text":"","title":"MnsBuildModule  methods"},{"location":"buildModules/#mnsbuildmodulebtn-class","text":"Constructor: MnsBuildModuleBtn( path , **kwargs ) Inherits from: object Class Members: layoutParent path moduleName groupType shortName mayaNative moduleUISettings","title":"MnsBuildModuleBtn [Class]"},{"location":"buildModules/#mnsrig-class","text":"Constructor: MnsRig( callerSubClass ( str ) ; [default: None], **kwargs ) Inherits from: object Class Members: rigTop callerSubClass modules buildModulesBtns puppetBase baseGuide rootJnt loadSettingsWindow Methods: cunstructRigSpaces [method] destroyPuppetRootCtrl [method] getGlobalConstructionState [method] setConstructionMode [method] setVisChannelsBasedOnCunstructMode [method] collectBuildModules [method] constructRig [method] createNewRigTop [method] deconstructRig [method] loadSettingsWindow [method] createSubGrpsForRigTop [method] createPickerLayoutBase [method] createPuppetRootCtrl [method] createPickerProjectionCam [method] createPickerCam [method] createPickerGuideGrp [method] createPickerTitleGrp [method] createRootGuide [method] createVisEnumAndConnect [method] createSubGroupForRigTop [method]","title":"MnsRig [Class]"},{"location":"buildModules/#mnsrig-methods","text":"","title":"MnsRig  methods"},{"location":"controlShapes/","text":"controlShapes === Author: Assaf Ben Zur === Core control shapes creation function assembly. A main CtrlCreate function calls a veriaty of pre-defined shape creation, then handles them Defenitions arrowDodecagonShapeCreate Constructor: arrowDodecagonShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: arrowShapeCreate Constructor: arrowShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: arrowSquareShapeCreate Constructor: arrowSquareShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: circleShapeCreate Constructor: circleShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: sections ( int ) ; [default: 8] coneShapeCreate Constructor: coneShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: crossShapeCreate Constructor: crossShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: ctrlCreate Main creation function. This function takes user defined parameters and creates a ctrl transform node following the mns naming convention. Based on the choice passed in, a shape node will be created with the shape selected, and will be parented under the transform ceated. Then a color selected will be assigned to it. The ctrl can be set to be created along all axes and in every color. The default color is white when used as standalone, and based on the rig's global color coding defined- based on the side flag. Constructor: ctrlCreate( kwargs) Return: MnsNameStd (MnsNameStd class instance containing all info for the new node created) Arguments: kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: control] - Node's name body alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's id incrementAlpha ( bool ) - In case of a 'free' creation, if True will name the node to the first possible name- searching for new Alpha instead of the ID ctrlType ( str ) ; [default: ctrl] createBlkClassID ( bool ) createBlkCtrlTypeID ( bool ) blkCtrlTypeID ( int ) customParentTransform ( str ) skipColor ( bool ) createOffsetGrp ( bool ) createSpaceSwitchGroup ( bool ) parentNode ( str ) ; [default: None] controlShape ( str ) ; [default: circle] - Control's NURBS shape scale ( float ) ; [default: 1.0] - Ctrl scale. Relative to global settings. color ( tuple ) ; [default: (1.0, 1.0, 1.0)] - Shape's color alongAxis ( int ) ; [default: 1] - Along which axis to create the shape matchTransform ( str ) - if not empty, look for a node within the scene matching the string specefied. If found, match it's transforms. matchPosition ( str ) - if not empty, look for a node within the scene matching the string specefied. If found, match it's position. matchOrientation ( str ) - if not empty, look for a node within the scene matching the string specefied. If found, match it's Orientation. sections ( int ) ; [default: 1] - Aplicable only for circle creation cubeShapeCreate Constructor: cubeShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: curvedFourArrowShapeCreate Constructor: curvedFourArrowShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: cylinderShapeCreate Constructor: cylinderShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: diamondShapeCreate Constructor: diamondShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: directionCircle Constructor: directionCircle( kwargs) Return: None Arguments: kwargs Keyword Arguments: directionCubeShape Constructor: directionCubeShape( kwargs) Return: None Arguments: kwargs Keyword Arguments: directionDiamond Constructor: directionDiamond( kwargs) Return: None Arguments: kwargs Keyword Arguments: directionSphereShape Constructor: directionSphereShape( kwargs) Return: None Arguments: kwargs Keyword Arguments: dodecagonShapeCreate Constructor: dodecagonShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: doubleArrowShapeCreate Constructor: doubleArrowShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: flatDiamondRootShapeCreate Constructor: flatDiamondRootShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: flatDiamondShapeCreate Constructor: flatDiamondShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: fourArrowShapeCreate Constructor: fourArrowShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: guidesRootShape Constructor: guidesRootShape( kwargs) Return: None Arguments: kwargs Keyword Arguments: hexagonShapeCreate Constructor: hexagonShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: lightSphereShapeCreate Constructor: lightSphereShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: octagonShapeCreate Constructor: octagonShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: pickShapeCreate Constructor: pickShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: pinShapeCreate Constructor: pinShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: light ( bool ) ; [default: True] plusShapeCreate Constructor: plusShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: pointArrowShapeCreate Constructor: pointArrowShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: puppetRootShapeCreate Constructor: puppetRootShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: pyramidShapeCreate Constructor: pyramidShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: sphereShapeCreate Constructor: sphereShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: squareShapeCreate Constructor: squareShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: triangleShapeCreate Constructor: triangleShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: tripleArrowShapeCreate Constructor: tripleArrowShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"controlShapes"},{"location":"controlShapes/#controlshapes","text":"=== Author: Assaf Ben Zur === Core control shapes creation function assembly. A main CtrlCreate function calls a veriaty of pre-defined shape creation, then handles them","title":"controlShapes"},{"location":"controlShapes/#defenitions","text":"","title":"Defenitions"},{"location":"controlShapes/#arrowdodecagonshapecreate","text":"Constructor: arrowDodecagonShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"arrowDodecagonShapeCreate"},{"location":"controlShapes/#arrowshapecreate","text":"Constructor: arrowShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"arrowShapeCreate"},{"location":"controlShapes/#arrowsquareshapecreate","text":"Constructor: arrowSquareShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"arrowSquareShapeCreate"},{"location":"controlShapes/#circleshapecreate","text":"Constructor: circleShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: sections ( int ) ; [default: 8]","title":"circleShapeCreate"},{"location":"controlShapes/#coneshapecreate","text":"Constructor: coneShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"coneShapeCreate"},{"location":"controlShapes/#crossshapecreate","text":"Constructor: crossShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"crossShapeCreate"},{"location":"controlShapes/#ctrlcreate","text":"Main creation function. This function takes user defined parameters and creates a ctrl transform node following the mns naming convention. Based on the choice passed in, a shape node will be created with the shape selected, and will be parented under the transform ceated. Then a color selected will be assigned to it. The ctrl can be set to be created along all axes and in every color. The default color is white when used as standalone, and based on the rig's global color coding defined- based on the side flag. Constructor: ctrlCreate( kwargs) Return: MnsNameStd (MnsNameStd class instance containing all info for the new node created) Arguments: kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: control] - Node's name body alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's id incrementAlpha ( bool ) - In case of a 'free' creation, if True will name the node to the first possible name- searching for new Alpha instead of the ID ctrlType ( str ) ; [default: ctrl] createBlkClassID ( bool ) createBlkCtrlTypeID ( bool ) blkCtrlTypeID ( int ) customParentTransform ( str ) skipColor ( bool ) createOffsetGrp ( bool ) createSpaceSwitchGroup ( bool ) parentNode ( str ) ; [default: None] controlShape ( str ) ; [default: circle] - Control's NURBS shape scale ( float ) ; [default: 1.0] - Ctrl scale. Relative to global settings. color ( tuple ) ; [default: (1.0, 1.0, 1.0)] - Shape's color alongAxis ( int ) ; [default: 1] - Along which axis to create the shape matchTransform ( str ) - if not empty, look for a node within the scene matching the string specefied. If found, match it's transforms. matchPosition ( str ) - if not empty, look for a node within the scene matching the string specefied. If found, match it's position. matchOrientation ( str ) - if not empty, look for a node within the scene matching the string specefied. If found, match it's Orientation. sections ( int ) ; [default: 1] - Aplicable only for circle creation","title":"ctrlCreate"},{"location":"controlShapes/#cubeshapecreate","text":"Constructor: cubeShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"cubeShapeCreate"},{"location":"controlShapes/#curvedfourarrowshapecreate","text":"Constructor: curvedFourArrowShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"curvedFourArrowShapeCreate"},{"location":"controlShapes/#cylindershapecreate","text":"Constructor: cylinderShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"cylinderShapeCreate"},{"location":"controlShapes/#diamondshapecreate","text":"Constructor: diamondShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"diamondShapeCreate"},{"location":"controlShapes/#directioncircle","text":"Constructor: directionCircle( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"directionCircle"},{"location":"controlShapes/#directioncubeshape","text":"Constructor: directionCubeShape( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"directionCubeShape"},{"location":"controlShapes/#directiondiamond","text":"Constructor: directionDiamond( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"directionDiamond"},{"location":"controlShapes/#directionsphereshape","text":"Constructor: directionSphereShape( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"directionSphereShape"},{"location":"controlShapes/#dodecagonshapecreate","text":"Constructor: dodecagonShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"dodecagonShapeCreate"},{"location":"controlShapes/#doublearrowshapecreate","text":"Constructor: doubleArrowShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"doubleArrowShapeCreate"},{"location":"controlShapes/#flatdiamondrootshapecreate","text":"Constructor: flatDiamondRootShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"flatDiamondRootShapeCreate"},{"location":"controlShapes/#flatdiamondshapecreate","text":"Constructor: flatDiamondShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"flatDiamondShapeCreate"},{"location":"controlShapes/#fourarrowshapecreate","text":"Constructor: fourArrowShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"fourArrowShapeCreate"},{"location":"controlShapes/#guidesrootshape","text":"Constructor: guidesRootShape( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"guidesRootShape"},{"location":"controlShapes/#hexagonshapecreate","text":"Constructor: hexagonShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"hexagonShapeCreate"},{"location":"controlShapes/#lightsphereshapecreate","text":"Constructor: lightSphereShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"lightSphereShapeCreate"},{"location":"controlShapes/#octagonshapecreate","text":"Constructor: octagonShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"octagonShapeCreate"},{"location":"controlShapes/#pickshapecreate","text":"Constructor: pickShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"pickShapeCreate"},{"location":"controlShapes/#pinshapecreate","text":"Constructor: pinShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: light ( bool ) ; [default: True]","title":"pinShapeCreate"},{"location":"controlShapes/#plusshapecreate","text":"Constructor: plusShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"plusShapeCreate"},{"location":"controlShapes/#pointarrowshapecreate","text":"Constructor: pointArrowShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"pointArrowShapeCreate"},{"location":"controlShapes/#puppetrootshapecreate","text":"Constructor: puppetRootShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"puppetRootShapeCreate"},{"location":"controlShapes/#pyramidshapecreate","text":"Constructor: pyramidShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"pyramidShapeCreate"},{"location":"controlShapes/#sphereshapecreate","text":"Constructor: sphereShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"sphereShapeCreate"},{"location":"controlShapes/#squareshapecreate","text":"Constructor: squareShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"squareShapeCreate"},{"location":"controlShapes/#triangleshapecreate","text":"Constructor: triangleShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"triangleShapeCreate"},{"location":"controlShapes/#triplearrowshapecreate","text":"Constructor: tripleArrowShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"tripleArrowShapeCreate"},{"location":"defSearch/","text":"defSearch === Author: Assaf Ben Zur === Core MNS Utility UI This UI will allow the user to search though all available function within a given library and build a dynamic UI for it, based on it's arguments and keyword arguments drawen as 'type' QObjects into a new UI window. This UI class will search thorugh the default library (mns), although has functionallity to add any library into the search. IMPORTANT: Any given custom library needs to follow the mns code structure convension in order to work and sraw properly. Please refer to some code examples. The main process of this UI class is: - Load the UI - procedurally look through the given libraries and add any found python defenition into the UI list. - Uppon a 'UI creation' call (via the button or souble-click): - Deconstruct the selected defenition into mandatory arguments and keyword arguments - Build a new UI based on the parameters got. - Uppon a 'Run' call: - Re-construct the function's argument based on the UI fields and recompile into a string - Call the selected function using the complied arguent string Features: - Prefs tab to control the UI's behavior. - Directory addition - Indepentent custom '.py' files add - Library reload - 'Default Prefs restore' - Settings export/import - Function 'pinning' (Global, session independent) - UI features - Search, Case-Sensative display, Pinned view only, clear all pinns - 'dev mode': - When set to False (default) the UI call will create a new UI only if it han't been created before- meaning that the UI objects are kept within the UI class, and when closed will not lose their user-set values. When called again, the UI will simply re-load- not re-create to keep previous set values. The function will not be read again to build. When set to True, instead of re-loading of a previously created UI- it will be deleted- and recreated, READING THE FUNCTION AGAIN. This allows the user to re-read a function every time the UI is called- that means that all previous value set will be lost- as the UI rebuilds it will set all items to default value. This gives a very fast way of developing a function- not needing to re-load maya after edit- The UI will rebuild based on any change made to the defenition code, adding any new items or running a different fuctionallity every run call. Use this feature when writing or developing a new fuction. Classes MnsDefSearch [Class] Main UI Class Constructor: MnsDefSearch( parent ( str ) ; [default: mnsUIUtils.get_maya_window()]) Inherits from: form_class, base_class Class Members: selfDir pinnedFilePath dirsFilePath filesFilePath Methods: addDirectoryWin [method] clearResults [method] clearPins [method] connectSignals [method] addDirectory [method] addFile [method] importModules [method] loadWindow [method] updateResults [method] createUI [method] loadList [method] connectCaseBoxes [method] addModuleToResults [method] addPackageToResults [method] pin [method] pinnedOnlyView [method] exportPrefs [method] importPrefs [method] connectCaseBoxesBack [method] import_submodules [method] refrehsPrefsLists [method] removeDirectory [method] removeFile [method] clearAllLists [method] reloadResults [method] importDirs [method] importFiles [method] MnsDefSearch methods addDirectoryWin [ MnsDefSearch class method] Add directory window call trigger Constructor: addDirectoryWin(self) Return: None Arguments: self Optional Arguments: clearResults [ MnsDefSearch class method] Clear Serach method trigger. Constructor: clearResults(self) Return: None Arguments: self Optional Arguments: clearPins [ MnsDefSearch class method] Clear all pinns method trigger. Constructor: clearPins(self) Return: None Arguments: self Optional Arguments: connectSignals [ MnsDefSearch class method] Connect all UI signals Constructor: connectSignals(self) Return: None Arguments: self Optional Arguments: addDirectory [ MnsDefSearch class method] Custom directory add trigger method. Will prompt a directory selection dialog- allowing the user to add custom directories into the UI. Constructor: addDirectory(self, directory) Return: None Arguments: self directory Optional Arguments: addFile [ MnsDefSearch class method] Custom files add trigger method. Will prompt a file selection dialog- filtering only '.py' files, allowing the user to add custom files into the UI. Constructor: addFile(self) Return: None Arguments: self Optional Arguments: importModules [ MnsDefSearch class method] Import modules wrapper. Constructor: importModules(self) Return: None Arguments: self Optional Arguments: loadWindow [ MnsDefSearch class method] Main UI load Constructor: loadWindow(self) Return: None Arguments: self Optional Arguments: updateResults [ MnsDefSearch class method] Main UI view update method trigger. The UI list will be updated from this method based on the current UI state and prefs Constructor: updateResults(self) Return: None Arguments: self Optional Arguments: createUI [ MnsDefSearch class method] Main dynamic UI creation method trigger based on current selection. Constructor: createUI(self) Return: None Arguments: self Optional Arguments: loadList [ MnsDefSearch class method] Main list load method. A wrapper to filter all functions based on prefs selected and update the UI. Constructor: loadList(self) Return: None Arguments: self Optional Arguments: connectCaseBoxes [ MnsDefSearch class method] Main tab 'case-sensetive' check-box connection to the prefs tab 'case-sensative' check-box. Constructor: connectCaseBoxes(self) Return: None Arguments: self Optional Arguments: addModuleToResults [ MnsDefSearch class method] Module add method trigger. Constructor: addModuleToResults(self, module) Return: None Arguments: self module Optional Arguments: addPackageToResults [ MnsDefSearch class method] Package addition method trigger. Constructor: addPackageToResults(self, package) Return: None Arguments: self package Optional Arguments: pin [ MnsDefSearch class method] Pin call method trigger based on current selection. Constructor: pin(self) Return: None Arguments: self Optional Arguments: pinnedOnlyView [ MnsDefSearch class method] Pinned only view trigger method. Constructor: pinnedOnlyView(self, state) Return: None Arguments: self state Optional Arguments: exportPrefs [ MnsDefSearch class method] Prefs export method. Constructor: exportPrefs(self) Return: None Arguments: self Optional Arguments: importPrefs [ MnsDefSearch class method] Prefs import method. Constructor: importPrefs(self) Return: None Arguments: self Optional Arguments: connectCaseBoxesBack [ MnsDefSearch class method] Prefs tab 'case-sensetive' check-box connection to the main tab 'case-sensative' check-box. Constructor: connectCaseBoxesBack(self) Return: None Arguments: self Optional Arguments: import_submodules [ MnsDefSearch class method] Recursive method to walk thorugh a given package and sub-packages to store all sub-directories within. Constructor: import_submodules(self, package, recursive=True) Return: dict Arguments: self package recursive ( bool ) ; [default: True] Optional Arguments: refrehsPrefsLists [ MnsDefSearch class method] Refresh custom files and directories method trigger. Constructor: refrehsPrefsLists(self) Return: None Arguments: self Optional Arguments: removeDirectory [ MnsDefSearch class method] Remove a custom directory from the list trigger method Constructor: removeDirectory(self) Return: None Arguments: self Optional Arguments: removeFile [ MnsDefSearch class method] Remove a custom file from the list trigger method Constructor: removeFile(self) Return: None Arguments: self Optional Arguments: clearAllLists [ MnsDefSearch class method] Restore Default prefs trigger method. This will clear all of the custom list items, which will restore initial state. Not undoable. Constructor: clearAllLists(self) Return: None Arguments: self Optional Arguments: reloadResults [ MnsDefSearch class method] Wrapper re-load method. Constructor: reloadResults(self) Return: None Arguments: self Optional Arguments: importDirs [ MnsDefSearch class method] import directories wrapper Constructor: importDirs(self) Return: None Arguments: self Optional Arguments: importFiles [ MnsDefSearch class method] import files wrapper Constructor: importFiles(self) Return: None Arguments: self Optional Arguments:","title":"defSearch"},{"location":"defSearch/#defsearch","text":"=== Author: Assaf Ben Zur === Core MNS Utility UI This UI will allow the user to search though all available function within a given library and build a dynamic UI for it, based on it's arguments and keyword arguments drawen as 'type' QObjects into a new UI window. This UI class will search thorugh the default library (mns), although has functionallity to add any library into the search. IMPORTANT: Any given custom library needs to follow the mns code structure convension in order to work and sraw properly. Please refer to some code examples. The main process of this UI class is: - Load the UI - procedurally look through the given libraries and add any found python defenition into the UI list. - Uppon a 'UI creation' call (via the button or souble-click): - Deconstruct the selected defenition into mandatory arguments and keyword arguments - Build a new UI based on the parameters got. - Uppon a 'Run' call: - Re-construct the function's argument based on the UI fields and recompile into a string - Call the selected function using the complied arguent string Features: - Prefs tab to control the UI's behavior. - Directory addition - Indepentent custom '.py' files add - Library reload - 'Default Prefs restore' - Settings export/import - Function 'pinning' (Global, session independent) - UI features - Search, Case-Sensative display, Pinned view only, clear all pinns - 'dev mode': - When set to False (default) the UI call will create a new UI only if it han't been created before- meaning that the UI objects are kept within the UI class, and when closed will not lose their user-set values. When called again, the UI will simply re-load- not re-create to keep previous set values. The function will not be read again to build. When set to True, instead of re-loading of a previously created UI- it will be deleted- and recreated, READING THE FUNCTION AGAIN. This allows the user to re-read a function every time the UI is called- that means that all previous value set will be lost- as the UI rebuilds it will set all items to default value. This gives a very fast way of developing a function- not needing to re-load maya after edit- The UI will rebuild based on any change made to the defenition code, adding any new items or running a different fuctionallity every run call. Use this feature when writing or developing a new fuction.","title":"defSearch"},{"location":"defSearch/#classes","text":"","title":"Classes"},{"location":"defSearch/#mnsdefsearch-class","text":"Main UI Class Constructor: MnsDefSearch( parent ( str ) ; [default: mnsUIUtils.get_maya_window()]) Inherits from: form_class, base_class Class Members: selfDir pinnedFilePath dirsFilePath filesFilePath Methods: addDirectoryWin [method] clearResults [method] clearPins [method] connectSignals [method] addDirectory [method] addFile [method] importModules [method] loadWindow [method] updateResults [method] createUI [method] loadList [method] connectCaseBoxes [method] addModuleToResults [method] addPackageToResults [method] pin [method] pinnedOnlyView [method] exportPrefs [method] importPrefs [method] connectCaseBoxesBack [method] import_submodules [method] refrehsPrefsLists [method] removeDirectory [method] removeFile [method] clearAllLists [method] reloadResults [method] importDirs [method] importFiles [method]","title":"MnsDefSearch [Class]"},{"location":"defSearch/#mnsdefsearch-methods","text":"","title":"MnsDefSearch  methods"},{"location":"devGuide/","text":"","title":"devGuide"},{"location":"docBuildMansur/","text":"docBuildMansur === Author: Assaf Ben Zur === Core procedural documentation build Process flow: Read a given directory Build a structure based on the os directory given and the folders to filter Filter only .py files For each py file: Extract Header (such as this one) Extract Defenition Extract Def name and constructor Extract Arguments, and Optional Arguments Extract return Extract Classes Extract Header Extract Name and constructor Extract inheritence Extract Class members Extract Methods Extract Header Extract Name and constructor Extract Arguments and Optional Arguments Extract return rebuild the yml file given write the files within the 'docs' directory This procedural approach for a code documentation build ensures an up-to-date documentation based on code commenting. No additional actions are neccessery. This will yeild a readable commented code with will math the documentation 1-to-1. Also, this will yeild a very \"easy to change\" approach for the documentation generator of choice as well as a 100% cohirent documentation throuout. Defenitions buildDocItems Main dir build recursive function. The function builds only directory items, which in turn will be searched for '.py' files, and will be added to the structure only if in contains a direct '.py' within, or if a directory within comatins one, recursively. Depth independent. Constructor: buildDocItems(dir, rootDir, level, ymlPath, fileLines) Return: list (yml new file lines) Arguments: dir rootDir level ymlPath fileLines Keyword Arguments: buildDocsForDir Main build wrapper and the yml file writer wrapper function. Calls 'buildDocItems' within which in turn build the actual html files within the 'docs' directory. Finally re-writes the yml file using 'rebuildYmlFile' according to the file structure acquired Constructor: buildDocsForDir(mkDocksYmlPath, parentPageName, directory, folders, level = 0) Return: None Arguments: mkDocksYmlPath parentPageName directory folders level ( int ) ; [default: 0] Keyword Arguments: buildFileDoc Main file def. This is a wrapped def as well as a function one. Compiles all needed documentation from a given file path. Will compile Classes, methods, defenitions (icluding all relevant information for each) This is also the main WRITE defenition. After info assembly the info will be written as a new file, overriding existing ones, to create a new doc page. Any file doc 'display' is contained within this def. Constructor: buildFileDoc(path, ymlPath) Return: None Arguments: path ymlPath Keyword Arguments: buildMansurDocs Main wrapper call for the MANSUR directory doc build. Contains the requested folders within, hard-coded for safety. Constructor: buildMansurDocs() Return: None Arguments: Keyword Arguments: buildSubItemsDir Last level recursive function. This function will call the documentation file build as well as build the last meanu item within the structure. The final pythonLib item is passed in, as well as the root directory and the current level and the yml path in order to write the new yml lines correctly, depending on the file's level position. Constructor: buildSubItemsDir(rootDir, pyLib, level, ymlPath, fileLines) Return: list (fileLines) Arguments: rootDir pyLib level ymlPath fileLines Keyword Arguments: extractClassMembersFromInitSrc Extracts class members from a Class' init method source as list Constructor: extractClassMembersFromInitSrc(src = []) Return: list (class members names) Arguments: src ( list ) ; [default: []] Keyword Arguments: extractConstructorValuesForClass Extracts constructor related values from a class source as list. Wrapper def. Extracts both Arguments (flattened) and class members Constructor: extractConstructorValuesForClass(src = []) Return: string (constructor), list (class members) Arguments: src ( list ) ; [default: []] Keyword Arguments: extractDocsForClass Wrapped def. Extracts full documentation from a given class source. Constructor: extractDocsForClass(classSrc = []) Return: string (title), list (header), string (sontructor), string (inherit object), list (class members), string (return) Arguments: classSrc ( list ) ; [default: []] Keyword Arguments: extractDocsForDef Wrapper def for a full doc extraction for a given file souce as list. extracts return statement, title, header, arguments and optionalArguments Constructor: extractDocsForDef(defSrc = []) Return: string(title), list(header), list(arguments), list(optionalArguments, string(return statement) Arguments: defSrc ( list ) ; [default: []] Keyword Arguments: extractHeaderFromSrc Extracts a header if exsits from a given elemnt src (Class/Def/Method) as list Constructor: extractHeaderFromSrc(src = [] ) Return: list (header lines) Arguments: src ( list ) ; [default: []] Keyword Arguments: extractMethodsfromClassSrc Splits a given class source to orginized dict containing it's methods sources Constructor: extractMethodsfromClassSrc(src = []) Return: dict (methodName: methodSource) Arguments: src ( list ) ; [default: []] Keyword Arguments: extractParametersFromDefSrc Extract parametrs from a given def source as list Extracts arguments and optional arguments Constructor: extractParametersFromDefSrc(src = []) Return: list (arguments) , list(optionalArguments) Arguments: src ( list ) ; [default: []] Keyword Arguments: getParameterForMnsArg Extracts arguments from a given def source lines as list Constructor: getParameterForMnsArg(arg) Return: string (flattened combined arguments) Arguments: arg Keyword Arguments: getPyLibForDir This is a complex recursive function that will assemble a file structure from a given path directory. The assembly will filter ONLY folders that contain at least one '.py' file, and ONLY '.py' files. This function returns a dictionary containing the file and folder structure as keys \"dirs\" and \"files\" respectively. As this is a recusrsive depth independent function, the return will be a complex compound dict, which contains instances of the same dict structure within. This is dependent of depth obviously- if a directory contains another directory within- which contains a '.py' the first item \"dirs\" key will contain another dictionary containing a \"dirs\" key and a \"files\" key. Ultimatly, the first dict \"dirs\" key should contain a single complex dict element. Constructor: getPyLibForDir(root) Return: dict (complex library dict) Arguments: root Keyword Arguments: rebuildYmlFile yml writer function. Writes the given yml file passed, with the new 'lines' passed. The yml 'parentPageName' is passed as an argument - the new 'lines' build is constructed underneeth. Existing required info is preserved by calculating the parent item indentation level, keeping every item with lower or matching level. Every item under the parent item passed in a higher level is removed or reconstructed. Constructor: rebuildYmlFile(ymlPath, parentPageName, lines) Return: None Arguments: ymlPath parentPageName lines Keyword Arguments:","title":"docBuildMansur"},{"location":"docBuildMansur/#docbuildmansur","text":"=== Author: Assaf Ben Zur === Core procedural documentation build Process flow: Read a given directory Build a structure based on the os directory given and the folders to filter Filter only .py files For each py file: Extract Header (such as this one) Extract Defenition Extract Def name and constructor Extract Arguments, and Optional Arguments Extract return Extract Classes Extract Header Extract Name and constructor Extract inheritence Extract Class members Extract Methods Extract Header Extract Name and constructor Extract Arguments and Optional Arguments Extract return rebuild the yml file given write the files within the 'docs' directory This procedural approach for a code documentation build ensures an up-to-date documentation based on code commenting. No additional actions are neccessery. This will yeild a readable commented code with will math the documentation 1-to-1. Also, this will yeild a very \"easy to change\" approach for the documentation generator of choice as well as a 100% cohirent documentation throuout.","title":"docBuildMansur"},{"location":"docBuildMansur/#defenitions","text":"","title":"Defenitions"},{"location":"docBuildMansur/#builddocitems","text":"Main dir build recursive function. The function builds only directory items, which in turn will be searched for '.py' files, and will be added to the structure only if in contains a direct '.py' within, or if a directory within comatins one, recursively. Depth independent. Constructor: buildDocItems(dir, rootDir, level, ymlPath, fileLines) Return: list (yml new file lines) Arguments: dir rootDir level ymlPath fileLines Keyword Arguments:","title":"buildDocItems"},{"location":"docBuildMansur/#builddocsfordir","text":"Main build wrapper and the yml file writer wrapper function. Calls 'buildDocItems' within which in turn build the actual html files within the 'docs' directory. Finally re-writes the yml file using 'rebuildYmlFile' according to the file structure acquired Constructor: buildDocsForDir(mkDocksYmlPath, parentPageName, directory, folders, level = 0) Return: None Arguments: mkDocksYmlPath parentPageName directory folders level ( int ) ; [default: 0] Keyword Arguments:","title":"buildDocsForDir"},{"location":"docBuildMansur/#buildfiledoc","text":"Main file def. This is a wrapped def as well as a function one. Compiles all needed documentation from a given file path. Will compile Classes, methods, defenitions (icluding all relevant information for each) This is also the main WRITE defenition. After info assembly the info will be written as a new file, overriding existing ones, to create a new doc page. Any file doc 'display' is contained within this def. Constructor: buildFileDoc(path, ymlPath) Return: None Arguments: path ymlPath Keyword Arguments:","title":"buildFileDoc"},{"location":"docBuildMansur/#buildmansurdocs","text":"Main wrapper call for the MANSUR directory doc build. Contains the requested folders within, hard-coded for safety. Constructor: buildMansurDocs() Return: None Arguments: Keyword Arguments:","title":"buildMansurDocs"},{"location":"docBuildMansur/#buildsubitemsdir","text":"Last level recursive function. This function will call the documentation file build as well as build the last meanu item within the structure. The final pythonLib item is passed in, as well as the root directory and the current level and the yml path in order to write the new yml lines correctly, depending on the file's level position. Constructor: buildSubItemsDir(rootDir, pyLib, level, ymlPath, fileLines) Return: list (fileLines) Arguments: rootDir pyLib level ymlPath fileLines Keyword Arguments:","title":"buildSubItemsDir"},{"location":"docBuildMansur/#extractclassmembersfrominitsrc","text":"Extracts class members from a Class' init method source as list Constructor: extractClassMembersFromInitSrc(src = []) Return: list (class members names) Arguments: src ( list ) ; [default: []] Keyword Arguments:","title":"extractClassMembersFromInitSrc"},{"location":"docBuildMansur/#extractconstructorvaluesforclass","text":"Extracts constructor related values from a class source as list. Wrapper def. Extracts both Arguments (flattened) and class members Constructor: extractConstructorValuesForClass(src = []) Return: string (constructor), list (class members) Arguments: src ( list ) ; [default: []] Keyword Arguments:","title":"extractConstructorValuesForClass"},{"location":"docBuildMansur/#extractdocsforclass","text":"Wrapped def. Extracts full documentation from a given class source. Constructor: extractDocsForClass(classSrc = []) Return: string (title), list (header), string (sontructor), string (inherit object), list (class members), string (return) Arguments: classSrc ( list ) ; [default: []] Keyword Arguments:","title":"extractDocsForClass"},{"location":"docBuildMansur/#extractdocsfordef","text":"Wrapper def for a full doc extraction for a given file souce as list. extracts return statement, title, header, arguments and optionalArguments Constructor: extractDocsForDef(defSrc = []) Return: string(title), list(header), list(arguments), list(optionalArguments, string(return statement) Arguments: defSrc ( list ) ; [default: []] Keyword Arguments:","title":"extractDocsForDef"},{"location":"docBuildMansur/#extractheaderfromsrc","text":"Extracts a header if exsits from a given elemnt src (Class/Def/Method) as list Constructor: extractHeaderFromSrc(src = [] ) Return: list (header lines) Arguments: src ( list ) ; [default: []] Keyword Arguments:","title":"extractHeaderFromSrc"},{"location":"docBuildMansur/#extractmethodsfromclasssrc","text":"Splits a given class source to orginized dict containing it's methods sources Constructor: extractMethodsfromClassSrc(src = []) Return: dict (methodName: methodSource) Arguments: src ( list ) ; [default: []] Keyword Arguments:","title":"extractMethodsfromClassSrc"},{"location":"docBuildMansur/#extractparametersfromdefsrc","text":"Extract parametrs from a given def source as list Extracts arguments and optional arguments Constructor: extractParametersFromDefSrc(src = []) Return: list (arguments) , list(optionalArguments) Arguments: src ( list ) ; [default: []] Keyword Arguments:","title":"extractParametersFromDefSrc"},{"location":"docBuildMansur/#getparameterformnsarg","text":"Extracts arguments from a given def source lines as list Constructor: getParameterForMnsArg(arg) Return: string (flattened combined arguments) Arguments: arg Keyword Arguments:","title":"getParameterForMnsArg"},{"location":"docBuildMansur/#getpylibfordir","text":"This is a complex recursive function that will assemble a file structure from a given path directory. The assembly will filter ONLY folders that contain at least one '.py' file, and ONLY '.py' files. This function returns a dictionary containing the file and folder structure as keys \"dirs\" and \"files\" respectively. As this is a recusrsive depth independent function, the return will be a complex compound dict, which contains instances of the same dict structure within. This is dependent of depth obviously- if a directory contains another directory within- which contains a '.py' the first item \"dirs\" key will contain another dictionary containing a \"dirs\" key and a \"files\" key. Ultimatly, the first dict \"dirs\" key should contain a single complex dict element. Constructor: getPyLibForDir(root) Return: dict (complex library dict) Arguments: root Keyword Arguments:","title":"getPyLibForDir"},{"location":"docBuildMansur/#rebuildymlfile","text":"yml writer function. Writes the given yml file passed, with the new 'lines' passed. The yml 'parentPageName' is passed as an argument - the new 'lines' build is constructed underneeth. Existing required info is preserved by calculating the parent item indentation level, keeping every item with lower or matching level. Every item under the parent item passed in a higher level is removed or reconstructed. Constructor: rebuildYmlFile(ymlPath, parentPageName, lines) Return: None Arguments: ymlPath parentPageName lines Keyword Arguments:","title":"rebuildYmlFile"},{"location":"dynUI/","text":"dynUI === Author: Assaf Ben Zur === Supporting module for the 'defSearch' UI Class. This module build the base UI for any function UI build called from the defSerach UI. The build is based on a .ui base file, constructing an empty UI that will accomedate the dynamic UI elemnts requested. This module also holds the RunCmd. The run command will filter and get any elemnt value based on it's type and recompile an argument string to pass into the function requested. A template icon is created as well as an empty 'title' item to be changed after creation base on the function name requested. Classes MnsDynamicDefUI [Class] Main UI class Constructor: MnsDynamicDefUI( defenition , parent ( str ) ; [default: mnsUIUtils.get_maya_window()], **kwargs ) Inherits from: form_class, base_class Class Members: funObjectCreation defenition arguments optArguments txtFields defenitionName title preDefinedArgs sideCB colOverride rigTop split splitLayout customRunCommand fullList Methods: closeEvent [method] keyPressEvent [method] assembleFeildValues [method] drawUI [method] loadUI [method] runCmd [method] drawTitle [method] MnsDynamicDefUI methods closeEvent [ MnsDynamicDefUI class method] Constructor: closeEvent(self, event) Return: None Arguments: self event Optional Arguments: keyPressEvent [ MnsDynamicDefUI class method] Constructor: keyPressEvent(self, event) Return: None Arguments: self event Optional Arguments: assembleFeildValues [ MnsDynamicDefUI class method] Assemble all UI values into a list Constructor: assembleFeildValues(self) Return: list Arguments: self Optional Arguments: drawUI [ MnsDynamicDefUI class method] Main UI draw method. Constructor: drawUI(self) Return: None Arguments: self Optional Arguments: loadUI [ MnsDynamicDefUI class method] Main UI load. Constructor: loadUI(self) Return: None Arguments: self Optional Arguments: runCmd [ MnsDynamicDefUI class method] Main method run command trigger. Constructor: runCmd(self) Return: None Arguments: self Optional Arguments: drawTitle [ MnsDynamicDefUI class method] Title set method. Constructor: drawTitle(self) Return: None Arguments: self Optional Arguments:","title":"dynUI"},{"location":"dynUI/#dynui","text":"=== Author: Assaf Ben Zur === Supporting module for the 'defSearch' UI Class. This module build the base UI for any function UI build called from the defSerach UI. The build is based on a .ui base file, constructing an empty UI that will accomedate the dynamic UI elemnts requested. This module also holds the RunCmd. The run command will filter and get any elemnt value based on it's type and recompile an argument string to pass into the function requested. A template icon is created as well as an empty 'title' item to be changed after creation base on the function name requested.","title":"dynUI"},{"location":"dynUI/#classes","text":"","title":"Classes"},{"location":"dynUI/#mnsdynamicdefui-class","text":"Main UI class Constructor: MnsDynamicDefUI( defenition , parent ( str ) ; [default: mnsUIUtils.get_maya_window()], **kwargs ) Inherits from: form_class, base_class Class Members: funObjectCreation defenition arguments optArguments txtFields defenitionName title preDefinedArgs sideCB colOverride rigTop split splitLayout customRunCommand fullList Methods: closeEvent [method] keyPressEvent [method] assembleFeildValues [method] drawUI [method] loadUI [method] runCmd [method] drawTitle [method]","title":"MnsDynamicDefUI [Class]"},{"location":"dynUI/#mnsdynamicdefui-methods","text":"","title":"MnsDynamicDefUI  methods"},{"location":"faq/","text":"","title":"Faq"},{"location":"foot_construction/","text":"foot_construction Defenitions constructBuildModule Constructor: constructBuildModule(mansur, guides = [], customGuides = [], kwargs) Return: None Arguments: mansur guides ( list ) ; [default: []] customGuides ( list ) ; [default: []] kwargs Keyword Arguments:","title":"Foot construction"},{"location":"foot_construction/#foot_construction","text":"","title":"foot_construction"},{"location":"foot_construction/#defenitions","text":"","title":"Defenitions"},{"location":"foot_construction/#constructbuildmodule","text":"Constructor: constructBuildModule(mansur, guides = [], customGuides = [], kwargs) Return: None Arguments: mansur guides ( list ) ; [default: []] customGuides ( list ) ; [default: []] kwargs Keyword Arguments:","title":"constructBuildModule"},{"location":"foot_customGuides/","text":"foot_customGuides Defenitions customGuides Constructor: customGuides(builtGuides, gScale, customModules) Return: None Arguments: builtGuides gScale customModules Keyword Arguments:","title":"foot customGuides"},{"location":"foot_customGuides/#foot_customguides","text":"","title":"foot_customGuides"},{"location":"foot_customGuides/#defenitions","text":"","title":"Defenitions"},{"location":"foot_customGuides/#customguides","text":"Constructor: customGuides(builtGuides, gScale, customModules) Return: None Arguments: builtGuides gScale customModules Keyword Arguments:","title":"customGuides"},{"location":"freeControl/","text":"freeControl Defenitions construct Constructor: construct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"freeControl"},{"location":"freeControl/#freecontrol","text":"","title":"freeControl"},{"location":"freeControl/#defenitions","text":"","title":"Defenitions"},{"location":"freeControl/#construct","text":"Constructor: construct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"construct"},{"location":"freeControl_construction/","text":"freeControl_construction Defenitions constructBuildModule Constructor: constructBuildModule(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"freeControl construction"},{"location":"freeControl_construction/#freecontrol_construction","text":"","title":"freeControl_construction"},{"location":"freeControl_construction/#defenitions","text":"","title":"Defenitions"},{"location":"freeControl_construction/#constructbuildmodule","text":"Constructor: constructBuildModule(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"constructBuildModule"},{"location":"globals/","text":"globals All top level global variable declaration. Used thoughout the python structure to easily manipulate global settings.","title":"Globals"},{"location":"globals/#globals","text":"All top level global variable declaration. Used thoughout the python structure to easily manipulate global settings.","title":"globals"},{"location":"installation/","text":"Note Coming soon","title":"Installation"},{"location":"limb/","text":"limb Defenitions construct Constructor: construct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments: customGuides Constructor: customGuides(mansur, builtGuides, gScale) Return: None Arguments: mansur builtGuides gScale Keyword Arguments: jointStructure Constructor: jointStructure(mansur, guides, GLOB_mnsProjectScale, kwargs) Return: None Arguments: mansur guides GLOB_mnsProjectScale kwargs Keyword Arguments:","title":"Limb"},{"location":"limb/#limb","text":"","title":"limb"},{"location":"limb/#defenitions","text":"","title":"Defenitions"},{"location":"limb/#construct","text":"Constructor: construct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"construct"},{"location":"limb/#customguides","text":"Constructor: customGuides(mansur, builtGuides, gScale) Return: None Arguments: mansur builtGuides gScale Keyword Arguments:","title":"customGuides"},{"location":"limb/#jointstructure","text":"Constructor: jointStructure(mansur, guides, GLOB_mnsProjectScale, kwargs) Return: None Arguments: mansur guides GLOB_mnsProjectScale kwargs Keyword Arguments:","title":"jointStructure"},{"location":"log/","text":"log === Author: Assaf Ben Zur === Core mns logger. This module contains the mns logger which will construct a log based on given parametrs. All logs are written to the defined log file dectated by the project globals. In case a log doesn't exists it will be automatically created. Defenitions getCurrentFunctionName Constructor: getCurrentFunctionName() Return: None Arguments: Keyword Arguments: getPreviousFunctionName Constructor: getPreviousFunctionName() Return: None Arguments: Keyword Arguments: log Core logger function. Given a message line and a severity parameter, log the line into the log file. In case the log file doesn't exist, create one. In case the directory doesn't exist, create one. An output message is printed into the consule based on the severity. Constructor: log(msg = \"\", kwargs) Return: None Arguments: msg ( str ) ; [default: \"\"] kwargs Keyword Arguments: svr ( int ) - set the sevarity of the log message currentContextRequested ( bool ) - in case a global context log was called logCurrentFrame Constructor: logCurrentFrame() Return: None Arguments: Keyword Arguments: validateLogRootDirectory Validate log directory existence within the current project folder. Constructor: validateLogRootDirectory() Return: string (log directory path) Arguments: Keyword Arguments:","title":"Log"},{"location":"log/#log","text":"=== Author: Assaf Ben Zur === Core mns logger. This module contains the mns logger which will construct a log based on given parametrs. All logs are written to the defined log file dectated by the project globals. In case a log doesn't exists it will be automatically created.","title":"log"},{"location":"log/#defenitions","text":"","title":"Defenitions"},{"location":"log/#getcurrentfunctionname","text":"Constructor: getCurrentFunctionName() Return: None Arguments: Keyword Arguments:","title":"getCurrentFunctionName"},{"location":"log/#getpreviousfunctionname","text":"Constructor: getPreviousFunctionName() Return: None Arguments: Keyword Arguments:","title":"getPreviousFunctionName"},{"location":"log/#log_1","text":"Core logger function. Given a message line and a severity parameter, log the line into the log file. In case the log file doesn't exist, create one. In case the directory doesn't exist, create one. An output message is printed into the consule based on the severity. Constructor: log(msg = \"\", kwargs) Return: None Arguments: msg ( str ) ; [default: \"\"] kwargs Keyword Arguments: svr ( int ) - set the sevarity of the log message currentContextRequested ( bool ) - in case a global context log was called","title":"log"},{"location":"log/#logcurrentframe","text":"Constructor: logCurrentFrame() Return: None Arguments: Keyword Arguments:","title":"logCurrentFrame"},{"location":"log/#validatelogrootdirectory","text":"Validate log directory existence within the current project folder. Constructor: validateLogRootDirectory() Return: string (log directory path) Arguments: Keyword Arguments:","title":"validateLogRootDirectory"},{"location":"logviewer/","text":"logviewer === Author: Assaf Ben Zur === Core Mns log viewer class UI. This is a core utility UI to allow an admin or a user to read any mns log item in a readable manner. This UI allows many filtering abilities to nicely view a log, which by itself is human unredablble. Features: - log tree view tab to manipulate/remove/add/reload files and directories. - 'Depth View' option to cascade the log view based on log depth. - log items flagging and commenting - Search ability - Filtering : - Time based filtering - Flag based filtering - Severity based filtering - log exporting - log clearing - flag scroll feature IMPORTANT NOTE: Log files are being created automatically within the core logger based on project settings. There is a core log-file size management within the logger NOT whithin this module. The max-log file size can be changed through the global mns settings. File management is being handled when writing logs- the logger will check whether the curent file to write has passed it's limit before writing. If found that it does, before writing the new log a set number of lines will be automatically deleted from the beggening of the log file. In order to maintain preformance more then one line is being deleted each time, as re-reading and re-writing of the log will be quite slow in case of the need to do so each time a new log line needs to be entered when the file size has passed it's limit. When deleting multiple lines the logger only needs to do so every once for every x (50-100) logs entered when file size is approaching it's limit. Classes MnsLogViewer [Class] Main UI class Constructor: MnsLogViewer( parent ( str ) ; [default: mnsUIUtils.get_maya_window()]) Inherits from: form_class, base_class Class Members: iconsDir openedLog Methods: initView [method] collapseFolder [method] expandFolder [method] validateItemToUIState [method] processLogLine [method] addFileItem [method] addFolderItem [method] loadWindow [method] clearAllFlags [method] clearSearch [method] connectSignals [method] clearLog [method] flag [method] loadDirectoryLogs [method] loadLib [method] updateView [method] loadLog [method] openMenu [method] searchCurrent [method] uncheckAllSvr [method] checkAllSvr [method] MnsLogViewer methods initView [ MnsLogViewer class method] Constructor: initView(self) Return: None Arguments: self Optional Arguments: collapseFolder [ MnsLogViewer class method] Constructor: collapseFolder(self, QTreeWidgetItem) Return: None Arguments: self QTreeWidgetItem Optional Arguments: expandFolder [ MnsLogViewer class method] Constructor: expandFolder(self, QTreeWidgetItem) Return: None Arguments: self QTreeWidgetItem Optional Arguments: validateItemToUIState [ MnsLogViewer class method] Constructor: validateItemToUIState(self, item) Return: None Arguments: self item Optional Arguments: processLogLine [ MnsLogViewer class method] Constructor: processLogLine(self, line) Return: None Arguments: self line Optional Arguments: addFileItem [ MnsLogViewer class method] Constructor: addFileItem(self, parentItem, fullDirectory) Return: None Arguments: self parentItem fullDirectory Optional Arguments: addFolderItem [ MnsLogViewer class method] Constructor: addFolderItem(self, parentItem, fullDirectory) Return: None Arguments: self parentItem fullDirectory Optional Arguments: loadWindow [ MnsLogViewer class method] Main window load. Constructor: loadWindow(self) Return: None Arguments: self Optional Arguments: clearAllFlags [ MnsLogViewer class method] Clear all flags in the log file wrapper method trigger. Constructor: clearAllFlags(self) Return: None Arguments: self Optional Arguments: clearSearch [ MnsLogViewer class method] Clear search field method trigger. Constructor: clearSearch(self) Return: None Arguments: self Optional Arguments: connectSignals [ MnsLogViewer class method] Connect all the UI signals Constructor: connectSignals(self) Return: None Arguments: self Optional Arguments: clearLog [ MnsLogViewer class method] Delete a selected log file. Prompt dialog confirm dependent. Constructor: clearLog(self, item) Return: None Arguments: self item Optional Arguments: flag [ MnsLogViewer class method] Flag method. This method will flag/unflag a given log item file directly, then update the view. Instead of flaggin the item in view only (session based), the flagging is being done directly in the log file as a custom parameter. After the flag is made or cleared an 'update view' is being triggered to reload the view, flagging items if neccessary within the UI for user display. Constructor: flag(self, kwargs) Return: None Arguments: self kwargs Optional Arguments: loadDirectoryLogs [ MnsLogViewer class method] Load directory finction trigger. Constructor: loadDirectoryLogs(self, directory = None, parentItem = None) Return: None Arguments: self directory ( str ) ; [default: None] parentItem ( str ) ; [default: None] Optional Arguments: loadLib [ MnsLogViewer class method] Load library method trigger. Constructor: loadLib(self) Return: None Arguments: self Optional Arguments: updateView [ MnsLogViewer class method] Log view update wrapper. Update the log view depending on the UI state Constructor: updateView(self, kwargs) Return: None Arguments: self kwargs Optional Arguments: loadLog [ MnsLogViewer class method] Read a log file wrapper. Constructor: loadLog(self, logQTreeWidgetItem) Return: None Arguments: self logQTreeWidgetItem Optional Arguments: openMenu [ MnsLogViewer class method] Right click context menu command for the log-files tree view. Constructor: openMenu(self, position) Return: None Arguments: self position Optional Arguments: searchCurrent [ MnsLogViewer class method] Search current double clicked item method trigger. Constructor: searchCurrent(self) Return: None Arguments: self Optional Arguments: uncheckAllSvr [ MnsLogViewer class method] Set all severity check-box items to False wrapper. Constructor: uncheckAllSvr(self) Return: None Arguments: self Optional Arguments: checkAllSvr [ MnsLogViewer class method] Set all severity check-box items to True wrapper. Constructor: checkAllSvr(self) Return: None Arguments: self Optional Arguments:","title":"Logviewer"},{"location":"logviewer/#logviewer","text":"=== Author: Assaf Ben Zur === Core Mns log viewer class UI. This is a core utility UI to allow an admin or a user to read any mns log item in a readable manner. This UI allows many filtering abilities to nicely view a log, which by itself is human unredablble. Features: - log tree view tab to manipulate/remove/add/reload files and directories. - 'Depth View' option to cascade the log view based on log depth. - log items flagging and commenting - Search ability - Filtering : - Time based filtering - Flag based filtering - Severity based filtering - log exporting - log clearing - flag scroll feature IMPORTANT NOTE: Log files are being created automatically within the core logger based on project settings. There is a core log-file size management within the logger NOT whithin this module. The max-log file size can be changed through the global mns settings. File management is being handled when writing logs- the logger will check whether the curent file to write has passed it's limit before writing. If found that it does, before writing the new log a set number of lines will be automatically deleted from the beggening of the log file. In order to maintain preformance more then one line is being deleted each time, as re-reading and re-writing of the log will be quite slow in case of the need to do so each time a new log line needs to be entered when the file size has passed it's limit. When deleting multiple lines the logger only needs to do so every once for every x (50-100) logs entered when file size is approaching it's limit.","title":"logviewer"},{"location":"logviewer/#classes","text":"","title":"Classes"},{"location":"logviewer/#mnslogviewer-class","text":"Main UI class Constructor: MnsLogViewer( parent ( str ) ; [default: mnsUIUtils.get_maya_window()]) Inherits from: form_class, base_class Class Members: iconsDir openedLog Methods: initView [method] collapseFolder [method] expandFolder [method] validateItemToUIState [method] processLogLine [method] addFileItem [method] addFolderItem [method] loadWindow [method] clearAllFlags [method] clearSearch [method] connectSignals [method] clearLog [method] flag [method] loadDirectoryLogs [method] loadLib [method] updateView [method] loadLog [method] openMenu [method] searchCurrent [method] uncheckAllSvr [method] checkAllSvr [method]","title":"MnsLogViewer [Class]"},{"location":"logviewer/#mnslogviewer-methods","text":"","title":"MnsLogViewer  methods"},{"location":"nodes/","text":"nodes === Author: Assaf Ben Zur === Mns nodes utility module. All node creation functions are covered by this module Defenitions adlNode Constructor: adlNode(input1 = None, input2 = None, output = None, kwargs) Return: None Arguments: input1 ( str ) ; [default: None] input2 ( str ) ; [default: None] output ( str ) ; [default: None] kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: addDoubleLinear] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True buildGeoAxisVis Utility aid function: Creates a Axis-Vis geometry object based on parameters Constructor: buildGeoAxisVis( kwargs) Return: MnsNameStd (created vis-geo object) Arguments: kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: pointsOnCurve] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True scale ( int ) ; [default: 1] - Relative to parent axisSubdevision ( int ) ; [default: 16] - Geometry cylinder axis subdevision cylinderWidth ( float ) ; [default: 0.015] deleteAll ( bool ) - If true, do not attempt to create any objects- instead look for any existing objects and delete them buildGeoAxisVisForParents Utility aid function. Created an Axis-Vis geometry object from each object within the list passed in. Constructor: buildGeoAxisVisForParents( kwargs) Return: None Arguments: kwargs Keyword Arguments: parentObjs ( list ) ; [default: [' ']] - If parent is empty, visGeo will not build parentMethod ( int ) scale ( int ) ; [default: 1] - Relative to parent axisSubdevision ( int ) ; [default: 16] - Geometry cylinder axis subdevision cylinderWidth ( float ) ; [default: 0.015] createNodeRelationship ( bool ) ; [default: True] buildVisCubesForPSOCNode Single use function. From a given MnsPointsOnCurve node, create output 'visCubes'. Constructor: buildVisCubesForPSOCNode(node = \"\", kwargs) Return: dict ('visCubesStds': output MnsNameStd list, 'nodes': output node list ) Arguments: node ( str ) ; [default: \"\"] kwargs Keyword Arguments: gapWidth ( float ) ; [default: 0.1] choiceNode Constructor: choiceNode(inputs = [], output = None, kwargs) Return: None Arguments: inputs ( list ) ; [default: []] output ( str ) ; [default: None] kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: choice] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True conditionNode Constructor: conditionNode(firstTerm = None, secondTerm = None, colorIfTrue = None, colorIfFalse = None, outColor = None, kwargs) Return: None Arguments: firstTerm ( str ) ; [default: None] secondTerm ( str ) ; [default: None] colorIfTrue ( str ) ; [default: None] colorIfFalse ( str ) ; [default: None] outColor ( str ) ; [default: None] kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: condition] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID operation ( int ) incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True connectAttrAttempt Constructor: connectAttrAttempt(attrA, nodeAttr) Return: None Arguments: attrA nodeAttr Keyword Arguments: connectSetAttempt Constructor: connectSetAttempt(attrA, nodeAttr, valType) Return: None Arguments: attrA nodeAttr valType Keyword Arguments: imagePlaneNode Constructor: imagePlaneNode(camera = None, kwargs) Return: None Arguments: camera ( str ) ; [default: None] kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: imagePlane] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True mdNode Constructor: mdNode(input1 = None, input2 = None, output = None, kwargs) Return: None Arguments: input1 ( str ) ; [default: None] input2 ( str ) ; [default: None] output ( str ) ; [default: None] kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: multDev] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID operation ( int ) ; [default: 1] incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True mdlNode Constructor: mdlNode(input1 = None, input2 = None, output = None, kwargs) Return: None Arguments: input1 ( str ) ; [default: None] input2 ( str ) ; [default: None] output ( str ) ; [default: None] kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: multDoubleLinear] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True mnsAnnotateNode Creates an mnsAnnotateNode node based on specified parameters and outputs. Input as a node.channel list. Constructor: mnsAnnotateNode( kwargs) Return: dict ('node': MnsNameStd) Arguments: kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: annotate] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True attributes ( list ) ; [default: [' ']] nameOnlyMode ( bool ) mnsBuildTransformsCurveNode Creates an mnsBuildTransformsCurveNode node based on specified parameters and outputs. Constructor: mnsBuildTransformsCurveNode( kwargs) Return: dict ('transforms': input transforms list, 'outCurve': built output curve MnsNameStd, 'outOffsetCurve': built output up-curve MnsNameStd, 'node': Created node MnsNameStd) Arguments: kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: buildTransformsCurveCurve] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True transforms ( list ) ; [default: [' ']] - transforms to build the curve from buildOffsetCurve ( bool ) - Node's 'buildOffsetCurve' attribute offsetCurveSuffix ( str ) ; [default: Up] - Up curve creation name body suffix buildMode ( int ) - Node's buildMode attribute tangentDirection ( int ) - Node's tangentDirection attribute tangentLength ( float ) ; [default: 1.0] - Node's tangentLength attribute hermiteSteps ( int ) ; [default: 5] - Node's hermiteSteps attribute degree ( int ) ; [default: 3] - Node's degree attribute offsetType ( int ) - Node's offsetType attribute offsetX ( float ) - Node's offsetX attribute offsetY ( float ) - Node's offsetY attribute offsetZ ( float ) - Node's offsetZ attribute reverse ( bool ) - Node's reverse attribute mnsCameraGateRatioNode Constructor: mnsCameraGateRatioNode( kwargs) Return: None Arguments: kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: cameraGateRatio] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True camera ( str ) widthInput ( str ) heightInput ( str ) mnsIKSolver Constructor: mnsIKSolver( kwargs) Return: None Arguments: kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: ikSolver] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True blend ( float ) roll ( float ) slide ( float ) softness ( float ) stretchLimit ( float ) ; [default: 1.0] aimAxis ( int ) ; [default: 1] - Node's 'aimAxis' attribute upAxis ( int ) ; [default: 2] - Node's 'upAxis' attribute boneLengthA ( float ) ; [default: 1.0] boneLengthB ( float ) ; [default: 1.0] rootPos ( str ) midPos ( str ) endPos ( str ) limbRoot ( str ) ikHandle ( str ) poleVector ( str ) outputRoot ( str ) outputMid ( str ) outputEnd ( str ) mnsMatrixConstraintNode Creates an mnsMatrixConstraintNode node based on specified parameters and outputs. Constructor: mnsMatrixConstraintNode( kwargs) Return: dict ('nameStds': Created MnsNameStd list) Arguments: kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: matrixConstraint] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True targets ( list ) ; [default: [' ']] - Tragets to constrain sources ( list ) ; [default: [' ']] - Sources to constrain the targets to maintainOffset ( bool ) - Node's maintainOffset attribute connectTranslate ( bool ) ; [default: True] - Connect Translate if True connectRotate ( bool ) ; [default: True] - Connect Rotate if True connectScale ( bool ) ; [default: True] - Connect Scale if True mnsNodeRelationshipNode Constructor: mnsNodeRelationshipNode( kwargs) Return: None Arguments: kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: nodeRelationship] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True master ( str ) ; [default: None] slaves ( list ) ; [default: [' ']] mnsPointsOnCurveNode Creates an mnsPointOnCurve node based on specified parameters and outputs. A 'buildOutputs' parameter is defaulted to True to build output (of a choice of any mnsType). Constructor: mnsPointsOnCurveNode( kwargs) Return: dict ('node': MnsNameStd, 'samplesSTDs': output MnsNameStd list, 'samples': output node list) Arguments: kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: pointsOnCurve] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True inputCurve ( str ) - name of the curve object to connect as input curve into the node. Setting as nothing or an invalid name will result in nothing connected inputUpCurve ( str ) - name of the up-curve object to connect as input up-curve into the node. Setting as nothing or an invalid name will result in nothing connected transforms ( list ) ; [default: [' ']] - array of object to output to buildMode ( int ) - Node's build mode attribute numOutputs ( int ) ; [default: 10] - set the number of outputs or samples to be outputed from the node doRoatate ( bool ) ; [default: True] - Node's 'doRotate' attribute rotateMode ( int ) - Node's 'rotateMode' attribute upMode ( int ) ; [default: 1] - Node's 'upMode' attribute aimAxis ( int ) - Node's 'aimAxis' attribute upAxis ( int ) ; [default: 1] - Node's 'upAxis' attribute doScale ( bool ) ; [default: True] - Node's 'doScale' attribute doSpring ( bool ) - Node's 'doSpring' attribute connectTranslate ( bool ) ; [default: True] - Translate connect to the outputs if True connectRotate ( bool ) ; [default: True] - Rotate connect to the outputs if True connectScale ( bool ) ; [default: True] - Scale connect to the outputs if True buildOutputs ( bool ) ; [default: True] - in case output array is empty or invalid, build outpus as outputbuildType and outputBuildName outputBuildSuffix ( str ) ; [default: OutSample] - suffix fom built outputs, if chosen to build buildType ( int ) - if buildOutputs is executing, build based on this type. buildVisGeo ( bool ) - build axisVisGeo for the samples (debug mode) buildVisCubes ( bool ) - build axisVisGeo for the samples (debug mode) reverseNode Constructor: reverseNode(inputA = None, output = None, kwargs) Return: None Arguments: inputA ( str ) ; [default: None] output ( str ) ; [default: None] kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: reverse] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True setAttrAttempt Constructor: setAttrAttempt(nodeAttr, value, valType) Return: None Arguments: nodeAttr value valType Keyword Arguments:","title":"Nodes"},{"location":"nodes/#nodes","text":"=== Author: Assaf Ben Zur === Mns nodes utility module. All node creation functions are covered by this module","title":"nodes"},{"location":"nodes/#defenitions","text":"","title":"Defenitions"},{"location":"nodes/#adlnode","text":"Constructor: adlNode(input1 = None, input2 = None, output = None, kwargs) Return: None Arguments: input1 ( str ) ; [default: None] input2 ( str ) ; [default: None] output ( str ) ; [default: None] kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: addDoubleLinear] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True","title":"adlNode"},{"location":"nodes/#buildgeoaxisvis","text":"Utility aid function: Creates a Axis-Vis geometry object based on parameters Constructor: buildGeoAxisVis( kwargs) Return: MnsNameStd (created vis-geo object) Arguments: kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: pointsOnCurve] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True scale ( int ) ; [default: 1] - Relative to parent axisSubdevision ( int ) ; [default: 16] - Geometry cylinder axis subdevision cylinderWidth ( float ) ; [default: 0.015] deleteAll ( bool ) - If true, do not attempt to create any objects- instead look for any existing objects and delete them","title":"buildGeoAxisVis"},{"location":"nodes/#buildgeoaxisvisforparents","text":"Utility aid function. Created an Axis-Vis geometry object from each object within the list passed in. Constructor: buildGeoAxisVisForParents( kwargs) Return: None Arguments: kwargs Keyword Arguments: parentObjs ( list ) ; [default: [' ']] - If parent is empty, visGeo will not build parentMethod ( int ) scale ( int ) ; [default: 1] - Relative to parent axisSubdevision ( int ) ; [default: 16] - Geometry cylinder axis subdevision cylinderWidth ( float ) ; [default: 0.015] createNodeRelationship ( bool ) ; [default: True]","title":"buildGeoAxisVisForParents"},{"location":"nodes/#buildviscubesforpsocnode","text":"Single use function. From a given MnsPointsOnCurve node, create output 'visCubes'. Constructor: buildVisCubesForPSOCNode(node = \"\", kwargs) Return: dict ('visCubesStds': output MnsNameStd list, 'nodes': output node list ) Arguments: node ( str ) ; [default: \"\"] kwargs Keyword Arguments: gapWidth ( float ) ; [default: 0.1]","title":"buildVisCubesForPSOCNode"},{"location":"nodes/#choicenode","text":"Constructor: choiceNode(inputs = [], output = None, kwargs) Return: None Arguments: inputs ( list ) ; [default: []] output ( str ) ; [default: None] kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: choice] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True","title":"choiceNode"},{"location":"nodes/#conditionnode","text":"Constructor: conditionNode(firstTerm = None, secondTerm = None, colorIfTrue = None, colorIfFalse = None, outColor = None, kwargs) Return: None Arguments: firstTerm ( str ) ; [default: None] secondTerm ( str ) ; [default: None] colorIfTrue ( str ) ; [default: None] colorIfFalse ( str ) ; [default: None] outColor ( str ) ; [default: None] kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: condition] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID operation ( int ) incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True","title":"conditionNode"},{"location":"nodes/#connectattrattempt","text":"Constructor: connectAttrAttempt(attrA, nodeAttr) Return: None Arguments: attrA nodeAttr Keyword Arguments:","title":"connectAttrAttempt"},{"location":"nodes/#connectsetattempt","text":"Constructor: connectSetAttempt(attrA, nodeAttr, valType) Return: None Arguments: attrA nodeAttr valType Keyword Arguments:","title":"connectSetAttempt"},{"location":"nodes/#imageplanenode","text":"Constructor: imagePlaneNode(camera = None, kwargs) Return: None Arguments: camera ( str ) ; [default: None] kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: imagePlane] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True","title":"imagePlaneNode"},{"location":"nodes/#mdnode","text":"Constructor: mdNode(input1 = None, input2 = None, output = None, kwargs) Return: None Arguments: input1 ( str ) ; [default: None] input2 ( str ) ; [default: None] output ( str ) ; [default: None] kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: multDev] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID operation ( int ) ; [default: 1] incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True","title":"mdNode"},{"location":"nodes/#mdlnode","text":"Constructor: mdlNode(input1 = None, input2 = None, output = None, kwargs) Return: None Arguments: input1 ( str ) ; [default: None] input2 ( str ) ; [default: None] output ( str ) ; [default: None] kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: multDoubleLinear] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True","title":"mdlNode"},{"location":"nodes/#mnsannotatenode","text":"Creates an mnsAnnotateNode node based on specified parameters and outputs. Input as a node.channel list. Constructor: mnsAnnotateNode( kwargs) Return: dict ('node': MnsNameStd) Arguments: kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: annotate] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True attributes ( list ) ; [default: [' ']] nameOnlyMode ( bool )","title":"mnsAnnotateNode"},{"location":"nodes/#mnsbuildtransformscurvenode","text":"Creates an mnsBuildTransformsCurveNode node based on specified parameters and outputs. Constructor: mnsBuildTransformsCurveNode( kwargs) Return: dict ('transforms': input transforms list, 'outCurve': built output curve MnsNameStd, 'outOffsetCurve': built output up-curve MnsNameStd, 'node': Created node MnsNameStd) Arguments: kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: buildTransformsCurveCurve] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True transforms ( list ) ; [default: [' ']] - transforms to build the curve from buildOffsetCurve ( bool ) - Node's 'buildOffsetCurve' attribute offsetCurveSuffix ( str ) ; [default: Up] - Up curve creation name body suffix buildMode ( int ) - Node's buildMode attribute tangentDirection ( int ) - Node's tangentDirection attribute tangentLength ( float ) ; [default: 1.0] - Node's tangentLength attribute hermiteSteps ( int ) ; [default: 5] - Node's hermiteSteps attribute degree ( int ) ; [default: 3] - Node's degree attribute offsetType ( int ) - Node's offsetType attribute offsetX ( float ) - Node's offsetX attribute offsetY ( float ) - Node's offsetY attribute offsetZ ( float ) - Node's offsetZ attribute reverse ( bool ) - Node's reverse attribute","title":"mnsBuildTransformsCurveNode"},{"location":"nodes/#mnscameragaterationode","text":"Constructor: mnsCameraGateRatioNode( kwargs) Return: None Arguments: kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: cameraGateRatio] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True camera ( str ) widthInput ( str ) heightInput ( str )","title":"mnsCameraGateRatioNode"},{"location":"nodes/#mnsiksolver","text":"Constructor: mnsIKSolver( kwargs) Return: None Arguments: kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: ikSolver] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True blend ( float ) roll ( float ) slide ( float ) softness ( float ) stretchLimit ( float ) ; [default: 1.0] aimAxis ( int ) ; [default: 1] - Node's 'aimAxis' attribute upAxis ( int ) ; [default: 2] - Node's 'upAxis' attribute boneLengthA ( float ) ; [default: 1.0] boneLengthB ( float ) ; [default: 1.0] rootPos ( str ) midPos ( str ) endPos ( str ) limbRoot ( str ) ikHandle ( str ) poleVector ( str ) outputRoot ( str ) outputMid ( str ) outputEnd ( str )","title":"mnsIKSolver"},{"location":"nodes/#mnsmatrixconstraintnode","text":"Creates an mnsMatrixConstraintNode node based on specified parameters and outputs. Constructor: mnsMatrixConstraintNode( kwargs) Return: dict ('nameStds': Created MnsNameStd list) Arguments: kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: matrixConstraint] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True targets ( list ) ; [default: [' ']] - Tragets to constrain sources ( list ) ; [default: [' ']] - Sources to constrain the targets to maintainOffset ( bool ) - Node's maintainOffset attribute connectTranslate ( bool ) ; [default: True] - Connect Translate if True connectRotate ( bool ) ; [default: True] - Connect Rotate if True connectScale ( bool ) ; [default: True] - Connect Scale if True","title":"mnsMatrixConstraintNode"},{"location":"nodes/#mnsnoderelationshipnode","text":"Constructor: mnsNodeRelationshipNode( kwargs) Return: None Arguments: kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: nodeRelationship] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True master ( str ) ; [default: None] slaves ( list ) ; [default: [' ']]","title":"mnsNodeRelationshipNode"},{"location":"nodes/#mnspointsoncurvenode","text":"Creates an mnsPointOnCurve node based on specified parameters and outputs. A 'buildOutputs' parameter is defaulted to True to build output (of a choice of any mnsType). Constructor: mnsPointsOnCurveNode( kwargs) Return: dict ('node': MnsNameStd, 'samplesSTDs': output MnsNameStd list, 'samples': output node list) Arguments: kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: pointsOnCurve] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True inputCurve ( str ) - name of the curve object to connect as input curve into the node. Setting as nothing or an invalid name will result in nothing connected inputUpCurve ( str ) - name of the up-curve object to connect as input up-curve into the node. Setting as nothing or an invalid name will result in nothing connected transforms ( list ) ; [default: [' ']] - array of object to output to buildMode ( int ) - Node's build mode attribute numOutputs ( int ) ; [default: 10] - set the number of outputs or samples to be outputed from the node doRoatate ( bool ) ; [default: True] - Node's 'doRotate' attribute rotateMode ( int ) - Node's 'rotateMode' attribute upMode ( int ) ; [default: 1] - Node's 'upMode' attribute aimAxis ( int ) - Node's 'aimAxis' attribute upAxis ( int ) ; [default: 1] - Node's 'upAxis' attribute doScale ( bool ) ; [default: True] - Node's 'doScale' attribute doSpring ( bool ) - Node's 'doSpring' attribute connectTranslate ( bool ) ; [default: True] - Translate connect to the outputs if True connectRotate ( bool ) ; [default: True] - Rotate connect to the outputs if True connectScale ( bool ) ; [default: True] - Scale connect to the outputs if True buildOutputs ( bool ) ; [default: True] - in case output array is empty or invalid, build outpus as outputbuildType and outputBuildName outputBuildSuffix ( str ) ; [default: OutSample] - suffix fom built outputs, if chosen to build buildType ( int ) - if buildOutputs is executing, build based on this type. buildVisGeo ( bool ) - build axisVisGeo for the samples (debug mode) buildVisCubes ( bool ) - build axisVisGeo for the samples (debug mode)","title":"mnsPointsOnCurveNode"},{"location":"nodes/#reversenode","text":"Constructor: reverseNode(inputA = None, output = None, kwargs) Return: None Arguments: inputA ( str ) ; [default: None] output ( str ) ; [default: None] kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: reverse] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True","title":"reverseNode"},{"location":"nodes/#setattrattempt","text":"Constructor: setAttrAttempt(nodeAttr, value, valType) Return: None Arguments: nodeAttr value valType Keyword Arguments:","title":"setAttrAttempt"},{"location":"picker/","text":"picker Classes MnsPicker [Class] Constructor: MnsPicker( parent ( str ) ; [default: mnsUIUtils.get_maya_window()]) Inherits from: form_class, base_class Class Members: iconsDir rigTop pickerBase btnDrawDict Methods: acquirePickerSettingsWin [method] connectSignals [method] destroyUI [method] initializeView [method] loadWindow [method] setBGImage [method] setButtonHiddenStateBasedOnType [method] drawPlgButton [method] getPlgPositionandSize [method] btnClickedTrigger [method] editBtnTrigger [method] openMenu [method] MnsPicker methods acquirePickerSettingsWin [ MnsPicker class method] Constructor: acquirePickerSettingsWin(self) Return: None Arguments: self Optional Arguments: connectSignals [ MnsPicker class method] Constructor: connectSignals(self) Return: None Arguments: self Optional Arguments: destroyUI [ MnsPicker class method] Constructor: destroyUI(self) Return: None Arguments: self Optional Arguments: initializeView [ MnsPicker class method] Constructor: initializeView(self) Return: None Arguments: self Optional Arguments: loadWindow [ MnsPicker class method] Constructor: loadWindow(self) Return: None Arguments: self Optional Arguments: setBGImage [ MnsPicker class method] Constructor: setBGImage(self) Return: None Arguments: self Optional Arguments: setButtonHiddenStateBasedOnType [ MnsPicker class method] Constructor: setButtonHiddenStateBasedOnType(self) Return: None Arguments: self Optional Arguments: drawPlgButton [ MnsPicker class method] Constructor: drawPlgButton(self, plg) Return: None Arguments: self plg Optional Arguments: getPlgPositionandSize [ MnsPicker class method] Constructor: getPlgPositionandSize(self, plg) Return: None Arguments: self plg Optional Arguments: btnClickedTrigger [ MnsPicker class method] Constructor: btnClickedTrigger(self, plgBtn) Return: None Arguments: self plgBtn Optional Arguments: editBtnTrigger [ MnsPicker class method] Constructor: editBtnTrigger(self, plgBtn) Return: None Arguments: self plgBtn Optional Arguments: openMenu [ MnsPicker class method] Constructor: openMenu(self, plgBtn, position) Return: None Arguments: self plgBtn position Optional Arguments: pickerQPushButton [Class] Constructor: pickerQPushButton( parent ( str ) ; [default: None]) Inherits from: QtWidgets.QPushButton Class Members: plgNode clickOffset Methods: mouseMoveEvent [method] mouseReleaseEvent [method] pickerQPushButton methods mouseMoveEvent [ pickerQPushButton class method] Constructor: mouseMoveEvent(self, QMouseEvent) Return: None Arguments: self QMouseEvent Optional Arguments: mouseReleaseEvent [ pickerQPushButton class method] Constructor: mouseReleaseEvent(self, QMouseEvent) Return: None Arguments: self QMouseEvent Optional Arguments: Defenitions loadPicker Constructor: loadPicker() Return: None Arguments: Keyword Arguments:","title":"Picker"},{"location":"picker/#picker","text":"","title":"picker"},{"location":"picker/#classes","text":"","title":"Classes"},{"location":"picker/#mnspicker-class","text":"Constructor: MnsPicker( parent ( str ) ; [default: mnsUIUtils.get_maya_window()]) Inherits from: form_class, base_class Class Members: iconsDir rigTop pickerBase btnDrawDict Methods: acquirePickerSettingsWin [method] connectSignals [method] destroyUI [method] initializeView [method] loadWindow [method] setBGImage [method] setButtonHiddenStateBasedOnType [method] drawPlgButton [method] getPlgPositionandSize [method] btnClickedTrigger [method] editBtnTrigger [method] openMenu [method]","title":"MnsPicker [Class]"},{"location":"picker/#mnspicker-methods","text":"","title":"MnsPicker  methods"},{"location":"picker/#pickerqpushbutton-class","text":"Constructor: pickerQPushButton( parent ( str ) ; [default: None]) Inherits from: QtWidgets.QPushButton Class Members: plgNode clickOffset Methods: mouseMoveEvent [method] mouseReleaseEvent [method]","title":"pickerQPushButton [Class]"},{"location":"picker/#pickerqpushbutton-methods","text":"","title":"pickerQPushButton  methods"},{"location":"picker/#defenitions","text":"","title":"Defenitions"},{"location":"picker/#loadpicker","text":"Constructor: loadPicker() Return: None Arguments: Keyword Arguments:","title":"loadPicker"},{"location":"plgSettings/","text":"plgSettings Classes MnsPLGSettingsUI [Class] Constructor: MnsPLGSettingsUI( parent ( str ) ; [default: mnsUIUtils.get_maya_window()]) Inherits from: form_class, base_class Class Members: iconsDir pickerWin relatedButton currentPlgNode Methods: acquirePickerWin [method] addSceneSelectedControls [method] clearControls [method] clearScript [method] clearView [method] connectSignals [method] createAndLoadPlg [method] initView [method] loadWindow [method] refreshPickerWindow [method] removeSceneSelectedControls [method] replaceControls [method] runScript [method] selectControls [method] updateActionScript [method] updateButtonColor [method] updateButtonFont [method] updateButtonText [method] updateButtonTextColor [method] updateControlsSelect [method] updateCtrlGroup [method] updatePre [method] updateSide [method] loadSelection [method] acquireRelatedButtonForPlg [method] updateButtonFontSize [method] updateScale [method] MnsPLGSettingsUI methods acquirePickerWin [ MnsPLGSettingsUI class method] Constructor: acquirePickerWin(self) Return: None Arguments: self Optional Arguments: addSceneSelectedControls [ MnsPLGSettingsUI class method] Constructor: addSceneSelectedControls(self) Return: None Arguments: self Optional Arguments: clearControls [ MnsPLGSettingsUI class method] Constructor: clearControls(self) Return: None Arguments: self Optional Arguments: clearScript [ MnsPLGSettingsUI class method] Constructor: clearScript(self) Return: None Arguments: self Optional Arguments: clearView [ MnsPLGSettingsUI class method] Constructor: clearView(self) Return: None Arguments: self Optional Arguments: connectSignals [ MnsPLGSettingsUI class method] Constructor: connectSignals(self) Return: None Arguments: self Optional Arguments: createAndLoadPlg [ MnsPLGSettingsUI class method] Constructor: createAndLoadPlg(self) Return: None Arguments: self Optional Arguments: initView [ MnsPLGSettingsUI class method] Constructor: initView(self) Return: None Arguments: self Optional Arguments: loadWindow [ MnsPLGSettingsUI class method] Constructor: loadWindow(self) Return: None Arguments: self Optional Arguments: refreshPickerWindow [ MnsPLGSettingsUI class method] Constructor: refreshPickerWindow(self) Return: None Arguments: self Optional Arguments: removeSceneSelectedControls [ MnsPLGSettingsUI class method] Constructor: removeSceneSelectedControls(self) Return: None Arguments: self Optional Arguments: replaceControls [ MnsPLGSettingsUI class method] Constructor: replaceControls(self) Return: None Arguments: self Optional Arguments: runScript [ MnsPLGSettingsUI class method] Constructor: runScript(self) Return: None Arguments: self Optional Arguments: selectControls [ MnsPLGSettingsUI class method] Constructor: selectControls(self) Return: None Arguments: self Optional Arguments: updateActionScript [ MnsPLGSettingsUI class method] Constructor: updateActionScript(self) Return: None Arguments: self Optional Arguments: updateButtonColor [ MnsPLGSettingsUI class method] Constructor: updateButtonColor(self) Return: None Arguments: self Optional Arguments: updateButtonFont [ MnsPLGSettingsUI class method] Constructor: updateButtonFont(self) Return: None Arguments: self Optional Arguments: updateButtonText [ MnsPLGSettingsUI class method] Constructor: updateButtonText(self) Return: None Arguments: self Optional Arguments: updateButtonTextColor [ MnsPLGSettingsUI class method] Constructor: updateButtonTextColor(self) Return: None Arguments: self Optional Arguments: updateControlsSelect [ MnsPLGSettingsUI class method] Constructor: updateControlsSelect(self) Return: None Arguments: self Optional Arguments: updateCtrlGroup [ MnsPLGSettingsUI class method] Constructor: updateCtrlGroup(self) Return: None Arguments: self Optional Arguments: updatePre [ MnsPLGSettingsUI class method] Constructor: updatePre(self) Return: None Arguments: self Optional Arguments: updateSide [ MnsPLGSettingsUI class method] Constructor: updateSide(self) Return: None Arguments: self Optional Arguments: loadSelection [ MnsPLGSettingsUI class method] Constructor: loadSelection(self, kwargs) Return: None Arguments: self kwargs Optional Arguments: acquireRelatedButtonForPlg [ MnsPLGSettingsUI class method] Constructor: acquireRelatedButtonForPlg(self, plg) Return: None Arguments: self plg Optional Arguments: updateButtonFontSize [ MnsPLGSettingsUI class method] Constructor: updateButtonFontSize(self, size) Return: None Arguments: self size Optional Arguments: updateScale [ MnsPLGSettingsUI class method] Constructor: updateScale(self, size, kwargs) Return: None Arguments: self size kwargs Optional Arguments: Defenitions loadPlgSettings Constructor: loadPlgSettings() Return: None Arguments: Keyword Arguments:","title":"plgSettings"},{"location":"plgSettings/#plgsettings","text":"","title":"plgSettings"},{"location":"plgSettings/#classes","text":"","title":"Classes"},{"location":"plgSettings/#mnsplgsettingsui-class","text":"Constructor: MnsPLGSettingsUI( parent ( str ) ; [default: mnsUIUtils.get_maya_window()]) Inherits from: form_class, base_class Class Members: iconsDir pickerWin relatedButton currentPlgNode Methods: acquirePickerWin [method] addSceneSelectedControls [method] clearControls [method] clearScript [method] clearView [method] connectSignals [method] createAndLoadPlg [method] initView [method] loadWindow [method] refreshPickerWindow [method] removeSceneSelectedControls [method] replaceControls [method] runScript [method] selectControls [method] updateActionScript [method] updateButtonColor [method] updateButtonFont [method] updateButtonText [method] updateButtonTextColor [method] updateControlsSelect [method] updateCtrlGroup [method] updatePre [method] updateSide [method] loadSelection [method] acquireRelatedButtonForPlg [method] updateButtonFontSize [method] updateScale [method]","title":"MnsPLGSettingsUI [Class]"},{"location":"plgSettings/#mnsplgsettingsui-methods","text":"","title":"MnsPLGSettingsUI  methods"},{"location":"plgSettings/#defenitions","text":"","title":"Defenitions"},{"location":"plgSettings/#loadplgsettings","text":"Constructor: loadPlgSettings() Return: None Arguments: Keyword Arguments:","title":"loadPlgSettings"},{"location":"pluginRelease/","text":"pluginRelease PluginRelease UI Class. === Author: Assaf Ben Zur === This admin util is used to procedurally release the mnsPlugins library and version control it. The UI will find c++ projects based on a directory (which can be changed), and will allow the user (admin) to add it to the next build. On top of that, the UI will find the latest released version and extract the existing library within it, and update the release colums accordingly. In case a plugin build exists in the latest version, but it's build project isn't available, the plugin will add to the release option with a flag \"[version]\"- This means that the plugin can only be copied from the version selected to the next release- it cannot bild. Of course this behaviour means that the internal version of the plugin will not change (expected behaviour) to inform the user of the ACTUAL plugin version. This Tool is meant to BUILD the project on each release as opposed to getting a copy of n .mll file. This means that the VS project will have to be maintained (expected) in order to be released- hence keeping up to date with maya's releases. The tool contains a version release choice between patch/minor/major and none. All mnsReleases, including this tool will mark a version with a suffix of the path version . a dateTime stamp. This tool also includes a maya version choice for release which will access a different build configuration within the VS project. The tool accesses the version parameter using a custom macro inserted into the VS project- which will be written with the user version choice- in order for the user to see the correct version when using the plugin-manager \"info\". Classes MnsPluginBuild [Class] MnsPluginBuild Class. A conviniency class. This class will contain eixsting plugin builds. Should contain a plugin name, directory, buildAvailable (bool), and a prevVerDirectory if a build is not available\" Used to access information in a clean manner. Constructor: MnsPluginBuild( name ( str ) ; [default: \"\"], direct ( str ) ; [default: \"\"], buildAvailable ( bool ) ; [default: False], prevVerDirectory ( str ) ; [default: \"\"]) Inherits from: object Class Members: pluginName pluginDirectory buildAvailable prevVerDirectory MnsPluginRelease [Class] pluginRelease UI class Constructor: MnsPluginRelease( parent ( str ) ; [default: mnsUIUtils.get_maya_window()]) Inherits from: form_class, base_class Class Members: pluginBuilds existingPluginNames existingVersionsFoundNames Methods: selectDevDir [method] selectRelDir [method] connectSignals [method] getNewVerString [method] getVersionsForBuild [method] getLastestReleaseVer [method] initExistingDirs [method] releasePluginVer [method] loadWindow [method] sortLists [method] dirChanged [method] splitVerStringToList [method] MnsPluginRelease methods selectDevDir [ MnsPluginRelease class method] Change dev directory trigger action. Prompts a directory-select dialog for the user to change the dev directory. A directory change will trigger a 'text-changed' signal emit. Constructor: selectDevDir(self) Return: None Arguments: self Optional Arguments: selectRelDir [ MnsPluginRelease class method] Change release directory trigger action. Prompts a directory-select dialog for the user to change the release directory. A directory change will trigger a 'text-changed' signal emit. Constructor: selectRelDir(self) Return: None Arguments: self Optional Arguments: connectSignals [ MnsPluginRelease class method] Connect all the UI signals Constructor: connectSignals(self) Return: None Arguments: self Optional Arguments: getNewVerString [ MnsPluginRelease class method] Get a new vesrtion string based on user version element upgrade. Return as a string. Constructor: getNewVerString(self) Return: string (new version id as string) Arguments: self Optional Arguments: getVersionsForBuild [ MnsPluginRelease class method] Get all valid maya versions for the plugin build directory passed. Constructor: getVersionsForBuild(self, buildDir) Return: list (compatibleVersions) Arguments: self buildDir Optional Arguments: getLastestReleaseVer [ MnsPluginRelease class method] Get the latest version for the build directory Constructor: getLastestReleaseVer(self) Return: None Arguments: self Optional Arguments: initExistingDirs [ MnsPluginRelease class method] Initialize existing directory. Find all available builds for the selected directory. Constructor: initExistingDirs(self) Return: None Arguments: self Optional Arguments: releasePluginVer [ MnsPluginRelease class method] Main version release button trigger. Compiles all needed information based on user UI slections, and triggers a new version build. Constructor: releasePluginVer(self) Return: None Arguments: self Optional Arguments: loadWindow [ MnsPluginRelease class method] Main window load Constructor: loadWindow(self) Return: None Arguments: self Optional Arguments: sortLists [ MnsPluginRelease class method] Simple function to re-sort both culomn items. Used Throughout to simply update the display Constructor: sortLists(self) Return: None Arguments: self Optional Arguments: dirChanged [ MnsPluginRelease class method] User directory changed trigger action Constructor: dirChanged(self) Return: None Arguments: self Optional Arguments: splitVerStringToList [ MnsPluginRelease class method] split version string to a path/minor/major/timestamp elements Constructor: splitVerStringToList(self, versionString) Return: list (versionString) Arguments: self versionString Optional Arguments:","title":"pluginRelease"},{"location":"pluginRelease/#pluginrelease","text":"PluginRelease UI Class. === Author: Assaf Ben Zur === This admin util is used to procedurally release the mnsPlugins library and version control it. The UI will find c++ projects based on a directory (which can be changed), and will allow the user (admin) to add it to the next build. On top of that, the UI will find the latest released version and extract the existing library within it, and update the release colums accordingly. In case a plugin build exists in the latest version, but it's build project isn't available, the plugin will add to the release option with a flag \"[version]\"- This means that the plugin can only be copied from the version selected to the next release- it cannot bild. Of course this behaviour means that the internal version of the plugin will not change (expected behaviour) to inform the user of the ACTUAL plugin version. This Tool is meant to BUILD the project on each release as opposed to getting a copy of n .mll file. This means that the VS project will have to be maintained (expected) in order to be released- hence keeping up to date with maya's releases. The tool contains a version release choice between patch/minor/major and none. All mnsReleases, including this tool will mark a version with a suffix of the path version . a dateTime stamp. This tool also includes a maya version choice for release which will access a different build configuration within the VS project. The tool accesses the version parameter using a custom macro inserted into the VS project- which will be written with the user version choice- in order for the user to see the correct version when using the plugin-manager \"info\".","title":"pluginRelease"},{"location":"pluginRelease/#classes","text":"","title":"Classes"},{"location":"pluginRelease/#mnspluginbuild-class","text":"MnsPluginBuild Class. A conviniency class. This class will contain eixsting plugin builds. Should contain a plugin name, directory, buildAvailable (bool), and a prevVerDirectory if a build is not available\" Used to access information in a clean manner. Constructor: MnsPluginBuild( name ( str ) ; [default: \"\"], direct ( str ) ; [default: \"\"], buildAvailable ( bool ) ; [default: False], prevVerDirectory ( str ) ; [default: \"\"]) Inherits from: object Class Members: pluginName pluginDirectory buildAvailable prevVerDirectory","title":"MnsPluginBuild [Class]"},{"location":"pluginRelease/#mnspluginrelease-class","text":"pluginRelease UI class Constructor: MnsPluginRelease( parent ( str ) ; [default: mnsUIUtils.get_maya_window()]) Inherits from: form_class, base_class Class Members: pluginBuilds existingPluginNames existingVersionsFoundNames Methods: selectDevDir [method] selectRelDir [method] connectSignals [method] getNewVerString [method] getVersionsForBuild [method] getLastestReleaseVer [method] initExistingDirs [method] releasePluginVer [method] loadWindow [method] sortLists [method] dirChanged [method] splitVerStringToList [method]","title":"MnsPluginRelease [Class]"},{"location":"pluginRelease/#mnspluginrelease-methods","text":"","title":"MnsPluginRelease  methods"},{"location":"prefixSuffix/","text":"prefixSuffix === Author: Assaf Ben Zur === All global prefix and suffix declerations. All global Mns pre-defined dictionaries creation (i.e. mnsTypeDict/mnsSidesDict/mnsBuildObjectTypes) This module also holds the MnsTypeStd class and the MnsNameStd class. This module holds any global dict creation defenitions used in MNS. Classes MnsNameStd [Class] This class holds simple attributes to extend pythos's 'node' object in order to preserve additional information regarding a node. Any name related methods are held by this class. Constructor: MnsNameStd( **kwargs ) Inherits from: object Class Members: node side body type id alpha suffix name comment Methods: buildName [method] findNextAlphaIncrement [method] findNextIncrement [method] splitName [method] MnsNameStd methods buildName [ MnsNameStd class method] Build the instance's name based on the current class members defenitions. Constructor: buildName(self) Return: None Arguments: self Optional Arguments: findNextAlphaIncrement [ MnsNameStd class method] Recursive. Find next available Alpha id increment Constructor: findNextAlphaIncrement(self) Return: None Arguments: self Optional Arguments: findNextIncrement [ MnsNameStd class method] Recursive. Find next available id increment Constructor: findNextIncrement(self) Return: None Arguments: self Optional Arguments: splitName [ MnsNameStd class method] This function splits a given node name as string into an MnsNameStd object Constructor: splitName(self) Return: None Arguments: self Optional Arguments: MnsTypeStd [Class] This class holds simple attributes to extend pythos's 'type' object in order to preserve additional information regarding a node's type. Constructor: MnsTypeStd( **kwargs ) Inherits from: object Class Members: name suffix createName comment Defenitions buildMultKeysDict Build a multy key dict for the given item list Constructor: buildMultKeysDict(items = []) Return: dict Arguments: items ( list ) ; [default: []] Keyword Arguments: buildOptionArrayFromDict Construct an option list from the given dictionary Constructor: buildOptionArrayFromDict(dict = {}, kwargs) Return: list Arguments: dict ( dict ) ; [default: {}] kwargs Keyword Arguments: buildTypeDict Build a dictionary for a given list, adding index (int) key and an index (string) key for each item Constructor: buildTypeDict(namesArray = []) Return: dict Arguments: namesArray ( list ) ; [default: []] Keyword Arguments:","title":"prefixSuffix"},{"location":"prefixSuffix/#prefixsuffix","text":"=== Author: Assaf Ben Zur === All global prefix and suffix declerations. All global Mns pre-defined dictionaries creation (i.e. mnsTypeDict/mnsSidesDict/mnsBuildObjectTypes) This module also holds the MnsTypeStd class and the MnsNameStd class. This module holds any global dict creation defenitions used in MNS.","title":"prefixSuffix"},{"location":"prefixSuffix/#classes","text":"","title":"Classes"},{"location":"prefixSuffix/#mnsnamestd-class","text":"This class holds simple attributes to extend pythos's 'node' object in order to preserve additional information regarding a node. Any name related methods are held by this class. Constructor: MnsNameStd( **kwargs ) Inherits from: object Class Members: node side body type id alpha suffix name comment Methods: buildName [method] findNextAlphaIncrement [method] findNextIncrement [method] splitName [method]","title":"MnsNameStd [Class]"},{"location":"prefixSuffix/#mnsnamestd-methods","text":"","title":"MnsNameStd  methods"},{"location":"prefixSuffix/#mnstypestd-class","text":"This class holds simple attributes to extend pythos's 'type' object in order to preserve additional information regarding a node's type. Constructor: MnsTypeStd( **kwargs ) Inherits from: object Class Members: name suffix createName comment","title":"MnsTypeStd [Class]"},{"location":"prefixSuffix/#defenitions","text":"","title":"Defenitions"},{"location":"prefixSuffix/#buildmultkeysdict","text":"Build a multy key dict for the given item list Constructor: buildMultKeysDict(items = []) Return: dict Arguments: items ( list ) ; [default: []] Keyword Arguments:","title":"buildMultKeysDict"},{"location":"prefixSuffix/#buildoptionarrayfromdict","text":"Construct an option list from the given dictionary Constructor: buildOptionArrayFromDict(dict = {}, kwargs) Return: list Arguments: dict ( dict ) ; [default: {}] kwargs Keyword Arguments:","title":"buildOptionArrayFromDict"},{"location":"prefixSuffix/#buildtypedict","text":"Build a dictionary for a given list, adding index (int) key and an index (string) key for each item Constructor: buildTypeDict(namesArray = []) Return: dict Arguments: namesArray ( list ) ; [default: []] Keyword Arguments:","title":"buildTypeDict"},{"location":"settingsGlobals/","text":"settingsGlobals MNS SETTING GLOBALS","title":"settingsGlobals"},{"location":"settingsGlobals/#settingsglobals","text":"MNS SETTING GLOBALS","title":"settingsGlobals"},{"location":"shelfs/","text":"the Mansur Shelfs","title":"the Mansur Shelfs"},{"location":"shelfs/#the-mansur-shelfs","text":"","title":"the Mansur Shelfs"},{"location":"string/","text":"string === Author: Assaf Ben Zur === This module covers all custom string operations used in MNS Defenitions camelCaseSplit Constructor: camelCaseSplit(ccString) Return: None Arguments: ccString Keyword Arguments: combineStringList Constructor: combineStringList(stringList = [], separatorS = \" \") Return: None Arguments: stringList ( list ) ; [default: []] separatorS ( str ) ; [default: \"\"] Keyword Arguments: flattenArray Flatten a given list into a single string, seperated by commas Constructor: flattenArray(array = []) Return: string Arguments: array ( list ) ; [default: []] Keyword Arguments: flattenArrayColon Flatten a given list into a single string, seperated by colons Constructor: flattenArrayColon(array = []) Return: string Arguments: array ( list ) ; [default: []] Keyword Arguments: flattenArrayKeepBracets Flatten a given list into a single string, seperated by commas, adding the open and close square brackets as string. Constructor: flattenArrayKeepBracets(array = []) Return: string Arguments: array ( list ) ; [default: []] Keyword Arguments: flattenArrayKeepBracetsAndStrings Flatten a given list into a single string, seperated by commas, adding the open and close square brackets as string as well as add the \" into the actual string elements. Constructor: flattenArrayKeepBracetsAndStrings(array = []) Return: string Arguments: array ( list ) ; [default: []] Keyword Arguments: flattenArraySpace Flatten a given list into a single string, seperated by spaces Constructor: flattenArraySpace(array = []) Return: string Arguments: array ( list ) ; [default: []] Keyword Arguments: stringConvertToString convert the input provided to a string, regardless of its type. Constructor: stringConvertToString(var) Return: None Arguments: var Keyword Arguments: stringMultiReplaceBySingle Replace all given string characters by the 'replaceBy' string given. Constructor: stringMultiReplaceBySingle(element = \"\", replaceStrings = [], replaceBy = \"\") Return: string Arguments: element ( str ) ; [default: \"\"] replaceStrings ( list ) ; [default: []] replaceBy ( str ) ; [default: \"\"] Keyword Arguments:","title":"String"},{"location":"string/#string","text":"=== Author: Assaf Ben Zur === This module covers all custom string operations used in MNS","title":"string"},{"location":"string/#defenitions","text":"","title":"Defenitions"},{"location":"string/#camelcasesplit","text":"Constructor: camelCaseSplit(ccString) Return: None Arguments: ccString Keyword Arguments:","title":"camelCaseSplit"},{"location":"string/#combinestringlist","text":"Constructor: combineStringList(stringList = [], separatorS = \" \") Return: None Arguments: stringList ( list ) ; [default: []] separatorS ( str ) ; [default: \"\"] Keyword Arguments:","title":"combineStringList"},{"location":"string/#flattenarray","text":"Flatten a given list into a single string, seperated by commas Constructor: flattenArray(array = []) Return: string Arguments: array ( list ) ; [default: []] Keyword Arguments:","title":"flattenArray"},{"location":"string/#flattenarraycolon","text":"Flatten a given list into a single string, seperated by colons Constructor: flattenArrayColon(array = []) Return: string Arguments: array ( list ) ; [default: []] Keyword Arguments:","title":"flattenArrayColon"},{"location":"string/#flattenarraykeepbracets","text":"Flatten a given list into a single string, seperated by commas, adding the open and close square brackets as string. Constructor: flattenArrayKeepBracets(array = []) Return: string Arguments: array ( list ) ; [default: []] Keyword Arguments:","title":"flattenArrayKeepBracets"},{"location":"string/#flattenarraykeepbracetsandstrings","text":"Flatten a given list into a single string, seperated by commas, adding the open and close square brackets as string as well as add the \" into the actual string elements. Constructor: flattenArrayKeepBracetsAndStrings(array = []) Return: string Arguments: array ( list ) ; [default: []] Keyword Arguments:","title":"flattenArrayKeepBracetsAndStrings"},{"location":"string/#flattenarrayspace","text":"Flatten a given list into a single string, seperated by spaces Constructor: flattenArraySpace(array = []) Return: string Arguments: array ( list ) ; [default: []] Keyword Arguments:","title":"flattenArraySpace"},{"location":"string/#stringconverttostring","text":"convert the input provided to a string, regardless of its type. Constructor: stringConvertToString(var) Return: None Arguments: var Keyword Arguments:","title":"stringConvertToString"},{"location":"string/#stringmultireplacebysingle","text":"Replace all given string characters by the 'replaceBy' string given. Constructor: stringMultiReplaceBySingle(element = \"\", replaceStrings = [], replaceBy = \"\") Return: string Arguments: element ( str ) ; [default: \"\"] replaceStrings ( list ) ; [default: []] replaceBy ( str ) ; [default: \"\"] Keyword Arguments:","title":"stringMultiReplaceBySingle"},{"location":"utility/","text":"utility === Author: Assaf Ben Zur === Global Core MNS utility module. This module holds any 'global' function used within MNS. A 'misc' style module. Defenitions addAttrToObj A global conditioned wrapper for adding attributes to object/objects Exceptions: 1. Object to add attr to was found non-existing or invalid. Abort. 2. The 'replace' flag wasn't set, and the attribute already exists. Abort. 3. Attr name wasn't passed in. Abort. 4. The attribute type passed doesn't match the attribute value passed. Abort. 5. min/max values were passed in, although the attr type is not an Int or a Float. Skip min/max values. 6. min/max values were passed, and the attr type is Int or Float, although the min/max values passed arn't matching the data type. Skip min/max. 7. The replace flag was set to True, but the attribute doesn't exist. Ignore replace flag. Constructor: addAttrToObj(objects = [], kwargs) Return: list (added attributes 'attr' objects list) Arguments: objects ( list ) ; [default: []] kwargs Keyword Arguments: name ( str ) - Added attribute name replace ( bool ) - If attr exists and this flag is set to True- delete the existing attribute then recreate according to parameters type ( str ) ; [default: string] - Added attribute type value ( str ) ; [default: None] - Added attribute value max ( str ) ; [default: None] - Added attribute max (only if float or int) min ( str ) ; [default: None] - Added attribute min (only if float or int) locked ( bool ) - Added attribute lock state cb ( bool ) ; [default: True] - Added attribute channelBox/Displayed state keyable ( bool ) ; [default: True] - Added attribute keyable state enumDefault ( int ) - If added attr is enum, set its default to this value addBlockClasIDToObj Constructor: addBlockClasIDToObj(objectA, kwargs) Return: None Arguments: objectA kwargs Keyword Arguments: checkIfObjExistsAndSet For the object passed in- three main cases: 1. If it is a 'PyNode' object, set it as the object to check. 2. If it is an MnsNameStd object,set it's .node property as the object to check. 3. If it is a string, assign it into a 'PyNode' obhect and set it as the object to check. Check whether the object exists in the current scene and valid. If so, return it. Else return None. Constructor: checkIfObjExistsAndSet( kwargs) Return: PyNode if valid, None if not. Arguments: kwargs Keyword Arguments: obj ( str ) - object to act on and return connectShapeColorRGB Constructor: connectShapeColorRGB(source = None, target = None) Return: None Arguments: source ( str ) ; [default: None] target ( str ) ; [default: None] Keyword Arguments: convertAlphaToInt Recursive. Convert an Alpha input into an Int ID. Infinite. Constructor: convertAlphaToInt(alpha = \"A\") Return: int Arguments: alpha ( str ) ; [default: \"A\"] Keyword Arguments: convertIntToAlpha Recursive. Convert an Int input into an Alpha ID. Infinite. Constructor: convertIntToAlpha(intA = 0) Return: string Arguments: intA ( int ) ; [default: 0] Keyword Arguments: convertNodeToNameStd Constructor: convertNodeToNameStd(node) Return: None Arguments: node Keyword Arguments: createAxisLamberts An axes colored lambert shaders creation function. Constructor: createAxisLamberts( kwargs) Return: dict ('X': xAxisLambert, 'Y': yAixsLambert, 'Z': zAxisLambert) Arguments: kwargs Keyword Arguments: doX ( bool ) ; [default: True] doY ( bool ) ; [default: True] doZ ( bool ) ; [default: True] deleteAll ( bool ) - If true, do not attempt to create any objects- instead look for any existing objects and delete them createNodeReturnNameStd A core major MNS function. This function creates a new node, based on it's type passed in, and it's name parameters passed in, and returns it as a MnsNameStd object. This function also contains the 'search for next valid name' functionallity: In case the given parameter set returns an object name that already exists within the current scene a 'Handle' functionallity will be triggered: - In case the 'IncrementAlpha' argument is Flase, recursivly increment the ID value until a new name slot is available within the scene. - In case it's Flase, do the same while incrementing the Alpha value instead. Unlike Maya's core behavior- This function tests whether an object name exists whithin the entire scene- not only whether it exists whithin the current hirarchy level. In a sequence manner creation- the Alpha/ID should be incremented within the caller function loop- meaning while bulding an item sequence the 'search' functionallity should not be used. Another funtionallity of this function is the 'Fix Shape Name' functionallity: A simple shpe children name test of an object (after creation) and a renaming them. Constructor: createNodeReturnNameStd( kwargs) Return: MnsNameStd Arguments: kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: pointsOnCurve] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True buildType ( int ) createBlkClassID ( bool ) createBlkCtrlTypeID ( bool ) blkCtrlTypeID ( int ) parentNode ( str ) ; [default: None] createOffsetGroup Constructor: createOffsetGroup(transformObject, kwargs) Return: None Arguments: transformObject kwargs Keyword Arguments: type ( str ) ; [default: offsetGrp] deleteFile A delete file global function that includes a pre-defined log write. Constructor: deleteFile(file) Return: None Arguments: file Keyword Arguments: distBetween Constructor: distBetween(transformA = None, transformB = None) Return: None Arguments: transformA ( str ) ; [default: None] transformB ( str ) ; [default: None] Keyword Arguments: fixShapesName Simple shape name fix function based on parent's name. Constructor: fixShapesName(objects = []) Return: None Arguments: objects ( list ) ; [default: []] Keyword Arguments: getFirstLevelParentForObject Get the top level parent for a given object. Constructor: getFirstLevelParentForObject(obj) Return: pyNode (top level parent) Arguments: obj Keyword Arguments: getNumLinesForDir Constructor: getNumLinesForDir(directory = \"D/mansurProject/mansur\") Return: None Arguments: directory ( str ) ; [default: \"D:/mansurProject/mansur\"] Keyword Arguments: getSideFromNode Constructor: getSideFromNode(node) Return: None Arguments: node Keyword Arguments: getTopParentForObj Constructor: getTopParentForObj(obj) Return: None Arguments: obj Keyword Arguments: getTopParentForSel Constructor: getTopParentForSel() Return: None Arguments: Keyword Arguments: importModuleFromPath Constructor: importModuleFromPath(path) Return: None Arguments: path Keyword Arguments: jointOrientToRotation Transfer all jointOrient attributes for the jnt hirerchy to rotations. Essentially bake the joint orient attributes for the joints. Constructor: jointOrientToRotation(topNode = None) Return: None Arguments: topNode ( str ) ; [default: None] Keyword Arguments: lockAndHideAllTransforms Constructor: lockAndHideAllTransforms(node = None, kwargs) Return: bool Arguments: node ( str ) ; [default: None] kwargs Keyword Arguments: lock ( bool ) keyable ( bool ) cb ( bool ) t ( bool ) ; [default: True] r ( bool ) ; [default: True] s ( bool ) ; [default: True] t ( bool ) ; [default: True] r ( bool ) ; [default: True] s ( bool ) ; [default: True] lockAndHideTransforms Constructor: lockAndHideTransforms(node = None, kwargs) Return: bool Arguments: node ( str ) ; [default: None] kwargs Keyword Arguments: lock ( bool ) keyable ( bool ) cb ( bool ) tx ( bool ) ; [default: True] ty ( bool ) ; [default: True] tz ( bool ) ; [default: True] rx ( bool ) ; [default: True] ry ( bool ) ; [default: True] rz ( bool ) ; [default: True] sx ( bool ) ; [default: True] sy ( bool ) ; [default: True] sz ( bool ) ; [default: True] objectArrayValidExistsCheckReturn MNS core object array validity check. Two main Cases for the mode parameter: 1. trueOnlyIfAllValid - Run through the objects and only if ALL of them are found existing and valid, return the array back to the caller. If a single item failed- Return None. 2. trueIfSomeValid - Check all the objects and return any or all of them based on validity. Constructor: objectArrayValidExistsCheckReturn( kwargs) Return: List (Valid object list), None (If found invalid) Arguments: kwargs Keyword Arguments: objectArray ( list ) ; [default: [' ']] - Objects input list mode ( int ) - Validity return mode readJson Constructor: readJson(fullPath) Return: None Arguments: fullPath Keyword Arguments: readSetteingFromFile Constructor: readSetteingFromFile(settingsPath) Return: None Arguments: settingsPath Keyword Arguments: returnIndexFromSideDict Constructor: returnIndexFromSideDict(dict, searchElement) Return: None Arguments: dict searchElement Keyword Arguments: returnKeyFromElementTypeDict Constructor: returnKeyFromElementTypeDict(dict, searchElement) Return: None Arguments: dict searchElement Keyword Arguments: returnNameStdChangeElement global MnsNameStd utility- Use this function to change any elemnt within a given MnsNameStd object based on keyword args given Constructor: returnNameStdChangeElement(nameStd = None, kwargs) Return: MnsNameStd Arguments: nameStd ( str ) ; [default: None] kwargs Keyword Arguments: autoRename ( bool ) ; [default: True] bodyPattern ( str ) ; [default: None] node ( str ) ; [default: nameStd.node] - change node parameter side ( str ) ; [default: nameStd.side] - change side parameter body ( str ) ; [default: nameStd.body] - change body parameter type ( str ) ; [default: nameStd.type] - change type parameter id ( str ) ; [default: nameStd.id] - change id parameter alpha ( str ) ; [default: nameStd.alpha] - change alpha parameter suffix ( str ) ; [default: nameStd.suffix] - change suffix comment ( str ) ; [default: nameStd.comment] - change comment parameter setAttr Constructor: setAttr(attr, value) Return: None Arguments: attr value Keyword Arguments: setCtrlColorIdx Global utility function: Change the shape color override to index type, and set to the input value index Constructor: setCtrlColorIdx(objects = [], colorIdx = 0) Return: None Arguments: objects ( list ) ; [default: []] colorIdx ( int ) ; [default: 0] Keyword Arguments: setCtrlColorRGB Global utility function: Change the shape color override to RGB type, and set to the input value RGB Constructor: setCtrlColorRGB(objects = [], color = (1,1,1)) Return: None Arguments: objects ( list ) ; [default: []] color ( str ) ; [default: (1] 1 1) Keyword Arguments: sortNameStdArrayByID Constructor: sortNameStdArrayByID(nameStdArray) Return: None Arguments: nameStdArray Keyword Arguments: splitDateTimeStringToList Split a 'dateTime' string to a major/minor/patch/timestemp list Constructor: splitDateTimeStringToList(dateTime = \"\") Return: list Arguments: dateTime ( str ) ; [default: \"\"] Keyword Arguments: splitEnumAttrToChannelControlList Constructor: splitEnumAttrToChannelControlList(enumAttrName, node) Return: None Arguments: enumAttrName node Keyword Arguments: splitEnumAttrToColorSchemeFloatTupleList Constructor: splitEnumAttrToColorSchemeFloatTupleList(enumAttrName, node) Return: None Arguments: enumAttrName node Keyword Arguments: splitEnumToStringList Constructor: splitEnumToStringList(enumAttrName, node) Return: None Arguments: enumAttrName node Keyword Arguments: splitNameStringToNameStd Split a given string object and return a MnsNameStd based on it's structure. Constructor: splitNameStringToNameStd(nameString = \"\") Return: MnsNameStd Arguments: nameString ( str ) ; [default: \"\"] Keyword Arguments: validateNameStd Constructor: validateNameStd(objectA) Return: None Arguments: objectA Keyword Arguments: writeJson Constructor: writeJson(directory, fileName, data = {}, kwargs) Return: None Arguments: directory fileName data ( dict ) ; [default: {}] kwargs Keyword Arguments: zeroJointOrient Zero all jointOrient attributes for the jnt hirerchy to rotations. Constructor: zeroJointOrient(topNode = None) Return: None Arguments: topNode ( str ) ; [default: None] Keyword Arguments: zeroTransforms Zero all available transforms for the given object passed in. Constructor: zeroTransforms(transform = \"\") Return: bool Arguments: transform ( str ) ; [default: \"\"] Keyword Arguments:","title":"Utility"},{"location":"utility/#utility","text":"=== Author: Assaf Ben Zur === Global Core MNS utility module. This module holds any 'global' function used within MNS. A 'misc' style module.","title":"utility"},{"location":"utility/#defenitions","text":"","title":"Defenitions"},{"location":"utility/#addattrtoobj","text":"A global conditioned wrapper for adding attributes to object/objects Exceptions: 1. Object to add attr to was found non-existing or invalid. Abort. 2. The 'replace' flag wasn't set, and the attribute already exists. Abort. 3. Attr name wasn't passed in. Abort. 4. The attribute type passed doesn't match the attribute value passed. Abort. 5. min/max values were passed in, although the attr type is not an Int or a Float. Skip min/max values. 6. min/max values were passed, and the attr type is Int or Float, although the min/max values passed arn't matching the data type. Skip min/max. 7. The replace flag was set to True, but the attribute doesn't exist. Ignore replace flag. Constructor: addAttrToObj(objects = [], kwargs) Return: list (added attributes 'attr' objects list) Arguments: objects ( list ) ; [default: []] kwargs Keyword Arguments: name ( str ) - Added attribute name replace ( bool ) - If attr exists and this flag is set to True- delete the existing attribute then recreate according to parameters type ( str ) ; [default: string] - Added attribute type value ( str ) ; [default: None] - Added attribute value max ( str ) ; [default: None] - Added attribute max (only if float or int) min ( str ) ; [default: None] - Added attribute min (only if float or int) locked ( bool ) - Added attribute lock state cb ( bool ) ; [default: True] - Added attribute channelBox/Displayed state keyable ( bool ) ; [default: True] - Added attribute keyable state enumDefault ( int ) - If added attr is enum, set its default to this value","title":"addAttrToObj"},{"location":"utility/#addblockclasidtoobj","text":"Constructor: addBlockClasIDToObj(objectA, kwargs) Return: None Arguments: objectA kwargs Keyword Arguments:","title":"addBlockClasIDToObj"},{"location":"utility/#checkifobjexistsandset","text":"For the object passed in- three main cases: 1. If it is a 'PyNode' object, set it as the object to check. 2. If it is an MnsNameStd object,set it's .node property as the object to check. 3. If it is a string, assign it into a 'PyNode' obhect and set it as the object to check. Check whether the object exists in the current scene and valid. If so, return it. Else return None. Constructor: checkIfObjExistsAndSet( kwargs) Return: PyNode if valid, None if not. Arguments: kwargs Keyword Arguments: obj ( str ) - object to act on and return","title":"checkIfObjExistsAndSet"},{"location":"utility/#connectshapecolorrgb","text":"Constructor: connectShapeColorRGB(source = None, target = None) Return: None Arguments: source ( str ) ; [default: None] target ( str ) ; [default: None] Keyword Arguments:","title":"connectShapeColorRGB"},{"location":"utility/#convertalphatoint","text":"Recursive. Convert an Alpha input into an Int ID. Infinite. Constructor: convertAlphaToInt(alpha = \"A\") Return: int Arguments: alpha ( str ) ; [default: \"A\"] Keyword Arguments:","title":"convertAlphaToInt"},{"location":"utility/#convertinttoalpha","text":"Recursive. Convert an Int input into an Alpha ID. Infinite. Constructor: convertIntToAlpha(intA = 0) Return: string Arguments: intA ( int ) ; [default: 0] Keyword Arguments:","title":"convertIntToAlpha"},{"location":"utility/#convertnodetonamestd","text":"Constructor: convertNodeToNameStd(node) Return: None Arguments: node Keyword Arguments:","title":"convertNodeToNameStd"},{"location":"utility/#createaxislamberts","text":"An axes colored lambert shaders creation function. Constructor: createAxisLamberts( kwargs) Return: dict ('X': xAxisLambert, 'Y': yAixsLambert, 'Z': zAxisLambert) Arguments: kwargs Keyword Arguments: doX ( bool ) ; [default: True] doY ( bool ) ; [default: True] doZ ( bool ) ; [default: True] deleteAll ( bool ) - If true, do not attempt to create any objects- instead look for any existing objects and delete them","title":"createAxisLamberts"},{"location":"utility/#createnodereturnnamestd","text":"A core major MNS function. This function creates a new node, based on it's type passed in, and it's name parameters passed in, and returns it as a MnsNameStd object. This function also contains the 'search for next valid name' functionallity: In case the given parameter set returns an object name that already exists within the current scene a 'Handle' functionallity will be triggered: - In case the 'IncrementAlpha' argument is Flase, recursivly increment the ID value until a new name slot is available within the scene. - In case it's Flase, do the same while incrementing the Alpha value instead. Unlike Maya's core behavior- This function tests whether an object name exists whithin the entire scene- not only whether it exists whithin the current hirarchy level. In a sequence manner creation- the Alpha/ID should be incremented within the caller function loop- meaning while bulding an item sequence the 'search' functionallity should not be used. Another funtionallity of this function is the 'Fix Shape Name' functionallity: A simple shpe children name test of an object (after creation) and a renaming them. Constructor: createNodeReturnNameStd( kwargs) Return: MnsNameStd Arguments: kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: pointsOnCurve] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True buildType ( int ) createBlkClassID ( bool ) createBlkCtrlTypeID ( bool ) blkCtrlTypeID ( int ) parentNode ( str ) ; [default: None]","title":"createNodeReturnNameStd"},{"location":"utility/#createoffsetgroup","text":"Constructor: createOffsetGroup(transformObject, kwargs) Return: None Arguments: transformObject kwargs Keyword Arguments: type ( str ) ; [default: offsetGrp]","title":"createOffsetGroup"},{"location":"utility/#deletefile","text":"A delete file global function that includes a pre-defined log write. Constructor: deleteFile(file) Return: None Arguments: file Keyword Arguments:","title":"deleteFile"},{"location":"utility/#distbetween","text":"Constructor: distBetween(transformA = None, transformB = None) Return: None Arguments: transformA ( str ) ; [default: None] transformB ( str ) ; [default: None] Keyword Arguments:","title":"distBetween"},{"location":"utility/#fixshapesname","text":"Simple shape name fix function based on parent's name. Constructor: fixShapesName(objects = []) Return: None Arguments: objects ( list ) ; [default: []] Keyword Arguments:","title":"fixShapesName"},{"location":"utility/#getfirstlevelparentforobject","text":"Get the top level parent for a given object. Constructor: getFirstLevelParentForObject(obj) Return: pyNode (top level parent) Arguments: obj Keyword Arguments:","title":"getFirstLevelParentForObject"},{"location":"utility/#getnumlinesfordir","text":"Constructor: getNumLinesForDir(directory = \"D/mansurProject/mansur\") Return: None Arguments: directory ( str ) ; [default: \"D:/mansurProject/mansur\"] Keyword Arguments:","title":"getNumLinesForDir"},{"location":"utility/#getsidefromnode","text":"Constructor: getSideFromNode(node) Return: None Arguments: node Keyword Arguments:","title":"getSideFromNode"},{"location":"utility/#gettopparentforobj","text":"Constructor: getTopParentForObj(obj) Return: None Arguments: obj Keyword Arguments:","title":"getTopParentForObj"},{"location":"utility/#gettopparentforsel","text":"Constructor: getTopParentForSel() Return: None Arguments: Keyword Arguments:","title":"getTopParentForSel"},{"location":"utility/#importmodulefrompath","text":"Constructor: importModuleFromPath(path) Return: None Arguments: path Keyword Arguments:","title":"importModuleFromPath"},{"location":"utility/#jointorienttorotation","text":"Transfer all jointOrient attributes for the jnt hirerchy to rotations. Essentially bake the joint orient attributes for the joints. Constructor: jointOrientToRotation(topNode = None) Return: None Arguments: topNode ( str ) ; [default: None] Keyword Arguments:","title":"jointOrientToRotation"},{"location":"utility/#lockandhidealltransforms","text":"Constructor: lockAndHideAllTransforms(node = None, kwargs) Return: bool Arguments: node ( str ) ; [default: None] kwargs Keyword Arguments: lock ( bool ) keyable ( bool ) cb ( bool ) t ( bool ) ; [default: True] r ( bool ) ; [default: True] s ( bool ) ; [default: True] t ( bool ) ; [default: True] r ( bool ) ; [default: True] s ( bool ) ; [default: True]","title":"lockAndHideAllTransforms"},{"location":"utility/#lockandhidetransforms","text":"Constructor: lockAndHideTransforms(node = None, kwargs) Return: bool Arguments: node ( str ) ; [default: None] kwargs Keyword Arguments: lock ( bool ) keyable ( bool ) cb ( bool ) tx ( bool ) ; [default: True] ty ( bool ) ; [default: True] tz ( bool ) ; [default: True] rx ( bool ) ; [default: True] ry ( bool ) ; [default: True] rz ( bool ) ; [default: True] sx ( bool ) ; [default: True] sy ( bool ) ; [default: True] sz ( bool ) ; [default: True]","title":"lockAndHideTransforms"},{"location":"utility/#objectarrayvalidexistscheckreturn","text":"MNS core object array validity check. Two main Cases for the mode parameter: 1. trueOnlyIfAllValid - Run through the objects and only if ALL of them are found existing and valid, return the array back to the caller. If a single item failed- Return None. 2. trueIfSomeValid - Check all the objects and return any or all of them based on validity. Constructor: objectArrayValidExistsCheckReturn( kwargs) Return: List (Valid object list), None (If found invalid) Arguments: kwargs Keyword Arguments: objectArray ( list ) ; [default: [' ']] - Objects input list mode ( int ) - Validity return mode","title":"objectArrayValidExistsCheckReturn"},{"location":"utility/#readjson","text":"Constructor: readJson(fullPath) Return: None Arguments: fullPath Keyword Arguments:","title":"readJson"},{"location":"utility/#readsetteingfromfile","text":"Constructor: readSetteingFromFile(settingsPath) Return: None Arguments: settingsPath Keyword Arguments:","title":"readSetteingFromFile"},{"location":"utility/#returnindexfromsidedict","text":"Constructor: returnIndexFromSideDict(dict, searchElement) Return: None Arguments: dict searchElement Keyword Arguments:","title":"returnIndexFromSideDict"},{"location":"utility/#returnkeyfromelementtypedict","text":"Constructor: returnKeyFromElementTypeDict(dict, searchElement) Return: None Arguments: dict searchElement Keyword Arguments:","title":"returnKeyFromElementTypeDict"},{"location":"utility/#returnnamestdchangeelement","text":"global MnsNameStd utility- Use this function to change any elemnt within a given MnsNameStd object based on keyword args given Constructor: returnNameStdChangeElement(nameStd = None, kwargs) Return: MnsNameStd Arguments: nameStd ( str ) ; [default: None] kwargs Keyword Arguments: autoRename ( bool ) ; [default: True] bodyPattern ( str ) ; [default: None] node ( str ) ; [default: nameStd.node] - change node parameter side ( str ) ; [default: nameStd.side] - change side parameter body ( str ) ; [default: nameStd.body] - change body parameter type ( str ) ; [default: nameStd.type] - change type parameter id ( str ) ; [default: nameStd.id] - change id parameter alpha ( str ) ; [default: nameStd.alpha] - change alpha parameter suffix ( str ) ; [default: nameStd.suffix] - change suffix comment ( str ) ; [default: nameStd.comment] - change comment parameter","title":"returnNameStdChangeElement"},{"location":"utility/#setattr","text":"Constructor: setAttr(attr, value) Return: None Arguments: attr value Keyword Arguments:","title":"setAttr"},{"location":"utility/#setctrlcoloridx","text":"Global utility function: Change the shape color override to index type, and set to the input value index Constructor: setCtrlColorIdx(objects = [], colorIdx = 0) Return: None Arguments: objects ( list ) ; [default: []] colorIdx ( int ) ; [default: 0] Keyword Arguments:","title":"setCtrlColorIdx"},{"location":"utility/#setctrlcolorrgb","text":"Global utility function: Change the shape color override to RGB type, and set to the input value RGB Constructor: setCtrlColorRGB(objects = [], color = (1,1,1)) Return: None Arguments: objects ( list ) ; [default: []] color ( str ) ; [default: (1] 1 1) Keyword Arguments:","title":"setCtrlColorRGB"},{"location":"utility/#sortnamestdarraybyid","text":"Constructor: sortNameStdArrayByID(nameStdArray) Return: None Arguments: nameStdArray Keyword Arguments:","title":"sortNameStdArrayByID"},{"location":"utility/#splitdatetimestringtolist","text":"Split a 'dateTime' string to a major/minor/patch/timestemp list Constructor: splitDateTimeStringToList(dateTime = \"\") Return: list Arguments: dateTime ( str ) ; [default: \"\"] Keyword Arguments:","title":"splitDateTimeStringToList"},{"location":"utility/#splitenumattrtochannelcontrollist","text":"Constructor: splitEnumAttrToChannelControlList(enumAttrName, node) Return: None Arguments: enumAttrName node Keyword Arguments:","title":"splitEnumAttrToChannelControlList"},{"location":"utility/#splitenumattrtocolorschemefloattuplelist","text":"Constructor: splitEnumAttrToColorSchemeFloatTupleList(enumAttrName, node) Return: None Arguments: enumAttrName node Keyword Arguments:","title":"splitEnumAttrToColorSchemeFloatTupleList"},{"location":"utility/#splitenumtostringlist","text":"Constructor: splitEnumToStringList(enumAttrName, node) Return: None Arguments: enumAttrName node Keyword Arguments:","title":"splitEnumToStringList"},{"location":"utility/#splitnamestringtonamestd","text":"Split a given string object and return a MnsNameStd based on it's structure. Constructor: splitNameStringToNameStd(nameString = \"\") Return: MnsNameStd Arguments: nameString ( str ) ; [default: \"\"] Keyword Arguments:","title":"splitNameStringToNameStd"},{"location":"utility/#validatenamestd","text":"Constructor: validateNameStd(objectA) Return: None Arguments: objectA Keyword Arguments:","title":"validateNameStd"},{"location":"utility/#writejson","text":"Constructor: writeJson(directory, fileName, data = {}, kwargs) Return: None Arguments: directory fileName data ( dict ) ; [default: {}] kwargs Keyword Arguments:","title":"writeJson"},{"location":"utility/#zerojointorient","text":"Zero all jointOrient attributes for the jnt hirerchy to rotations. Constructor: zeroJointOrient(topNode = None) Return: None Arguments: topNode ( str ) ; [default: None] Keyword Arguments:","title":"zeroJointOrient"},{"location":"utility/#zerotransforms","text":"Zero all available transforms for the given object passed in. Constructor: zeroTransforms(transform = \"\") Return: bool Arguments: transform ( str ) ; [default: \"\"] Keyword Arguments:","title":"zeroTransforms"}]}