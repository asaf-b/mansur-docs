{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Mansur's documentaion page ! Here you can find detailed code documentation, as well as some helful guides to get started as a user, or as a developer. Here are some Quick-Links to get started: about Getting Started Support-Us Documentation Help-Desk","title":"Home"},{"location":"#_1","text":"Welcome to Mansur's documentaion page ! Here you can find detailed code documentation, as well as some helful guides to get started as a user, or as a developer. Here are some Quick-Links to get started: about Getting Started Support-Us Documentation Help-Desk","title":""},{"location":"Core_Module_Settings/","text":"Core Module Settings Attributes Module-Name Attribute Name Default Description body Main module name blkSide center Module side alpha A Module's Alpha id Type-Attributes Attribute Name Default Description isFacial False Choose whether this module is marked as a facial module. This attribute is going to be used by the Picker and ModuleVisUI tools to seperate controls/modules in a Body group and a Facial group. symmetryType 3 Choose the mirror type for right side controls controlsMultiplier 2.0 Scale multiplier for this module's controls alongSurface Input surface to attach all joints within this module to the selected surface when constructing the rig. NurbsSurface is recommended doGimbleCtrls False Not implemented currently doPivotCtrls False Not implemented currently postSymmetryJntStruct False If this attribute is set to true, a joint structure re-build will be initiated after this module is symmetrized Attribute-Host Attribute Name Default Description doAttributeHostCtrl False If this is set to True, a new attribute host control will be created along with this module in the position set by it's guide. Depending on the module, all relevant custom channel box attributes/contrls will be created on it for the sake of order and coherence controling the module attributeHostControlShape plus The shape created for the attribute host control Space-Attributes Attribute Name Default Description spaces [' '] Depending on the module, all relevant space-switch controls will contain these spaces. Valid object types are Guides, Joints, and iterpJoints splitOrientSpace False If this is set to True, all space switch attributes for this module will split into two spaces- Translate and Orient, for the animator to be able to set different space for tranlation and orientation. Color Attribute Name Default Description colOverride False Override the main rig's color scheme for this module only schemeOverride [(0.0, 1.0, 0.0), (0.15, 1.0, 0.15), (0.3, 1.0, 0.3), (0.45, 1.0, 0.45), (0.6, 1.0, 0.6)] Override with these colors","title":"Core Module Settings"},{"location":"Core_Module_Settings/#core-module-settings","text":"","title":"Core Module Settings"},{"location":"Core_Module_Settings/#attributes","text":"","title":"Attributes"},{"location":"Core_Module_Settings/#module-name","text":"Attribute Name Default Description body Main module name blkSide center Module side alpha A Module's Alpha id","title":"Module-Name"},{"location":"Core_Module_Settings/#type-attributes","text":"Attribute Name Default Description isFacial False Choose whether this module is marked as a facial module. This attribute is going to be used by the Picker and ModuleVisUI tools to seperate controls/modules in a Body group and a Facial group. symmetryType 3 Choose the mirror type for right side controls controlsMultiplier 2.0 Scale multiplier for this module's controls alongSurface Input surface to attach all joints within this module to the selected surface when constructing the rig. NurbsSurface is recommended doGimbleCtrls False Not implemented currently doPivotCtrls False Not implemented currently postSymmetryJntStruct False If this attribute is set to true, a joint structure re-build will be initiated after this module is symmetrized","title":"Type-Attributes"},{"location":"Core_Module_Settings/#attribute-host","text":"Attribute Name Default Description doAttributeHostCtrl False If this is set to True, a new attribute host control will be created along with this module in the position set by it's guide. Depending on the module, all relevant custom channel box attributes/contrls will be created on it for the sake of order and coherence controling the module attributeHostControlShape plus The shape created for the attribute host control","title":"Attribute-Host"},{"location":"Core_Module_Settings/#space-attributes","text":"Attribute Name Default Description spaces [' '] Depending on the module, all relevant space-switch controls will contain these spaces. Valid object types are Guides, Joints, and iterpJoints splitOrientSpace False If this is set to True, all space switch attributes for this module will split into two spaces- Translate and Orient, for the animator to be able to set different space for tranlation and orientation.","title":"Space-Attributes"},{"location":"Core_Module_Settings/#color","text":"Attribute Name Default Description colOverride False Override the main rig's color scheme for this module only schemeOverride [(0.0, 1.0, 0.0), (0.15, 1.0, 0.15), (0.3, 1.0, 0.3), (0.45, 1.0, 0.45), (0.6, 1.0, 0.6)] Override with these colors","title":"Color"},{"location":"FKChain/","text":"FKChain Author: Asaf Ben-Zur Best used for: General Chain, Spine, Neck, Tail, Elephant-Trunk, Tentacle This Module when used in it's basic state, will create a simple FK hierarchy control chain. Altough this module contains many layers with many features such as Variable FK, Spring, Embedded IK, Secondary IK chains (interpolation controls). Use as many layers an in any combination to create any form of FK chain behaviour. Defenitions construct Constructor: construct(mansur, MnsBuildModule, kwargs) Return: list (controls), dict (internalSpaces), MnsNameStd (moduleSpaceAttrHost) Arguments: mansur MnsBuildModule kwargs Keyword Arguments: deconstruct deconstruct method implementation for FKChain. Transfer interJoints control back to the main joints. Constructor: deconstruct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments: jointStructure Constructor: jointStructure(mansur, guides, mnsBuildModule = None, kwargs) Return: None Arguments: mansur guides mnsBuildModule ( str ) ; [default: None] kwargs Keyword Arguments: jointStructureSoftMod Constructor: jointStructureSoftMod(mansur, guides, mnsBuildModule = None, kwargs) Return: None Arguments: mansur guides mnsBuildModule ( str ) ; [default: None] kwargs Keyword Arguments:","title":"FKChain"},{"location":"FKChain/#fkchain","text":"Author: Asaf Ben-Zur Best used for: General Chain, Spine, Neck, Tail, Elephant-Trunk, Tentacle This Module when used in it's basic state, will create a simple FK hierarchy control chain. Altough this module contains many layers with many features such as Variable FK, Spring, Embedded IK, Secondary IK chains (interpolation controls). Use as many layers an in any combination to create any form of FK chain behaviour.","title":"FKChain"},{"location":"FKChain/#defenitions","text":"","title":"Defenitions"},{"location":"FKChain/#construct","text":"Constructor: construct(mansur, MnsBuildModule, kwargs) Return: list (controls), dict (internalSpaces), MnsNameStd (moduleSpaceAttrHost) Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"construct"},{"location":"FKChain/#deconstruct","text":"deconstruct method implementation for FKChain. Transfer interJoints control back to the main joints. Constructor: deconstruct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"deconstruct"},{"location":"FKChain/#jointstructure","text":"Constructor: jointStructure(mansur, guides, mnsBuildModule = None, kwargs) Return: None Arguments: mansur guides mnsBuildModule ( str ) ; [default: None] kwargs Keyword Arguments:","title":"jointStructure"},{"location":"FKChain/#jointstructuresoftmod","text":"Constructor: jointStructureSoftMod(mansur, guides, mnsBuildModule = None, kwargs) Return: None Arguments: mansur guides mnsBuildModule ( str ) ; [default: None] kwargs Keyword Arguments:","title":"jointStructureSoftMod"},{"location":"FKChain_settings/","text":"FKChain Settings Author: Asaf Ben-Zur Best used for: General Chain, Spine, Neck, Tail, Elephant-Trunk, Tentacle This Module when used in it's basic state, will create a simple FK hierarchy control chain. Altough this module contains many layers with many features such as Variable FK, Spring, Embedded IK, Secondary IK chains (interpolation controls). Use as many layers an in any combination to create any form of FK chain behaviour. Attributes GlobalSettings Attribute Name Default Description doInterpolationJoints False Create interpolation joints for this module interpolationJoints 2 Amount of interpolation joints isolatePolesRotation False If this is set to True, the first and last interpolation joints orientation will be isolated. This is primarily used in combination with the EmbeddedIK feature to achive a stable spine setup offsetX 20.0 Up curve X value offset for the interpolation joints offsetZ 0.0 Up curve Z value offset for the interpolation joints scaleMode 2 Default scale mode. Please refer to the documentation of mnsPointsOnCurve node to learn more about each mode squashMode 0 Default squash mode. Please refer to the documentation of mnsPointsOnCurve node to learn more about each mode doIntepJntsSpring False If this is set to True, a mnsSpringCurve node will be created on top of the primary curve controling the interpolation joints FK Attribute Name Default Description FKcontrolShape circle FK controls shape doFKSeconderyIK False If this is set to True, another level of IK controls will be created below the FK controls FKSecondaryIKControlShape diamond Secodary IK controls shape primaryCurveDegree 3 Primary interpolation joints curve generation degree. Please refer to the documentation of mnsBuildTransformsCurve node to learn more about curve generation degree primaryCurveMode 0 Primary interpolation joints curve sampling mode. Please refer to the documentation of mnsPointsOnCurve node to learn more about curve each mode primaryInterpolaion 0 Primary interpolation joints curve generation interpolation mode. Please refer to the documentation of mnsBuildTransformsCurve node to learn more about each mode FKChannelControl T R S X v v v Y v v v Z v v v FK controls channel-box settings EmbeddedIK Attribute Name Default Description doEmbeddedIK False This feature is mainly used to create a spine setup, where another layer of IK control is needed. The result of this feature is three IK controls - Root, Mid and End controls, which will allow IK control over the entire chain defaultVisibilityMode 1 Default visibility settings. FK and IK main controls can be used in combination, or indevidually- hence a manuall visibility switch embIKCurveDegree 3 Embedded IK curve degree. Please refer to the documentation of mnsBuildTransformsCurve node to learn more about curve generation degree doMidTangentCtrls True If this is set to True, two extra tangent controls will be build from the IK Mid control embIKControlShape flatDiamond Main shape for the embedded IK controls embIKChannelControl T R S X v v v Y v v v Z v v v Embedded IK controls channel-box settings IK_Secondaries Attribute Name Default Description doSecondaryIKCtrls False This feature will create a secondary IK controls layer below the primary FK chain controls. The number of IK Secondaries MUST be equel or greater then the number of guides/Primary FK controls for this layer to execute. This layer's will not execute without creating Interp-Joints. numIKControls 2 Amount of secondary layer controls, this value MUST be equel or greater then the number of guides/Primary FK controls. isolateSecPolesRotation False If this is set to True, the first and last controls orientation will be isolated. T IKControlShape dial Secondary IK layer control shape secondaryCurveDegree 3 Secondary IK curve generation degree. Please refer to the documentation of mnsBuildTransformsCurve node to learn more about curve generation degree secondaryCurveMode 0 Secondary IK curve sampling mode. Please refer to the documentation of mnsPointsOnCurve node to learn more about curve each mode secondaryInterpolaion 0 Secondary IK curve generation interpolation mode. Please refer to the documentation of mnsBuildTransformsCurve node to learn more about each mode doIKSpring False If this is set to True, a mnsSpringCurve node will be created on top of the secondary curve IKChannelControl T R S X v v v Y v v v Z v v v Secondary IK controls channel-box settings VariableFK Attribute Name Default Description doVariableFK False This will create a veriable FK setup on this chain. NOTE: Setting this attribute to True when the curve mode is set to PARAMETRIC, will force the joint structure curve mode to UNIFORM. This layer's will not execute without creating Interp-Joints. numVarFKControls 2 Number of variable FK controls varFKControlShape pinchedCircle Variable FK control shape varFKDegree 3 Variable FK curve degree. Please refer to the documentation of mnsBuildTransformsCurve node to learn more about curve generation degree defaultFalloff 0.5 Default falloff value for the variable FK controls varFKSubsteps 20 The variable FK setup is able to re-sample the curve to any amount of control points to refine the fidelity of the setup. This is the default sampling value doVarFKSpring False If this is set to True, a mnsSpringCurve node will be created on top of the variable FK controls varFKChannelControl T R S X v v Y v v Z v v Variable FK controls channel-box settings Tweakers Attribute Name Default Description doTweakControls False This feature is a global extra layer to tweak the final result cuvre samples rotation and scale. This layer's will not execute without creating Interp-Joints. numTweakers 2 Number of tweak controls to create tweakControlShape dialSquare Tweak controls shape tweakersChannelControl T R S X v v Y v v Z v v Tweak controls channel-box settings","title":"FKChain settings"},{"location":"FKChain_settings/#fkchain-settings","text":"Author: Asaf Ben-Zur Best used for: General Chain, Spine, Neck, Tail, Elephant-Trunk, Tentacle This Module when used in it's basic state, will create a simple FK hierarchy control chain. Altough this module contains many layers with many features such as Variable FK, Spring, Embedded IK, Secondary IK chains (interpolation controls). Use as many layers an in any combination to create any form of FK chain behaviour.","title":"FKChain Settings"},{"location":"FKChain_settings/#attributes","text":"","title":"Attributes"},{"location":"FKChain_settings/#globalsettings","text":"Attribute Name Default Description doInterpolationJoints False Create interpolation joints for this module interpolationJoints 2 Amount of interpolation joints isolatePolesRotation False If this is set to True, the first and last interpolation joints orientation will be isolated. This is primarily used in combination with the EmbeddedIK feature to achive a stable spine setup offsetX 20.0 Up curve X value offset for the interpolation joints offsetZ 0.0 Up curve Z value offset for the interpolation joints scaleMode 2 Default scale mode. Please refer to the documentation of mnsPointsOnCurve node to learn more about each mode squashMode 0 Default squash mode. Please refer to the documentation of mnsPointsOnCurve node to learn more about each mode doIntepJntsSpring False If this is set to True, a mnsSpringCurve node will be created on top of the primary curve controling the interpolation joints","title":"GlobalSettings"},{"location":"FKChain_settings/#fk","text":"Attribute Name Default Description FKcontrolShape circle FK controls shape doFKSeconderyIK False If this is set to True, another level of IK controls will be created below the FK controls FKSecondaryIKControlShape diamond Secodary IK controls shape primaryCurveDegree 3 Primary interpolation joints curve generation degree. Please refer to the documentation of mnsBuildTransformsCurve node to learn more about curve generation degree primaryCurveMode 0 Primary interpolation joints curve sampling mode. Please refer to the documentation of mnsPointsOnCurve node to learn more about curve each mode primaryInterpolaion 0 Primary interpolation joints curve generation interpolation mode. Please refer to the documentation of mnsBuildTransformsCurve node to learn more about each mode FKChannelControl T R S X v v v Y v v v Z v v v FK controls channel-box settings","title":"FK"},{"location":"FKChain_settings/#embeddedik","text":"Attribute Name Default Description doEmbeddedIK False This feature is mainly used to create a spine setup, where another layer of IK control is needed. The result of this feature is three IK controls - Root, Mid and End controls, which will allow IK control over the entire chain defaultVisibilityMode 1 Default visibility settings. FK and IK main controls can be used in combination, or indevidually- hence a manuall visibility switch embIKCurveDegree 3 Embedded IK curve degree. Please refer to the documentation of mnsBuildTransformsCurve node to learn more about curve generation degree doMidTangentCtrls True If this is set to True, two extra tangent controls will be build from the IK Mid control embIKControlShape flatDiamond Main shape for the embedded IK controls embIKChannelControl T R S X v v v Y v v v Z v v v Embedded IK controls channel-box settings","title":"EmbeddedIK"},{"location":"FKChain_settings/#ik_secondaries","text":"Attribute Name Default Description doSecondaryIKCtrls False This feature will create a secondary IK controls layer below the primary FK chain controls. The number of IK Secondaries MUST be equel or greater then the number of guides/Primary FK controls for this layer to execute. This layer's will not execute without creating Interp-Joints. numIKControls 2 Amount of secondary layer controls, this value MUST be equel or greater then the number of guides/Primary FK controls. isolateSecPolesRotation False If this is set to True, the first and last controls orientation will be isolated. T IKControlShape dial Secondary IK layer control shape secondaryCurveDegree 3 Secondary IK curve generation degree. Please refer to the documentation of mnsBuildTransformsCurve node to learn more about curve generation degree secondaryCurveMode 0 Secondary IK curve sampling mode. Please refer to the documentation of mnsPointsOnCurve node to learn more about curve each mode secondaryInterpolaion 0 Secondary IK curve generation interpolation mode. Please refer to the documentation of mnsBuildTransformsCurve node to learn more about each mode doIKSpring False If this is set to True, a mnsSpringCurve node will be created on top of the secondary curve IKChannelControl T R S X v v v Y v v v Z v v v Secondary IK controls channel-box settings","title":"IK_Secondaries"},{"location":"FKChain_settings/#variablefk","text":"Attribute Name Default Description doVariableFK False This will create a veriable FK setup on this chain. NOTE: Setting this attribute to True when the curve mode is set to PARAMETRIC, will force the joint structure curve mode to UNIFORM. This layer's will not execute without creating Interp-Joints. numVarFKControls 2 Number of variable FK controls varFKControlShape pinchedCircle Variable FK control shape varFKDegree 3 Variable FK curve degree. Please refer to the documentation of mnsBuildTransformsCurve node to learn more about curve generation degree defaultFalloff 0.5 Default falloff value for the variable FK controls varFKSubsteps 20 The variable FK setup is able to re-sample the curve to any amount of control points to refine the fidelity of the setup. This is the default sampling value doVarFKSpring False If this is set to True, a mnsSpringCurve node will be created on top of the variable FK controls varFKChannelControl T R S X v v Y v v Z v v Variable FK controls channel-box settings","title":"VariableFK"},{"location":"FKChain_settings/#tweakers","text":"Attribute Name Default Description doTweakControls False This feature is a global extra layer to tweak the final result cuvre samples rotation and scale. This layer's will not execute without creating Interp-Joints. numTweakers 2 Number of tweak controls to create tweakControlShape dialSquare Tweak controls shape tweakersChannelControl T R S X v v Y v v Z v v Tweak controls channel-box settings","title":"Tweakers"},{"location":"Maya-Plugins/","text":"Maya-Plugins mns3BIkSolver === Author: Assaf Ben Zur === Inputs Long-Name Short-Name Type Description boneLengthA bla float Base length A. boneLengthB blb float Base length B. boneLengthC blc float Base length C. blend blend float IK-FK blend value. rootFK rootFK matrix Input FK root matrix. kneeFK kneeFK matrix Input FK knee matrix. matrix Input FK ankle matrix. endFK endFK matrix Input FK end matrix. ikTarget ikTarget matrix Input IK target matrix. poleVector poleVector matrix Input pole-vector target matrix. rootWorldMatrix rootWorldMatrix matrix Module root input matrix. roll roll float IK addative roll value. slide slide float IK mid slide value. softness softness float IK softness parameter. stretchLimit stretchLimit float IK stretch limit value. 1 is no stretch, 2 is double the length. aimAxis aimAxis enum Aim axis choice. upAxis upAxis enum Up axis choice. segmentScaleCompensate segmentScaleCompensate bool calculate with segment scale compensate on or off. Outputs Long-Name Short-Name Type Description rootTranslate rootTranslate float[3] Root out translate output. Child of outRoot. rootRotateX rootRotateX float Root out translate X output. Child of outRoot. rootRotateY rootRotateY float Root out translate Y output. Child of outRoot. rootRotateZ rootRotateZ float Root out translate Z output. Child of outRoot. rootRotate rootRotate angle[3] Root out rotate output. Child of outRoot. rootScale rootScale float[3] Root out scale output. Child of outRoot. outRoot outRoot compound Root output transformation values. KneeTranslate kneeTranslate float[3] Knee out translate output. Child of outKnee. kneeRotateX kneeRotateX float Knee out translate X output. Child of outKnee. kneeRotateY kneeRotateY float Knee out translate Y output. Child of outKnee. kneeRotateZ kneeRotateZ float Knee out translate Z output. Child of outKnee. kneeRotate kneeRotate angle[3] Knee out rotate output. Child of outKnee. kneeScale kneeScale float[3] Knee out scale output. Child of outKnee. outKnee outKnee compound Knee output transformation values. ankleTranslate ankleTranslate float[3] Ankle out translate output. Child of outAnkle. ankleRotateX ankleRotateX float Ankle out translate X output. Child of outAnkle. ankleRotateY ankleRotateY float Ankle out translate Y output. Child of outAnkle. ankleRotateZ ankleRotateZ float Ankle out translate Z output. Child of outAnkle. ankleRotate ankleRotate angle[3] Ankle out rotate output. Child of outAnkle. ankleScale ankleScale float[3] Ankle out scale output. Child of outAnkle. outAnkle outAnkle compound Ankle output transformation values. endTranslate endTranslate float[3] End out translate output. Child of outEnd. endRotateX endRotateX float End out translate X output. Child of outEnd. endRotateY endRotateY float End out translate Y output. Child of outEnd. endRotateZ endRotateZ float End out translate Z output. Child of outEnd. endRotate endRotate angle[3] End out rotate output. Child of outEnd. endScale endScale float[3] End out scale output. Child of outEnd. outEnd outEnd compound End output transformation values. ikVis ikVis bool IK mode visibility. fkVis fkVis bool FK mode visibility. mnsAnnotate === Author: Assaf Ben Zur === This node is a utility node used to present value annotations in maya's viewport easily. When needing to present any keyframed values in a playblast within maya, there isn't any maya native node to allow values display within the VP. This node was created for this need. All connected attributes will be displayed as a new line presenting attributes and their current values, updating in real time. The display settings are controled within this node, where the position of the display is controlled via the custom locator created with it. The amount of attribute display is unlimited, and multiple unlimited instances of this node can be created freely. This is mainly used to display technicall setups. Inputs Long-Name Short-Name Type Description attributes attrs multi Input attributes array to display, unlimited amount. Each attribute component will be displayed as a single line. fontSize fontSize float Display Font Size. fontColor fontColor float[3] Display Font Color, RGB (0 to 1). fontTransparency fontTransparency float Font transperancy. 1 = Fully opaque, 0 = Fully tansparennt. precision precision int Numberic attribute display precision- value represents the amount of integers right to the decimal point. lineSpacing lineSpacing float Line spacing between attributes line. drawFlat drawFlat int Draw in 2D mode, regardless of the matrix position. The position is dictated by positionX and positionY attributes, relative to the viewports screen space resolution. positionX positionX double Display top-left corener X position, if drawFlat attribute is True. positionY positionY double Display top-left corener y position, if drawFlat attribute is True. nameOnlyMode nameOnlyMode int MObject mnsAnnotate::aNameMode mnsAutoWheelDrive === Author: Assaf Ben Zur === Inputs Long-Name Short-Name Type Description startFrame startFrame int Evaluation start frame. startFrameFromRange startFrameFromRange bool If true, take the start frame from current maya range instead of the input value given. time time time Time input. mnsBuildTransformsCurve === Author: Assaf Ben Zur === This node builds a nurbsCurve shape, based on input transforms array. The curve parameters are dictated by this node's attributes, and can be dynamiclly changed and even keyframed if needed. This node also creates and offset curve shape result, to be used later as an Up-Vector for every single arbitrary point along the result main curve. Inputs Long-Name Short-Name Type Description globalScale globalScale float Global scale multiplier. tweakCurve tweakCurve nurbsCurve Input tweak curve shape. tweakCurveBase tweakCurveBase nurbsCurve Input tweak curve base shape. buildMode buildMode enum Build mode- EPs, CVs, Hermite, TangentedCVs, bezier. transforms transforms compound Transforms array to build the curve from. matrix matrix matrix Input matrix transform, child of transforms. degree degree int Output curve degree, 1-5. offsetX offsetX float Output offset curve X parameter. offsetY offsetY float Output offset curve Y parameter. offsetZ offsetZ float Output offset curve Z parameter. tangentDirection tangentDirection enum If build mode is on Hermite, this paremeter dictates the tangent direction. reverse reverse int Reverse output curve and offset curve. HermiteSteps HermiteSteps int Hermite mode steps amount. tangentLength tangentLength float Control tangent length (if present) OffsetType OffsetType enum Offset build type - world or local. buildOffsetCurve buildOffsetCurve int Initiate offset curve build. resample resample bool Resample curve before output, based on substeps paremeter. substeps substeps int resample substeps. Outputs Long-Name Short-Name Type Description outCurve outCurve kNurbsCurve Result curve shape. outOffsetCurve outOffsetCurve nurbsCurve Result offset curve shape. length length double Result curve length. offsetLength offsetLength double Result offset curve length. mnsCameraGateRatio === Author: Assaf Ben Zur === A simple utility callback node to dynamiclly control and update the input camer'as display \"Camera-Gate\" parameters. Inputs Long-Name Short-Name Type Description cameraIn cameraIn message Affected camera node. gateWidth gateWidth float Cemera gate width. gateHeight gateHeight float Cemera gate height. mnsClosestPointsOnMesh Inputs Long-Name Short-Name Type Description inMesh inMesh mesh Input mesh to find closest point to. inPosition inPosition compound(Array) Input position to calculate a result for. Array Attr. matrix matrix matrix Input matrix to calculate a result for. Array Attr. targetParentMatrix targetParentMatrix matrix Target parent matrix to multiply by before setting the result. Outputs Long-Name Short-Name Type Description outPosition op vector Output position result. mnsCompressionTensionBlend === Author: Assaf Ben Zur === Deformer. A simple compression and tension based deformer. This deformer will detect, display and deform a mesh based on the difference between the current deformed state and an input base-state (base-mesh). The deformer contains 3 display modes: - Compression & Tension (50% gray as base-state) - Compression Only (black as base-state) - Tension (black as base-state) The deformer also conatins separate multipliers for both tension and compression. This deformer can be used to drive corrective shapes, wrinkles, volume gain/loss and much more. Inputs Long-Name Short-Name Type Description baseMesh baseMesh mesh Static base mesh input. tensionTarget tensionTarget mesh Tension blend target. compressionTarget compressionTarget mesh Compression blend target. liveMode liveMode bool Live mode. Re-calculate edge lengthes on evaluation. displayMode displayMode enum Map display mode- None, compressionTension, compression, tension. compressionMultiplier compressionMultiplier float Global compression multiplier. tensionMultiplier tensionMultiplier float Global tension multiplier. mnsCurveTweak === Author: Assaf Ben Zur === This node was created in order to achive curve modifications/tweaks, without changing its form, not it's shape at bind position. The input and output curves will match while the base curve and tweak curve match in shape. Once any difference between the base shape and tweak shape was detected, the difference between these curves will be projected onto the input curve. The objective of this node is to maintain all curve attributes/data (nSpans, nCvs, form, degree) unchanged while still having the ability to tweak the curve with different parameters. Inputs Long-Name Short-Name Type Description inputCurve inputCurve kNurbsCurve Input curve to tweak. Output curve will be the same as this curve while the tweak curve matches the base curve. inputBaseCurve inputBaseCurve kNurbsCurve Input base curve. This curve will be used to calculate the delta for the tweak. inputTweakCurve inputTweakCurve kNurbsCurve Input twek curve. This curve is intended to match the base curve as bind. This curve should be modified - after the curve is modified, the delta difference between it and the base curve will be projected on the input curve. Outputs Long-Name Short-Name Type Description outCurve outCurve kNurbsCurve Result curve shape. mnsCurveVariable === Author: Assaf Ben Zur === Curve based solve for a Variable-FK Setup. This fast and efficient node allows the user to create a variable FK setup using input curves and local transformations, outputting a solved curve and up-curve- instead of the more common transforms output method. The node will accept any amount of input transforms, outputting the complex offset parent solve for each input as well as the solved curves shapes. This is to avoid the use of any extra nodes or multiple parent transforms- pinning the controls to the output curve at all times. The initial solve, as well as all features are calculated within a single loop. As opposed to the common Variable FK setup, the curve based approach eliminates the Rest-Pose constant- making the node's algorithm Rest-Pose dynamic. In fact, it doesn't exist. This approach uses only the input array amount constant to calculate a uniform positioning along the output curve- allowing the input curve to be changeable (live / dynamic). Notice that the amount of input variable controls is completely independent of the main controls input. Inputs Long-Name Short-Name Type Description curve crv nurbsCurve Input curve. upCurve upCrv nurbsCurve Input offset curve. inTransform inTransform compound Input variable control values array. uPosition uPos float Input U position. Child of inTransform. strength strength float Input strength. Child of inTransform. aimTranslate aimT float Input aim translation. Child of inTransform. upTranslate upT float Input up translation. Child of inTransform. terTranslate terT float Input tertiary translation. Child of inTransform. falloff falloff float Input falloff value. Child of inTransform. aimRotation aimRot angle Input aim-rotation value. Child of inTransform. upRotation upRot angle Input up-rotation value. Child of inTransform. tertiaryRotation terRot angle Input tertiary-rotation value. Child of inTransform. localMatrix localMatrix angle Input local transformation matrix. Child of inTransform. upMode upMode enum Up mode- normal, curve, worldX, worldY, worldZ. substeps substeps int Resample substeps value. translateMode tMode enum Control translation mode- IK, FK. degree degree int Result curves degree. buildMode buildMode enum Result curve build mode- EPs, CVs. rotateOrder ro enum Calculation rotation-order. aimAxis aimAxis enum Aim axis choice. upAxis upAxis enum Up axis choice. offsetType offsetType enum Offset curve adjustment mode- local, world. offsetX offsetX float Offset curve adjustment offset X parameter. offsetY offsetY float Offset curve adjustment offset Y parameter. offsetZ offsetZ float Offset curve adjustment offset Z parameter. uScale uScale float Global U-Scale adjusment. Addative to array indevidual u inputs. uOffset uOffset float Global U-Offfset adjusment. Addative to array indevidual u inputs. startAmp startAmp float Sine start amplitude value. endAmp endAmp float Sine end amplitude value. amplitudeAim amplitudeAim float Sine calculation X direction amplitude value. amplitudeUp amplitudeUp float Sine calculation Y direction amplitude value. amplitudeTertiary amplitudeTertiary float Sine calculation Z direction amplitude value. frequencyAim frequencyAim float Sine calculation X direction frequency value. frequencyUp frequencyUp float Sine calculation Y direction frequency value. frequencyTertiary frequencyTertiary float Sine calculation Z direction frequency value. phaseAim phaseAim float Sine calculation X direction phase value. phaseUp phaseUp float Sine calculation Y direction phase value phaseTertiary phaseTertiary float Sine calculation Z direction phase value frequency frequency float Sine calculation global addative frequency value. phase phase float Sine calculation global addative phase value. startPos startPos float Sine start position value. outCtrlsUpMode outCtrlsUpMode enum Out position transforms up type - normal, curve, worldX, worldY, worldZ. Outputs Long-Name Short-Name Type Description outCurve outCurve nurbsCurve Output curve shape. outOffsetCurve outOffsetCurve nurbsCurve Output offset curve shape. outTransform outTransform compound Output control offset position and rotation array. translate t float[3] Output control offset position, child of outTransform. rotate r angle[3] Output control offset rotation, child of outTransform. rotateX rotX angle Output control offset rotation, X component, child of rotate. rotateY rotY angle Output control offset rotation, Y component, child of rotate. rotateZ rotZ angle Output control offset rotation, Z component, child of rotate. mnsCurveZip === Author: Assaf Ben Zur === Curve based node. This is primarily used for eyelids and lips. This fast solution was developed to replace complex and heavy graphs- containing many math nodes, curve deformers and constraints. This setup provides a very clean deployment, processing the math algorithm internally. Combining this node with mnsBuildTransformsCurve and mnsPointsOnCurve, will result in a very efficient, dynamic and flexible setup. All calculations are processed within a single loop. All curve operations are aware of one another, and are NOT addative- meaning that all operations are available at any position, and will NOT break one another, nor overlap. All attributes are not minimum limited to 0 and can be adjusted to the negative direction- pulling the bind pose against each other instead of towards each other. The node contains a centerMatrix input plug, which is a live world position that is used to scale the calculated vectors based on the bind position offset (per curve parameter). The problem arising from this method is a mismatch at any meet position between curve A and B due to an offset variation between all points (except for a perfect circle scenario, which is never the case). This problem is solved using a conform attribute within which will pull one of the curves (based on user choice) to the other below a selected distance threshold- Resulting in a watertight-seal. Using mnsPointsOnCurve to sample the result curves allows for a simple skinCluster to deform the mesh. mnsCurveZip will output a pair of offset curves as well as the result curves, calculated by world axis vectors or the centerMatrix as a base, which are used as an Up-Curve input for the mnsPointsOnCurve node to manage rotations correctly as well. The node contatins some more important inputs: The tweakCurves inputs. Aspiring to an inclusive and comprehensive setup, tweak curves (A, B and Mid) can be plugged in to expose another manual layer of animation using scene controls. The input curves are 100% independent of the base curve inputs and DO-NOT need to share topology with each other, nor the source inputs - as they are being re-sampled internally based on the build mode. This means that the tweak controls amount is limitless and is NOT a constant, nor predefined. Inputs Long-Name Short-Name Type Description bindCurveA bindCurveA nurbsCurve Input curve A base-curve shape. tweakCurveA tweakCurveA nurbsCurve Input curve A curve shape. bindCurveB bindCurveB nurbsCurve Input curve B base-curve shape. tweakCurveB tweakCurveB nurbsCurve Input curve B curve shape. tweakCurveABase tweakCurveABase nurbsCurve Input curve A tweak base-curve shape. tweakCurveBBase tweakCurveBBase nurbsCurve Input curve B tweak base-curve shape. midCurve midCrv nurbsCurve Input target mid curve. midCurveBase midCrvBase nurbsCurve Input mid tweak curve base. midCurveTweak midCrvTweak nurbsCurve Input mid tweak curve. centerMatrix centerMatrix matrix Input center transformation matrix. midPointMatrix midPointMatrix matrix Input mid point traget matrix. sampleMode m enum Curve sample mode- parametric, uniform. matchInputCurve matchInputCurve enum Result curve matched parameters to- none, curveA, curveB. substeps substeps int Result curve resampling sub-step value. degree degree int Result curve degree value. buildMode buildMode enum Curve build mode- EPs, CVs. midGenerateFrom midGenerateFrom enum Generate automatic mid curve from- bindBases, tweakCurves, input. midBias midBias float Generated curve bias. aroundCenter aroundCenter bool Calculate results considering the input center matrix. conformToMeetPoint conformToMeetPoint bool Conform the selected curve result to meet the oter curve based on set parameters. curveToConform curveToConform enum Which curve to conform - curveA, curveB. conformDistancethreshold conformDistancethreshold enum Which curve to conform - curveA, curveB. AToMid AToMid float Blend curve A to mid-curve. BToMid BToMid float Blend curve B to mid-curve. AToB AToB float Blend curve A to curve B. BToA BToA float Blend curve B to curve A. allToMidPoint allToMidPoint float Blend both curves to mid-curve. pushOut pushOut float Curves push-out added value. zipStart zipStart float Zip start value. zipStartFalloff zipStartFalloff float Zip start falloff value. zipEnd zipEnd float Zip end value. zipEndFalloff zipEndFalloff float Zip end falloff value. glue glue bool Do glue. glueTherhold glueTherhold float Glue threshold value. offsetBase offsetBase enum Offset curve build mode. centerMatrix, worldX, worldY, worldZ. offset offset float Offset curve build parameter. globalMultiplier globalMultiplier float Global value multiplier. Outputs Long-Name Short-Name Type Description outCurveA outCurveA nurbsCurve Result curve A shape. outCurveB outCurveB nurbsCurve Result curve B shape. outCurveAOffset outCurveAOffset nurbsCurve Result curve A offset shape. outCurveBOffset outCurveBOffset nurbsCurve Result curve B offset shape. mnsCurveZipB === Author: Assaf Ben Zur === Curve based node. This is primarily used for eyelids and lips. This fast solution was developed to replace complex and heavy graphs- containing many math nodes, curve deformers and constraints. This setup provides a very clean deployment, processing the math algorithm internally. Combining this node with mnsBuildTransformsCurve and mnsPointsOnCurve, will result in a very efficient, dynamic and flexible setup. All calculations are processed within a single loop. All curve operations are aware of one another, and are NOT addative- meaning that all operations are available at any position, and will NOT break one another, nor overlap. All attributes are not minimum limited to 0 and can be adjusted to the negative direction- pulling the bind pose against each other instead of towards each other. The node contains a centerMatrix input plug, which is a live world position that is used to scale the calculated vectors based on the bind position offset (per curve parameter). The problem arising from this method is a mismatch at any meet position between curve A and B due to an offset variation between all points (except for a perfect circle scenario, which is never the case). This problem is solved using a conform attribute within which will pull one of the curves (based on user choice) to the other below a selected distance threshold- Resulting in a watertight-seal. Using mnsPointsOnCurve to sample the result curves allows for a simple skinCluster to deform the mesh. mnsCurveZip will output a pair of offset curves as well as the result curves, calculated by world axis vectors or the centerMatrix as a base, which are used as an Up-Curve input for the mnsPointsOnCurve node to manage rotations correctly as well. The node contatins some more important inputs: The tweakCurves inputs. Aspiring to an inclusive and comprehensive setup, tweak curves (A, B and Mid) can be plugged in to expose another manual layer of animation using scene controls. The input curves are 100% independent of the base curve inputs and DO-NOT need to share topology with each other, nor the source inputs - as they are being re-sampled internally based on the build mode. This means that the tweak controls amount is limitless and is NOT a constant, nor predefined. Inputs Long-Name Short-Name Type Description globalScale globalScale double Global scale value. inTweakAPosition inTweakAPosition matrix (array) Input tweaker local matrix. inTweakBPosition inTweakBPosition matrix (array) Input tweaker local matrix. tweakMode tweakMode enum Tweak curve build mode. tweakMirrorMatrix tweakMirrorMatrix matrix Mirror matrix to add to the local tweaker transfomation build. bindCurveA bindCurveA nurbsCurve Input curve A base-curve shape. bindCurveB bindCurveB nurbsCurve Input curve B base-curve shape. centerMatrix centerMatrix matrix Input center transformation matrix. sampleMode m enum Curve sample mode- parametric, uniform. matchInputCurve matchInputCurve enum Result curve matched parameters to- none, curveA, curveB. substeps substeps int Result curve resampling sub-step value. degree degree int Result curve degree value. buildMode buildMode enum Curve build mode- EPs, CVs. midBias midBias float Generated curve bias. aroundCenter aroundCenter bool Calculate results considering the input center matrix. conformToMeetPoint conformToMeetPoint bool Conform the selected curve result to meet the oter curve based on set parameters. curveToConform curveToConform enum Which curve to conform - curveA, curveB. conformDistancethreshold conformDistancethreshold enum Which curve to conform - curveA, curveB. AToMid AToMid float Blend curve A to mid-curve. BToMid BToMid float Blend curve B to mid-curve. AToBindB AToBindB float Blend curve A to curve B. BToBindA BToBindA float Blend curve B to curve A. AToB AToB float Blend curve A to curve B. BToA BToA float Blend curve B to curve A. sCurveA sCurveA float Blend curve A into a procedural S shape. sCurveB sCurveB float Blend curve B into a procedural S shape. allToMidPoint allToMidPoint float Blend both curves to mid-curve. pushOut pushOut float Curves push-out added value. zipStart zipStart float Zip start value. zipStartFalloff zipStartFalloff float Zip start falloff value. zipEnd zipEnd float Zip end value. zipEndFalloff zipEndFalloff float Zip end falloff value. offsetBase offsetBase enum Offset curve build mode. centerMatrix, worldX, worldY, worldZ. offset offset float Offset curve build parameter. Outputs Long-Name Short-Name Type Description outCurveA outCurveA nurbsCurve Result curve A shape. outCurveB outCurveB nurbsCurve Result curve B shape. outCurveAOffset outCurveAOffset nurbsCurve Result curve A offset shape. outCurveBOffset outCurveBOffset nurbsCurve Result curve B offset shape. outTweakA outTweakA compound (array) Parent attribute that holds output values for tweaker offset position. outTweakATranslate outTweakATranslate vector Output offset position for a given tweaker. outTweakARotate outTweakARotate vector Output offset rotation for a given tweaker. outTweakB outTweakB compound (array) Parent attribute that holds output values for tweaker offset position. outTweakBTranslate outTweakBTranslate vector Output offset position for a given tweaker. outTweakBRotate outTweakBRotate vector Output offset rotation for a given tweaker. mnsDynamicPivot === Author: Assaf Ben Zur === This is a simple node to calculate a foot's dynamic pivot internally, acoiding the use of many transforms and node connections. Given an input curve, world origin position (as matrix) and mapping info, this node will map the input rotation values into a new custom point adding the rotation into the translation. This essentailly will push the new point rapidly away from it's origin into the mapping direction. Now using the given input curve, the closest point on curve from the new point will be calcultaed and outputted into the rotatePivot plug. This output plug can then be plugged into a custom pivot attribute of any transform- creating a dynamiclly calculated pivot along the given curve. Inputs Long-Name Short-Name Type Description inputCurve inputCurve nurbsCurve Input curve. rotateX rx angle Input local X rotation. rotateY ry angle Input local Y rotation. rotateZ rz angle Input local Z rotation. rotate r angle[3] Input rotations. originWorldMatrix owm matrix Input origin position to strat the calculation from. targetParentInverseMatrix tpim matrix Target transform parent inverse matrix to localize the rotate pivot position result. mapRotXTo mapRotXTo enum Mapping info from input X rotation. mapRotYTo mapRotYTo enum Mapping info from input Y rotation. mapRotZTo mapRotZTo enum Mapping info from input Z rotation. distRateMultiplier distRateMultiplier double The rotation rate of addition in the translation values. inputMultipliers inputMultipliers bool Pre-calc input multipliers. Outputs Long-Name Short-Name Type Description rotatePivot rotatePivot float[3] Result rotate pivot position. mnsIKSolver === Author: Assaf Ben Zur === This IK-Solver node provides an alternative, faster and more reliable solution for a 2-joint IK set-up. This enhanced IK-solution offers a much cleaner approach as well, computing the blend internally- making any basic IK-FK set-up efficient, stable, fast and clean. To add on the internal FK-IK switch, this node contains a few more features that are already an industry standard: Softness - prevents a pop on ik limit approach. Slide - Knee position sliding (for character animation). Stretch - Providing a limb-stretch when the ik-solve is beyond its limit. Axis Switching - Offering an easy switch to any joint orientation. Inputs Long-Name Short-Name Type Description boneLengthA bla float Base length A. boneLengthB blb float Base length B. blend blend float IK-FK blend value. rootFK rootFK matrix Input FK root matrix. midFK midFK matrix Input FK mid matrix. endFK endFK matrix Input FK end matrix. ikTarget ikTarget matrix Input IK target matrix. poleVector poleVector matrix Input pole-vector target matrix. rootWorldMatrix rootWorldMatrix matrix Module root input matrix. roll roll float IK addative roll value. slide slide float IK mid slide value. softness softness float IK softness parameter. stretchLimit stretchLimit float IK stretch limit value. 1 is no stretch, 2 is double the length. aimAxis aimAxis enum Aim axis choice. upAxis upAxis enum Up axis choice. segmentScaleCompensate segmentScaleCompensate bool calculate with segment scale compensate on or off. Outputs Long-Name Short-Name Type Description rootTranslate rootTranslate float[3] Root out translate output. Child of outRoot. rootRotateX rootRotateX float Root out translate X output. Child of outRoot. rootRotateY rootRotateY float Root out translate Y output. Child of outRoot. rootRotateZ rootRotateZ float Root out translate Z output. Child of outRoot. rootRotate rootRotate angle[3] Root out rotate output. Child of outRoot. rootScale rootScale float[3] Root out scale output. Child of outRoot. outRoot outRoot compound Root output transformation values. midTranslate midTranslate float[3] Mid out translate output. Child of outMid. midRotateX midRotateX float Mid out translate X output. Child of outMid. midRotateY midRotateY float Mid out translate Y output. Child of outMid. midRotateZ midRotateZ float Mid out translate Z output. Child of outMid. midRotate midRotate angle[3] Mid out rotate output. Child of outMid. midScale midScale float[3] Mid out scale output. Child of outMid. outMid outMid compound Mid output transformation values. endTranslate endTranslate float[3] End out translate output. Child of outEnd. endRotateX endRotateX float End out translate X output. Child of outEnd. endRotateY endRotateY float End out translate Y output. Child of outEnd. endRotateZ endRotateZ float End out translate Z output. Child of outEnd. endRotate endRotate angle[3] End out rotate output. Child of outEnd. endScale endScale float[3] End out scale output. Child of outEnd. outEnd outEnd compound End output transformation values. ikVis ikVis bool IK mode visibility. fkVis fkVis bool FK mode visibility. mnsLipZip === Author: Assaf Ben Zur === Curve based node. Inputs Long-Name Short-Name Type Description globalScale globalScale double Global scale value. inTweakAPosition inTweakAPosition matrix (array) Input tweaker local matrix. inTweakBPosition inTweakBPosition matrix (array) Input tweaker local matrix. tweakMode tweakMode enum Tweak curve build mode. tweakMirrorMatrix tweakMirrorMatrix matrix Mirror matrix to add to the local tweaker transfomation build. centerMatrix centerMatrix matrix Input center transformation matrix. sampleMode m enum Curve sample mode- parametric, uniform. substeps substeps int Result curve resampling sub-step value. degree degree int Result curve degree value. buildMode buildMode enum Curve build mode- EPs, CVs. midBias midBias float Generated curve bias. aroundCenter aroundCenter bool Calculate results considering the input center matrix. conformToMeetPoint conformToMeetPoint bool Conform the selected curve result to meet the oter curve based on set parameters. curveToConform curveToConform enum Which curve to conform - curveA, curveB. conformDistancethreshold conformDistancethreshold enum Which curve to conform - curveA, curveB. AToMid AToMid float Blend curve A to mid-curve. BToMid BToMid float Blend curve B to mid-curve. AToB AToB float Blend curve A to curve B. BToA BToA float Blend curve B to curve A. sCurveA sCurveA float Blend curve A into a procedural S shape. sCurveB sCurveB float Blend curve B into a procedural S shape. allToMidPoint allToMidPoint float Blend both curves to mid-curve. pushOutA pushOutA float Curves push-out added value. pushOutB pushOutB float Curves push-out added value. zipStart zipStart float Zip start value. zipStartFalloff zipStartFalloff float Zip start falloff value. zipEnd zipEnd float Zip end value. zipEndFalloff zipEndFalloff float Zip end falloff value. offsetBase offsetBase enum Offset curve build mode. centerMatrix, worldX, worldY, worldZ. offset offset float Offset curve build parameter. Outputs Long-Name Short-Name Type Description outCurveA outCurveA nurbsCurve Result curve A shape. outCurveB outCurveB nurbsCurve Result curve B shape. outCurveAOffset outCurveAOffset nurbsCurve Result curve A offset shape. outCurveBOffset outCurveBOffset nurbsCurve Result curve B offset shape. outTweakA outTweakA compound (array) Parent attribute that holds output values for tweaker offset position. outTweakATranslate outTweakATranslate vector Output offset position for a given tweaker. outTweakARotate outTweakARotate vector Output offset rotation for a given tweaker. outTweakB outTweakB compound (array) Parent attribute that holds output values for tweaker offset position. outTweakBTranslate outTweakBTranslate vector Output offset position for a given tweaker. outTweakBRotate outTweakBRotate vector Output offset rotation for a given tweaker. mnsMatrixConstraint === Author: Assaf Ben Zur === Light weight alternative to Maya's native constraints - All within one node. Live switchable/keyable maintainOffset channel. Easily add spaces/masters to existing constraint using recalcOffset channel. Inputs Long-Name Short-Name Type Description sourceWorldMatrix sourceWorldMatrix matrix Source world matrix. spaceSet spaceSet int Constraint Space index. maintainOffset maintainOffset bool Maintain offset attribute. recalcOffsets recalcOffsets int Recalculate offset in current state. targetParentInverseMatrix targetParentInverseMatrix matrix Traget inverse matrix. targetRotateOrder targetRotateOrder enum Calculation rotate-order. targetWorldMatrix targetWorldMatrix matrix Traget world matrix. Outputs Long-Name Short-Name Type Description matrix m matrix Result as matrix form. translate t float[3] Translation values result. rotate r angle[3] Rotation values result. scale s float[3] Scale values result. mnsMeshRivets === Author: Assaf Ben Zur === A multi \"Point-On-Poly\" constraint style compute node. The node will accept any amount of input positions, as well as an input base-mesh and a target mesh. The base mesh is used to calculate the source position and offset, the target mesh is used to calculate the result position based on the selected attributes within the node: - Calculation Method: Closest UV, Vertex, Face - Do Rotation: On, Off - Do Scale: On, Off - Rotation: Aim-Axis and up Axis choice (All 6) - Up-Mode: World (X,Y,Z), Closest Tangent, Closest Binormal The node will accept any amount on input tweaker matrices that can be used to adjust the riveted transforms globally and easily. The tweakers adjustments are calculated in world spcae and the algorithm is fully independent, additive, and keyable. The proximity calculation is matrix based to achieve non-spherical tweaks. As tweaking the position of the rivets is not sensible as the transforms' position is based on the target mesh, the proximity tweakers are used to adjust rotation and scale only. The node contains two adjustemt spaces: - World- Will transform the outputs in world space, providing a more intuative behaviour, although less practical. - Object - Will transform the outputs in their relative local spaces (preferable), which will provide a less intuative behaviour (dependent of the tweaker and output orientation), although very practical. A falloff attribute is also implemented to allow control over the decay within the \"collision\" zone. Inputs Long-Name Short-Name Type Description mesh mesh mesh Input mesh to rivet to. targetWorldMatrix targetWorldMatrix matrix Input mesh world matrix. rivet rivet compound Input rivet transforms array. worldMatrix worldMatrix matrix Input rivet transforms matrix. Child of rivet. parentInverseMatrix parentInverseMatrix matrix Input rivet transforms inverse parent matrix. Child of rivet. liveMode liveMode bool Live mode. Calculate everything in every evaluation. calculationMethod calculationMethod enum Calculation basis- UV, closestVertex, closestFace. uvTolerance uvTolerance float UV search tolerance threshold value. doRotation doRotation bool Calculate rotations. doRivetRotation doRivetRotation bool Calculate rivet local rotations. rotateOrder ro enum Calculation rotate-order. upMode upMode enum Rotation calculation up mode- worldX, worldY, worldZ, closestVertexBinormal, closestVertexTangent. aimAxis aimAxis enum Aim Axis choice. upAxis upAxis enum Up Axis choice. doRivetScale doRivetScale bool Calculate scale. doScale doScale bool Scale the rivets with the target mesh scale. When off the mesh's scale doesn't affect the rivets. maintainOffset maintainOffset bool Maintain offset between rivet position and target mesh. proximityRotationSpace proximityRotationSpace enum Proximity tweak rotation space- object, world. proximityTweaker proximityTweaker compound Proximity tweakers input array. proximityWorldMatrix proximityWorldMatrix matrix Proximity tweaker matrix. Child of proximityTweaker. proximityLocalMatrix proximityLocalMatrix matrix Proximity tweaker local matrix. Child of proximityTweaker. rivetScale rivetScale float[3] Scale tweak input. falloff falloff float Proximity tweak falloff. Child of proximityTweaker. texture texture color Input color map adjustment. rotationTextureAmplitude rotationTextureAmplitude float Color map adjustment amplitude. textureBothDirections textureBothDirections bool Avarage color map adjustment to both direction. -0.5 0.5 instead of 0 to 1. scaleTextureAmplitude scaleTextureAmplitude float Color map scale affect amplitude. Outputs Long-Name Short-Name Type Description translate t float[3] Translation output. Child of transform. rotate r angle[3] Rotation output. Child of transform. transform transform compound Output transforms array. scale s angle[3] Scale output. Child of transform. baseMesh baseMesh mesh Input base-mesh. mnsMeshSeparate === Author: Assaf Ben Zur === A simple node to drive seprated shell objects using one combined mesh. Inputs Long-Name Short-Name Type Description mesh mesh mesh Input mesh to separate. inShell inShell mesh Input shell object array. Outputs Long-Name Short-Name Type Description outMesh outMesh mesh Result shell meshes array. mnsNodeRelationship === Author: Assaf Ben Zur === BLOCK main relationship node. Inputs Long-Name Short-Name Type Description messageIn messageIn message Input master node. messageOut messageOut message Input slaves nodes array. deleteSlaves deleteSlaves message Input delete only slaves nodes array. mnsPointsOnCurve === Author: Assaf Ben Zur === A fast and efficient parameter based compute node to sample and control points along a given curve. In combination with mnsBuildTransformsCurve will result in a very advanced and robust \"spline IK\" control. - Creation modes + Parametric - curve parameterized position calculation + Uniform - Addaptive uniform sampling + Fixed length - Uniform sampling based on an input max length. Initialized to curve length on creation, Keyable. - Position control - Rotation control + Aim modes - curveTangent, object + Up modes - curveNormal, up-curve, worldX, worldY, worldZ, object - Scale control - Spring ability Inputs Long-Name Short-Name Type Description curve crv nurbsCurve Input curve to sample. upCurve upCrv nurbsCurve Input up curve to sample. upObject upObj matrix Input up object matrix to use if requsted. aimObject aimObj matrix Input aim object matrix to use if requsted. globalScale globalScale float Global scale multiplier. numOutputs numO int Number of outputs/samples. mode m enum direction=i Smaple mode- parametric, uniform, uniformFixedLength. cycle cycle bool Enable cycle mode. closedShape closedShape bool Enable closed shape mode. uScale uScl float Global positions U-Scale adjustment. uScaleInverse uSclInv float Global positions U-Scale-Inverse adjustment. uScaleMid uSclMid float Global positions U-Scale-mid adjustment. uScaleMidPos uSclMidPos float U-Scale-mid-position value. uScaleMidInverse uSclMidInv float Global positions U-Scale-mid-inverse adjustment. uOffset uOffset float Global positions U-offset adjustment. inverse inv bool Inverse result order. fixedLength fixedLength float The maximum fixed length for the result sample if requested. creationLength creationLen float Value store for the creation curve length. curveLength crvLrn float Current curve length display. uTugScale uTugScl float Global positions U-Tug-Scale adjustment. uTugScaleTension uTugSclTension float Global positions U-Tug-Scale-tension parameter. uTugOffset uTugOffset float Global positions U-Tug-Offset adjustment. rotateMode rotMode enum Samples rotation mode- curveTangent, objectAim. upMode upMode enum Samples rotation up mode- normal, curve, worldX, worldY, worldZ, objectUp. scaleMode sclMode enum Samples scale mode- absuloteCurveLength, addaptiveCurveLength, segmentLengthDependent. squashMode squashMode enum Samples squash mode- squashStretch, squash, stretch, uniform, none. doRotation doRot bool Do samples rotation. doScale doScl bool Do samples scale. rotateOrder ro enum direction=i Calculation rotation order. aimAxis aimAxis enum Aim axis choice. upAxis upAxis enum Up axis choice. customPointsUpMode cusPointsUpMode enum Custom tweakers rotation up mode. excludePolesTranslation excludePolesTranslation bool exclude translation set for base and tip. excludePolesRotation excludePolesRotation bool exclude rotation set for base and tip. excludeBaseRotation excludeBaseRotation bool exclude rotation set for base. Only if excludePolesRotation is set to True. excludeTipRotation excludeTipRotation bool exclude rotation set for tip. Only if excludePolesRotation is set to True. excludePolesScale excludePolesScale bool exclude scale set for base and tip. twistAimStart twistAimStart float Self explanatory. twistAimMid twistAimMid float Self explanatory. squeezeAim squeezeAim float Self explanatory. waveAimAngle waveAimAng float Self explanatory. twistAimWavePhase twistAimWavePhase float Self explanatory. twistAimMidPos twistAimMidPos float Self explanatory. twistAimEnd twistAimEnd float Self explanatory. twistAimAll twistAimAll float Self explanatory. aimToObj aimToObj float Self explanatory. upToObj upToObj float Self explanatory. twistUpStart twistUpStart float Self explanatory. twistUpMid twistUpMid float Self explanatory. twistUpSqueeze twistUpqueeze float Self explanatory. waveUpAngle waveUpAng float Self explanatory. waveUpPhase waveUPPhase float Self explanatory. twistUpMidPos twistUpMidPos float Self explanatory. twistUpEnd twistUpEnd float Self explanatory. twistUpAll twistUpAll float Self explanatory. twistTertiaryStart twistTerStart float Self explanatory. twistTertiaryMid twistTerMid float Self explanatory. tertiarySqueeze terSqueeze float Self explanatory. tertiaryWaveAngle tertiaryWaveAng float Self explanatory. tertiaryWavePhase terWavePhase float Self explanatory. twistTertiaryMidPos twistTerMidPos float Self explanatory. tertiaryTwistEnd terTwistEnd float Self explanatory. tertiaryTwistAll terTwistAll float Self explanatory. resetScale resetScl int Reset scale values to current state. scaleMaxAddaptive sclMaxAddaptive bool Adapt max scale to squash/scale relative values. squashFactor squashFactor float Squash multiplier. squashPos squashPos float Squash position. scaleStart sclStart float Self explanatory. scaleMid sclMid float Self explanatory. scaleMidPos sclMidPos float Self explanatory. scaleWaveAmp sclWaveAmp float Self explanatory. scaleWavePhase sclWavePhase float Self explanatory. scaleEnd sclEnd float Self explanatory. scaleAll sclAll float Self explanatory. scaleAllAim scaleAllAim float Self explanatory. scaleAllUp scaleAllUp float Self explanatory. scaleAllTertiary scaleAllTertiary float Self explanatory. scaleMin sclMin float Self explanatory. scaleMax sclMax float Self explanatory. springMode sprMode enum Samples spring mode- UScale, UScaleInverse, UMidScaleInverse, UTugOffset, UTugScale. springStrength sprStrength float spring strength. springDamp sprDamp float Spring damping factor. springStiffness sprStiffness float Spring stiffness factor. goalMatrix goalMatrix matrix Spring goal matrix. doSpring doSpr bool Do spring calculation. time time time Input time value. customPosition customPosition compound Custom tweakers input transforms array. uPosition uPos float Custom tweaker U-Position. Child of customPositionOut. twist twist float Custom tweaker twist value. Child of customPositionOut. aimRotation aimRot float Custom tweaker aim-rotation value. Child of customPositionOut. tertiaryRotation tertiaryRot float Custom tweaker tertiary-rotation value. Child of customPositionOut. scaleAim sclAim float Custom tweaker aim-scale value. Child of customPositionOut. scaleUp sclUp float Custom tweaker up-scale value. Child of customPositionOut. tertiaryScale terScl float Custom tweaker tertiary-scale value. Child of customPositionOut. falloff falloff float Custom tweaker falloff value. Child of customPositionOut. Outputs Long-Name Short-Name Type Description transforms transforms compound Result transforms array. translate t float[3] Result transform translation values. Child of transforms. rotate r angle[3] Result rotation translation values. Child of transforms. matrix Result matrix. Child of transforms. scale s float[3] Result scale translation values. Child of transforms. customPositionOut cusPosOut compound Custom tweakers offset transformation values array. cusTranslate cusT float[3] Custom tweakers offset translation values. Child of customPositionOut. cusRotate cusR angle[3] Custom tweakers offset rotation values. Child of customPositionOut. mnsRemapFloatArray === Author: Assaf Ben Zur === This simple node will take the input value (as float or angle) and split and remap the values across the requested output count, based on the given values map graph attribute. The value can also be re-ranged between two values, using the remapToRnage attributes given. The input value plug will accept floats, doubles and angles (genericAttr). The output plug will be set according to the input type given. Inputs Long-Name Short-Name Type Description valuesMap valuesMap float(array) Output values remap graph. value value float Input value to remap. Can be float, double and angle. angleOutputAsDegrees angleOutputAsDegrees bool In case the input is set to angle, if this is set to true, the output values will be in degrees instead of the original radians input. remapToRange remapToRange bool A choice to remap the outputs to a new range, using the relevant attributes. outputCount outputCount int The amount of outputs to remap the input value to. min min float RemapToRnage new minimum value. max max float RemapToRnage new maximum value. oldMin oldMin float RemapToRnage old minimum value. oldMax oldMax float RemapToRnage old maximum value. Outputs Long-Name Short-Name Type Description outValue outValue float Output values array. mnsResampleCurve === Author: Assaf Ben Zur === A simple light weight curve re-sampler. Primaraly used to embed mnsThreePointArc into an IK setup. Inputs Long-Name Short-Name Type Description resampleMode resampleMode enum Reample mode- parametric, uniform. degree degree int Reample degree. sections sections int Reample amount of sections. inputCurve inputCurve nurbsCurve Input curve to re-sample. Outputs Long-Name Short-Name Type Description outCurve outCurve nurbsCurve Result curve. mnsSimpleRivets === Author: Assaf Ben Zur === This is a simple mesh rivet node. This node will take any amount of input start position as matrix and will compile a transformation matrix for the closest face center position on the given input mesh. This node will output the result in world space, unless an inpur targetParentInverseMatrix is plugged into the relevant element. The deafult output will be the closest face center transformation matrix unless maintainOffset is set to ON- then the offset will be calculated and stored resulting in the same transformation matrix as the startPosition at bind. Live mode should only be used for debugging purposes as this will initiate the nodes initialization process on every evaluation- impacting the nodes performance significantly. The initialization process will be performed from from the given input mesh, unless a base mesh is plugged in to baseMesh plug. It is recommended to avoid keeping baseMesh and startPosition plugs live. Inputs Long-Name Short-Name Type Description mesh mesh mesh Input mesh to rivet to. targetWorldMatrix targetWorldMatrix matrix Input mesh world matrix. rivet rivet compound (Array) Input rivets compound array. rivetStartPosition rivetStartPosition matrix Input start position. Rivet position will be calculated from this origin matrix. targetParentInverseMatrix targetParentInverseMatrix matrix Target transform parent inverse matrix. Use when output result is needed in local space (connect the target transform parentInverseMatrix plug) liveMode liveMode bool Live mode. Calculate everything in every evaluation. maintainOffset maintainOffset bool Maintain offset between rivet position and target mesh. Outputs Long-Name Short-Name Type Description translate t float[3] Translation output. Child of transform. rotate r angle[3] Rotation output. Child of transform. transform transform compound Output transforms array. scale s angle[3] Scale output. Child of transform. baseMesh baseMesh mesh Input base-mesh. mnsSimpleSquash === Author: Assaf Ben Zur === This simple node is designed to output a scale value to squash and stretch a given single transform value. Based on the creation distance between the target and source matricies, the scale values will be calculated using a squash/stretch algorithm using the dynamic distance (or current distance). All input values will be taken into account calculating the result. The static arc length is the creation length. This value can be set manually if needed, although the node will set this value in it's initialization stage- in case the source and handle matricies where connected. This value will be set automatically only once, in case this value needs to be changed it will need to be set manually. Aim axis attribute- stretch value will be set to the aim axis selection, squash value will be set to the remaining axes. Global scale attribute - this attribute is set to scale the static arc length to avoid unwanted scaling issues when aiming for a uniform scale of the target transform. Inputs Long-Name Short-Name Type Description handleWorldMatrix handleWorldMatrix matrix Input handle world matrix. squashRootWorldMatrix squashRootWorldMatrix matrix Input squash root position world matrix. squashFactor squashFactor float Input squash factor. stretchFactor stretchFactor float Input stretch factor. stretchMin stretchMin float Input minimum stretch value. stretchMax stretchMax float Input maximum stretch value. squashMin squashMin float Input maximum squash value. squashMax squashMax float Input minimum squash value. staticArcLength staticArcLength float Static arc length / creation length value. aimAxis aimAxis enum Aim axis- stretch value will be set to the aim axis selection, squash value will be set to the remaining axes. globalScale globalScale float Global scale multiplier value. Outputs Long-Name Short-Name Type Description scale s float[3] Output scale result. arcLength arcLength float Current arc length. mnsSphereVectorPush === Author: Assaf Ben Zur === Presenting mnsSphereVectorPush deformer. This deformer was purpose built for the Eye-Meniscus deformation, but can be used for many more applications. As opposed to the commonly used \"matrixCollision\", mnsSphereVectorPush will also collide back faces and push them at a higher radius based on a thickness threshold (keyable). The node will accept unlimited collider matrix inputs and will combine the deformations with ease. The input radiuses and thicknesses can be varied and keyed to choice. Implementing the mnsSphereVectorPush deformer within the eyelid setup will result in a natural looking deformation of the cornea and the eyelids. This is the case for a closed eye pose as well- which will naturally suggest the eye aim even when it isn't seen, corresponding to real life behavior. The deformer can also be used to represent the eye volume- pushing the eyelid verticies towards the eye surface, for extreme poses of which are not handled correctly by the \"aroundCenterMatrix\" of mnsCurveZip due to a range which exceeds the normalization. Inputs Long-Name Short-Name Type Description collideMatrix collideMatrix matrix Input collision matrix. radius radius matrix Input collision radius. thicknessCollide thicknessCollide bool If true, collide against back-faces using the input threshold. thicknessThreshold thicknessThreshold float Backface avarage distance to collide against. collider collider compound Collision object input array. collideMethod collideMethod enum Collision method- matrix, position. mnsSpringCurve === Author: Assaf Ben Zur === This node is used to achive simple secondary motion proceduraly. Tihs node will accept an input curve and offset curves to act upon, and using the stiffness and damping graph attributes it will calculate a new curve with secondary motion embedded. This is an evaluation node rather then a simulation. Time needs to be connected to the node in order to see it's effect. Inputs Long-Name Short-Name Type Description inputCurve inputCurve nurbsCurve Input curve. inputOffsetCurve inputOffsetCurve nurbsCurve Input offset curve. strength strength float Global strength. 0 is do nothing. preventStretching preventStretching bool Calculate stretch prevention. startFrame startFrame int Evaluation start frame. startFrameFromRange startFrameFromRange bool If true, take the start frame from current maya range instead of the input value given. time time time Time input. stiffness stiffness graph Stiffness graph control. damping damping graph Damping graph control. Outputs Long-Name Short-Name Type Description outCurve outCurve nurbsCurve Result curve. outOffsetCurve outOffsetCurve nurbsCurve Result offset curve. mnsThreePointArc === Author: Assaf Ben Zur === This node was written to create a perfectly curved limb blend, instead of using common approaches like skinned curves, simulated tangents, scaled points, etc. This method provides a very elegant way of enabling curvable limbs to animators, avoiding the use of Maya's 'makeThreePointCircularArc' which doesn't support a case where the 3 input points are collinear, nor any input curve or blending support. Another major advantage of this node is the 'conformToMidPoint' attribute- This attribute signals the algorithm to take the mid-point into consideration when drawing the edit points of the calculated arc, 'pinning' the elbow/knee in place when blending to the curved shape, even when the ratio between the 2 bones is not even (most cases). The blend is triggered once with the attribute set to 'Off' - causing the knee to shift position completely- making it unusable in animation. Then, the blend is triggered when the attribute is 'On' and the knee is pinned in place, while the result curve edit points are being shifted based on the mid-point's position. Inputs Long-Name Short-Name Type Description point1 point1 matrix Input position A. point2 point2 matrix Input position B. point3 point3 matrix Input position C. blend blend float Blend value. blendSectionA blendSectionA float Section A only blend value. blendSectionB blendSectionB float Section B only blend value. swipeStart swipeStart float Swipe blend from start value. swipeStartFalloff swipeStartFalloff float Swipe blend from start falloff value. swipeMidToRoot swipeMidToRoot float Swipe blend from mid to start value. swipeMidToRootFalloff swipeMidToRootFalloff float Swipe blend from mid to start falloff value. swipeMidToEnd swipeMidToEnd float Swipe blend from mid to end value. swipeMidToEndFalloff swipeMidToEndFalloff float Swipe blend from mid to end falloff value. swipeEnd swipeEnd float Swipe blend from end to start value. swipeEndFalloff swipeEndFalloff float Swipe blend from end to start falloff value. collinearAction collinearAction enum Collinear action choice- inputCurve, resample. resampleMode resampleMode enum If resmapling is chosen, use this mode to resample- parametric, uniform. degree degree int If resmapling is chosen, use this degree. sections sections int If resmapling is chosen, use this amount of sections. conformMidPoint conformMidPoint bool Use the mid point to enhance clending algorithm. inputCurve inputCurve nurbsCurve Input curve. inputOffsetCurve inputOffsetCurve nurbsCurve Input offset curve. Outputs Long-Name Short-Name Type Description outCurve outCurve nurbsCurve Result Curve. outOffsetCurve outOffsetCurve nurbsCurve Result offset Curve. center center float[3] Result circle center point. radius radius float Result circle radius. mnsTransformSpring === Author: Assaf Ben Zur === Inputs Long-Name Short-Name Type Description inputWorldMatrix inputWorldMatrix float MObject MnsTransformSpring::aInputWorldMatrix targetParentInverseMatrix targetParentInverseMatrix float MObject MnsTransformSpring::aTargetParentInverseMatrix strength strength float Global strength. 0 is do nothing. startFrame startFrame int Evaluation start frame. startFrameFromRange startFrameFromRange bool If true, take the start frame from current maya range instead of the input value given. time time time Time input. stiffness stiffness graph Stiffness graph control. damping damping graph Damping graph control. Outputs Long-Name Short-Name Type Description translate t float MObject MnsTransformSpring::aOutTranslate","title":"Maya Plugins"},{"location":"Maya-Plugins/#maya-plugins","text":"","title":"Maya-Plugins"},{"location":"Maya-Plugins/#mns3biksolver","text":"=== Author: Assaf Ben Zur === Inputs Long-Name Short-Name Type Description boneLengthA bla float Base length A. boneLengthB blb float Base length B. boneLengthC blc float Base length C. blend blend float IK-FK blend value. rootFK rootFK matrix Input FK root matrix. kneeFK kneeFK matrix Input FK knee matrix. matrix Input FK ankle matrix. endFK endFK matrix Input FK end matrix. ikTarget ikTarget matrix Input IK target matrix. poleVector poleVector matrix Input pole-vector target matrix. rootWorldMatrix rootWorldMatrix matrix Module root input matrix. roll roll float IK addative roll value. slide slide float IK mid slide value. softness softness float IK softness parameter. stretchLimit stretchLimit float IK stretch limit value. 1 is no stretch, 2 is double the length. aimAxis aimAxis enum Aim axis choice. upAxis upAxis enum Up axis choice. segmentScaleCompensate segmentScaleCompensate bool calculate with segment scale compensate on or off. Outputs Long-Name Short-Name Type Description rootTranslate rootTranslate float[3] Root out translate output. Child of outRoot. rootRotateX rootRotateX float Root out translate X output. Child of outRoot. rootRotateY rootRotateY float Root out translate Y output. Child of outRoot. rootRotateZ rootRotateZ float Root out translate Z output. Child of outRoot. rootRotate rootRotate angle[3] Root out rotate output. Child of outRoot. rootScale rootScale float[3] Root out scale output. Child of outRoot. outRoot outRoot compound Root output transformation values. KneeTranslate kneeTranslate float[3] Knee out translate output. Child of outKnee. kneeRotateX kneeRotateX float Knee out translate X output. Child of outKnee. kneeRotateY kneeRotateY float Knee out translate Y output. Child of outKnee. kneeRotateZ kneeRotateZ float Knee out translate Z output. Child of outKnee. kneeRotate kneeRotate angle[3] Knee out rotate output. Child of outKnee. kneeScale kneeScale float[3] Knee out scale output. Child of outKnee. outKnee outKnee compound Knee output transformation values. ankleTranslate ankleTranslate float[3] Ankle out translate output. Child of outAnkle. ankleRotateX ankleRotateX float Ankle out translate X output. Child of outAnkle. ankleRotateY ankleRotateY float Ankle out translate Y output. Child of outAnkle. ankleRotateZ ankleRotateZ float Ankle out translate Z output. Child of outAnkle. ankleRotate ankleRotate angle[3] Ankle out rotate output. Child of outAnkle. ankleScale ankleScale float[3] Ankle out scale output. Child of outAnkle. outAnkle outAnkle compound Ankle output transformation values. endTranslate endTranslate float[3] End out translate output. Child of outEnd. endRotateX endRotateX float End out translate X output. Child of outEnd. endRotateY endRotateY float End out translate Y output. Child of outEnd. endRotateZ endRotateZ float End out translate Z output. Child of outEnd. endRotate endRotate angle[3] End out rotate output. Child of outEnd. endScale endScale float[3] End out scale output. Child of outEnd. outEnd outEnd compound End output transformation values. ikVis ikVis bool IK mode visibility. fkVis fkVis bool FK mode visibility.","title":"mns3BIkSolver"},{"location":"Maya-Plugins/#mnsannotate","text":"=== Author: Assaf Ben Zur === This node is a utility node used to present value annotations in maya's viewport easily. When needing to present any keyframed values in a playblast within maya, there isn't any maya native node to allow values display within the VP. This node was created for this need. All connected attributes will be displayed as a new line presenting attributes and their current values, updating in real time. The display settings are controled within this node, where the position of the display is controlled via the custom locator created with it. The amount of attribute display is unlimited, and multiple unlimited instances of this node can be created freely. This is mainly used to display technicall setups. Inputs Long-Name Short-Name Type Description attributes attrs multi Input attributes array to display, unlimited amount. Each attribute component will be displayed as a single line. fontSize fontSize float Display Font Size. fontColor fontColor float[3] Display Font Color, RGB (0 to 1). fontTransparency fontTransparency float Font transperancy. 1 = Fully opaque, 0 = Fully tansparennt. precision precision int Numberic attribute display precision- value represents the amount of integers right to the decimal point. lineSpacing lineSpacing float Line spacing between attributes line. drawFlat drawFlat int Draw in 2D mode, regardless of the matrix position. The position is dictated by positionX and positionY attributes, relative to the viewports screen space resolution. positionX positionX double Display top-left corener X position, if drawFlat attribute is True. positionY positionY double Display top-left corener y position, if drawFlat attribute is True. nameOnlyMode nameOnlyMode int MObject mnsAnnotate::aNameMode","title":"mnsAnnotate"},{"location":"Maya-Plugins/#mnsautowheeldrive","text":"=== Author: Assaf Ben Zur === Inputs Long-Name Short-Name Type Description startFrame startFrame int Evaluation start frame. startFrameFromRange startFrameFromRange bool If true, take the start frame from current maya range instead of the input value given. time time time Time input.","title":"mnsAutoWheelDrive"},{"location":"Maya-Plugins/#mnsbuildtransformscurve","text":"=== Author: Assaf Ben Zur === This node builds a nurbsCurve shape, based on input transforms array. The curve parameters are dictated by this node's attributes, and can be dynamiclly changed and even keyframed if needed. This node also creates and offset curve shape result, to be used later as an Up-Vector for every single arbitrary point along the result main curve. Inputs Long-Name Short-Name Type Description globalScale globalScale float Global scale multiplier. tweakCurve tweakCurve nurbsCurve Input tweak curve shape. tweakCurveBase tweakCurveBase nurbsCurve Input tweak curve base shape. buildMode buildMode enum Build mode- EPs, CVs, Hermite, TangentedCVs, bezier. transforms transforms compound Transforms array to build the curve from. matrix matrix matrix Input matrix transform, child of transforms. degree degree int Output curve degree, 1-5. offsetX offsetX float Output offset curve X parameter. offsetY offsetY float Output offset curve Y parameter. offsetZ offsetZ float Output offset curve Z parameter. tangentDirection tangentDirection enum If build mode is on Hermite, this paremeter dictates the tangent direction. reverse reverse int Reverse output curve and offset curve. HermiteSteps HermiteSteps int Hermite mode steps amount. tangentLength tangentLength float Control tangent length (if present) OffsetType OffsetType enum Offset build type - world or local. buildOffsetCurve buildOffsetCurve int Initiate offset curve build. resample resample bool Resample curve before output, based on substeps paremeter. substeps substeps int resample substeps. Outputs Long-Name Short-Name Type Description outCurve outCurve kNurbsCurve Result curve shape. outOffsetCurve outOffsetCurve nurbsCurve Result offset curve shape. length length double Result curve length. offsetLength offsetLength double Result offset curve length.","title":"mnsBuildTransformsCurve"},{"location":"Maya-Plugins/#mnscameragateratio","text":"=== Author: Assaf Ben Zur === A simple utility callback node to dynamiclly control and update the input camer'as display \"Camera-Gate\" parameters. Inputs Long-Name Short-Name Type Description cameraIn cameraIn message Affected camera node. gateWidth gateWidth float Cemera gate width. gateHeight gateHeight float Cemera gate height.","title":"mnsCameraGateRatio"},{"location":"Maya-Plugins/#mnsclosestpointsonmesh","text":"Inputs Long-Name Short-Name Type Description inMesh inMesh mesh Input mesh to find closest point to. inPosition inPosition compound(Array) Input position to calculate a result for. Array Attr. matrix matrix matrix Input matrix to calculate a result for. Array Attr. targetParentMatrix targetParentMatrix matrix Target parent matrix to multiply by before setting the result. Outputs Long-Name Short-Name Type Description outPosition op vector Output position result.","title":"mnsClosestPointsOnMesh"},{"location":"Maya-Plugins/#mnscompressiontensionblend","text":"=== Author: Assaf Ben Zur === Deformer. A simple compression and tension based deformer. This deformer will detect, display and deform a mesh based on the difference between the current deformed state and an input base-state (base-mesh). The deformer contains 3 display modes: - Compression & Tension (50% gray as base-state) - Compression Only (black as base-state) - Tension (black as base-state) The deformer also conatins separate multipliers for both tension and compression. This deformer can be used to drive corrective shapes, wrinkles, volume gain/loss and much more. Inputs Long-Name Short-Name Type Description baseMesh baseMesh mesh Static base mesh input. tensionTarget tensionTarget mesh Tension blend target. compressionTarget compressionTarget mesh Compression blend target. liveMode liveMode bool Live mode. Re-calculate edge lengthes on evaluation. displayMode displayMode enum Map display mode- None, compressionTension, compression, tension. compressionMultiplier compressionMultiplier float Global compression multiplier. tensionMultiplier tensionMultiplier float Global tension multiplier.","title":"mnsCompressionTensionBlend"},{"location":"Maya-Plugins/#mnscurvetweak","text":"=== Author: Assaf Ben Zur === This node was created in order to achive curve modifications/tweaks, without changing its form, not it's shape at bind position. The input and output curves will match while the base curve and tweak curve match in shape. Once any difference between the base shape and tweak shape was detected, the difference between these curves will be projected onto the input curve. The objective of this node is to maintain all curve attributes/data (nSpans, nCvs, form, degree) unchanged while still having the ability to tweak the curve with different parameters. Inputs Long-Name Short-Name Type Description inputCurve inputCurve kNurbsCurve Input curve to tweak. Output curve will be the same as this curve while the tweak curve matches the base curve. inputBaseCurve inputBaseCurve kNurbsCurve Input base curve. This curve will be used to calculate the delta for the tweak. inputTweakCurve inputTweakCurve kNurbsCurve Input twek curve. This curve is intended to match the base curve as bind. This curve should be modified - after the curve is modified, the delta difference between it and the base curve will be projected on the input curve. Outputs Long-Name Short-Name Type Description outCurve outCurve kNurbsCurve Result curve shape.","title":"mnsCurveTweak"},{"location":"Maya-Plugins/#mnscurvevariable","text":"=== Author: Assaf Ben Zur === Curve based solve for a Variable-FK Setup. This fast and efficient node allows the user to create a variable FK setup using input curves and local transformations, outputting a solved curve and up-curve- instead of the more common transforms output method. The node will accept any amount of input transforms, outputting the complex offset parent solve for each input as well as the solved curves shapes. This is to avoid the use of any extra nodes or multiple parent transforms- pinning the controls to the output curve at all times. The initial solve, as well as all features are calculated within a single loop. As opposed to the common Variable FK setup, the curve based approach eliminates the Rest-Pose constant- making the node's algorithm Rest-Pose dynamic. In fact, it doesn't exist. This approach uses only the input array amount constant to calculate a uniform positioning along the output curve- allowing the input curve to be changeable (live / dynamic). Notice that the amount of input variable controls is completely independent of the main controls input. Inputs Long-Name Short-Name Type Description curve crv nurbsCurve Input curve. upCurve upCrv nurbsCurve Input offset curve. inTransform inTransform compound Input variable control values array. uPosition uPos float Input U position. Child of inTransform. strength strength float Input strength. Child of inTransform. aimTranslate aimT float Input aim translation. Child of inTransform. upTranslate upT float Input up translation. Child of inTransform. terTranslate terT float Input tertiary translation. Child of inTransform. falloff falloff float Input falloff value. Child of inTransform. aimRotation aimRot angle Input aim-rotation value. Child of inTransform. upRotation upRot angle Input up-rotation value. Child of inTransform. tertiaryRotation terRot angle Input tertiary-rotation value. Child of inTransform. localMatrix localMatrix angle Input local transformation matrix. Child of inTransform. upMode upMode enum Up mode- normal, curve, worldX, worldY, worldZ. substeps substeps int Resample substeps value. translateMode tMode enum Control translation mode- IK, FK. degree degree int Result curves degree. buildMode buildMode enum Result curve build mode- EPs, CVs. rotateOrder ro enum Calculation rotation-order. aimAxis aimAxis enum Aim axis choice. upAxis upAxis enum Up axis choice. offsetType offsetType enum Offset curve adjustment mode- local, world. offsetX offsetX float Offset curve adjustment offset X parameter. offsetY offsetY float Offset curve adjustment offset Y parameter. offsetZ offsetZ float Offset curve adjustment offset Z parameter. uScale uScale float Global U-Scale adjusment. Addative to array indevidual u inputs. uOffset uOffset float Global U-Offfset adjusment. Addative to array indevidual u inputs. startAmp startAmp float Sine start amplitude value. endAmp endAmp float Sine end amplitude value. amplitudeAim amplitudeAim float Sine calculation X direction amplitude value. amplitudeUp amplitudeUp float Sine calculation Y direction amplitude value. amplitudeTertiary amplitudeTertiary float Sine calculation Z direction amplitude value. frequencyAim frequencyAim float Sine calculation X direction frequency value. frequencyUp frequencyUp float Sine calculation Y direction frequency value. frequencyTertiary frequencyTertiary float Sine calculation Z direction frequency value. phaseAim phaseAim float Sine calculation X direction phase value. phaseUp phaseUp float Sine calculation Y direction phase value phaseTertiary phaseTertiary float Sine calculation Z direction phase value frequency frequency float Sine calculation global addative frequency value. phase phase float Sine calculation global addative phase value. startPos startPos float Sine start position value. outCtrlsUpMode outCtrlsUpMode enum Out position transforms up type - normal, curve, worldX, worldY, worldZ. Outputs Long-Name Short-Name Type Description outCurve outCurve nurbsCurve Output curve shape. outOffsetCurve outOffsetCurve nurbsCurve Output offset curve shape. outTransform outTransform compound Output control offset position and rotation array. translate t float[3] Output control offset position, child of outTransform. rotate r angle[3] Output control offset rotation, child of outTransform. rotateX rotX angle Output control offset rotation, X component, child of rotate. rotateY rotY angle Output control offset rotation, Y component, child of rotate. rotateZ rotZ angle Output control offset rotation, Z component, child of rotate.","title":"mnsCurveVariable"},{"location":"Maya-Plugins/#mnscurvezip","text":"=== Author: Assaf Ben Zur === Curve based node. This is primarily used for eyelids and lips. This fast solution was developed to replace complex and heavy graphs- containing many math nodes, curve deformers and constraints. This setup provides a very clean deployment, processing the math algorithm internally. Combining this node with mnsBuildTransformsCurve and mnsPointsOnCurve, will result in a very efficient, dynamic and flexible setup. All calculations are processed within a single loop. All curve operations are aware of one another, and are NOT addative- meaning that all operations are available at any position, and will NOT break one another, nor overlap. All attributes are not minimum limited to 0 and can be adjusted to the negative direction- pulling the bind pose against each other instead of towards each other. The node contains a centerMatrix input plug, which is a live world position that is used to scale the calculated vectors based on the bind position offset (per curve parameter). The problem arising from this method is a mismatch at any meet position between curve A and B due to an offset variation between all points (except for a perfect circle scenario, which is never the case). This problem is solved using a conform attribute within which will pull one of the curves (based on user choice) to the other below a selected distance threshold- Resulting in a watertight-seal. Using mnsPointsOnCurve to sample the result curves allows for a simple skinCluster to deform the mesh. mnsCurveZip will output a pair of offset curves as well as the result curves, calculated by world axis vectors or the centerMatrix as a base, which are used as an Up-Curve input for the mnsPointsOnCurve node to manage rotations correctly as well. The node contatins some more important inputs: The tweakCurves inputs. Aspiring to an inclusive and comprehensive setup, tweak curves (A, B and Mid) can be plugged in to expose another manual layer of animation using scene controls. The input curves are 100% independent of the base curve inputs and DO-NOT need to share topology with each other, nor the source inputs - as they are being re-sampled internally based on the build mode. This means that the tweak controls amount is limitless and is NOT a constant, nor predefined. Inputs Long-Name Short-Name Type Description bindCurveA bindCurveA nurbsCurve Input curve A base-curve shape. tweakCurveA tweakCurveA nurbsCurve Input curve A curve shape. bindCurveB bindCurveB nurbsCurve Input curve B base-curve shape. tweakCurveB tweakCurveB nurbsCurve Input curve B curve shape. tweakCurveABase tweakCurveABase nurbsCurve Input curve A tweak base-curve shape. tweakCurveBBase tweakCurveBBase nurbsCurve Input curve B tweak base-curve shape. midCurve midCrv nurbsCurve Input target mid curve. midCurveBase midCrvBase nurbsCurve Input mid tweak curve base. midCurveTweak midCrvTweak nurbsCurve Input mid tweak curve. centerMatrix centerMatrix matrix Input center transformation matrix. midPointMatrix midPointMatrix matrix Input mid point traget matrix. sampleMode m enum Curve sample mode- parametric, uniform. matchInputCurve matchInputCurve enum Result curve matched parameters to- none, curveA, curveB. substeps substeps int Result curve resampling sub-step value. degree degree int Result curve degree value. buildMode buildMode enum Curve build mode- EPs, CVs. midGenerateFrom midGenerateFrom enum Generate automatic mid curve from- bindBases, tweakCurves, input. midBias midBias float Generated curve bias. aroundCenter aroundCenter bool Calculate results considering the input center matrix. conformToMeetPoint conformToMeetPoint bool Conform the selected curve result to meet the oter curve based on set parameters. curveToConform curveToConform enum Which curve to conform - curveA, curveB. conformDistancethreshold conformDistancethreshold enum Which curve to conform - curveA, curveB. AToMid AToMid float Blend curve A to mid-curve. BToMid BToMid float Blend curve B to mid-curve. AToB AToB float Blend curve A to curve B. BToA BToA float Blend curve B to curve A. allToMidPoint allToMidPoint float Blend both curves to mid-curve. pushOut pushOut float Curves push-out added value. zipStart zipStart float Zip start value. zipStartFalloff zipStartFalloff float Zip start falloff value. zipEnd zipEnd float Zip end value. zipEndFalloff zipEndFalloff float Zip end falloff value. glue glue bool Do glue. glueTherhold glueTherhold float Glue threshold value. offsetBase offsetBase enum Offset curve build mode. centerMatrix, worldX, worldY, worldZ. offset offset float Offset curve build parameter. globalMultiplier globalMultiplier float Global value multiplier. Outputs Long-Name Short-Name Type Description outCurveA outCurveA nurbsCurve Result curve A shape. outCurveB outCurveB nurbsCurve Result curve B shape. outCurveAOffset outCurveAOffset nurbsCurve Result curve A offset shape. outCurveBOffset outCurveBOffset nurbsCurve Result curve B offset shape.","title":"mnsCurveZip"},{"location":"Maya-Plugins/#mnscurvezipb","text":"=== Author: Assaf Ben Zur === Curve based node. This is primarily used for eyelids and lips. This fast solution was developed to replace complex and heavy graphs- containing many math nodes, curve deformers and constraints. This setup provides a very clean deployment, processing the math algorithm internally. Combining this node with mnsBuildTransformsCurve and mnsPointsOnCurve, will result in a very efficient, dynamic and flexible setup. All calculations are processed within a single loop. All curve operations are aware of one another, and are NOT addative- meaning that all operations are available at any position, and will NOT break one another, nor overlap. All attributes are not minimum limited to 0 and can be adjusted to the negative direction- pulling the bind pose against each other instead of towards each other. The node contains a centerMatrix input plug, which is a live world position that is used to scale the calculated vectors based on the bind position offset (per curve parameter). The problem arising from this method is a mismatch at any meet position between curve A and B due to an offset variation between all points (except for a perfect circle scenario, which is never the case). This problem is solved using a conform attribute within which will pull one of the curves (based on user choice) to the other below a selected distance threshold- Resulting in a watertight-seal. Using mnsPointsOnCurve to sample the result curves allows for a simple skinCluster to deform the mesh. mnsCurveZip will output a pair of offset curves as well as the result curves, calculated by world axis vectors or the centerMatrix as a base, which are used as an Up-Curve input for the mnsPointsOnCurve node to manage rotations correctly as well. The node contatins some more important inputs: The tweakCurves inputs. Aspiring to an inclusive and comprehensive setup, tweak curves (A, B and Mid) can be plugged in to expose another manual layer of animation using scene controls. The input curves are 100% independent of the base curve inputs and DO-NOT need to share topology with each other, nor the source inputs - as they are being re-sampled internally based on the build mode. This means that the tweak controls amount is limitless and is NOT a constant, nor predefined. Inputs Long-Name Short-Name Type Description globalScale globalScale double Global scale value. inTweakAPosition inTweakAPosition matrix (array) Input tweaker local matrix. inTweakBPosition inTweakBPosition matrix (array) Input tweaker local matrix. tweakMode tweakMode enum Tweak curve build mode. tweakMirrorMatrix tweakMirrorMatrix matrix Mirror matrix to add to the local tweaker transfomation build. bindCurveA bindCurveA nurbsCurve Input curve A base-curve shape. bindCurveB bindCurveB nurbsCurve Input curve B base-curve shape. centerMatrix centerMatrix matrix Input center transformation matrix. sampleMode m enum Curve sample mode- parametric, uniform. matchInputCurve matchInputCurve enum Result curve matched parameters to- none, curveA, curveB. substeps substeps int Result curve resampling sub-step value. degree degree int Result curve degree value. buildMode buildMode enum Curve build mode- EPs, CVs. midBias midBias float Generated curve bias. aroundCenter aroundCenter bool Calculate results considering the input center matrix. conformToMeetPoint conformToMeetPoint bool Conform the selected curve result to meet the oter curve based on set parameters. curveToConform curveToConform enum Which curve to conform - curveA, curveB. conformDistancethreshold conformDistancethreshold enum Which curve to conform - curveA, curveB. AToMid AToMid float Blend curve A to mid-curve. BToMid BToMid float Blend curve B to mid-curve. AToBindB AToBindB float Blend curve A to curve B. BToBindA BToBindA float Blend curve B to curve A. AToB AToB float Blend curve A to curve B. BToA BToA float Blend curve B to curve A. sCurveA sCurveA float Blend curve A into a procedural S shape. sCurveB sCurveB float Blend curve B into a procedural S shape. allToMidPoint allToMidPoint float Blend both curves to mid-curve. pushOut pushOut float Curves push-out added value. zipStart zipStart float Zip start value. zipStartFalloff zipStartFalloff float Zip start falloff value. zipEnd zipEnd float Zip end value. zipEndFalloff zipEndFalloff float Zip end falloff value. offsetBase offsetBase enum Offset curve build mode. centerMatrix, worldX, worldY, worldZ. offset offset float Offset curve build parameter. Outputs Long-Name Short-Name Type Description outCurveA outCurveA nurbsCurve Result curve A shape. outCurveB outCurveB nurbsCurve Result curve B shape. outCurveAOffset outCurveAOffset nurbsCurve Result curve A offset shape. outCurveBOffset outCurveBOffset nurbsCurve Result curve B offset shape. outTweakA outTweakA compound (array) Parent attribute that holds output values for tweaker offset position. outTweakATranslate outTweakATranslate vector Output offset position for a given tweaker. outTweakARotate outTweakARotate vector Output offset rotation for a given tweaker. outTweakB outTweakB compound (array) Parent attribute that holds output values for tweaker offset position. outTweakBTranslate outTweakBTranslate vector Output offset position for a given tweaker. outTweakBRotate outTweakBRotate vector Output offset rotation for a given tweaker.","title":"mnsCurveZipB"},{"location":"Maya-Plugins/#mnsdynamicpivot","text":"=== Author: Assaf Ben Zur === This is a simple node to calculate a foot's dynamic pivot internally, acoiding the use of many transforms and node connections. Given an input curve, world origin position (as matrix) and mapping info, this node will map the input rotation values into a new custom point adding the rotation into the translation. This essentailly will push the new point rapidly away from it's origin into the mapping direction. Now using the given input curve, the closest point on curve from the new point will be calcultaed and outputted into the rotatePivot plug. This output plug can then be plugged into a custom pivot attribute of any transform- creating a dynamiclly calculated pivot along the given curve. Inputs Long-Name Short-Name Type Description inputCurve inputCurve nurbsCurve Input curve. rotateX rx angle Input local X rotation. rotateY ry angle Input local Y rotation. rotateZ rz angle Input local Z rotation. rotate r angle[3] Input rotations. originWorldMatrix owm matrix Input origin position to strat the calculation from. targetParentInverseMatrix tpim matrix Target transform parent inverse matrix to localize the rotate pivot position result. mapRotXTo mapRotXTo enum Mapping info from input X rotation. mapRotYTo mapRotYTo enum Mapping info from input Y rotation. mapRotZTo mapRotZTo enum Mapping info from input Z rotation. distRateMultiplier distRateMultiplier double The rotation rate of addition in the translation values. inputMultipliers inputMultipliers bool Pre-calc input multipliers. Outputs Long-Name Short-Name Type Description rotatePivot rotatePivot float[3] Result rotate pivot position.","title":"mnsDynamicPivot"},{"location":"Maya-Plugins/#mnsiksolver","text":"=== Author: Assaf Ben Zur === This IK-Solver node provides an alternative, faster and more reliable solution for a 2-joint IK set-up. This enhanced IK-solution offers a much cleaner approach as well, computing the blend internally- making any basic IK-FK set-up efficient, stable, fast and clean. To add on the internal FK-IK switch, this node contains a few more features that are already an industry standard: Softness - prevents a pop on ik limit approach. Slide - Knee position sliding (for character animation). Stretch - Providing a limb-stretch when the ik-solve is beyond its limit. Axis Switching - Offering an easy switch to any joint orientation. Inputs Long-Name Short-Name Type Description boneLengthA bla float Base length A. boneLengthB blb float Base length B. blend blend float IK-FK blend value. rootFK rootFK matrix Input FK root matrix. midFK midFK matrix Input FK mid matrix. endFK endFK matrix Input FK end matrix. ikTarget ikTarget matrix Input IK target matrix. poleVector poleVector matrix Input pole-vector target matrix. rootWorldMatrix rootWorldMatrix matrix Module root input matrix. roll roll float IK addative roll value. slide slide float IK mid slide value. softness softness float IK softness parameter. stretchLimit stretchLimit float IK stretch limit value. 1 is no stretch, 2 is double the length. aimAxis aimAxis enum Aim axis choice. upAxis upAxis enum Up axis choice. segmentScaleCompensate segmentScaleCompensate bool calculate with segment scale compensate on or off. Outputs Long-Name Short-Name Type Description rootTranslate rootTranslate float[3] Root out translate output. Child of outRoot. rootRotateX rootRotateX float Root out translate X output. Child of outRoot. rootRotateY rootRotateY float Root out translate Y output. Child of outRoot. rootRotateZ rootRotateZ float Root out translate Z output. Child of outRoot. rootRotate rootRotate angle[3] Root out rotate output. Child of outRoot. rootScale rootScale float[3] Root out scale output. Child of outRoot. outRoot outRoot compound Root output transformation values. midTranslate midTranslate float[3] Mid out translate output. Child of outMid. midRotateX midRotateX float Mid out translate X output. Child of outMid. midRotateY midRotateY float Mid out translate Y output. Child of outMid. midRotateZ midRotateZ float Mid out translate Z output. Child of outMid. midRotate midRotate angle[3] Mid out rotate output. Child of outMid. midScale midScale float[3] Mid out scale output. Child of outMid. outMid outMid compound Mid output transformation values. endTranslate endTranslate float[3] End out translate output. Child of outEnd. endRotateX endRotateX float End out translate X output. Child of outEnd. endRotateY endRotateY float End out translate Y output. Child of outEnd. endRotateZ endRotateZ float End out translate Z output. Child of outEnd. endRotate endRotate angle[3] End out rotate output. Child of outEnd. endScale endScale float[3] End out scale output. Child of outEnd. outEnd outEnd compound End output transformation values. ikVis ikVis bool IK mode visibility. fkVis fkVis bool FK mode visibility.","title":"mnsIKSolver"},{"location":"Maya-Plugins/#mnslipzip","text":"=== Author: Assaf Ben Zur === Curve based node. Inputs Long-Name Short-Name Type Description globalScale globalScale double Global scale value. inTweakAPosition inTweakAPosition matrix (array) Input tweaker local matrix. inTweakBPosition inTweakBPosition matrix (array) Input tweaker local matrix. tweakMode tweakMode enum Tweak curve build mode. tweakMirrorMatrix tweakMirrorMatrix matrix Mirror matrix to add to the local tweaker transfomation build. centerMatrix centerMatrix matrix Input center transformation matrix. sampleMode m enum Curve sample mode- parametric, uniform. substeps substeps int Result curve resampling sub-step value. degree degree int Result curve degree value. buildMode buildMode enum Curve build mode- EPs, CVs. midBias midBias float Generated curve bias. aroundCenter aroundCenter bool Calculate results considering the input center matrix. conformToMeetPoint conformToMeetPoint bool Conform the selected curve result to meet the oter curve based on set parameters. curveToConform curveToConform enum Which curve to conform - curveA, curveB. conformDistancethreshold conformDistancethreshold enum Which curve to conform - curveA, curveB. AToMid AToMid float Blend curve A to mid-curve. BToMid BToMid float Blend curve B to mid-curve. AToB AToB float Blend curve A to curve B. BToA BToA float Blend curve B to curve A. sCurveA sCurveA float Blend curve A into a procedural S shape. sCurveB sCurveB float Blend curve B into a procedural S shape. allToMidPoint allToMidPoint float Blend both curves to mid-curve. pushOutA pushOutA float Curves push-out added value. pushOutB pushOutB float Curves push-out added value. zipStart zipStart float Zip start value. zipStartFalloff zipStartFalloff float Zip start falloff value. zipEnd zipEnd float Zip end value. zipEndFalloff zipEndFalloff float Zip end falloff value. offsetBase offsetBase enum Offset curve build mode. centerMatrix, worldX, worldY, worldZ. offset offset float Offset curve build parameter. Outputs Long-Name Short-Name Type Description outCurveA outCurveA nurbsCurve Result curve A shape. outCurveB outCurveB nurbsCurve Result curve B shape. outCurveAOffset outCurveAOffset nurbsCurve Result curve A offset shape. outCurveBOffset outCurveBOffset nurbsCurve Result curve B offset shape. outTweakA outTweakA compound (array) Parent attribute that holds output values for tweaker offset position. outTweakATranslate outTweakATranslate vector Output offset position for a given tweaker. outTweakARotate outTweakARotate vector Output offset rotation for a given tweaker. outTweakB outTweakB compound (array) Parent attribute that holds output values for tweaker offset position. outTweakBTranslate outTweakBTranslate vector Output offset position for a given tweaker. outTweakBRotate outTweakBRotate vector Output offset rotation for a given tweaker.","title":"mnsLipZip"},{"location":"Maya-Plugins/#mnsmatrixconstraint","text":"=== Author: Assaf Ben Zur === Light weight alternative to Maya's native constraints - All within one node. Live switchable/keyable maintainOffset channel. Easily add spaces/masters to existing constraint using recalcOffset channel. Inputs Long-Name Short-Name Type Description sourceWorldMatrix sourceWorldMatrix matrix Source world matrix. spaceSet spaceSet int Constraint Space index. maintainOffset maintainOffset bool Maintain offset attribute. recalcOffsets recalcOffsets int Recalculate offset in current state. targetParentInverseMatrix targetParentInverseMatrix matrix Traget inverse matrix. targetRotateOrder targetRotateOrder enum Calculation rotate-order. targetWorldMatrix targetWorldMatrix matrix Traget world matrix. Outputs Long-Name Short-Name Type Description matrix m matrix Result as matrix form. translate t float[3] Translation values result. rotate r angle[3] Rotation values result. scale s float[3] Scale values result.","title":"mnsMatrixConstraint"},{"location":"Maya-Plugins/#mnsmeshrivets","text":"=== Author: Assaf Ben Zur === A multi \"Point-On-Poly\" constraint style compute node. The node will accept any amount of input positions, as well as an input base-mesh and a target mesh. The base mesh is used to calculate the source position and offset, the target mesh is used to calculate the result position based on the selected attributes within the node: - Calculation Method: Closest UV, Vertex, Face - Do Rotation: On, Off - Do Scale: On, Off - Rotation: Aim-Axis and up Axis choice (All 6) - Up-Mode: World (X,Y,Z), Closest Tangent, Closest Binormal The node will accept any amount on input tweaker matrices that can be used to adjust the riveted transforms globally and easily. The tweakers adjustments are calculated in world spcae and the algorithm is fully independent, additive, and keyable. The proximity calculation is matrix based to achieve non-spherical tweaks. As tweaking the position of the rivets is not sensible as the transforms' position is based on the target mesh, the proximity tweakers are used to adjust rotation and scale only. The node contains two adjustemt spaces: - World- Will transform the outputs in world space, providing a more intuative behaviour, although less practical. - Object - Will transform the outputs in their relative local spaces (preferable), which will provide a less intuative behaviour (dependent of the tweaker and output orientation), although very practical. A falloff attribute is also implemented to allow control over the decay within the \"collision\" zone. Inputs Long-Name Short-Name Type Description mesh mesh mesh Input mesh to rivet to. targetWorldMatrix targetWorldMatrix matrix Input mesh world matrix. rivet rivet compound Input rivet transforms array. worldMatrix worldMatrix matrix Input rivet transforms matrix. Child of rivet. parentInverseMatrix parentInverseMatrix matrix Input rivet transforms inverse parent matrix. Child of rivet. liveMode liveMode bool Live mode. Calculate everything in every evaluation. calculationMethod calculationMethod enum Calculation basis- UV, closestVertex, closestFace. uvTolerance uvTolerance float UV search tolerance threshold value. doRotation doRotation bool Calculate rotations. doRivetRotation doRivetRotation bool Calculate rivet local rotations. rotateOrder ro enum Calculation rotate-order. upMode upMode enum Rotation calculation up mode- worldX, worldY, worldZ, closestVertexBinormal, closestVertexTangent. aimAxis aimAxis enum Aim Axis choice. upAxis upAxis enum Up Axis choice. doRivetScale doRivetScale bool Calculate scale. doScale doScale bool Scale the rivets with the target mesh scale. When off the mesh's scale doesn't affect the rivets. maintainOffset maintainOffset bool Maintain offset between rivet position and target mesh. proximityRotationSpace proximityRotationSpace enum Proximity tweak rotation space- object, world. proximityTweaker proximityTweaker compound Proximity tweakers input array. proximityWorldMatrix proximityWorldMatrix matrix Proximity tweaker matrix. Child of proximityTweaker. proximityLocalMatrix proximityLocalMatrix matrix Proximity tweaker local matrix. Child of proximityTweaker. rivetScale rivetScale float[3] Scale tweak input. falloff falloff float Proximity tweak falloff. Child of proximityTweaker. texture texture color Input color map adjustment. rotationTextureAmplitude rotationTextureAmplitude float Color map adjustment amplitude. textureBothDirections textureBothDirections bool Avarage color map adjustment to both direction. -0.5 0.5 instead of 0 to 1. scaleTextureAmplitude scaleTextureAmplitude float Color map scale affect amplitude. Outputs Long-Name Short-Name Type Description translate t float[3] Translation output. Child of transform. rotate r angle[3] Rotation output. Child of transform. transform transform compound Output transforms array. scale s angle[3] Scale output. Child of transform. baseMesh baseMesh mesh Input base-mesh.","title":"mnsMeshRivets"},{"location":"Maya-Plugins/#mnsmeshseparate","text":"=== Author: Assaf Ben Zur === A simple node to drive seprated shell objects using one combined mesh. Inputs Long-Name Short-Name Type Description mesh mesh mesh Input mesh to separate. inShell inShell mesh Input shell object array. Outputs Long-Name Short-Name Type Description outMesh outMesh mesh Result shell meshes array.","title":"mnsMeshSeparate"},{"location":"Maya-Plugins/#mnsnoderelationship","text":"=== Author: Assaf Ben Zur === BLOCK main relationship node. Inputs Long-Name Short-Name Type Description messageIn messageIn message Input master node. messageOut messageOut message Input slaves nodes array. deleteSlaves deleteSlaves message Input delete only slaves nodes array.","title":"mnsNodeRelationship"},{"location":"Maya-Plugins/#mnspointsoncurve","text":"=== Author: Assaf Ben Zur === A fast and efficient parameter based compute node to sample and control points along a given curve. In combination with mnsBuildTransformsCurve will result in a very advanced and robust \"spline IK\" control. - Creation modes + Parametric - curve parameterized position calculation + Uniform - Addaptive uniform sampling + Fixed length - Uniform sampling based on an input max length. Initialized to curve length on creation, Keyable. - Position control - Rotation control + Aim modes - curveTangent, object + Up modes - curveNormal, up-curve, worldX, worldY, worldZ, object - Scale control - Spring ability Inputs Long-Name Short-Name Type Description curve crv nurbsCurve Input curve to sample. upCurve upCrv nurbsCurve Input up curve to sample. upObject upObj matrix Input up object matrix to use if requsted. aimObject aimObj matrix Input aim object matrix to use if requsted. globalScale globalScale float Global scale multiplier. numOutputs numO int Number of outputs/samples. mode m enum direction=i Smaple mode- parametric, uniform, uniformFixedLength. cycle cycle bool Enable cycle mode. closedShape closedShape bool Enable closed shape mode. uScale uScl float Global positions U-Scale adjustment. uScaleInverse uSclInv float Global positions U-Scale-Inverse adjustment. uScaleMid uSclMid float Global positions U-Scale-mid adjustment. uScaleMidPos uSclMidPos float U-Scale-mid-position value. uScaleMidInverse uSclMidInv float Global positions U-Scale-mid-inverse adjustment. uOffset uOffset float Global positions U-offset adjustment. inverse inv bool Inverse result order. fixedLength fixedLength float The maximum fixed length for the result sample if requested. creationLength creationLen float Value store for the creation curve length. curveLength crvLrn float Current curve length display. uTugScale uTugScl float Global positions U-Tug-Scale adjustment. uTugScaleTension uTugSclTension float Global positions U-Tug-Scale-tension parameter. uTugOffset uTugOffset float Global positions U-Tug-Offset adjustment. rotateMode rotMode enum Samples rotation mode- curveTangent, objectAim. upMode upMode enum Samples rotation up mode- normal, curve, worldX, worldY, worldZ, objectUp. scaleMode sclMode enum Samples scale mode- absuloteCurveLength, addaptiveCurveLength, segmentLengthDependent. squashMode squashMode enum Samples squash mode- squashStretch, squash, stretch, uniform, none. doRotation doRot bool Do samples rotation. doScale doScl bool Do samples scale. rotateOrder ro enum direction=i Calculation rotation order. aimAxis aimAxis enum Aim axis choice. upAxis upAxis enum Up axis choice. customPointsUpMode cusPointsUpMode enum Custom tweakers rotation up mode. excludePolesTranslation excludePolesTranslation bool exclude translation set for base and tip. excludePolesRotation excludePolesRotation bool exclude rotation set for base and tip. excludeBaseRotation excludeBaseRotation bool exclude rotation set for base. Only if excludePolesRotation is set to True. excludeTipRotation excludeTipRotation bool exclude rotation set for tip. Only if excludePolesRotation is set to True. excludePolesScale excludePolesScale bool exclude scale set for base and tip. twistAimStart twistAimStart float Self explanatory. twistAimMid twistAimMid float Self explanatory. squeezeAim squeezeAim float Self explanatory. waveAimAngle waveAimAng float Self explanatory. twistAimWavePhase twistAimWavePhase float Self explanatory. twistAimMidPos twistAimMidPos float Self explanatory. twistAimEnd twistAimEnd float Self explanatory. twistAimAll twistAimAll float Self explanatory. aimToObj aimToObj float Self explanatory. upToObj upToObj float Self explanatory. twistUpStart twistUpStart float Self explanatory. twistUpMid twistUpMid float Self explanatory. twistUpSqueeze twistUpqueeze float Self explanatory. waveUpAngle waveUpAng float Self explanatory. waveUpPhase waveUPPhase float Self explanatory. twistUpMidPos twistUpMidPos float Self explanatory. twistUpEnd twistUpEnd float Self explanatory. twistUpAll twistUpAll float Self explanatory. twistTertiaryStart twistTerStart float Self explanatory. twistTertiaryMid twistTerMid float Self explanatory. tertiarySqueeze terSqueeze float Self explanatory. tertiaryWaveAngle tertiaryWaveAng float Self explanatory. tertiaryWavePhase terWavePhase float Self explanatory. twistTertiaryMidPos twistTerMidPos float Self explanatory. tertiaryTwistEnd terTwistEnd float Self explanatory. tertiaryTwistAll terTwistAll float Self explanatory. resetScale resetScl int Reset scale values to current state. scaleMaxAddaptive sclMaxAddaptive bool Adapt max scale to squash/scale relative values. squashFactor squashFactor float Squash multiplier. squashPos squashPos float Squash position. scaleStart sclStart float Self explanatory. scaleMid sclMid float Self explanatory. scaleMidPos sclMidPos float Self explanatory. scaleWaveAmp sclWaveAmp float Self explanatory. scaleWavePhase sclWavePhase float Self explanatory. scaleEnd sclEnd float Self explanatory. scaleAll sclAll float Self explanatory. scaleAllAim scaleAllAim float Self explanatory. scaleAllUp scaleAllUp float Self explanatory. scaleAllTertiary scaleAllTertiary float Self explanatory. scaleMin sclMin float Self explanatory. scaleMax sclMax float Self explanatory. springMode sprMode enum Samples spring mode- UScale, UScaleInverse, UMidScaleInverse, UTugOffset, UTugScale. springStrength sprStrength float spring strength. springDamp sprDamp float Spring damping factor. springStiffness sprStiffness float Spring stiffness factor. goalMatrix goalMatrix matrix Spring goal matrix. doSpring doSpr bool Do spring calculation. time time time Input time value. customPosition customPosition compound Custom tweakers input transforms array. uPosition uPos float Custom tweaker U-Position. Child of customPositionOut. twist twist float Custom tweaker twist value. Child of customPositionOut. aimRotation aimRot float Custom tweaker aim-rotation value. Child of customPositionOut. tertiaryRotation tertiaryRot float Custom tweaker tertiary-rotation value. Child of customPositionOut. scaleAim sclAim float Custom tweaker aim-scale value. Child of customPositionOut. scaleUp sclUp float Custom tweaker up-scale value. Child of customPositionOut. tertiaryScale terScl float Custom tweaker tertiary-scale value. Child of customPositionOut. falloff falloff float Custom tweaker falloff value. Child of customPositionOut. Outputs Long-Name Short-Name Type Description transforms transforms compound Result transforms array. translate t float[3] Result transform translation values. Child of transforms. rotate r angle[3] Result rotation translation values. Child of transforms. matrix Result matrix. Child of transforms. scale s float[3] Result scale translation values. Child of transforms. customPositionOut cusPosOut compound Custom tweakers offset transformation values array. cusTranslate cusT float[3] Custom tweakers offset translation values. Child of customPositionOut. cusRotate cusR angle[3] Custom tweakers offset rotation values. Child of customPositionOut.","title":"mnsPointsOnCurve"},{"location":"Maya-Plugins/#mnsremapfloatarray","text":"=== Author: Assaf Ben Zur === This simple node will take the input value (as float or angle) and split and remap the values across the requested output count, based on the given values map graph attribute. The value can also be re-ranged between two values, using the remapToRnage attributes given. The input value plug will accept floats, doubles and angles (genericAttr). The output plug will be set according to the input type given. Inputs Long-Name Short-Name Type Description valuesMap valuesMap float(array) Output values remap graph. value value float Input value to remap. Can be float, double and angle. angleOutputAsDegrees angleOutputAsDegrees bool In case the input is set to angle, if this is set to true, the output values will be in degrees instead of the original radians input. remapToRange remapToRange bool A choice to remap the outputs to a new range, using the relevant attributes. outputCount outputCount int The amount of outputs to remap the input value to. min min float RemapToRnage new minimum value. max max float RemapToRnage new maximum value. oldMin oldMin float RemapToRnage old minimum value. oldMax oldMax float RemapToRnage old maximum value. Outputs Long-Name Short-Name Type Description outValue outValue float Output values array.","title":"mnsRemapFloatArray"},{"location":"Maya-Plugins/#mnsresamplecurve","text":"=== Author: Assaf Ben Zur === A simple light weight curve re-sampler. Primaraly used to embed mnsThreePointArc into an IK setup. Inputs Long-Name Short-Name Type Description resampleMode resampleMode enum Reample mode- parametric, uniform. degree degree int Reample degree. sections sections int Reample amount of sections. inputCurve inputCurve nurbsCurve Input curve to re-sample. Outputs Long-Name Short-Name Type Description outCurve outCurve nurbsCurve Result curve.","title":"mnsResampleCurve"},{"location":"Maya-Plugins/#mnssimplerivets","text":"=== Author: Assaf Ben Zur === This is a simple mesh rivet node. This node will take any amount of input start position as matrix and will compile a transformation matrix for the closest face center position on the given input mesh. This node will output the result in world space, unless an inpur targetParentInverseMatrix is plugged into the relevant element. The deafult output will be the closest face center transformation matrix unless maintainOffset is set to ON- then the offset will be calculated and stored resulting in the same transformation matrix as the startPosition at bind. Live mode should only be used for debugging purposes as this will initiate the nodes initialization process on every evaluation- impacting the nodes performance significantly. The initialization process will be performed from from the given input mesh, unless a base mesh is plugged in to baseMesh plug. It is recommended to avoid keeping baseMesh and startPosition plugs live. Inputs Long-Name Short-Name Type Description mesh mesh mesh Input mesh to rivet to. targetWorldMatrix targetWorldMatrix matrix Input mesh world matrix. rivet rivet compound (Array) Input rivets compound array. rivetStartPosition rivetStartPosition matrix Input start position. Rivet position will be calculated from this origin matrix. targetParentInverseMatrix targetParentInverseMatrix matrix Target transform parent inverse matrix. Use when output result is needed in local space (connect the target transform parentInverseMatrix plug) liveMode liveMode bool Live mode. Calculate everything in every evaluation. maintainOffset maintainOffset bool Maintain offset between rivet position and target mesh. Outputs Long-Name Short-Name Type Description translate t float[3] Translation output. Child of transform. rotate r angle[3] Rotation output. Child of transform. transform transform compound Output transforms array. scale s angle[3] Scale output. Child of transform. baseMesh baseMesh mesh Input base-mesh.","title":"mnsSimpleRivets"},{"location":"Maya-Plugins/#mnssimplesquash","text":"=== Author: Assaf Ben Zur === This simple node is designed to output a scale value to squash and stretch a given single transform value. Based on the creation distance between the target and source matricies, the scale values will be calculated using a squash/stretch algorithm using the dynamic distance (or current distance). All input values will be taken into account calculating the result. The static arc length is the creation length. This value can be set manually if needed, although the node will set this value in it's initialization stage- in case the source and handle matricies where connected. This value will be set automatically only once, in case this value needs to be changed it will need to be set manually. Aim axis attribute- stretch value will be set to the aim axis selection, squash value will be set to the remaining axes. Global scale attribute - this attribute is set to scale the static arc length to avoid unwanted scaling issues when aiming for a uniform scale of the target transform. Inputs Long-Name Short-Name Type Description handleWorldMatrix handleWorldMatrix matrix Input handle world matrix. squashRootWorldMatrix squashRootWorldMatrix matrix Input squash root position world matrix. squashFactor squashFactor float Input squash factor. stretchFactor stretchFactor float Input stretch factor. stretchMin stretchMin float Input minimum stretch value. stretchMax stretchMax float Input maximum stretch value. squashMin squashMin float Input maximum squash value. squashMax squashMax float Input minimum squash value. staticArcLength staticArcLength float Static arc length / creation length value. aimAxis aimAxis enum Aim axis- stretch value will be set to the aim axis selection, squash value will be set to the remaining axes. globalScale globalScale float Global scale multiplier value. Outputs Long-Name Short-Name Type Description scale s float[3] Output scale result. arcLength arcLength float Current arc length.","title":"mnsSimpleSquash"},{"location":"Maya-Plugins/#mnsspherevectorpush","text":"=== Author: Assaf Ben Zur === Presenting mnsSphereVectorPush deformer. This deformer was purpose built for the Eye-Meniscus deformation, but can be used for many more applications. As opposed to the commonly used \"matrixCollision\", mnsSphereVectorPush will also collide back faces and push them at a higher radius based on a thickness threshold (keyable). The node will accept unlimited collider matrix inputs and will combine the deformations with ease. The input radiuses and thicknesses can be varied and keyed to choice. Implementing the mnsSphereVectorPush deformer within the eyelid setup will result in a natural looking deformation of the cornea and the eyelids. This is the case for a closed eye pose as well- which will naturally suggest the eye aim even when it isn't seen, corresponding to real life behavior. The deformer can also be used to represent the eye volume- pushing the eyelid verticies towards the eye surface, for extreme poses of which are not handled correctly by the \"aroundCenterMatrix\" of mnsCurveZip due to a range which exceeds the normalization. Inputs Long-Name Short-Name Type Description collideMatrix collideMatrix matrix Input collision matrix. radius radius matrix Input collision radius. thicknessCollide thicknessCollide bool If true, collide against back-faces using the input threshold. thicknessThreshold thicknessThreshold float Backface avarage distance to collide against. collider collider compound Collision object input array. collideMethod collideMethod enum Collision method- matrix, position.","title":"mnsSphereVectorPush"},{"location":"Maya-Plugins/#mnsspringcurve","text":"=== Author: Assaf Ben Zur === This node is used to achive simple secondary motion proceduraly. Tihs node will accept an input curve and offset curves to act upon, and using the stiffness and damping graph attributes it will calculate a new curve with secondary motion embedded. This is an evaluation node rather then a simulation. Time needs to be connected to the node in order to see it's effect. Inputs Long-Name Short-Name Type Description inputCurve inputCurve nurbsCurve Input curve. inputOffsetCurve inputOffsetCurve nurbsCurve Input offset curve. strength strength float Global strength. 0 is do nothing. preventStretching preventStretching bool Calculate stretch prevention. startFrame startFrame int Evaluation start frame. startFrameFromRange startFrameFromRange bool If true, take the start frame from current maya range instead of the input value given. time time time Time input. stiffness stiffness graph Stiffness graph control. damping damping graph Damping graph control. Outputs Long-Name Short-Name Type Description outCurve outCurve nurbsCurve Result curve. outOffsetCurve outOffsetCurve nurbsCurve Result offset curve.","title":"mnsSpringCurve"},{"location":"Maya-Plugins/#mnsthreepointarc","text":"=== Author: Assaf Ben Zur === This node was written to create a perfectly curved limb blend, instead of using common approaches like skinned curves, simulated tangents, scaled points, etc. This method provides a very elegant way of enabling curvable limbs to animators, avoiding the use of Maya's 'makeThreePointCircularArc' which doesn't support a case where the 3 input points are collinear, nor any input curve or blending support. Another major advantage of this node is the 'conformToMidPoint' attribute- This attribute signals the algorithm to take the mid-point into consideration when drawing the edit points of the calculated arc, 'pinning' the elbow/knee in place when blending to the curved shape, even when the ratio between the 2 bones is not even (most cases). The blend is triggered once with the attribute set to 'Off' - causing the knee to shift position completely- making it unusable in animation. Then, the blend is triggered when the attribute is 'On' and the knee is pinned in place, while the result curve edit points are being shifted based on the mid-point's position. Inputs Long-Name Short-Name Type Description point1 point1 matrix Input position A. point2 point2 matrix Input position B. point3 point3 matrix Input position C. blend blend float Blend value. blendSectionA blendSectionA float Section A only blend value. blendSectionB blendSectionB float Section B only blend value. swipeStart swipeStart float Swipe blend from start value. swipeStartFalloff swipeStartFalloff float Swipe blend from start falloff value. swipeMidToRoot swipeMidToRoot float Swipe blend from mid to start value. swipeMidToRootFalloff swipeMidToRootFalloff float Swipe blend from mid to start falloff value. swipeMidToEnd swipeMidToEnd float Swipe blend from mid to end value. swipeMidToEndFalloff swipeMidToEndFalloff float Swipe blend from mid to end falloff value. swipeEnd swipeEnd float Swipe blend from end to start value. swipeEndFalloff swipeEndFalloff float Swipe blend from end to start falloff value. collinearAction collinearAction enum Collinear action choice- inputCurve, resample. resampleMode resampleMode enum If resmapling is chosen, use this mode to resample- parametric, uniform. degree degree int If resmapling is chosen, use this degree. sections sections int If resmapling is chosen, use this amount of sections. conformMidPoint conformMidPoint bool Use the mid point to enhance clending algorithm. inputCurve inputCurve nurbsCurve Input curve. inputOffsetCurve inputOffsetCurve nurbsCurve Input offset curve. Outputs Long-Name Short-Name Type Description outCurve outCurve nurbsCurve Result Curve. outOffsetCurve outOffsetCurve nurbsCurve Result offset Curve. center center float[3] Result circle center point. radius radius float Result circle radius.","title":"mnsThreePointArc"},{"location":"Maya-Plugins/#mnstransformspring","text":"=== Author: Assaf Ben Zur === Inputs Long-Name Short-Name Type Description inputWorldMatrix inputWorldMatrix float MObject MnsTransformSpring::aInputWorldMatrix targetParentInverseMatrix targetParentInverseMatrix float MObject MnsTransformSpring::aTargetParentInverseMatrix strength strength float Global strength. 0 is do nothing. startFrame startFrame int Evaluation start frame. startFrameFromRange startFrameFromRange bool If true, take the start frame from current maya range instead of the input value given. time time time Time input. stiffness stiffness graph Stiffness graph control. damping damping graph Damping graph control. Outputs Long-Name Short-Name Type Description translate t float MObject MnsTransformSpring::aOutTranslate","title":"mnsTransformSpring"},{"location":"Support-Us/","text":"Any time of support goes a long way ! We need it ! So how can you support this project ? Subscribe to the youtube-channel ! Support directly by becoming a Patron! Share it ! Share it with your colleges and friends or share it on any social media platform! Exposure and user-base is the key to keep this project going, so don't hold back ! Every like counts. Likes go a long way, as they help promote the project by promoting videos/posts.","title":"Support Us"},{"location":"Support-Us/#any-time-of-support-goes-a-long-way-we-need-it","text":"","title":"Any time of support goes a long way ! We need it !"},{"location":"Support-Us/#so-how-can-you-support-this-project","text":"Subscribe to the youtube-channel ! Support directly by becoming a Patron! Share it ! Share it with your colleges and friends or share it on any social media platform! Exposure and user-base is the key to keep this project going, so don't hold back ! Every like counts. Likes go a long way, as they help promote the project by promoting videos/posts.","title":"So how can you support this project ?"},{"location":"UIUtils/","text":"UIUtils === Author: Assaf Ben Zur === UI Utility function assembly. This module holds all UI utility functions as well s any QT dynamic draw functions. All UI functions should be held in here for multi-usage of the same UI draw functions. This module also holds the QT ui dynamic conversion to '.py' and the 'get_maya_window' function. Classes CollapsibleFrameWidget [Class] Collapsible frame Widget class. This is a wrapper widget that allows for a collapisble frame to be built. The QFrame object will allow for Layouts to be inserted into the Collapsible frame, inserting any widgets within it, collapsing and expanding it by a click trigger (from the user). Constructor: CollapsibleFrameWidget( parent ( str ) ; [default: None], title ( str ) ; [default: None]) Inherits from: QFrame Class Members: _is_collasped _title_frame _content _main_v_layout clickedSignal Methods: initCollapsable [method] toggleCollapsed [method] setArrow [method] initArrow [method] initContent [method] initTitleFrame [method] addWidget [method] CollapsibleFrameWidget methods initCollapsable [ CollapsibleFrameWidget class method] Constructor: initCollapsable(self) Return: None Arguments: self Optional Arguments: toggleCollapsed [ CollapsibleFrameWidget class method] Constructor: toggleCollapsed(self) Return: None Arguments: self Optional Arguments: setArrow [ CollapsibleFrameWidget class method] Constructor: setArrow(self, arrow_dir) Return: baseClass, formClass Arguments: self arrow_dir Optional Arguments: initArrow [ CollapsibleFrameWidget class method] Constructor: initArrow(self, collapsed) Return: None Arguments: self collapsed Optional Arguments: initContent [ CollapsibleFrameWidget class method] Constructor: initContent(self, collapsed) Return: None Arguments: self collapsed Optional Arguments: initTitleFrame [ CollapsibleFrameWidget class method] Constructor: initTitleFrame(self, title, collapsed) Return: None Arguments: self title collapsed Optional Arguments: addWidget [ CollapsibleFrameWidget class method] Constructor: addWidget(self, widget) Return: None Arguments: self widget Optional Arguments: MnsAbout [Class] Mansur - About dialog Constructor: MnsAbout( parent ( str ) ; [default: get_maya_window()], version ( str ) ; [default: \"dev\"]) Inherits from: QtWidgets.QDialog Class Members: iconsDir versionDisplay close_btn","title":"UIUtils"},{"location":"UIUtils/#uiutils","text":"=== Author: Assaf Ben Zur === UI Utility function assembly. This module holds all UI utility functions as well s any QT dynamic draw functions. All UI functions should be held in here for multi-usage of the same UI draw functions. This module also holds the QT ui dynamic conversion to '.py' and the 'get_maya_window' function.","title":"UIUtils"},{"location":"UIUtils/#classes","text":"","title":"Classes"},{"location":"UIUtils/#collapsibleframewidget-class","text":"Collapsible frame Widget class. This is a wrapper widget that allows for a collapisble frame to be built. The QFrame object will allow for Layouts to be inserted into the Collapsible frame, inserting any widgets within it, collapsing and expanding it by a click trigger (from the user). Constructor: CollapsibleFrameWidget( parent ( str ) ; [default: None], title ( str ) ; [default: None]) Inherits from: QFrame Class Members: _is_collasped _title_frame _content _main_v_layout clickedSignal Methods: initCollapsable [method] toggleCollapsed [method] setArrow [method] initArrow [method] initContent [method] initTitleFrame [method] addWidget [method]","title":"CollapsibleFrameWidget [Class]"},{"location":"UIUtils/#collapsibleframewidget-methods","text":"","title":"CollapsibleFrameWidget  methods"},{"location":"UIUtils/#mnsabout-class","text":"Mansur - About dialog Constructor: MnsAbout( parent ( str ) ; [default: get_maya_window()], version ( str ) ; [default: \"dev\"]) Inherits from: QtWidgets.QDialog Class Members: iconsDir versionDisplay close_btn","title":"MnsAbout [Class]"},{"location":"about/","text":"My name is Asaf Ben Zur and I'm a 3D Rigger & Developer for 3D Animation. I know first hand how difficult it is to survive in the VFX & Animation world, and i believe that the only ones who can change that are the artists. The fact that in-order to survive as an Animation or a VFX artist, you have to constantly strive for a higher position or a bigger studio- there you will be a part of a higher-budget projects, and higher-level tools as a result. As a Rigger, I know for a fact that any 3D animation is limited to the rig provided. And when the rig fails- the animator's vision fails with it- forcing them to compremise. I want to support creation by sharing some higher-end developments and tools- which are created mainly with animators in mind, to try and provide artists with a better envioroment to work in and tools that will allow better behavior, faster performance, and easier control. The videos I make are mainly technical currently (which will change soon), but I try and make it as clear as possible for artists to recognize the potential to produce some amazing results with minimum effort, while trying to ignore my terrible animation skills. The plugins I present are a part of a big modular rig builder I'm working on called BLOCK- which will use all of these plugins under the hood of the build-modules.","title":"About"},{"location":"arguments/","text":"arguments === Author: Assaf Ben Zur === MNS main arguments core functions and Classes. This module holds the MnsArgument class as well as all argument handeling functions. This module was designed to procedurally handle function arguments in order to manipulate them, generate dynamic UI's from them, and pass them along back to their creator function as an execute. Classes MnsArgument [Class] MnsArgument Convieniency Class. A class instance holds all relevant information regarding an extracted single function argument. These class members will dectate any behavior derived from an actual function object or a method object. Constructor: MnsArgument( **kwargs ) Inherits from: object Class Members: name type default min max comment ob side pathMode pathFileTypes blockCreationOnly jntStructMember jntStructSoftMod lockOffAttributes simpleDivider meshComponents Methods: formatCommentToToolTip [method] MnsArgument methods formatCommentToToolTip [ MnsArgument class method] Constructor: formatCommentToToolTip(self) Return: None Arguments: self Optional Arguments:","title":"Arguments"},{"location":"arguments/#arguments","text":"=== Author: Assaf Ben Zur === MNS main arguments core functions and Classes. This module holds the MnsArgument class as well as all argument handeling functions. This module was designed to procedurally handle function arguments in order to manipulate them, generate dynamic UI's from them, and pass them along back to their creator function as an execute.","title":"arguments"},{"location":"arguments/#classes","text":"","title":"Classes"},{"location":"arguments/#mnsargument-class","text":"MnsArgument Convieniency Class. A class instance holds all relevant information regarding an extracted single function argument. These class members will dectate any behavior derived from an actual function object or a method object. Constructor: MnsArgument( **kwargs ) Inherits from: object Class Members: name type default min max comment ob side pathMode pathFileTypes blockCreationOnly jntStructMember jntStructSoftMod lockOffAttributes simpleDivider meshComponents Methods: formatCommentToToolTip [method]","title":"MnsArgument [Class]"},{"location":"arguments/#mnsargument-methods","text":"","title":"MnsArgument  methods"},{"location":"blockBuildUI/","text":"blockBuildUI === Author: Assaf Ben Zur === MANSUR - BLOCK Main BLOCK UI. This is the main UI for rig building (BLOCK). This is the essence of the entire library. This tool gathers all user actions, and defines triggers for edditing rigs. The main goal of this UI is to collect the available build-modules and draw creation buttons for them. The core module library is defined as the block library, but additionals paths can be inserted into the collect loop. Many UI triggers are available in this UI, but many are kept external to the UI class, to keep things as clean and independent as possible. Most core functionalitites belong to the rig classes in 'buildModules'. Classes MnsBlockBuildUI [Class] BLOCK UI Class. Constructor: MnsBlockBuildUI( parent ( str ) ; [default: mnsUIUtils.get_maya_window()]) Inherits from: form_class, base_class Class Members: iconsDir tabIndex buildModulesBtns sidePlaceHolder bmLib bmToolTips mayaSelectCallBack Methods: bmCategoryChangedTrigger [method] copySkin [method] createAllModulesSection [method] getListWidgetFromSender [method] getPoseMode [method] initializePrefDirs [method] promoteModule [method] removeGuides [method] resizeWindowBasedOnLog [method] sceneSelectFromWidgets [method] sortMeshLists [method] toggleProjPerpCam [method] updateGuides [method] updateMeshWidgetsDict [method] updateRigTopStruct [method] loadMeshes [method] getToolTipForModule [method] refreshSelectionState [method] addMeshes [method] removeMeshes [method] getCurrentMeshes [method] echoLog [method] meshListWidgetMenu [method] recRenameLowerIndex [method] applyModulePathsChange [method] moduleBuildGuide [method] addModulePath [method] connectSignals [method] constructRigInit [method] deconstructRigInit [method] buildModulesDefine [method] defineBuildParentModules [method] extractControlShapes [method] getCorrespondingModuleButtonForModule [method] symmetrizeControlShapes [method] gatherAdditionalModulePaths [method] getConstructMode [method] getModuleSettings [method] initializeAdditionalModulePaths [method] initView [method] loadModuleSettings [method] loadRigSettings [method] duplicateModule [method] pureDuplicate [method] eventFilter [method] removeModelPath [method] removeCustomShapes [method] updateRigStructure [method] poseSaveLoadTrigger [method] loadWindow [method] getDefaultsMode [method] symmetrizeModule [method] insertGuides [method] collectPartialModulesRoots [method] newRigTopTrig [method] fixModulePathForRigTop [method] updateSettings [method] MnsBlockBuildUI methods bmCategoryChangedTrigger [ MnsBlockBuildUI class method] Constructor: bmCategoryChangedTrigger(self) Return: None Arguments: self Optional Arguments: copySkin [ MnsBlockBuildUI class method] Constructor: copySkin(self) Return: None Arguments: self Optional Arguments: createAllModulesSection [ MnsBlockBuildUI class method] Constructor: createAllModulesSection(self) Return: None Arguments: self Optional Arguments: getListWidgetFromSender [ MnsBlockBuildUI class method] Constructor: getListWidgetFromSender(self) Return: None Arguments: self Optional Arguments: getPoseMode [ MnsBlockBuildUI class method] Constructor: getPoseMode(self) Return: None Arguments: self Optional Arguments: initializePrefDirs [ MnsBlockBuildUI class method] Constructor: initializePrefDirs(self) Return: None Arguments: self Optional Arguments: promoteModule [ MnsBlockBuildUI class method] Constructor: promoteModule(self) Return: None Arguments: self Optional Arguments: removeGuides [ MnsBlockBuildUI class method] Constructor: removeGuides(self) Return: None Arguments: self Optional Arguments: resizeWindowBasedOnLog [ MnsBlockBuildUI class method] Constructor: resizeWindowBasedOnLog(self) Return: None Arguments: self Optional Arguments: sceneSelectFromWidgets [ MnsBlockBuildUI class method] Constructor: sceneSelectFromWidgets(self) Return: None Arguments: self Optional Arguments: sortMeshLists [ MnsBlockBuildUI class method] Constructor: sortMeshLists(self) Return: None Arguments: self Optional Arguments: toggleProjPerpCam [ MnsBlockBuildUI class method] Constructor: toggleProjPerpCam(self) Return: None Arguments: self Optional Arguments: updateGuides [ MnsBlockBuildUI class method] Constructor: updateGuides(self) Return: None Arguments: self Optional Arguments: updateMeshWidgetsDict [ MnsBlockBuildUI class method] Constructor: updateMeshWidgetsDict(self) Return: None Arguments: self Optional Arguments: updateRigTopStruct [ MnsBlockBuildUI class method] Constructor: updateRigTopStruct(self) Return: None Arguments: self Optional Arguments: loadMeshes [ MnsBlockBuildUI class method] Constructor: loadMeshes(self, kwargs) Return: None Arguments: self kwargs Optional Arguments: getToolTipForModule [ MnsBlockBuildUI class method] Constructor: getToolTipForModule(self, buildModule) Return: None Arguments: self buildModule Optional Arguments: refreshSelectionState [ MnsBlockBuildUI class method] Constructor: refreshSelectionState(self, dummy = None) Return: None Arguments: self dummy ( str ) ; [default: None] Optional Arguments: addMeshes [ MnsBlockBuildUI class method] Constructor: addMeshes(self, listWidget) Return: None Arguments: self listWidget Optional Arguments: removeMeshes [ MnsBlockBuildUI class method] Constructor: removeMeshes(self, listWidget) Return: None Arguments: self listWidget Optional Arguments: getCurrentMeshes [ MnsBlockBuildUI class method] Constructor: getCurrentMeshes(self, listWidget = None, kwargs) Return: None Arguments: self listWidget ( str ) ; [default: None] kwargs Optional Arguments: echoLog [ MnsBlockBuildUI class method] Constructor: echoLog(self, msg, svr) Return: None Arguments: self msg svr Optional Arguments: meshListWidgetMenu [ MnsBlockBuildUI class method] Constructor: meshListWidgetMenu(self, position) Return: None Arguments: self position Optional Arguments: recRenameLowerIndex [ MnsBlockBuildUI class method] Constructor: recRenameLowerIndex(self, root = None, moduleGuides = [], moduleJoints = []) Return: None Arguments: self root ( str ) ; [default: None] moduleGuides ( list ) ; [default: []] moduleJoints ( list ) ; [default: []] Optional Arguments: applyModulePathsChange [ MnsBlockBuildUI class method] 'Apply' (in build tab, module paths) trigger. Write the additional paths entered within the UI in the stor json. Constructor: applyModulePathsChange(self) Return: None Arguments: self Optional Arguments: moduleBuildGuide [ MnsBlockBuildUI class method] Action trigger for any build-module button. This trigger action will be connected procedurally within the 'drawModuleButton' method in blockUtility. Constructor: moduleBuildGuide(self, listWidgetItemName) Return: None Arguments: self listWidgetItemName Optional Arguments: addModulePath [ MnsBlockBuildUI class method] Add a module path line to the 'module paths' tree trigger. Constructor: addModulePath(self) Return: None Arguments: self Optional Arguments: connectSignals [ MnsBlockBuildUI class method] Connect all UI signals. Constructor: connectSignals(self) Return: None Arguments: self Optional Arguments: constructRigInit [ MnsBlockBuildUI class method] Construct trigger. Constructor: constructRigInit(self, kwargs) Return: None Arguments: self kwargs Optional Arguments: deconstructRigInit [ MnsBlockBuildUI class method] Deconstruct trigger. Constructor: deconstructRigInit(self, kwargs) Return: None Arguments: self kwargs Optional Arguments: buildModulesDefine [ MnsBlockBuildUI class method] Define all existing build-modules within a built tab's directory. This mehthod will run for every valid build-module's directory folder, essentially building the actual build-module button in the UI. These will all be stored in the 'buildModulesBtns' attribute of this class. Constructor: buildModulesDefine(self, modParentPath, listWidget) Return: None Arguments: self modParentPath listWidget Optional Arguments: defineBuildParentModules [ MnsBlockBuildUI class method] Define build module tabs, based on the collected valid build-modules directories. If the directory in question is a valid directory for build modules: for every folder containing modules within it, a new tab will be inserted and named based on it. Constructor: defineBuildParentModules(self) Return: None Arguments: self Optional Arguments: extractControlShapes [ MnsBlockBuildUI class method] Extract all control shapes from the current constructed rig, and store them for future re-construction. Constructor: extractControlShapes(self, kwargs) Return: None Arguments: self kwargs Optional Arguments: getCorrespondingModuleButtonForModule [ MnsBlockBuildUI class method] For the given rootGuide object, try to locate its corresponding UI button. Look within this class's 'buildModulesBtns' attribute. Constructor: getCorrespondingModuleButtonForModule(self, rootGuide) Return: MnsBuildModuleBtn Arguments: self rootGuide Optional Arguments: symmetrizeControlShapes [ MnsBlockBuildUI class method] For the selected state, symmetrize all found control shapes. sym Mode: 0: Left to Right 1: Right to Left Constructor: symmetrizeControlShapes(self) Return: None Arguments: self Optional Arguments: gatherAdditionalModulePaths [ MnsBlockBuildUI class method] Gather all existing additional custom patns from the UI. Constructor: gatherAdditionalModulePaths(self) Return: list (Paths) Arguments: self Optional Arguments: getConstructMode [ MnsBlockBuildUI class method] Get current UI radio-buttons construction state (All/Branch/Module). Constructor: getConstructMode(self) Return: int (construction mode) Arguments: self Optional Arguments: getModuleSettings [ MnsBlockBuildUI class method] Get passed in module settings. First get the default settings and values from the build-module directory, then compare against the rootGuide attributes, and return the filtered and altered settings. Constructor: getModuleSettings(self, rootGuide, firstAttempt = True, kwargs) Return: dict,int (optionalArguments, spilt index - for dynUI) Arguments: self rootGuide firstAttempt ( bool ) ; [default: True] kwargs Optional Arguments: initializeAdditionalModulePaths [ MnsBlockBuildUI class method] Initialize any custom build-modules paths that already exist within the data collect json. (Read any paths that were added before, on UI draw). query flag will return the paths only without drawing the items into the UI. Constructor: initializeAdditionalModulePaths(self, kwargs) Return: list (Existing Paths) Arguments: self kwargs Optional Arguments: initView [ MnsBlockBuildUI class method] Initialize view: - Set icons - Set logger view - Set tab index to 1 - Set-Up CollapsibleWidget view Constructor: initView(self) Return: None Arguments: self Optional Arguments: loadModuleSettings [ MnsBlockBuildUI class method] Load selected module setting trigger. Constructor: loadModuleSettings(self, firstAttempt = True) Return: None Arguments: self firstAttempt ( bool ) ; [default: True] Optional Arguments: loadRigSettings [ MnsBlockBuildUI class method] Load selected rig settings trigger. Constructor: loadRigSettings(self) Return: None Arguments: self Optional Arguments: duplicateModule [ MnsBlockBuildUI class method] Module duplicate. Gather all of the requested module's settings, as well as compare against the module's default settings. Build a new module (same module) using the gathered data, then match all guide positions for the new module guide. Constructor: duplicateModule(self, kwargs) Return: None Arguments: self kwargs Optional Arguments: pureDuplicate [ MnsBlockBuildUI class method] Module duplicate. Gather all of the requested module's settings, as well as compare against the module's default settings. Build a new module (same module) using the gathered data. Constructor: pureDuplicate(self, modRoot, kwargs) Return: MnsBuildModule (New Module) Arguments: self modRoot kwargs Optional Arguments: eventFilter [ MnsBlockBuildUI class method] Override event filter to catch the tear off to override it's event. Constructor: eventFilter(self, source, event) Return: None Arguments: self source event Optional Arguments: removeModelPath [ MnsBlockBuildUI class method] Remove a module path line from the 'module paths' tree trigger. Constructor: removeModelPath(self) Return: None Arguments: self Optional Arguments: removeCustomShapes [ MnsBlockBuildUI class method] Remove all custom control shapes from the current rig. Constructor: removeCustomShapes(self) Return: None Arguments: self Optional Arguments: updateRigStructure [ MnsBlockBuildUI class method] Rig structure update required trigger. This method will be called in case any 'jntStructMember' attribute was altered, which means the internal joint structure of the module needs to be rebuilt. This method will locate and filter the existing module related joint structure, destroy it, and re-build it using the updated settings. Constructor: updateRigStructure(self, softMod = False, kwargs) Return: None Arguments: self softMod ( bool ) ; [default: False] kwargs Optional Arguments: poseSaveLoadTrigger [ MnsBlockBuildUI class method] Save/Load pose trigger. Simple method to gather pose data and store it, or apply it. Constructor: poseSaveLoadTrigger(self, saveLoadMode = 0) Return: None Arguments: self saveLoadMode ( int ) ; [default: 0] Optional Arguments: loadWindow [ MnsBlockBuildUI class method] Show window method. Constructor: loadWindow(self) Return: None Arguments: self Optional Arguments: getDefaultsMode [ MnsBlockBuildUI class method] Simple method to get the current UI 'defaults' mode. Constructor: getDefaultsMode(self) Return: int (defaults mode) Arguments: self Optional Arguments: symmetrizeModule [ MnsBlockBuildUI class method] Symmetrize module trigger. Exclusive class member process. This method will attempt to symmetrize the requested module guides. Constructor: symmetrizeModule(self) Return: None Arguments: self Optional Arguments: insertGuides [ MnsBlockBuildUI class method] This method is used primarily through Block UI, to insert guides above/below any guide selection. This will handle all exceptions, as well as re-analyze and re-orgenize each module based on the action performed. Constructor: insertGuides(self, mode = \"above\") Return: None Arguments: self mode ( str ) ; [default: \"above\"] Optional Arguments: collectPartialModulesRoots [ MnsBlockBuildUI class method] This method will be called in case a partial build was requested. Using methods within 'blockUtility', this method will collect the requested modules to build based on the UI state. Constructor: collectPartialModulesRoots(self, mode) Return: list (root guides (modules) to build) Arguments: self mode Optional Arguments: newRigTopTrig [ MnsBlockBuildUI class method] Utils->'New RigTop' trigger. deselect, then initialize a MnsRig class. Constructor: newRigTopTrig(self) Return: None Arguments: self Optional Arguments: fixModulePathForRigTop [ MnsBlockBuildUI class method] Wrapper for 'attemptModulePathFixFroRigTop' in blockUtility. Loop through all existing modules within the rig, and try and locate their module directory. In case a directory wan't found for a build module, attempt to locate it's absolute dirctory by its name in the knowen paths. Constructor: fixModulePathForRigTop(self) Return: None Arguments: self Optional Arguments: updateSettings [ MnsBlockBuildUI class method] update setting trigger. This method will apply when a user altered any data within a setting window and chose to apply the changes. The current settings will be validated against the default settings, and in case any data changed, all neccessary actions will be called to apply and store the changes. Constructor: updateSettings(self, kwargs) Return: None Arguments: self kwargs Optional Arguments:","title":"blockBuildUI"},{"location":"blockBuildUI/#blockbuildui","text":"=== Author: Assaf Ben Zur === MANSUR - BLOCK Main BLOCK UI. This is the main UI for rig building (BLOCK). This is the essence of the entire library. This tool gathers all user actions, and defines triggers for edditing rigs. The main goal of this UI is to collect the available build-modules and draw creation buttons for them. The core module library is defined as the block library, but additionals paths can be inserted into the collect loop. Many UI triggers are available in this UI, but many are kept external to the UI class, to keep things as clean and independent as possible. Most core functionalitites belong to the rig classes in 'buildModules'.","title":"blockBuildUI"},{"location":"blockBuildUI/#classes","text":"","title":"Classes"},{"location":"blockBuildUI/#mnsblockbuildui-class","text":"BLOCK UI Class. Constructor: MnsBlockBuildUI( parent ( str ) ; [default: mnsUIUtils.get_maya_window()]) Inherits from: form_class, base_class Class Members: iconsDir tabIndex buildModulesBtns sidePlaceHolder bmLib bmToolTips mayaSelectCallBack Methods: bmCategoryChangedTrigger [method] copySkin [method] createAllModulesSection [method] getListWidgetFromSender [method] getPoseMode [method] initializePrefDirs [method] promoteModule [method] removeGuides [method] resizeWindowBasedOnLog [method] sceneSelectFromWidgets [method] sortMeshLists [method] toggleProjPerpCam [method] updateGuides [method] updateMeshWidgetsDict [method] updateRigTopStruct [method] loadMeshes [method] getToolTipForModule [method] refreshSelectionState [method] addMeshes [method] removeMeshes [method] getCurrentMeshes [method] echoLog [method] meshListWidgetMenu [method] recRenameLowerIndex [method] applyModulePathsChange [method] moduleBuildGuide [method] addModulePath [method] connectSignals [method] constructRigInit [method] deconstructRigInit [method] buildModulesDefine [method] defineBuildParentModules [method] extractControlShapes [method] getCorrespondingModuleButtonForModule [method] symmetrizeControlShapes [method] gatherAdditionalModulePaths [method] getConstructMode [method] getModuleSettings [method] initializeAdditionalModulePaths [method] initView [method] loadModuleSettings [method] loadRigSettings [method] duplicateModule [method] pureDuplicate [method] eventFilter [method] removeModelPath [method] removeCustomShapes [method] updateRigStructure [method] poseSaveLoadTrigger [method] loadWindow [method] getDefaultsMode [method] symmetrizeModule [method] insertGuides [method] collectPartialModulesRoots [method] newRigTopTrig [method] fixModulePathForRigTop [method] updateSettings [method]","title":"MnsBlockBuildUI [Class]"},{"location":"blockBuildUI/#mnsblockbuildui-methods","text":"","title":"MnsBlockBuildUI  methods"},{"location":"blockUtility/","text":"blockUtility === Author: Assaf Ben Zur === BLOCK Core Utility Library. This library contains all utility methods used primarily by BLOCK. The objective of this library is mainting most Block-Core abilities external and independent. Defenitions addDefaultAttrsToPlg For a newly created plg, create all of it's default predefined attributes. Constructor: addDefaultAttrsToPlg(plg, kwargs) Return: None Arguments: plg kwargs Keyword Arguments: alignPLGuides This is the main 'align' trigger to all 'align tools' in BLOCK. This method will calidate and collect the current scene slection, then align the collected PLG's based on the mode passed in. Constructor: alignPLGuides(border = \"left\", mode = 0) Return: None Arguments: border ( str ) ; [default: \"left\"] mode ( int ) ; [default: 0] Keyword Arguments: attemptModulePathFixForRootGuide Constructor: attemptModulePathFixForRootGuide(guideRoot, existingBtns) Return: None Arguments: guideRoot existingBtns Keyword Arguments: attemptModulePathFixFroRigTop Run through all existing rig component (in rigTop) and validate the module directories against all existing module directories. If a module path was found invalid, attempt to re-find it in the existing modules. Constructor: attemptModulePathFixFroRigTop(rigTop, existingBtns) Return: None Arguments: rigTop existingBtns Keyword Arguments: buildShapes This method will be called from a rig construction. This method will look for any contol shapes stored within the given rig (rigTop), and replace the default shapes with any corresponding control shape. Shape replacement method will be done according to the 'mode' flag (relative/absulote). Constructor: buildShapes(ctrls = [], rigTop = None, kwargs) Return: None Arguments: ctrls ( list ) ; [default: []] rigTop ( str ) ; [default: None] kwargs Keyword Arguments: mode ( int ) collectCtrlRelatives Collect ctrls based on given state: 0: All 1: Modules 2: Selected Constructor: collectCtrlRelatives(mode = 0, kwargs) Return: list (controls) Arguments: mode ( int ) ; [default: 0] kwargs Keyword Arguments: collectCtrls Collect ALL related controls for th given rigTop. Constructor: collectCtrls(rigTop = None) Return: list (controls) Arguments: rigTop ( str ) ; [default: None] Keyword Arguments: collectGuides Based on the oprional arguments passed in, collect all matching related guides to the input root list. Constructor: collectGuides(roots = pm.ls(sl = 1), kwargs) Return: dict (Related guides), list (sparseGuides, guide without any relations) Arguments: roots ( str ) ; [default: selection] kwargs Keyword Arguments: rigTop ( str ) ; [default: None] includeDecendents ( bool ) includeDecendentBranch ( bool ) getGuides ( bool ) ; [default: True] getCustomGuides ( bool ) ; [default: True] allAsSparse ( bool ) collectModuleControls Collect all related controls for the given module. Constructor: collectModuleControls(moduleTop) Return: list (controls) Arguments: moduleTop Keyword Arguments: collectModuleRootsBasedOnMode 0: All 1: Branch 2: Module Constructor: collectModuleRootsBasedOnMode(mode = 0) Return: list (root guides (modules) to build) Arguments: mode ( int ) ; [default: 0] Keyword Arguments: collectPLGuidesToAlign This is the main collect wrapper for all 'align plg' tools in BLOCK. This methods will validate and collect all PLG to align from the current scene selection Constructor: collectPLGuidesToAlign(mode = 0) Return: dict (PLGs to align) Arguments: mode ( int ) ; [default: 0] Keyword Arguments: collectSlavesFromNdr Collect all slaves related to the passed in 'mnsNodeRelationship' node. Constructor: collectSlavesFromNdr(ndrNode) Return: list (slave nodes) Arguments: ndrNode Keyword Arguments: connectIfNotConnected Constructor: connectIfNotConnected(attrA, attrB) Return: None Arguments: attrA attrB Keyword Arguments: connectPlgToVisChannel This method handles the vis channel connection of a plg to it's related layoutBase attributes based on it's type. Constructor: connectPlgToVisChannel(plg) Return: None Arguments: plg Keyword Arguments: connectSlaveToDeleteMaster Connect the passed in 'slave' node to the passed in 'master' node using 'mnsNodeRelationship'. This method will be successfull only if the master already has a related 'mnsNodeRelationship' node. Constructor: connectSlaveToDeleteMaster(slave, master) Return: None Arguments: slave master Keyword Arguments: constrainObjectsToSurface Constructor: constrainObjectsToSurface(MnsBuildModule = None, ctrlMasters = [], jointsToAttach = [], surface = None) Return: list (new ctrls) Arguments: MnsBuildModule ( str ) ; [default: None] ctrlMasters ( list ) ; [default: []] jointsToAttach ( list ) ; [default: []] surface ( str ) ; [default: None] Keyword Arguments: convertModuleAuthorityToSurface Constructor: convertModuleAuthorityToSurface(MnsBuildModule) Return: list (new ctrls) Arguments: MnsBuildModule Keyword Arguments: createAndConnectModuleVisChannelsToPuppetRootCtrl This method will create and connect the pedefined visibility graph to a given 'Module Top Group'. The driver attribute will be created within the puppet's 'world control', and the connection graph (using animCurvesUU node) will input into the group's visibility channels. The channels are split (predefined) as follows: 0. None 1. primaries 2. Secondaries 3. Tertiaries 4. Secondaries Only 5. Tertiaries Only 6. No Primaries Constructor: createAndConnectModuleVisChannelsToPuppetRootCtrl(moduleTopNode = None) Return: None Arguments: moduleTopNode ( str ) ; [default: None] Keyword Arguments: createPickerLayoutGuide The main creation method for PLG creation. This method will create a new 'Pikcer Layout Guide' based on the passed in parameters. 1. get picker layout base. 2. collect projection position if requested. 3. create and set all attributes Constructor: createPickerLayoutGuide(ctrl, override, rigTop = None, kwargs) Return: MnsNameStd (plg) Arguments: ctrl override rigTop ( str ) ; [default: None] kwargs Keyword Arguments: createPickerLayoutGuides Warpper method that handles multiple PLGs creation. Constructor: createPickerLayoutGuides(ctrlsToProject, rigTop, msgPrompt = True, kwargs) Return: None Arguments: ctrlsToProject rigTop msgPrompt ( bool ) ; [default: True] kwargs Keyword Arguments: createVisibilityBridgeMdl This method will check wether the 'target' has a visibility channel connection. In the case the given 'target' has input visibility connection, a 'bridge' multiplyDoubleLinear node will be created. The brigde node will accomidate both sources as an input, instead of replacing the original visibility by simple multiplication. By creating the 'bridge', both old and new sources will be kept as drivers, setting the visibility to 'False' if ANY of the given sources is 'False'. In case there is no connection input to the target's visibility channel, a simple connection will be made using the input source. Constructor: createVisibilityBridgeMdl(source = None, target = None) Return: None Arguments: source ( str ) ; [default: None] target ( str ) ; [default: None] Keyword Arguments: ctrlPickerGuideToggle Atempt to toggle between a selection \"control\" and \"PLG\" if possible. Constructor: ctrlPickerGuideToggle( kwargs) Return: None Arguments: kwargs Keyword Arguments: deleteDefaultsForCtrl Delete all set custom attributes for the given ctrl. Constructor: deleteDefaultsForCtrl(ctrl) Return: None Arguments: ctrl Keyword Arguments: deleteFreeJntGrpForModule Constructor: deleteFreeJntGrpForModule(guideRoot = None, kwargs) Return: None Arguments: guideRoot ( str ) ; [default: None] kwargs Keyword Arguments: deletePoseForGuides Block's delete pose wrapper. Constructor: deletePoseForGuides(guides = [], poseSet = \"T\") Return: None Arguments: guides ( list ) ; [default: []] poseSet ( str ) ; [default: \"T\"] Keyword Arguments: deletePuppetName This method will filter and delete the rigTops' puppet curves title. Constructor: deletePuppetName(rigTop, kwargs) Return: None Arguments: rigTop kwargs Keyword Arguments: deleteRigDefaults Load controls predefined and custom defaults: 0: All 1: Modules 2: Selected Constructor: deleteRigDefaults(mode = 0) Return: None Arguments: mode ( int ) ; [default: 0] Keyword Arguments: disconnectSlaveFromMaster Disconnect the slave passed in from it's master, if there is one. Constructor: disconnectSlaveFromMaster(slave) Return: None Arguments: slave Keyword Arguments: duplicatePlg Block \"PLG duplicate\" trigger. This method will handle PLG validation and duplication. Constructor: duplicatePlg(guide = None) Return: None Arguments: guide ( str ) ; [default: None] Keyword Arguments: duplicatePlgs A simple wrapper mwthod to handle multiple PLG duplication (Based on scene selection). Constructor: duplicatePlgs() Return: None Arguments: Keyword Arguments: extractControlShapes Trigger method for BLOCK - 'extract control shapes' method. This method will extract and store the current state of control shapes within the given rig (rigTop). The extracted shapes will be re-constructed once a rig-rebuild is initiated. In case of any control shape already exists, it will be replaced by default. Constructor: extractControlShapes(ctrls = [], rigTop = None, kwargs) Return: list (controls) Arguments: ctrls ( list ) ; [default: []] rigTop ( str ) ; [default: None] kwargs Keyword Arguments: filterCreationOnlyFromArgs A simple method to filter out the \"creationOnly\" flag for an argument. This method is called on a dynamicUI creation call if it NOT a \"new creation\" mode in BLOCK. In case any arguments within the list passed in is flagged as \"creationOnly\", it is removed from the list Constructor: filterCreationOnlyFromArgs(argsList) Return: list (filtered arguments) Arguments: argsList Keyword Arguments: filterSettings Filter all pre-defined settings to their corresponding gathering methods, and re-collect Constructor: filterSettings(fileSettings, node) Return: list (settings), string (current side place holder) Arguments: fileSettings node Keyword Arguments: findNamingIssuesInHierarchy Constructor: findNamingIssuesInHierarchy() Return: None Arguments: Keyword Arguments: gatherAllControlsCustomDefaults Gather custom defaults for all ctrls within the given rig. This method is used on rig deconstruction, to store all set default values, in order to restore them on construction. Constructor: gatherAllControlsCustomDefaults(rigTop) Return: dict (All rig custom defaults) Arguments: rigTop Keyword Arguments: gatherCustomDefaultDictForCtrl Constructor: gatherCustomDefaultDictForCtrl(ctrl) Return: dict (Custom Defaults Dict) Arguments: ctrl Keyword Arguments: gatherModuleCustomDefaults Gather custom defaults for all ctrls within the given module. This method is used on rig deconstruction, to store all set default values, in order to restore them on construction. Constructor: gatherModuleCustomDefaults(moduleTop) Return: dict (module custom defaults) Arguments: moduleTop Keyword Arguments: getAllCtrlsFromRigTop Get all controls for the given rig top. Constructor: getAllCtrlsFromRigTop(rigTop = None) Return: None Arguments: rigTop ( str ) ; [default: None] Keyword Arguments: getAllGuideRootsForRigTop Gather all guide roots for the passed in rigTop node. Constructor: getAllGuideRootsForRigTop(rigTop) Return: list (rootGuides) Arguments: rigTop Keyword Arguments: getAllPlgsForRigTop Collect all 'picker layout guides' from the rig passed in (as rigTop) Constructor: getAllPlgsForRigTop(rigTop) Return: list (All PLGs) Arguments: rigTop Keyword Arguments: getAllcolCtrlforRigTop Collect all 'color associated' nodes within the passed in rigTop. All returned nodes are considered 'color associated', meaning they are nodes that all of their shapes need to be directly colored. Constructor: getAllcolCtrlforRigTop(rigTop) Return: list (colorControls) Arguments: rigTop Keyword Arguments: getChildModules Recusrsivly collect all child modules from the given rootGuide's decendents. Constructor: getChildModules(rootGuide) Return: list (module decendents) Arguments: rootGuide Keyword Arguments: getCsGrpFromRigTop Attempt to collect the 'Control Shapes Group' from the passed in rigTop. Constructor: getCsGrpFromRigTop(rigTop = None) Return: MnsNameStd (ctrlShapes group) Arguments: rigTop ( str ) ; [default: None] Keyword Arguments: getCtrlAuthFromRootGuide Constructor: getCtrlAuthFromRootGuide(rootGuide = None) Return: None Arguments: rootGuide ( str ) ; [default: None] Keyword Arguments: getCtrlAuthFromRootGuides Constructor: getCtrlAuthFromRootGuides(rGuides = []) Return: None Arguments: rGuides ( list ) ; [default: []] Keyword Arguments: getCtrlCol Get the passed in node's color based on it's type, heirarchy and attributes. Constructor: getCtrlCol(ctrl, rigTop, kwargs) Return: tuple[3] (color) Arguments: ctrl rigTop kwargs Keyword Arguments: getCtrlShapesForModueRoot Constructor: getCtrlShapesForModueRoot(guideRoot) Return: None Arguments: guideRoot Keyword Arguments: getCtrlsFromModuleRoot Constructor: getCtrlsFromModuleRoot(guideRoot) Return: None Arguments: guideRoot Keyword Arguments: getDeleteMasterFromSlave Collect the delete master from a slave's related 'mnsNodeRelationship' node, if there is one. This method will collect the master connected to the 'deleteMaster' attribute of the node. Constructor: getDeleteMasterFromSlave(slave) Return: MnsNameStd (master) Arguments: slave Keyword Arguments: getExisingCnsCtrlsForRigTop Constructor: getExisingCnsCtrlsForRigTop(rigTop) Return: None Arguments: rigTop Keyword Arguments: getExistingCpomNodeFromSurface Constructor: getExistingCpomNodeFromSurface(surface) Return: None Arguments: surface Keyword Arguments: getExistingSpaceConstraintForControl Collect existing 'spaces' constraints for a passed in (built) control, in order to re-build them in turn, after correct filtering and validation (in case of a partial build for example). Constructor: getExistingSpaceConstraintForControl(ctrl = None) Return: list (mnsMatrixConstraint nodes) Arguments: ctrl ( str ) ; [default: None] Keyword Arguments: getExistingSpaceConstraintForControls Wrapper mwthod to collect 'spaces' constraints for multiple controls. Constructor: getExistingSpaceConstraintForControls(controls = []) Return: dict (constraintSpaces dictionary) Arguments: controls ( list ) ; [default: []] Keyword Arguments: getGlobalScaleAttrFromTransform This method is used to retreive any output decompose matrix node to be used as global scale input connection. If this method fails to retreive such attribute, it creates one and returns it. Constructor: getGlobalScaleAttrFromTransform(transform = None) Return: Attribute Arguments: transform ( str ) ; [default: None] Keyword Arguments: getGuideParent Collect a ctrl type object's 'Guide Authority', or related guide object. Constructor: getGuideParent(objectSel = None) Return: PyNode Arguments: objectSel ( str ) ; [default: None] Keyword Arguments: getKeyboardModifiersState Constructor: getKeyboardModifiersState() Return: None Arguments: Keyword Arguments: getModuleAnimGrp Constructor: getModuleAnimGrp(obj = None) Return: None Arguments: obj ( str ) ; [default: None] Keyword Arguments: getModuleDecendentsWildcard Collect all given module dendents using a 'wild-card' search method. This will collect all relatives using a * search within the root decendents, and return all of the passed in node types. Constructor: getModuleDecendentsWildcard(guideRoot, kwargs) Return: list (matching decendents) Arguments: guideRoot kwargs Keyword Arguments: getModuleFromGuide This method will attempt to collect a related PyModule from the given guideRoot passed in. This method will not return the module's methods, only the PyModule as an object. This method also contains override optional arguments to specify a direct path or module name. Constructor: getModuleFromGuide(guideRoot, kwargs) Return: PyModule (object) Arguments: guideRoot kwargs Keyword Arguments: methodName ( str ) ; [default: jointStructure] modPath ( str ) ; [default: None] modName ( str ) ; [default: None] getModuleGuideDecendents Collect all of the root guide module relatives for the passed in moduleRoot (or rootGuide). Constructor: getModuleGuideDecendents(guideRoot) Return: list (sorted by ID module decendents) Arguments: guideRoot Keyword Arguments: getModuleInterpJoints Collect all the given moduleRoot's 'interpolationJoints' relatives. Constructor: getModuleInterpJoints(guideRoot, kwargs) Return: list (matching interJoints) Arguments: guideRoot kwargs Keyword Arguments: getModuleRoot Attempt to collect the root guide relative from the given node. Constructor: getModuleRoot(objectA) Return: PyNode (rootGuide) Arguments: objectA Keyword Arguments: getModuleRootCtrl Constructor: getModuleRootCtrl(obj = None) Return: None Arguments: obj ( str ) ; [default: None] Keyword Arguments: getModuleRootForSel Attempt to collect a 'root guide' relative from the current selection Constructor: getModuleRootForSel() Return: PyNode (moduleRoot) Arguments: Keyword Arguments: getModuleScale Constructor: getModuleScale(MnsBuildModule) Return: None Arguments: MnsBuildModule Keyword Arguments: getModuleTopForCtrl Collect the 'Module Top Group' related to the passed in control. Constructor: getModuleTopForCtrl(ctrl = None, nameMatch = None) Return: MnsNameStd (Module Top Group) Arguments: ctrl ( str ) ; [default: None] nameMatch ( str ) ; [default: None] Keyword Arguments: getModuleTopFromRootGuide Attempt to collect 'Module Top Group' from a given root guide. Constructor: getModuleTopFromRootGuide(rootGuide = None) Return: MnsNameStd (Module Top Group) Arguments: rootGuide ( str ) ; [default: None] Keyword Arguments: getNodeRelationshipNodeFromObject Collect the related 'mnsNodeRelationship' node from the given input node. Constructor: getNodeRelationshipNodeFromObject(node) Return: PyNode Arguments: node Keyword Arguments: getOffsetGrpForCtrl Collect the offsetGroup related to the passed in control, if it exists. Constructor: getOffsetGrpForCtrl(ctrl, kwargs) Return: MnsNameStd (offset group) Arguments: ctrl kwargs Keyword Arguments: type ( str ) ; [default: offsetGrp] getOppositeSideControl Attempt to collect the opposite related mns object if it exists. Only non 'ceneter components' will be tested of course. Constructor: getOppositeSideControl(obj = None) Return: MnsNameStd (Opposite object) Arguments: obj ( str ) ; [default: None] Keyword Arguments: getPickerGuidesGrpFromRigTop Attempt to collect the 'Picker Guide Group' from the passed in rigTop. Constructor: getPickerGuidesGrpFromRigTop(rigTop = None) Return: MnsNameStd (Picker Guide Group) Arguments: rigTop ( str ) ; [default: None] Keyword Arguments: getPickerLayoutBaseFromRigTop Attempt to collect the 'Picker Layout Base guide' from the passed in rigTop. Constructor: getPickerLayoutBaseFromRigTop(rigTop = None) Return: MnsNameStd (Picker Layout Base guide) Arguments: rigTop ( str ) ; [default: None] Keyword Arguments: getPickerLayoutCamFromRigTop Attempt to collect the 'Picker Layout Camera' from the passed in rigTop. Constructor: getPickerLayoutCamFromRigTop(rigTop = None) Return: MnsNameStd (Picker Layout Base guide) Arguments: rigTop ( str ) ; [default: None] Keyword Arguments: getPickerProjectionCamFromRigTop Attempt to collect the 'Picker Projection Camera' from the passed in rigTop. Constructor: getPickerProjectionCamFromRigTop(rigTop = None) Return: MnsNameStd (Picker Projection Camera) Arguments: rigTop ( str ) ; [default: None] Keyword Arguments: getPickerTitleGrpFromRigTop Attempt to collect the 'Picker Title Group' from the passed in rigTop. Constructor: getPickerTitleGrpFromRigTop(rigTop = None) Return: MnsNameStd (Picker Title Group)) Arguments: rigTop ( str ) ; [default: None] Keyword Arguments: getPuppetBaseFromRigTop Attempt to collect the 'puppet group' from the passed in rigTop. Constructor: getPuppetBaseFromRigTop(rigTop = None) Return: MnsNameStd (puppet base) Arguments: rigTop ( str ) ; [default: None] Keyword Arguments: getPuppetRootFromRigTop Attempt to collect the 'Puppet World Control' from the passed in rigTop. Constructor: getPuppetRootFromRigTop(rigTop = None) Return: MnsNameStd (Puppet world control) Arguments: rigTop ( str ) ; [default: None] Keyword Arguments: getPyModuleFromGuide Attempt to collect a 'Python Module' (or package) related to the given guide node passed in. If a related module was found, this method will return it as a PyModule object not as a directory. This method will also return the module's methods in a dictionary in order to run directly from it. Constructor: getPyModuleFromGuide(guide) Return: PyModule, dict (module methods as keys and method objects as entries) Arguments: guide Keyword Arguments: getRelatedNodeFromObject Collect a related node from the 'messageOut' attribute of the given node's 'mnsNodeRelationship' node. Constructor: getRelatedNodeFromObject(node) Return: PyNode Arguments: node Keyword Arguments: getRelationMasterFromSlave Collect the delete master from a slave's related 'mnsNodeRelationship' node, if there is one. This method will collect the master connected to the 'masterIn' attribute of the node. Constructor: getRelationMasterFromSlave(slave) Return: MnsNameStd (master) Arguments: slave Keyword Arguments: getRigTop Attempt to get a rigTop node from the passed in node to check. Constructor: getRigTop(objectA) Return: MnsNameStd (rigTop) Arguments: objectA Keyword Arguments: getRigTopAssemblies Constructor: getRigTopAssemblies() Return: None Arguments: Keyword Arguments: getRigTopForSel Attempt to get a rigTop node from current selection Constructor: getRigTopForSel() Return: MnsNameStd (rigTop) Arguments: Keyword Arguments: getRootGuideFromCtrl Attempt to collect the related 'rootGuide' from the given control passed in. Constructor: getRootGuideFromCtrl(obj) Return: MnsNameStd (rootGuide) Arguments: obj Keyword Arguments: getRootGuideFromRigTop Attempt to collect the rig's root guide from the passed in rigTop node Constructor: getRootGuideFromRigTop(rigTop = None) Return: MnsNameStd (rig root guide) Arguments: rigTop ( str ) ; [default: None] Keyword Arguments: getRootJointsFromModuleRoot Constructor: getRootJointsFromModuleRoot(guideRoot) Return: None Arguments: guideRoot Keyword Arguments: getSettings Get setting for the requested setting path. The settings are being filtered and set according to a node passed in. Constructor: getSettings(settingsPath, node, blkType) Return: list (optionalArgumentsFromFile), string (current side place holder) Arguments: settingsPath node blkType Keyword Arguments: getSideModuleBranchRoot For a non \"center\" component passed in, recursively attempt to collect the 'side-branch' root guide. In essence look for the highest rootGuide in the selected 'side' heirarchy that has a 'center' component parent- meaning it's the top of the requested branch. Constructor: getSideModuleBranchRoot(guide = None) Return: MnsNameStd (branch root) Arguments: guide ( str ) ; [default: None] Keyword Arguments: getSimpleRivetsNodeForMesh Constructor: getSimpleRivetsNodeForMesh(mesh = None) Return: PyNode Arguments: mesh ( str ) ; [default: None] Keyword Arguments: handleInterpLocsStructureReturn Constructor: handleInterpLocsStructureReturn(rigTop = None, interpLocs = [], guides = [], kwargs) Return: None Arguments: rigTop ( str ) ; [default: None] interpLocs ( list ) ; [default: []] guides ( list ) ; [default: []] kwargs Keyword Arguments: limbMatchFkIK mode 0 - Match FK to IK mode 1 - Match IK to FK Constructor: limbMatchFkIK(limbCtrl, mode = 0) Return: None Arguments: limbCtrl mode ( int ) ; [default: 0] Keyword Arguments: loadDefaultsForCtrl Load all default attributes for the given control, taking mnsDefaults (custom) into acount Constructor: loadDefaultsForCtrl(ctrl) Return: None Arguments: ctrl Keyword Arguments: loadPerspCam Set Maya's main camera panel, to the default 'persp' camera. Constructor: loadPerspCam() Return: None Arguments: Keyword Arguments: loadPickerProjectionCam Set the main maya camera view to the 'picker projection camera', based on the scene selection (or the related rigTop to selection). Constructor: loadPickerProjectionCam() Return: None Arguments: Keyword Arguments: loadPoseForGuides Block's load pose wrapper. Constructor: loadPoseForGuides(guides = [], poseSet = \"T\") Return: None Arguments: guides ( list ) ; [default: []] poseSet ( str ) ; [default: \"T\"] Keyword Arguments: loadRigDefaults Load controls predefined and custom defaults: 0: All 1: Modules 2: Selected Constructor: loadRigDefaults(mode = 0) Return: None Arguments: mode ( int ) ; [default: 0] Keyword Arguments: locateCnsForCtrl Constructor: locateCnsForCtrl(ctrl = None, kwargs) Return: None Arguments: ctrl ( str ) ; [default: None] kwargs Keyword Arguments: matchKeyableAttributes Constructor: matchKeyableAttributes(source = None, target = None) Return: None Arguments: source ( str ) ; [default: None] target ( str ) ; [default: None] Keyword Arguments: mirrorCtrls Constructor: mirrorCtrls(ctrls = [], direction = 0, kwargs) Return: None Arguments: ctrls ( list ) ; [default: []] direction ( int ) ; [default: 0] kwargs Keyword Arguments: missingModuleActionTrigger Action trigger for an invalid module path fix attempt Constructor: missingModuleActionTrigger(rigTop, missingModuleName, existingBtns) Return: None Arguments: rigTop missingModuleName existingBtns Keyword Arguments: muteLocalTransformations Constructor: muteLocalTransformations(ctrl = None, kwargs) Return: None Arguments: ctrl ( str ) ; [default: None] kwargs Keyword Arguments: namePuppet This method is used to create the rig's curves puppet title and connect it to to it's world control as additional shape nodes. Constructor: namePuppet(rigTop, kwargs) Return: None Arguments: rigTop kwargs Keyword Arguments: pickerButtonClickAction The global action trigger for any picker UI button click trigger. This method will trigger the \"controls selection\" and the \"action script\" for the passed in QPushButton passed in. Constructor: pickerButtonClickAction(btn, kwargs) Return: None Arguments: btn kwargs Keyword Arguments: pickerLayoutAdjust Load a new Maya panel, with the 'Picker Layout Camera' related to the scene selction. This will also set the panel settings before loading it, based on the rigTop and 'layout base' attributes. Constructor: pickerLayoutAdjust() Return: None Arguments: Keyword Arguments: pickerTitleToggle Toggle between PLG 'control' view, to 'title' view. Constructor: pickerTitleToggle() Return: None Arguments: Keyword Arguments: preCheckNameForUI A simple method to check for argument duplicates within an argument dict Constructor: preCheckNameForUI(arguments, suffix) Return: dict (recompiled arguments) Arguments: arguments suffix Keyword Arguments: projectPickerLayoutPos Get the passed in Ctrl PLG position, relative to the rig's 'layoutBase'. This method 'projects' the ctrl position based on the rig's 'Projection Camera' into the layout base space, and returns it's processed position. Constructor: projectPickerLayoutPos(ctrl, cam, layoutBase) Return: tuple[3] (posX), tuple[3] (posY) Arguments: ctrl cam layoutBase Keyword Arguments: projectSelectedPickerLayout A wrapper method that handles plg projection from selected scene objects. Constructor: projectSelectedPickerLayout(msgPrompt = True) Return: None Arguments: msgPrompt ( bool ) ; [default: True] Keyword Arguments: recGetModuleTopForCtrl Recursively attempt to collect the 'Module Top Group' related to the ctrl passed in within it's related parents. Constructor: recGetModuleTopForCtrl(ctrl = None) Return: MnsNameStd (Module Top Group) Arguments: ctrl ( str ) ; [default: None] Keyword Arguments: recGetParentJoint Recursivly attempt to get a parent joint starting with a given root object, scaling up the heirarchy. Constructor: recGetParentJoint(rootObject = None) Return: mnsNameStd Arguments: rootObject ( str ) ; [default: None] Keyword Arguments: recSearchForGuideRootInParents Recusrsivly look for a 'rootGuide' from the given node's parent relatives. Constructor: recSearchForGuideRootInParents(obj) Return: PyNode (rootGuide) Arguments: obj Keyword Arguments: removeAlienMatchesFromList Constructor: removeAlienMatchesFromList(guideRoot, currentMatches = []) Return: None Arguments: guideRoot currentMatches ( list ) ; [default: []] Keyword Arguments: removeAllAuthority This method is used to delete all 'Authority' from the passsed in slave, if there are any. Constructor: removeAllAuthority(slave = None, kwargs) Return: MnsNameStd (oldAuthority) Arguments: slave ( str ) ; [default: None] kwargs Keyword Arguments: removeModuleVisAttrFromPuppetTop This method will remove the corresponding \"module vis\" channel from the given puppet base control. This method is used when a 'partial deconstruction' is initiated, keeping only relevant vis channels in place, removing the 'deconstructed' modules vis channels. Constructor: removeModuleVisAttrFromPuppetTop(moduleTopNode = None, puppetTop = None) Return: None Arguments: moduleTopNode ( str ) ; [default: None] puppetTop ( str ) ; [default: None] Keyword Arguments: resetAllControlForRigTop Constructor: resetAllControlForRigTop(rigTop = None, kwargs) Return: None Arguments: rigTop ( str ) ; [default: None] kwargs Keyword Arguments: resetControls reset all keyable attributes to default value. Constructor: resetControls(controls=[]) Return: None Arguments: controls ( list ) ; [default: []] Keyword Arguments: saveLoadPose This is the main wrapper for all pose 'save & load' triggers of BLOCK. Constructor: saveLoadPose(guides = [], kwargs) Return: None Arguments: guides ( list ) ; [default: []] kwargs Keyword Arguments: rigTop ( str ) ; [default: None] mode ( int ) saveLoad ( int ) msgPrompt ( bool ) pose ( str ) ; [default: T] savePoseForGuides Block's save pose wrapper. Constructor: savePoseForGuides(guides = [], poseSet = \"T\", msgPrompt = False) Return: None Arguments: guides ( list ) ; [default: []] poseSet ( str ) ; [default: \"T\"] msgPrompt ( bool ) ; [default: False] Keyword Arguments: searchForRootGuideInRelatives Search for a 'guide authority' or 'rootGuide' in the given node's decendents Constructor: searchForRootGuideInRelatives(obj) Return: PyNode (rootGuide) Arguments: obj Keyword Arguments: selectAllCtrls Select all controls for the given rig top. Constructor: selectAllCtrls(rigTop = None, kwargs) Return: None Arguments: rigTop ( str ) ; [default: None] kwargs Keyword Arguments: selectRelatedControls Constructor: selectRelatedControls(controlsToSelect, mode = \"replace\") Return: None Arguments: controlsToSelect mode ( str ) ; [default: \"replace\"] Keyword Arguments: setCtrlCol Attempt to collect the passed in node's color (based on its type), and set it if seccessfull. Constructor: setCtrlCol(ctrl, rigTop, kwargs) Return: MnsNameStd (ctrl) Arguments: ctrl rigTop kwargs Keyword Arguments: setCurrentStateAsDefaultForCtrl Set custom defaults for keyable attributes for the given control, based on it's current state. Constructor: setCurrentStateAsDefaultForCtrl(ctrl) Return: None Arguments: ctrl Keyword Arguments: setRigDefaults Set controls custom defaults based on given state: 0: All 1: Modules 2: Branches Constructor: setRigDefaults(mode = 0) Return: None Arguments: mode ( int ) ; [default: 0] Keyword Arguments: setgCtrlColorForModule For all relevant decendents of the passed in moduleRoot, get and set it's color. Constructor: setgCtrlColorForModule(rigTop, moduleRoot) Return: None Arguments: rigTop moduleRoot Keyword Arguments: setgCtrlColorForRigTop Set ALL relevnt controls within a rigTop, to their color based on their type. Constructor: setgCtrlColorForRigTop(rigTop) Return: None Arguments: rigTop Keyword Arguments: symmetrizePlg Block 'plg symmetrize' button trigger. This method will handle validation and creation of PLG related symmetrical plg. Constructor: symmetrizePlg(guide = None) Return: None Arguments: guide ( str ) ; [default: None] Keyword Arguments: symmetrizePlgs A simple wrapper method to symmetrize multiple PLG's (based on scene selection). Constructor: symmetrizePlgs() Return: None Arguments: Keyword Arguments: toggleGuideJoint Atempt to toggle between a selection guide and main joint if possible. Constructor: toggleGuideJoint( kwargs) Return: None Arguments: kwargs Keyword Arguments: togglePickerCtrlBodyFacial Constructor: togglePickerCtrlBodyFacial() Return: None Arguments: Keyword Arguments: transferAuthorityToCtrl This is a very important method used in BLOCK cosntruction. This method will find the current 'guide control' from the given joint slave. and transfer it's authority to a newly created 'control authority'. This method will be called on every module build and it is the main trigger to flag a module construction. The 'authority' attribute for every guide or control is used to distiguish the module state, and jnt state. When transfering an authority to a ctrl, a 'old authority' attr (of sort) is created, in order for the procedural 'deconstruct' to look for and tranfer the jnt authority back to it's orignal guide, before deleting the constructed module. See also parallel: 'transferAuthorityToGuide' Method. Constructor: transferAuthorityToCtrl(slave = None, ctrlMaster = None, kwargs) Return: None Arguments: slave ( str ) ; [default: None] ctrlMaster ( str ) ; [default: None] kwargs Keyword Arguments: transferAuthorityToGuide This is a very important method used in BLOCK de-construction. This method will find the current 'control' from the given joint slave. and transfer it's authority to a it's original 'guide' authority. This method will be called procedurally on any module deconstruction, before deleting the constructed module. See also parallel: 'transferAuthorityToCtrl' Method. Constructor: transferAuthorityToGuide(ctrl = None, kwargs) Return: None Arguments: ctrl ( str ) ; [default: None] kwargs Keyword Arguments: upParentAllPlgTrigger OBSELETE. PLG parenting is no longer in use. Constructor: upParentAllPlgTrigger() Return: None Arguments: Keyword Arguments:","title":"blockUtility"},{"location":"blockUtility/#blockutility","text":"=== Author: Assaf Ben Zur === BLOCK Core Utility Library. This library contains all utility methods used primarily by BLOCK. The objective of this library is mainting most Block-Core abilities external and independent.","title":"blockUtility"},{"location":"blockUtility/#defenitions","text":"","title":"Defenitions"},{"location":"blockUtility/#adddefaultattrstoplg","text":"For a newly created plg, create all of it's default predefined attributes. Constructor: addDefaultAttrsToPlg(plg, kwargs) Return: None Arguments: plg kwargs Keyword Arguments:","title":"addDefaultAttrsToPlg"},{"location":"blockUtility/#alignplguides","text":"This is the main 'align' trigger to all 'align tools' in BLOCK. This method will calidate and collect the current scene slection, then align the collected PLG's based on the mode passed in. Constructor: alignPLGuides(border = \"left\", mode = 0) Return: None Arguments: border ( str ) ; [default: \"left\"] mode ( int ) ; [default: 0] Keyword Arguments:","title":"alignPLGuides"},{"location":"blockUtility/#attemptmodulepathfixforrootguide","text":"Constructor: attemptModulePathFixForRootGuide(guideRoot, existingBtns) Return: None Arguments: guideRoot existingBtns Keyword Arguments:","title":"attemptModulePathFixForRootGuide"},{"location":"blockUtility/#attemptmodulepathfixfrorigtop","text":"Run through all existing rig component (in rigTop) and validate the module directories against all existing module directories. If a module path was found invalid, attempt to re-find it in the existing modules. Constructor: attemptModulePathFixFroRigTop(rigTop, existingBtns) Return: None Arguments: rigTop existingBtns Keyword Arguments:","title":"attemptModulePathFixFroRigTop"},{"location":"blockUtility/#buildshapes","text":"This method will be called from a rig construction. This method will look for any contol shapes stored within the given rig (rigTop), and replace the default shapes with any corresponding control shape. Shape replacement method will be done according to the 'mode' flag (relative/absulote). Constructor: buildShapes(ctrls = [], rigTop = None, kwargs) Return: None Arguments: ctrls ( list ) ; [default: []] rigTop ( str ) ; [default: None] kwargs Keyword Arguments: mode ( int )","title":"buildShapes"},{"location":"blockUtility/#collectctrlrelatives","text":"Collect ctrls based on given state: 0: All 1: Modules 2: Selected Constructor: collectCtrlRelatives(mode = 0, kwargs) Return: list (controls) Arguments: mode ( int ) ; [default: 0] kwargs Keyword Arguments:","title":"collectCtrlRelatives"},{"location":"blockUtility/#collectctrls","text":"Collect ALL related controls for th given rigTop. Constructor: collectCtrls(rigTop = None) Return: list (controls) Arguments: rigTop ( str ) ; [default: None] Keyword Arguments:","title":"collectCtrls"},{"location":"blockUtility/#collectguides","text":"Based on the oprional arguments passed in, collect all matching related guides to the input root list. Constructor: collectGuides(roots = pm.ls(sl = 1), kwargs) Return: dict (Related guides), list (sparseGuides, guide without any relations) Arguments: roots ( str ) ; [default: selection] kwargs Keyword Arguments: rigTop ( str ) ; [default: None] includeDecendents ( bool ) includeDecendentBranch ( bool ) getGuides ( bool ) ; [default: True] getCustomGuides ( bool ) ; [default: True] allAsSparse ( bool )","title":"collectGuides"},{"location":"blockUtility/#collectmodulecontrols","text":"Collect all related controls for the given module. Constructor: collectModuleControls(moduleTop) Return: list (controls) Arguments: moduleTop Keyword Arguments:","title":"collectModuleControls"},{"location":"blockUtility/#collectmodulerootsbasedonmode","text":"0: All 1: Branch 2: Module Constructor: collectModuleRootsBasedOnMode(mode = 0) Return: list (root guides (modules) to build) Arguments: mode ( int ) ; [default: 0] Keyword Arguments:","title":"collectModuleRootsBasedOnMode"},{"location":"blockUtility/#collectplguidestoalign","text":"This is the main collect wrapper for all 'align plg' tools in BLOCK. This methods will validate and collect all PLG to align from the current scene selection Constructor: collectPLGuidesToAlign(mode = 0) Return: dict (PLGs to align) Arguments: mode ( int ) ; [default: 0] Keyword Arguments:","title":"collectPLGuidesToAlign"},{"location":"blockUtility/#collectslavesfromndr","text":"Collect all slaves related to the passed in 'mnsNodeRelationship' node. Constructor: collectSlavesFromNdr(ndrNode) Return: list (slave nodes) Arguments: ndrNode Keyword Arguments:","title":"collectSlavesFromNdr"},{"location":"blockUtility/#connectifnotconnected","text":"Constructor: connectIfNotConnected(attrA, attrB) Return: None Arguments: attrA attrB Keyword Arguments:","title":"connectIfNotConnected"},{"location":"blockUtility/#connectplgtovischannel","text":"This method handles the vis channel connection of a plg to it's related layoutBase attributes based on it's type. Constructor: connectPlgToVisChannel(plg) Return: None Arguments: plg Keyword Arguments:","title":"connectPlgToVisChannel"},{"location":"blockUtility/#connectslavetodeletemaster","text":"Connect the passed in 'slave' node to the passed in 'master' node using 'mnsNodeRelationship'. This method will be successfull only if the master already has a related 'mnsNodeRelationship' node. Constructor: connectSlaveToDeleteMaster(slave, master) Return: None Arguments: slave master Keyword Arguments:","title":"connectSlaveToDeleteMaster"},{"location":"blockUtility/#constrainobjectstosurface","text":"Constructor: constrainObjectsToSurface(MnsBuildModule = None, ctrlMasters = [], jointsToAttach = [], surface = None) Return: list (new ctrls) Arguments: MnsBuildModule ( str ) ; [default: None] ctrlMasters ( list ) ; [default: []] jointsToAttach ( list ) ; [default: []] surface ( str ) ; [default: None] Keyword Arguments:","title":"constrainObjectsToSurface"},{"location":"blockUtility/#convertmoduleauthoritytosurface","text":"Constructor: convertModuleAuthorityToSurface(MnsBuildModule) Return: list (new ctrls) Arguments: MnsBuildModule Keyword Arguments:","title":"convertModuleAuthorityToSurface"},{"location":"blockUtility/#createandconnectmodulevischannelstopuppetrootctrl","text":"This method will create and connect the pedefined visibility graph to a given 'Module Top Group'. The driver attribute will be created within the puppet's 'world control', and the connection graph (using animCurvesUU node) will input into the group's visibility channels. The channels are split (predefined) as follows: 0. None 1. primaries 2. Secondaries 3. Tertiaries 4. Secondaries Only 5. Tertiaries Only 6. No Primaries Constructor: createAndConnectModuleVisChannelsToPuppetRootCtrl(moduleTopNode = None) Return: None Arguments: moduleTopNode ( str ) ; [default: None] Keyword Arguments:","title":"createAndConnectModuleVisChannelsToPuppetRootCtrl"},{"location":"blockUtility/#createpickerlayoutguide","text":"The main creation method for PLG creation. This method will create a new 'Pikcer Layout Guide' based on the passed in parameters. 1. get picker layout base. 2. collect projection position if requested. 3. create and set all attributes Constructor: createPickerLayoutGuide(ctrl, override, rigTop = None, kwargs) Return: MnsNameStd (plg) Arguments: ctrl override rigTop ( str ) ; [default: None] kwargs Keyword Arguments:","title":"createPickerLayoutGuide"},{"location":"blockUtility/#createpickerlayoutguides","text":"Warpper method that handles multiple PLGs creation. Constructor: createPickerLayoutGuides(ctrlsToProject, rigTop, msgPrompt = True, kwargs) Return: None Arguments: ctrlsToProject rigTop msgPrompt ( bool ) ; [default: True] kwargs Keyword Arguments:","title":"createPickerLayoutGuides"},{"location":"blockUtility/#createvisibilitybridgemdl","text":"This method will check wether the 'target' has a visibility channel connection. In the case the given 'target' has input visibility connection, a 'bridge' multiplyDoubleLinear node will be created. The brigde node will accomidate both sources as an input, instead of replacing the original visibility by simple multiplication. By creating the 'bridge', both old and new sources will be kept as drivers, setting the visibility to 'False' if ANY of the given sources is 'False'. In case there is no connection input to the target's visibility channel, a simple connection will be made using the input source. Constructor: createVisibilityBridgeMdl(source = None, target = None) Return: None Arguments: source ( str ) ; [default: None] target ( str ) ; [default: None] Keyword Arguments:","title":"createVisibilityBridgeMdl"},{"location":"blockUtility/#ctrlpickerguidetoggle","text":"Atempt to toggle between a selection \"control\" and \"PLG\" if possible. Constructor: ctrlPickerGuideToggle( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"ctrlPickerGuideToggle"},{"location":"blockUtility/#deletedefaultsforctrl","text":"Delete all set custom attributes for the given ctrl. Constructor: deleteDefaultsForCtrl(ctrl) Return: None Arguments: ctrl Keyword Arguments:","title":"deleteDefaultsForCtrl"},{"location":"blockUtility/#deletefreejntgrpformodule","text":"Constructor: deleteFreeJntGrpForModule(guideRoot = None, kwargs) Return: None Arguments: guideRoot ( str ) ; [default: None] kwargs Keyword Arguments:","title":"deleteFreeJntGrpForModule"},{"location":"blockUtility/#deleteposeforguides","text":"Block's delete pose wrapper. Constructor: deletePoseForGuides(guides = [], poseSet = \"T\") Return: None Arguments: guides ( list ) ; [default: []] poseSet ( str ) ; [default: \"T\"] Keyword Arguments:","title":"deletePoseForGuides"},{"location":"blockUtility/#deletepuppetname","text":"This method will filter and delete the rigTops' puppet curves title. Constructor: deletePuppetName(rigTop, kwargs) Return: None Arguments: rigTop kwargs Keyword Arguments:","title":"deletePuppetName"},{"location":"blockUtility/#deleterigdefaults","text":"Load controls predefined and custom defaults: 0: All 1: Modules 2: Selected Constructor: deleteRigDefaults(mode = 0) Return: None Arguments: mode ( int ) ; [default: 0] Keyword Arguments:","title":"deleteRigDefaults"},{"location":"blockUtility/#disconnectslavefrommaster","text":"Disconnect the slave passed in from it's master, if there is one. Constructor: disconnectSlaveFromMaster(slave) Return: None Arguments: slave Keyword Arguments:","title":"disconnectSlaveFromMaster"},{"location":"blockUtility/#duplicateplg","text":"Block \"PLG duplicate\" trigger. This method will handle PLG validation and duplication. Constructor: duplicatePlg(guide = None) Return: None Arguments: guide ( str ) ; [default: None] Keyword Arguments:","title":"duplicatePlg"},{"location":"blockUtility/#duplicateplgs","text":"A simple wrapper mwthod to handle multiple PLG duplication (Based on scene selection). Constructor: duplicatePlgs() Return: None Arguments: Keyword Arguments:","title":"duplicatePlgs"},{"location":"blockUtility/#extractcontrolshapes","text":"Trigger method for BLOCK - 'extract control shapes' method. This method will extract and store the current state of control shapes within the given rig (rigTop). The extracted shapes will be re-constructed once a rig-rebuild is initiated. In case of any control shape already exists, it will be replaced by default. Constructor: extractControlShapes(ctrls = [], rigTop = None, kwargs) Return: list (controls) Arguments: ctrls ( list ) ; [default: []] rigTop ( str ) ; [default: None] kwargs Keyword Arguments:","title":"extractControlShapes"},{"location":"blockUtility/#filtercreationonlyfromargs","text":"A simple method to filter out the \"creationOnly\" flag for an argument. This method is called on a dynamicUI creation call if it NOT a \"new creation\" mode in BLOCK. In case any arguments within the list passed in is flagged as \"creationOnly\", it is removed from the list Constructor: filterCreationOnlyFromArgs(argsList) Return: list (filtered arguments) Arguments: argsList Keyword Arguments:","title":"filterCreationOnlyFromArgs"},{"location":"blockUtility/#filtersettings","text":"Filter all pre-defined settings to their corresponding gathering methods, and re-collect Constructor: filterSettings(fileSettings, node) Return: list (settings), string (current side place holder) Arguments: fileSettings node Keyword Arguments:","title":"filterSettings"},{"location":"blockUtility/#findnamingissuesinhierarchy","text":"Constructor: findNamingIssuesInHierarchy() Return: None Arguments: Keyword Arguments:","title":"findNamingIssuesInHierarchy"},{"location":"blockUtility/#gatherallcontrolscustomdefaults","text":"Gather custom defaults for all ctrls within the given rig. This method is used on rig deconstruction, to store all set default values, in order to restore them on construction. Constructor: gatherAllControlsCustomDefaults(rigTop) Return: dict (All rig custom defaults) Arguments: rigTop Keyword Arguments:","title":"gatherAllControlsCustomDefaults"},{"location":"blockUtility/#gathercustomdefaultdictforctrl","text":"Constructor: gatherCustomDefaultDictForCtrl(ctrl) Return: dict (Custom Defaults Dict) Arguments: ctrl Keyword Arguments:","title":"gatherCustomDefaultDictForCtrl"},{"location":"blockUtility/#gathermodulecustomdefaults","text":"Gather custom defaults for all ctrls within the given module. This method is used on rig deconstruction, to store all set default values, in order to restore them on construction. Constructor: gatherModuleCustomDefaults(moduleTop) Return: dict (module custom defaults) Arguments: moduleTop Keyword Arguments:","title":"gatherModuleCustomDefaults"},{"location":"blockUtility/#getallctrlsfromrigtop","text":"Get all controls for the given rig top. Constructor: getAllCtrlsFromRigTop(rigTop = None) Return: None Arguments: rigTop ( str ) ; [default: None] Keyword Arguments:","title":"getAllCtrlsFromRigTop"},{"location":"blockUtility/#getallguiderootsforrigtop","text":"Gather all guide roots for the passed in rigTop node. Constructor: getAllGuideRootsForRigTop(rigTop) Return: list (rootGuides) Arguments: rigTop Keyword Arguments:","title":"getAllGuideRootsForRigTop"},{"location":"blockUtility/#getallplgsforrigtop","text":"Collect all 'picker layout guides' from the rig passed in (as rigTop) Constructor: getAllPlgsForRigTop(rigTop) Return: list (All PLGs) Arguments: rigTop Keyword Arguments:","title":"getAllPlgsForRigTop"},{"location":"blockUtility/#getallcolctrlforrigtop","text":"Collect all 'color associated' nodes within the passed in rigTop. All returned nodes are considered 'color associated', meaning they are nodes that all of their shapes need to be directly colored. Constructor: getAllcolCtrlforRigTop(rigTop) Return: list (colorControls) Arguments: rigTop Keyword Arguments:","title":"getAllcolCtrlforRigTop"},{"location":"blockUtility/#getchildmodules","text":"Recusrsivly collect all child modules from the given rootGuide's decendents. Constructor: getChildModules(rootGuide) Return: list (module decendents) Arguments: rootGuide Keyword Arguments:","title":"getChildModules"},{"location":"blockUtility/#getcsgrpfromrigtop","text":"Attempt to collect the 'Control Shapes Group' from the passed in rigTop. Constructor: getCsGrpFromRigTop(rigTop = None) Return: MnsNameStd (ctrlShapes group) Arguments: rigTop ( str ) ; [default: None] Keyword Arguments:","title":"getCsGrpFromRigTop"},{"location":"blockUtility/#getctrlauthfromrootguide","text":"Constructor: getCtrlAuthFromRootGuide(rootGuide = None) Return: None Arguments: rootGuide ( str ) ; [default: None] Keyword Arguments:","title":"getCtrlAuthFromRootGuide"},{"location":"blockUtility/#getctrlauthfromrootguides","text":"Constructor: getCtrlAuthFromRootGuides(rGuides = []) Return: None Arguments: rGuides ( list ) ; [default: []] Keyword Arguments:","title":"getCtrlAuthFromRootGuides"},{"location":"blockUtility/#getctrlcol","text":"Get the passed in node's color based on it's type, heirarchy and attributes. Constructor: getCtrlCol(ctrl, rigTop, kwargs) Return: tuple[3] (color) Arguments: ctrl rigTop kwargs Keyword Arguments:","title":"getCtrlCol"},{"location":"blockUtility/#getctrlshapesformodueroot","text":"Constructor: getCtrlShapesForModueRoot(guideRoot) Return: None Arguments: guideRoot Keyword Arguments:","title":"getCtrlShapesForModueRoot"},{"location":"blockUtility/#getctrlsfrommoduleroot","text":"Constructor: getCtrlsFromModuleRoot(guideRoot) Return: None Arguments: guideRoot Keyword Arguments:","title":"getCtrlsFromModuleRoot"},{"location":"blockUtility/#getdeletemasterfromslave","text":"Collect the delete master from a slave's related 'mnsNodeRelationship' node, if there is one. This method will collect the master connected to the 'deleteMaster' attribute of the node. Constructor: getDeleteMasterFromSlave(slave) Return: MnsNameStd (master) Arguments: slave Keyword Arguments:","title":"getDeleteMasterFromSlave"},{"location":"blockUtility/#getexisingcnsctrlsforrigtop","text":"Constructor: getExisingCnsCtrlsForRigTop(rigTop) Return: None Arguments: rigTop Keyword Arguments:","title":"getExisingCnsCtrlsForRigTop"},{"location":"blockUtility/#getexistingcpomnodefromsurface","text":"Constructor: getExistingCpomNodeFromSurface(surface) Return: None Arguments: surface Keyword Arguments:","title":"getExistingCpomNodeFromSurface"},{"location":"blockUtility/#getexistingspaceconstraintforcontrol","text":"Collect existing 'spaces' constraints for a passed in (built) control, in order to re-build them in turn, after correct filtering and validation (in case of a partial build for example). Constructor: getExistingSpaceConstraintForControl(ctrl = None) Return: list (mnsMatrixConstraint nodes) Arguments: ctrl ( str ) ; [default: None] Keyword Arguments:","title":"getExistingSpaceConstraintForControl"},{"location":"blockUtility/#getexistingspaceconstraintforcontrols","text":"Wrapper mwthod to collect 'spaces' constraints for multiple controls. Constructor: getExistingSpaceConstraintForControls(controls = []) Return: dict (constraintSpaces dictionary) Arguments: controls ( list ) ; [default: []] Keyword Arguments:","title":"getExistingSpaceConstraintForControls"},{"location":"blockUtility/#getglobalscaleattrfromtransform","text":"This method is used to retreive any output decompose matrix node to be used as global scale input connection. If this method fails to retreive such attribute, it creates one and returns it. Constructor: getGlobalScaleAttrFromTransform(transform = None) Return: Attribute Arguments: transform ( str ) ; [default: None] Keyword Arguments:","title":"getGlobalScaleAttrFromTransform"},{"location":"blockUtility/#getguideparent","text":"Collect a ctrl type object's 'Guide Authority', or related guide object. Constructor: getGuideParent(objectSel = None) Return: PyNode Arguments: objectSel ( str ) ; [default: None] Keyword Arguments:","title":"getGuideParent"},{"location":"blockUtility/#getkeyboardmodifiersstate","text":"Constructor: getKeyboardModifiersState() Return: None Arguments: Keyword Arguments:","title":"getKeyboardModifiersState"},{"location":"blockUtility/#getmoduleanimgrp","text":"Constructor: getModuleAnimGrp(obj = None) Return: None Arguments: obj ( str ) ; [default: None] Keyword Arguments:","title":"getModuleAnimGrp"},{"location":"blockUtility/#getmoduledecendentswildcard","text":"Collect all given module dendents using a 'wild-card' search method. This will collect all relatives using a * search within the root decendents, and return all of the passed in node types. Constructor: getModuleDecendentsWildcard(guideRoot, kwargs) Return: list (matching decendents) Arguments: guideRoot kwargs Keyword Arguments:","title":"getModuleDecendentsWildcard"},{"location":"blockUtility/#getmodulefromguide","text":"This method will attempt to collect a related PyModule from the given guideRoot passed in. This method will not return the module's methods, only the PyModule as an object. This method also contains override optional arguments to specify a direct path or module name. Constructor: getModuleFromGuide(guideRoot, kwargs) Return: PyModule (object) Arguments: guideRoot kwargs Keyword Arguments: methodName ( str ) ; [default: jointStructure] modPath ( str ) ; [default: None] modName ( str ) ; [default: None]","title":"getModuleFromGuide"},{"location":"blockUtility/#getmoduleguidedecendents","text":"Collect all of the root guide module relatives for the passed in moduleRoot (or rootGuide). Constructor: getModuleGuideDecendents(guideRoot) Return: list (sorted by ID module decendents) Arguments: guideRoot Keyword Arguments:","title":"getModuleGuideDecendents"},{"location":"blockUtility/#getmoduleinterpjoints","text":"Collect all the given moduleRoot's 'interpolationJoints' relatives. Constructor: getModuleInterpJoints(guideRoot, kwargs) Return: list (matching interJoints) Arguments: guideRoot kwargs Keyword Arguments:","title":"getModuleInterpJoints"},{"location":"blockUtility/#getmoduleroot","text":"Attempt to collect the root guide relative from the given node. Constructor: getModuleRoot(objectA) Return: PyNode (rootGuide) Arguments: objectA Keyword Arguments:","title":"getModuleRoot"},{"location":"blockUtility/#getmodulerootctrl","text":"Constructor: getModuleRootCtrl(obj = None) Return: None Arguments: obj ( str ) ; [default: None] Keyword Arguments:","title":"getModuleRootCtrl"},{"location":"blockUtility/#getmodulerootforsel","text":"Attempt to collect a 'root guide' relative from the current selection Constructor: getModuleRootForSel() Return: PyNode (moduleRoot) Arguments: Keyword Arguments:","title":"getModuleRootForSel"},{"location":"blockUtility/#getmodulescale","text":"Constructor: getModuleScale(MnsBuildModule) Return: None Arguments: MnsBuildModule Keyword Arguments:","title":"getModuleScale"},{"location":"blockUtility/#getmoduletopforctrl","text":"Collect the 'Module Top Group' related to the passed in control. Constructor: getModuleTopForCtrl(ctrl = None, nameMatch = None) Return: MnsNameStd (Module Top Group) Arguments: ctrl ( str ) ; [default: None] nameMatch ( str ) ; [default: None] Keyword Arguments:","title":"getModuleTopForCtrl"},{"location":"blockUtility/#getmoduletopfromrootguide","text":"Attempt to collect 'Module Top Group' from a given root guide. Constructor: getModuleTopFromRootGuide(rootGuide = None) Return: MnsNameStd (Module Top Group) Arguments: rootGuide ( str ) ; [default: None] Keyword Arguments:","title":"getModuleTopFromRootGuide"},{"location":"blockUtility/#getnoderelationshipnodefromobject","text":"Collect the related 'mnsNodeRelationship' node from the given input node. Constructor: getNodeRelationshipNodeFromObject(node) Return: PyNode Arguments: node Keyword Arguments:","title":"getNodeRelationshipNodeFromObject"},{"location":"blockUtility/#getoffsetgrpforctrl","text":"Collect the offsetGroup related to the passed in control, if it exists. Constructor: getOffsetGrpForCtrl(ctrl, kwargs) Return: MnsNameStd (offset group) Arguments: ctrl kwargs Keyword Arguments: type ( str ) ; [default: offsetGrp]","title":"getOffsetGrpForCtrl"},{"location":"blockUtility/#getoppositesidecontrol","text":"Attempt to collect the opposite related mns object if it exists. Only non 'ceneter components' will be tested of course. Constructor: getOppositeSideControl(obj = None) Return: MnsNameStd (Opposite object) Arguments: obj ( str ) ; [default: None] Keyword Arguments:","title":"getOppositeSideControl"},{"location":"blockUtility/#getpickerguidesgrpfromrigtop","text":"Attempt to collect the 'Picker Guide Group' from the passed in rigTop. Constructor: getPickerGuidesGrpFromRigTop(rigTop = None) Return: MnsNameStd (Picker Guide Group) Arguments: rigTop ( str ) ; [default: None] Keyword Arguments:","title":"getPickerGuidesGrpFromRigTop"},{"location":"blockUtility/#getpickerlayoutbasefromrigtop","text":"Attempt to collect the 'Picker Layout Base guide' from the passed in rigTop. Constructor: getPickerLayoutBaseFromRigTop(rigTop = None) Return: MnsNameStd (Picker Layout Base guide) Arguments: rigTop ( str ) ; [default: None] Keyword Arguments:","title":"getPickerLayoutBaseFromRigTop"},{"location":"blockUtility/#getpickerlayoutcamfromrigtop","text":"Attempt to collect the 'Picker Layout Camera' from the passed in rigTop. Constructor: getPickerLayoutCamFromRigTop(rigTop = None) Return: MnsNameStd (Picker Layout Base guide) Arguments: rigTop ( str ) ; [default: None] Keyword Arguments:","title":"getPickerLayoutCamFromRigTop"},{"location":"blockUtility/#getpickerprojectioncamfromrigtop","text":"Attempt to collect the 'Picker Projection Camera' from the passed in rigTop. Constructor: getPickerProjectionCamFromRigTop(rigTop = None) Return: MnsNameStd (Picker Projection Camera) Arguments: rigTop ( str ) ; [default: None] Keyword Arguments:","title":"getPickerProjectionCamFromRigTop"},{"location":"blockUtility/#getpickertitlegrpfromrigtop","text":"Attempt to collect the 'Picker Title Group' from the passed in rigTop. Constructor: getPickerTitleGrpFromRigTop(rigTop = None) Return: MnsNameStd (Picker Title Group)) Arguments: rigTop ( str ) ; [default: None] Keyword Arguments:","title":"getPickerTitleGrpFromRigTop"},{"location":"blockUtility/#getpuppetbasefromrigtop","text":"Attempt to collect the 'puppet group' from the passed in rigTop. Constructor: getPuppetBaseFromRigTop(rigTop = None) Return: MnsNameStd (puppet base) Arguments: rigTop ( str ) ; [default: None] Keyword Arguments:","title":"getPuppetBaseFromRigTop"},{"location":"blockUtility/#getpuppetrootfromrigtop","text":"Attempt to collect the 'Puppet World Control' from the passed in rigTop. Constructor: getPuppetRootFromRigTop(rigTop = None) Return: MnsNameStd (Puppet world control) Arguments: rigTop ( str ) ; [default: None] Keyword Arguments:","title":"getPuppetRootFromRigTop"},{"location":"blockUtility/#getpymodulefromguide","text":"Attempt to collect a 'Python Module' (or package) related to the given guide node passed in. If a related module was found, this method will return it as a PyModule object not as a directory. This method will also return the module's methods in a dictionary in order to run directly from it. Constructor: getPyModuleFromGuide(guide) Return: PyModule, dict (module methods as keys and method objects as entries) Arguments: guide Keyword Arguments:","title":"getPyModuleFromGuide"},{"location":"blockUtility/#getrelatednodefromobject","text":"Collect a related node from the 'messageOut' attribute of the given node's 'mnsNodeRelationship' node. Constructor: getRelatedNodeFromObject(node) Return: PyNode Arguments: node Keyword Arguments:","title":"getRelatedNodeFromObject"},{"location":"blockUtility/#getrelationmasterfromslave","text":"Collect the delete master from a slave's related 'mnsNodeRelationship' node, if there is one. This method will collect the master connected to the 'masterIn' attribute of the node. Constructor: getRelationMasterFromSlave(slave) Return: MnsNameStd (master) Arguments: slave Keyword Arguments:","title":"getRelationMasterFromSlave"},{"location":"blockUtility/#getrigtop","text":"Attempt to get a rigTop node from the passed in node to check. Constructor: getRigTop(objectA) Return: MnsNameStd (rigTop) Arguments: objectA Keyword Arguments:","title":"getRigTop"},{"location":"blockUtility/#getrigtopassemblies","text":"Constructor: getRigTopAssemblies() Return: None Arguments: Keyword Arguments:","title":"getRigTopAssemblies"},{"location":"blockUtility/#getrigtopforsel","text":"Attempt to get a rigTop node from current selection Constructor: getRigTopForSel() Return: MnsNameStd (rigTop) Arguments: Keyword Arguments:","title":"getRigTopForSel"},{"location":"blockUtility/#getrootguidefromctrl","text":"Attempt to collect the related 'rootGuide' from the given control passed in. Constructor: getRootGuideFromCtrl(obj) Return: MnsNameStd (rootGuide) Arguments: obj Keyword Arguments:","title":"getRootGuideFromCtrl"},{"location":"blockUtility/#getrootguidefromrigtop","text":"Attempt to collect the rig's root guide from the passed in rigTop node Constructor: getRootGuideFromRigTop(rigTop = None) Return: MnsNameStd (rig root guide) Arguments: rigTop ( str ) ; [default: None] Keyword Arguments:","title":"getRootGuideFromRigTop"},{"location":"blockUtility/#getrootjointsfrommoduleroot","text":"Constructor: getRootJointsFromModuleRoot(guideRoot) Return: None Arguments: guideRoot Keyword Arguments:","title":"getRootJointsFromModuleRoot"},{"location":"blockUtility/#getsettings","text":"Get setting for the requested setting path. The settings are being filtered and set according to a node passed in. Constructor: getSettings(settingsPath, node, blkType) Return: list (optionalArgumentsFromFile), string (current side place holder) Arguments: settingsPath node blkType Keyword Arguments:","title":"getSettings"},{"location":"blockUtility/#getsidemodulebranchroot","text":"For a non \"center\" component passed in, recursively attempt to collect the 'side-branch' root guide. In essence look for the highest rootGuide in the selected 'side' heirarchy that has a 'center' component parent- meaning it's the top of the requested branch. Constructor: getSideModuleBranchRoot(guide = None) Return: MnsNameStd (branch root) Arguments: guide ( str ) ; [default: None] Keyword Arguments:","title":"getSideModuleBranchRoot"},{"location":"blockUtility/#getsimplerivetsnodeformesh","text":"Constructor: getSimpleRivetsNodeForMesh(mesh = None) Return: PyNode Arguments: mesh ( str ) ; [default: None] Keyword Arguments:","title":"getSimpleRivetsNodeForMesh"},{"location":"blockUtility/#handleinterplocsstructurereturn","text":"Constructor: handleInterpLocsStructureReturn(rigTop = None, interpLocs = [], guides = [], kwargs) Return: None Arguments: rigTop ( str ) ; [default: None] interpLocs ( list ) ; [default: []] guides ( list ) ; [default: []] kwargs Keyword Arguments:","title":"handleInterpLocsStructureReturn"},{"location":"blockUtility/#limbmatchfkik","text":"mode 0 - Match FK to IK mode 1 - Match IK to FK Constructor: limbMatchFkIK(limbCtrl, mode = 0) Return: None Arguments: limbCtrl mode ( int ) ; [default: 0] Keyword Arguments:","title":"limbMatchFkIK"},{"location":"blockUtility/#loaddefaultsforctrl","text":"Load all default attributes for the given control, taking mnsDefaults (custom) into acount Constructor: loadDefaultsForCtrl(ctrl) Return: None Arguments: ctrl Keyword Arguments:","title":"loadDefaultsForCtrl"},{"location":"blockUtility/#loadperspcam","text":"Set Maya's main camera panel, to the default 'persp' camera. Constructor: loadPerspCam() Return: None Arguments: Keyword Arguments:","title":"loadPerspCam"},{"location":"blockUtility/#loadpickerprojectioncam","text":"Set the main maya camera view to the 'picker projection camera', based on the scene selection (or the related rigTop to selection). Constructor: loadPickerProjectionCam() Return: None Arguments: Keyword Arguments:","title":"loadPickerProjectionCam"},{"location":"blockUtility/#loadposeforguides","text":"Block's load pose wrapper. Constructor: loadPoseForGuides(guides = [], poseSet = \"T\") Return: None Arguments: guides ( list ) ; [default: []] poseSet ( str ) ; [default: \"T\"] Keyword Arguments:","title":"loadPoseForGuides"},{"location":"blockUtility/#loadrigdefaults","text":"Load controls predefined and custom defaults: 0: All 1: Modules 2: Selected Constructor: loadRigDefaults(mode = 0) Return: None Arguments: mode ( int ) ; [default: 0] Keyword Arguments:","title":"loadRigDefaults"},{"location":"blockUtility/#locatecnsforctrl","text":"Constructor: locateCnsForCtrl(ctrl = None, kwargs) Return: None Arguments: ctrl ( str ) ; [default: None] kwargs Keyword Arguments:","title":"locateCnsForCtrl"},{"location":"blockUtility/#matchkeyableattributes","text":"Constructor: matchKeyableAttributes(source = None, target = None) Return: None Arguments: source ( str ) ; [default: None] target ( str ) ; [default: None] Keyword Arguments:","title":"matchKeyableAttributes"},{"location":"blockUtility/#mirrorctrls","text":"Constructor: mirrorCtrls(ctrls = [], direction = 0, kwargs) Return: None Arguments: ctrls ( list ) ; [default: []] direction ( int ) ; [default: 0] kwargs Keyword Arguments:","title":"mirrorCtrls"},{"location":"blockUtility/#missingmoduleactiontrigger","text":"Action trigger for an invalid module path fix attempt Constructor: missingModuleActionTrigger(rigTop, missingModuleName, existingBtns) Return: None Arguments: rigTop missingModuleName existingBtns Keyword Arguments:","title":"missingModuleActionTrigger"},{"location":"blockUtility/#mutelocaltransformations","text":"Constructor: muteLocalTransformations(ctrl = None, kwargs) Return: None Arguments: ctrl ( str ) ; [default: None] kwargs Keyword Arguments:","title":"muteLocalTransformations"},{"location":"blockUtility/#namepuppet","text":"This method is used to create the rig's curves puppet title and connect it to to it's world control as additional shape nodes. Constructor: namePuppet(rigTop, kwargs) Return: None Arguments: rigTop kwargs Keyword Arguments:","title":"namePuppet"},{"location":"blockUtility/#pickerbuttonclickaction","text":"The global action trigger for any picker UI button click trigger. This method will trigger the \"controls selection\" and the \"action script\" for the passed in QPushButton passed in. Constructor: pickerButtonClickAction(btn, kwargs) Return: None Arguments: btn kwargs Keyword Arguments:","title":"pickerButtonClickAction"},{"location":"blockUtility/#pickerlayoutadjust","text":"Load a new Maya panel, with the 'Picker Layout Camera' related to the scene selction. This will also set the panel settings before loading it, based on the rigTop and 'layout base' attributes. Constructor: pickerLayoutAdjust() Return: None Arguments: Keyword Arguments:","title":"pickerLayoutAdjust"},{"location":"blockUtility/#pickertitletoggle","text":"Toggle between PLG 'control' view, to 'title' view. Constructor: pickerTitleToggle() Return: None Arguments: Keyword Arguments:","title":"pickerTitleToggle"},{"location":"blockUtility/#prechecknameforui","text":"A simple method to check for argument duplicates within an argument dict Constructor: preCheckNameForUI(arguments, suffix) Return: dict (recompiled arguments) Arguments: arguments suffix Keyword Arguments:","title":"preCheckNameForUI"},{"location":"blockUtility/#projectpickerlayoutpos","text":"Get the passed in Ctrl PLG position, relative to the rig's 'layoutBase'. This method 'projects' the ctrl position based on the rig's 'Projection Camera' into the layout base space, and returns it's processed position. Constructor: projectPickerLayoutPos(ctrl, cam, layoutBase) Return: tuple[3] (posX), tuple[3] (posY) Arguments: ctrl cam layoutBase Keyword Arguments:","title":"projectPickerLayoutPos"},{"location":"blockUtility/#projectselectedpickerlayout","text":"A wrapper method that handles plg projection from selected scene objects. Constructor: projectSelectedPickerLayout(msgPrompt = True) Return: None Arguments: msgPrompt ( bool ) ; [default: True] Keyword Arguments:","title":"projectSelectedPickerLayout"},{"location":"blockUtility/#recgetmoduletopforctrl","text":"Recursively attempt to collect the 'Module Top Group' related to the ctrl passed in within it's related parents. Constructor: recGetModuleTopForCtrl(ctrl = None) Return: MnsNameStd (Module Top Group) Arguments: ctrl ( str ) ; [default: None] Keyword Arguments:","title":"recGetModuleTopForCtrl"},{"location":"blockUtility/#recgetparentjoint","text":"Recursivly attempt to get a parent joint starting with a given root object, scaling up the heirarchy. Constructor: recGetParentJoint(rootObject = None) Return: mnsNameStd Arguments: rootObject ( str ) ; [default: None] Keyword Arguments:","title":"recGetParentJoint"},{"location":"blockUtility/#recsearchforguiderootinparents","text":"Recusrsivly look for a 'rootGuide' from the given node's parent relatives. Constructor: recSearchForGuideRootInParents(obj) Return: PyNode (rootGuide) Arguments: obj Keyword Arguments:","title":"recSearchForGuideRootInParents"},{"location":"blockUtility/#removealienmatchesfromlist","text":"Constructor: removeAlienMatchesFromList(guideRoot, currentMatches = []) Return: None Arguments: guideRoot currentMatches ( list ) ; [default: []] Keyword Arguments:","title":"removeAlienMatchesFromList"},{"location":"blockUtility/#removeallauthority","text":"This method is used to delete all 'Authority' from the passsed in slave, if there are any. Constructor: removeAllAuthority(slave = None, kwargs) Return: MnsNameStd (oldAuthority) Arguments: slave ( str ) ; [default: None] kwargs Keyword Arguments:","title":"removeAllAuthority"},{"location":"blockUtility/#removemodulevisattrfrompuppettop","text":"This method will remove the corresponding \"module vis\" channel from the given puppet base control. This method is used when a 'partial deconstruction' is initiated, keeping only relevant vis channels in place, removing the 'deconstructed' modules vis channels. Constructor: removeModuleVisAttrFromPuppetTop(moduleTopNode = None, puppetTop = None) Return: None Arguments: moduleTopNode ( str ) ; [default: None] puppetTop ( str ) ; [default: None] Keyword Arguments:","title":"removeModuleVisAttrFromPuppetTop"},{"location":"blockUtility/#resetallcontrolforrigtop","text":"Constructor: resetAllControlForRigTop(rigTop = None, kwargs) Return: None Arguments: rigTop ( str ) ; [default: None] kwargs Keyword Arguments:","title":"resetAllControlForRigTop"},{"location":"blockUtility/#resetcontrols","text":"reset all keyable attributes to default value. Constructor: resetControls(controls=[]) Return: None Arguments: controls ( list ) ; [default: []] Keyword Arguments:","title":"resetControls"},{"location":"blockUtility/#saveloadpose","text":"This is the main wrapper for all pose 'save & load' triggers of BLOCK. Constructor: saveLoadPose(guides = [], kwargs) Return: None Arguments: guides ( list ) ; [default: []] kwargs Keyword Arguments: rigTop ( str ) ; [default: None] mode ( int ) saveLoad ( int ) msgPrompt ( bool ) pose ( str ) ; [default: T]","title":"saveLoadPose"},{"location":"blockUtility/#saveposeforguides","text":"Block's save pose wrapper. Constructor: savePoseForGuides(guides = [], poseSet = \"T\", msgPrompt = False) Return: None Arguments: guides ( list ) ; [default: []] poseSet ( str ) ; [default: \"T\"] msgPrompt ( bool ) ; [default: False] Keyword Arguments:","title":"savePoseForGuides"},{"location":"blockUtility/#searchforrootguideinrelatives","text":"Search for a 'guide authority' or 'rootGuide' in the given node's decendents Constructor: searchForRootGuideInRelatives(obj) Return: PyNode (rootGuide) Arguments: obj Keyword Arguments:","title":"searchForRootGuideInRelatives"},{"location":"blockUtility/#selectallctrls","text":"Select all controls for the given rig top. Constructor: selectAllCtrls(rigTop = None, kwargs) Return: None Arguments: rigTop ( str ) ; [default: None] kwargs Keyword Arguments:","title":"selectAllCtrls"},{"location":"blockUtility/#selectrelatedcontrols","text":"Constructor: selectRelatedControls(controlsToSelect, mode = \"replace\") Return: None Arguments: controlsToSelect mode ( str ) ; [default: \"replace\"] Keyword Arguments:","title":"selectRelatedControls"},{"location":"blockUtility/#setctrlcol","text":"Attempt to collect the passed in node's color (based on its type), and set it if seccessfull. Constructor: setCtrlCol(ctrl, rigTop, kwargs) Return: MnsNameStd (ctrl) Arguments: ctrl rigTop kwargs Keyword Arguments:","title":"setCtrlCol"},{"location":"blockUtility/#setcurrentstateasdefaultforctrl","text":"Set custom defaults for keyable attributes for the given control, based on it's current state. Constructor: setCurrentStateAsDefaultForCtrl(ctrl) Return: None Arguments: ctrl Keyword Arguments:","title":"setCurrentStateAsDefaultForCtrl"},{"location":"blockUtility/#setrigdefaults","text":"Set controls custom defaults based on given state: 0: All 1: Modules 2: Branches Constructor: setRigDefaults(mode = 0) Return: None Arguments: mode ( int ) ; [default: 0] Keyword Arguments:","title":"setRigDefaults"},{"location":"blockUtility/#setgctrlcolorformodule","text":"For all relevant decendents of the passed in moduleRoot, get and set it's color. Constructor: setgCtrlColorForModule(rigTop, moduleRoot) Return: None Arguments: rigTop moduleRoot Keyword Arguments:","title":"setgCtrlColorForModule"},{"location":"blockUtility/#setgctrlcolorforrigtop","text":"Set ALL relevnt controls within a rigTop, to their color based on their type. Constructor: setgCtrlColorForRigTop(rigTop) Return: None Arguments: rigTop Keyword Arguments:","title":"setgCtrlColorForRigTop"},{"location":"blockUtility/#symmetrizeplg","text":"Block 'plg symmetrize' button trigger. This method will handle validation and creation of PLG related symmetrical plg. Constructor: symmetrizePlg(guide = None) Return: None Arguments: guide ( str ) ; [default: None] Keyword Arguments:","title":"symmetrizePlg"},{"location":"blockUtility/#symmetrizeplgs","text":"A simple wrapper method to symmetrize multiple PLG's (based on scene selection). Constructor: symmetrizePlgs() Return: None Arguments: Keyword Arguments:","title":"symmetrizePlgs"},{"location":"blockUtility/#toggleguidejoint","text":"Atempt to toggle between a selection guide and main joint if possible. Constructor: toggleGuideJoint( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"toggleGuideJoint"},{"location":"blockUtility/#togglepickerctrlbodyfacial","text":"Constructor: togglePickerCtrlBodyFacial() Return: None Arguments: Keyword Arguments:","title":"togglePickerCtrlBodyFacial"},{"location":"blockUtility/#transferauthoritytoctrl","text":"This is a very important method used in BLOCK cosntruction. This method will find the current 'guide control' from the given joint slave. and transfer it's authority to a newly created 'control authority'. This method will be called on every module build and it is the main trigger to flag a module construction. The 'authority' attribute for every guide or control is used to distiguish the module state, and jnt state. When transfering an authority to a ctrl, a 'old authority' attr (of sort) is created, in order for the procedural 'deconstruct' to look for and tranfer the jnt authority back to it's orignal guide, before deleting the constructed module. See also parallel: 'transferAuthorityToGuide' Method. Constructor: transferAuthorityToCtrl(slave = None, ctrlMaster = None, kwargs) Return: None Arguments: slave ( str ) ; [default: None] ctrlMaster ( str ) ; [default: None] kwargs Keyword Arguments:","title":"transferAuthorityToCtrl"},{"location":"blockUtility/#transferauthoritytoguide","text":"This is a very important method used in BLOCK de-construction. This method will find the current 'control' from the given joint slave. and transfer it's authority to a it's original 'guide' authority. This method will be called procedurally on any module deconstruction, before deleting the constructed module. See also parallel: 'transferAuthorityToCtrl' Method. Constructor: transferAuthorityToGuide(ctrl = None, kwargs) Return: None Arguments: ctrl ( str ) ; [default: None] kwargs Keyword Arguments:","title":"transferAuthorityToGuide"},{"location":"blockUtility/#upparentallplgtrigger","text":"OBSELETE. PLG parenting is no longer in use. Constructor: upParentAllPlgTrigger() Return: None Arguments: Keyword Arguments:","title":"upParentAllPlgTrigger"},{"location":"buildModules/","text":"buildModules === Author: Assaf Ben Zur === This is the core BLOCK Build-Modules class library. This package contains the three main classes for BLOCK: - MnsBuildModuleBtn - MnsRig - MnsBuildModule Most core function are defined within the classes, although any external functionality is maintained in 'blockUtility' py module. The objective of these classes are mainly effeciant data gathering, constructing and deconstructing modules within a rig group. Classes MnsBuildModule [Class] This class is the data store class for any mns 'build-module'. This class contains the actual creation and deletion of the module, guides and controls. This class will be initialized through the MnsRig class, althogh process functions regarding the modules are store in this class only. This class is purely procedular, and so it should remain. As the main goal of the rig is maintaining dynamic abilities, and easy creation of modules, this class should remain completely independent of any specific build module. Guides creation is partlly procedural, as any \"main-guides\" creation is fully automatic, although custom-guides creation isn't- as it is module specific, hence it is store within the buildModule directory. Interp Joint Structure creation is procedural, although its essence is also defined within each build-module directory, althogh it is not mandatory. As the build modules are very specific and have to be created manually, guide creation is kept independent. This for easily creating modules, not needing to worrie about the handeling of guides, consruction and deconstruction. The actual flow of the build is independent of the modules setup internals. Constructor: MnsBuildModule( MnsBuildModuleButton , **kwargs ) Inherits from: MnsRig Class Members: MnsBuildModuleButton sidePlaceHolder builtGuides rigTop rootGuide isFacial rootCtrl guideControls cGuideControls pureParent attrHostCtrl moduleTop animGrp animStaticGrp rigComponentsGrp moduleSpaceAttrHost extraSpaces defaultSpace pureTops spaceSwitchCtrls internalSpaces controls allControls puppetTopCtrl Methods: constructAttrHostCtrl [method] createAttrHostCustomGuide [method] splitControlsBasedOnType [method] collecteModuleSettings [method] buildGuideObjects [method] gatherAllDependecies [method] reCollectControlsFromLocals [method] construct [method] createGuides [method] deconstruct [method] buildGuides [method] constructSpaces [method] createModuleTopNode [method] storeCustomDefaults [method] updateCreationArgsToSymmetryMode [method] restoreCustomDefaults [method] gatherRelatedCtrls [method] connectVisChannels [method] gatherRelatedGuides [method] getRigTop [method] MnsBuildModule methods constructAttrHostCtrl [ MnsBuildModule class method] Constructor: constructAttrHostCtrl(self) Return: None Arguments: self Optional Arguments: createAttrHostCustomGuide [ MnsBuildModule class method] Constructor: createAttrHostCustomGuide(self) Return: None Arguments: self Optional Arguments: splitControlsBasedOnType [ MnsBuildModule class method] Constructor: splitControlsBasedOnType(self) Return: None Arguments: self Optional Arguments: collecteModuleSettings [ MnsBuildModule class method] Constructor: collecteModuleSettings(self, rootGuide = None) Return: None Arguments: self rootGuide ( str ) ; [default: None] Optional Arguments: buildGuideObjects [ MnsBuildModule class method] A simple method to gather the amount of needed guides to create, and calling the creation accordingly. Constructor: buildGuideObjects(self, kwargs) Return: None Arguments: self kwargs Optional Arguments: gatherAllDependecies [ MnsBuildModule class method] Gather all scene object dependecies for the buildModule. A simple wrapper containing 'gatherRelatedGuides' method & gatherRelatedCtrls method. Constructor: gatherAllDependecies(self) Return: None Arguments: self Optional Arguments: reCollectControlsFromLocals [ MnsBuildModule class method] Re-initialize the 'allControls' attribute of this class, based on the current rig state. Constructor: reCollectControlsFromLocals(self) Return: None Arguments: self Optional Arguments: construct [ MnsBuildModule class method] The main construct method. The actual 'Construct' method within the build module directory is being called here. Flow: - make sure the module isn't built - get the puppet root - try and find the related 'construct' method within the build module directory (or package). - construct the module, feeding the construct method with all of the requested module settings. this will transfer the related joints to their new ctrl authority. - connect a vis channel to the new module group created. - re-collect relations for the module (post build). - Set colors for all built controls. - parent the new bm top group in the puppet group. - try restore defaults if there are any. Constructor: construct(self) Return: MnsBuildModule (self, this buildModule class) Arguments: self Optional Arguments: createGuides [ MnsBuildModule class method] This is the main guide creation method. This method contains all the steps needed to gather a module data, and create the guides for it. This method will return the built guides, as well as store it in this class 'builtGuides' attribute. Constructor: createGuides(self, kwargs) Return: list (bbuiltGuides) Arguments: self kwargs Optional Arguments: blkSide ( str ) ; [default: center] body ( str ) ; [default: guideCtrl] alpha ( str ) ; [default: A] alongAxis ( int ) ; [default: 1] moduleScale ( int ) ; [default: 1] isFacial ( bool ) deconstruct [ MnsBuildModule class method] This is the main module deconstruction method. Flow: - Make sure the module is constructed - In case a deconstruvt method (non mandatory method) is found within the build-module's directory, run it. - Transfer all joint authoities back to the guides. - Remove the related vis channel from puppet root (Needed in case a partial deconstruction was called). - Delete the build module. - Set the construction state for the build module. Constructor: deconstruct(self, mnsRig) Return: MnsBuildModule (self, this buildModule class) Arguments: self mnsRig Optional Arguments: buildGuides [ MnsBuildModule class method] This method is the initialize method for new guides creation. This method will be called first (before 'createGuides') and will also load the modules creation settings window if neccessary. Constructor: buildGuides(self, MnsBuildModuleButton, kwargs) Return: None Arguments: self MnsBuildModuleButton kwargs Optional Arguments: skipUI ( bool ) skipGuidesCreation ( bool ) settingsHolder ( str ) ; [default: None] symmetrize ( bool ) constructSpaces [ MnsBuildModule class method] This method is the spaces construction processing. This method is seperated from the main construct method in order to run it after an entire construction. Because the spaces within the module are dependent of other modules, a first loop is run to construct the modules, after, another loop is running through the built modules, calling this method, trying to construct all of it's spaces. Constructor: constructSpaces(self) Return: None Arguments: self Optional Arguments: createModuleTopNode [ MnsBuildModule class method] This method is used to create the genric 'module top group' on module construction. Constructor: createModuleTopNode(self) Return: None Arguments: self Optional Arguments: storeCustomDefaults [ MnsBuildModule class method] This method stores any custom 'defaults' set for the entire module. The collection is stored within the rootGuide node. This is important beacuse when the module is deconstructed, the ctrls containing the 'defaults' attribute are eventually deleted. So, in order to keep the information on deletion, this method runs thorugh the modules controls, and storing the set 'defaults' attribute within the rootGuide, in order to restore them when a reconstruction is called. related method: restoreCustomDefaults Constructor: storeCustomDefaults(self) Return: None Arguments: self Optional Arguments: updateCreationArgsToSymmetryMode [ MnsBuildModule class method] This method will alter the current setting to their symmetry mode, In case the 'symmetrize' flag was passed into the buildGuides method. Altered attributes: - side (or blkSide) - spaces- if a side related space was found, symmetrize the space as well. Constructor: updateCreationArgsToSymmetryMode(self, optArgs) Return: dict (optionalArguments) Arguments: self optArgs Optional Arguments: restoreCustomDefaults [ MnsBuildModule class method] This method will attempt to restore any pre-stored 'defaults' set a newly created control. related method: storeCustomDefaults. Constructor: restoreCustomDefaults(self) Return: None Arguments: self Optional Arguments: gatherRelatedCtrls [ MnsBuildModule class method] This method will collect and store the build-module related control objects from the rig. Constructor: gatherRelatedCtrls(self) Return: None Arguments: self Optional Arguments: connectVisChannels [ MnsBuildModule class method] This method will connect this module into it's related vis channel in the puppet root control. Constructor: connectVisChannels(self) Return: None Arguments: self Optional Arguments: gatherRelatedGuides [ MnsBuildModule class method] This method will gather the buildModules related guides from the rig. collected objects: - rootGuide - guides - customGuides The data collected is stored in their related class attributes: - rootGuide - 'rootGuide' - guides - 'guideControls' - custom guides - 'cGuideControls' Constructor: gatherRelatedGuides(self) Return: None Arguments: self Optional Arguments: getRigTop [ MnsBuildModule class method] get the rigTop nameStd from current selection. If it doesn't exist, initiate a new rig top creation. Constructor: getRigTop(self) Return: MnsNameStd (rigTop) Arguments: self Optional Arguments: MnsBuildModuleBtn [Class] The procedural 'module' button class. This class is being called and constructed procedurally from the file system based on folder contents. The class itself isn't inhereting from QPushButton, as it only exists to contain build location information. The class contains a constuctor only, which initializes the following information: - The full-path to the buildModule - The layout Parent of the button - The group of the button, based on the folder structure of which the bm is located in. - The 'settings' file-path. - Short-Name - The obselete - 'isMayaNative' attribute. This information will be accessed once the related QPushButton will be triggered. Constructor: MnsBuildModuleBtn( path , **kwargs ) Inherits from: object Class Members: path moduleName groupType MnsRig [Class] This is the main 'RIG' data class. This class's constructor will initialize and build all relevant information regarding the 'rig' top top group. As The rig topGrp has pre-defined structure, and many dependencies, all basic information will be checked every time this class is constructed. The essence of this class is first of all to build the predefined rigGroup, then, to store and parse all relevant data from the scene, as well as validating it and rebuilding any sub-components if necessary. The procedural settings UI build will be initiated if a rig top wasn't found in the current scene selection (or if there is no selection). In case a rigTop already exists, it will first be validated, then it's setting will be read and parsed, initiating the the same UI draw, in \"edit\" mode. Constructor: MnsRig( callerSubClass ( str ) ; [default: None], **kwargs ) Inherits from: object Class Members: rigTop rootGuide callerSubClass modules buildModulesBtns puppetBase baseGuide rootJnt iconsDir loadSettingsWindow Methods: failedConstructionCommand [method] setVisChannelsBasedOnCunstructMode [method] cunstructRigSpaces [method] collectBuildModules [method] createPickerLayoutBase [method] createRootGuide [method] createPickerTitleGrp [method] createPickerGuideGrp [method] createNewRigTop [method] createPickerProjectionCam [method] createSubGroupForRigTop [method] createPickerCam [method] createPuppetRootCtrl [method] createVisEnumAndConnect [method] getGlobalConstructionState [method] loadSettingsWindow [method] restorePuppetBaseDefaults [method] setConstructionMode [method] deconstructRig [method] constructRig [method] storePuppetBaseDefaults [method] destroyPuppetRootCtrl [method] createSubGrpsForRigTop [method] executeCustomScripts [method] MnsRig methods failedConstructionCommand [ MnsRig class method] A global method to display and return a message dialog whenever a build fails. This method displays 3 options and returns a paraller state: - 0: 'Continue' - 1: 'Abort' - 2: 'Revert-Construction' Constructor: failedConstructionCommand(self, fileName = \"\") Return: int (state/button clicked) Arguments: self fileName ( str ) ; [default: \"\"] Optional Arguments: setVisChannelsBasedOnCunstructMode [ MnsRig class method] A simple method to set the vis mode of the current rig based on it's construction state. The construction mode is read from the rigTop attribues. Construction modes: 0: Guides - guideGrpVis = True, puppetGrpVis = False 1: Intermediate (Partially built rig) - guideGrpVis = True, puppetGrpVis = True 2: Puppet - guideGrpVis = False, puppetGrpVis = True Constructor: setVisChannelsBasedOnCunstructMode(self) Return: None Arguments: self Optional Arguments: cunstructRigSpaces [ MnsRig class method] Attempt to construct spaces for all 'modules' within the rig. Constructor: cunstructRigSpaces(self) Return: None Arguments: self Optional Arguments: collectBuildModules [ MnsRig class method] Collect all build modules guide hierarchy into the 'modules' attribure of this class. This method will run through the rig, and attempt to collect it's guide heirarchy, validating the modules while collecting. Constructor: collectBuildModules(self, kwargs) Return: None Arguments: self kwargs Optional Arguments: createPickerLayoutBase [ MnsRig class method] Create Picker Layout Base control, and construct all of it's predefined attributes. The predefined attributes for the PLG base is the following: - width - Will define the width of the rig's picker window - height- Will define the height of the rig's picker window - titleVis - vis attr for the title-group - titleSize - a global scalar for all mnsAnnotate PLG titles. This group also contains a few vis control channels to allow easier edit for the PLGs: - bodyPrimaries - bodySecondaries - bodyTertiaries - facialPrimaries - facialSecondaries - facialTertiaries These sub-vis channels will be controled by a global toggle attribute: - pickerMode This will dictate the picker's scene vis mode, the toggle is between 'body' and 'facial' modes. As the picker inhabits to tabs - body and facial, these attributes will allow better manipulation of PLG, grouping them according to the actual picker window tab grouping. Constructor: createPickerLayoutBase(self, rigTop, kwargs) Return: MnsNameStd (baseLayoutGuide) Arguments: self rigTop kwargs Optional Arguments: createRootGuide [ MnsRig class method] Create the \"world control guide\", or \"rigRootGuide\". This rootGuide will be locked completely and will define the predefined \"world\" control for the puppet. This entity is mandatory. Constructor: createRootGuide(self, rigTopNameStd, kwargs) Return: MnsNameStd (Root Guide) Arguments: self rigTopNameStd kwargs Optional Arguments: createPickerTitleGrp [ MnsRig class method] Create the Picker Layout 'titles' sub-component. This group contains the mnsAnnotate locators to toggle PLG view between it's shape and it's title. Constructor: createPickerTitleGrp(self, rigTop, pickerLayoutBase, kwargs) Return: MnsNameStd (titleGrp) Arguments: self rigTop pickerLayoutBase kwargs Optional Arguments: createPickerGuideGrp [ MnsRig class method] Create the main Picker-Layout-Guides sub-component. Constructor: createPickerGuideGrp(self, rigTop, pickerLayoutBase, kwargs) Return: MnsNameStd (guidesGrp) Arguments: self rigTop pickerLayoutBase kwargs Optional Arguments: createNewRigTop [ MnsRig class method] Create the main rig group, with all of its sub-Components within. Constructor: createNewRigTop(self, kwargs) Return: None Arguments: self kwargs Optional Arguments: createPickerProjectionCam [ MnsRig class method] Create the predefined \"PLG Projection\" camera within the rig. A dedicated mns node is used here - 'mnsCamreGateRatio': This dedicated node was written in order to control the camera shape 'gateRatio' attribute. Because this attribute isn't connectable (internal callback within the camera shape), mnsCameraGateRatio inserts a custom maya-callback into itself, in-order to refresh the camera-gate in a \"live\" fashion, This will allow the user to edit the width and height of the projection camera, seeing a live feed of it's gate in the view. As the projection is based on the camera gate, it is very important for the user to see the actual gate used, while projecting PLG's. Constructor: createPickerProjectionCam(self, rigTop, pickerLayoutBase) Return: MnsNameStd (Picker Projection Camera) Arguments: self rigTop pickerLayoutBase Optional Arguments: createSubGroupForRigTop [ MnsRig class method] Create the predefined \"guideGrp\" or \"freeJointsGrp\" within the rig. Guides Group - Contains the module main guides. Free Joints Group - Contains the interpLocs intermediate matricies for the interJnts in the main jointStructure Constructor: createSubGroupForRigTop(self, rigTopNameStd, kwargs) Return: MnsNameStd (guideGrp/freeJointsGrp) Arguments: self rigTopNameStd kwargs Optional Arguments: subGrpType ( str ) default ( int ) ; [default: 1] createPickerCam [ MnsRig class method] Create the predefined \"picker Layout View\" camera within the rig. This camera will be used as the view camera when an \"edit picker layout\" trigger was initiated from BlockUI. The camera is orthographic, and will be used in a seperate display (Maya-Panel). This to allow easy view of the picker layout, and easy manipulation of PLG shapes and controls. Constructor: createPickerCam(self, rigTop, pickerLayoutBase, kwargs) Return: MnsNameStd (Picker Layout Camera) Arguments: self rigTop pickerLayoutBase kwargs Optional Arguments: createPuppetRootCtrl [ MnsRig class method] Create the rig's predefined \"puppetRoot\" or \"worldControl\". This depends on the rootGuide of course, and transfer the rigs \"Root-Joint\" Authority from the rootGuide, to the new puppetRoot control. This method will return the new control, as well as store it in the 'puppetTopCtrl' attribute of this class. Constructor: createPuppetRootCtrl(self, rigTop, kwargs) Return: MnsNameStd (Root Guide) Arguments: self rigTop kwargs Optional Arguments: createVisEnumAndConnect [ MnsRig class method] For any given slave MnsNameStd group passed in, create a generic vis channel and connect it. The Enums of the generic vis channels are the following: - hidden - normal - template - reference Constructor: createVisEnumAndConnect(self, masterStd, slaveStd, kwargs) Return: PyAttribute (created attribute) Arguments: self masterStd slaveStd kwargs Optional Arguments: default ( int ) ; [default: 1] getGlobalConstructionState [ MnsRig class method] Gey the current rig construction state from rigTop attributes. Constructor: getGlobalConstructionState(self) Return: int (mode) Arguments: self Optional Arguments: loadSettingsWindow [ MnsRig class method] Load the dynamic \"setting window\" for the current rig. Constructor: loadSettingsWindow(self, kwargs) Return: None Arguments: self kwargs Optional Arguments: restorePuppetBaseDefaults [ MnsRig class method] On reconstruction, attempt to restore the 'defaults' attribute for the puppet root, if there are any. related method: storePuppetBaseDefaults Constructor: restorePuppetBaseDefaults(self) Return: None Arguments: self Optional Arguments: setConstructionMode [ MnsRig class method] Set the construction state attribute of the current rig. Constructor: setConstructionMode(self) Return: None Arguments: self Optional Arguments: deconstructRig [ MnsRig class method] This is the main deconstruction method for the rig. Flow: - Log, and set Timer - Collect all relevant data from the rig - Collect modules to build - Loop through the 'modules' dict attribute of this class: - Initiate the 'Deconstruct' method for every buildModule class within the collection. Constructor: deconstructRig(self, kwargs) Return: None Arguments: self kwargs Optional Arguments: constructRig [ MnsRig class method] This method is the main 'Construction' call for a mnsRig. Flow: - Log, and set Timer - Collect all relevant data from the rig - Collect modules to build - Loop through the 'modules' dict attribute of this class: - Initiate the 'Construct' method for every buildModule class within the collection. Constructor: constructRig(self, kwargs) Return: None Arguments: self kwargs Optional Arguments: storePuppetBaseDefaults [ MnsRig class method] This method is used to store the current 'Defaults' set for the puppet-root control on deconstruction. As deconstruction deletes all the controls, including the puppet-root, if any custom-defaults were set, its essential to store them, in order to re-create them on re-construction. This is a specific case for the root-control, as it isn't a 'build-module' hence, the generic defaults store for the build modules doesn't apply. related method: restorePuppetBaseDefaults Constructor: storePuppetBaseDefaults(self) Return: None Arguments: self Optional Arguments: destroyPuppetRootCtrl [ MnsRig class method] This method will destroy the rig's puppetRoot control, and transfer the rig's root-joint authority back to it's rootGuide. Constructor: destroyPuppetRootCtrl(self) Return: None Arguments: self Optional Arguments: createSubGrpsForRigTop [ MnsRig class method] This wrapper creates all the sub-group components for a given main rigTop group. The sub-groups defenition is the following: - guideGrp - Guides group component - puppetGrp - The Puppet group. - jointStructGrp - Joint Structure group - pickerLayoutGrp - Picker Layout guiides group. - controlShapesGrp - Stored custom shapes group. - freeJointsGrp - \"Free joints\" group, containing interLocs as intermediate objects to the interJoints in the main joint structure. Constructor: createSubGrpsForRigTop(self, rigTop = None) Return: None Arguments: self rigTop ( str ) ; [default: None] Optional Arguments: executeCustomScripts [ MnsRig class method] for the given 'customScripts' attribute: compile the run files, and execute (if set). Constructor: executeCustomScripts(self, attrName = None) Return: bool (Execution success) Arguments: self attrName ( str ) ; [default: None] Optional Arguments:","title":"buildModules"},{"location":"buildModules/#buildmodules","text":"=== Author: Assaf Ben Zur === This is the core BLOCK Build-Modules class library. This package contains the three main classes for BLOCK: - MnsBuildModuleBtn - MnsRig - MnsBuildModule Most core function are defined within the classes, although any external functionality is maintained in 'blockUtility' py module. The objective of these classes are mainly effeciant data gathering, constructing and deconstructing modules within a rig group.","title":"buildModules"},{"location":"buildModules/#classes","text":"","title":"Classes"},{"location":"buildModules/#mnsbuildmodule-class","text":"This class is the data store class for any mns 'build-module'. This class contains the actual creation and deletion of the module, guides and controls. This class will be initialized through the MnsRig class, althogh process functions regarding the modules are store in this class only. This class is purely procedular, and so it should remain. As the main goal of the rig is maintaining dynamic abilities, and easy creation of modules, this class should remain completely independent of any specific build module. Guides creation is partlly procedural, as any \"main-guides\" creation is fully automatic, although custom-guides creation isn't- as it is module specific, hence it is store within the buildModule directory. Interp Joint Structure creation is procedural, although its essence is also defined within each build-module directory, althogh it is not mandatory. As the build modules are very specific and have to be created manually, guide creation is kept independent. This for easily creating modules, not needing to worrie about the handeling of guides, consruction and deconstruction. The actual flow of the build is independent of the modules setup internals. Constructor: MnsBuildModule( MnsBuildModuleButton , **kwargs ) Inherits from: MnsRig Class Members: MnsBuildModuleButton sidePlaceHolder builtGuides rigTop rootGuide isFacial rootCtrl guideControls cGuideControls pureParent attrHostCtrl moduleTop animGrp animStaticGrp rigComponentsGrp moduleSpaceAttrHost extraSpaces defaultSpace pureTops spaceSwitchCtrls internalSpaces controls allControls puppetTopCtrl Methods: constructAttrHostCtrl [method] createAttrHostCustomGuide [method] splitControlsBasedOnType [method] collecteModuleSettings [method] buildGuideObjects [method] gatherAllDependecies [method] reCollectControlsFromLocals [method] construct [method] createGuides [method] deconstruct [method] buildGuides [method] constructSpaces [method] createModuleTopNode [method] storeCustomDefaults [method] updateCreationArgsToSymmetryMode [method] restoreCustomDefaults [method] gatherRelatedCtrls [method] connectVisChannels [method] gatherRelatedGuides [method] getRigTop [method]","title":"MnsBuildModule [Class]"},{"location":"buildModules/#mnsbuildmodule-methods","text":"","title":"MnsBuildModule  methods"},{"location":"buildModules/#mnsbuildmodulebtn-class","text":"The procedural 'module' button class. This class is being called and constructed procedurally from the file system based on folder contents. The class itself isn't inhereting from QPushButton, as it only exists to contain build location information. The class contains a constuctor only, which initializes the following information: - The full-path to the buildModule - The layout Parent of the button - The group of the button, based on the folder structure of which the bm is located in. - The 'settings' file-path. - Short-Name - The obselete - 'isMayaNative' attribute. This information will be accessed once the related QPushButton will be triggered. Constructor: MnsBuildModuleBtn( path , **kwargs ) Inherits from: object Class Members: path moduleName groupType","title":"MnsBuildModuleBtn [Class]"},{"location":"buildModules/#mnsrig-class","text":"This is the main 'RIG' data class. This class's constructor will initialize and build all relevant information regarding the 'rig' top top group. As The rig topGrp has pre-defined structure, and many dependencies, all basic information will be checked every time this class is constructed. The essence of this class is first of all to build the predefined rigGroup, then, to store and parse all relevant data from the scene, as well as validating it and rebuilding any sub-components if necessary. The procedural settings UI build will be initiated if a rig top wasn't found in the current scene selection (or if there is no selection). In case a rigTop already exists, it will first be validated, then it's setting will be read and parsed, initiating the the same UI draw, in \"edit\" mode. Constructor: MnsRig( callerSubClass ( str ) ; [default: None], **kwargs ) Inherits from: object Class Members: rigTop rootGuide callerSubClass modules buildModulesBtns puppetBase baseGuide rootJnt iconsDir loadSettingsWindow Methods: failedConstructionCommand [method] setVisChannelsBasedOnCunstructMode [method] cunstructRigSpaces [method] collectBuildModules [method] createPickerLayoutBase [method] createRootGuide [method] createPickerTitleGrp [method] createPickerGuideGrp [method] createNewRigTop [method] createPickerProjectionCam [method] createSubGroupForRigTop [method] createPickerCam [method] createPuppetRootCtrl [method] createVisEnumAndConnect [method] getGlobalConstructionState [method] loadSettingsWindow [method] restorePuppetBaseDefaults [method] setConstructionMode [method] deconstructRig [method] constructRig [method] storePuppetBaseDefaults [method] destroyPuppetRootCtrl [method] createSubGrpsForRigTop [method] executeCustomScripts [method]","title":"MnsRig [Class]"},{"location":"buildModules/#mnsrig-methods","text":"","title":"MnsRig  methods"},{"location":"cnsTool/","text":"cnsTool === Author: Assaf Ben Zur === Classes MnsCnsTool [Class] Main UI Class Constructor: MnsCnsTool( parent ( str ) ; [default: mnsUIUtils.get_maya_window()]) Inherits from: form_class, base_class Class Members: rigTops existingCnsDict Methods: createCnsForSelection [method] initializeUI [method] removeCnsFromSelection [method] selectCnsFromTree [method] compileCnsCtrlsAttrString [method] connectSignals [method] loadWindow [method] MnsCnsTool methods createCnsForSelection [ MnsCnsTool class method] Constructor: createCnsForSelection(self) Return: None Arguments: self Optional Arguments: initializeUI [ MnsCnsTool class method] Constructor: initializeUI(self) Return: None Arguments: self Optional Arguments: removeCnsFromSelection [ MnsCnsTool class method] Constructor: removeCnsFromSelection(self) Return: None Arguments: self Optional Arguments: selectCnsFromTree [ MnsCnsTool class method] Constructor: selectCnsFromTree(self) Return: None Arguments: self Optional Arguments: compileCnsCtrlsAttrString [ MnsCnsTool class method] Constructor: compileCnsCtrlsAttrString(self, exsitingCnsCtrlsDict = {}) Return: None Arguments: self exsitingCnsCtrlsDict ( dict ) ; [default: {}] Optional Arguments: connectSignals [ MnsCnsTool class method] Connect all UI signals Constructor: connectSignals(self) Return: None Arguments: self Optional Arguments: loadWindow [ MnsCnsTool class method] Main UI load Constructor: loadWindow(self) Return: None Arguments: self Optional Arguments:","title":"cnsTool"},{"location":"cnsTool/#cnstool","text":"=== Author: Assaf Ben Zur ===","title":"cnsTool"},{"location":"cnsTool/#classes","text":"","title":"Classes"},{"location":"cnsTool/#mnscnstool-class","text":"Main UI Class Constructor: MnsCnsTool( parent ( str ) ; [default: mnsUIUtils.get_maya_window()]) Inherits from: form_class, base_class Class Members: rigTops existingCnsDict Methods: createCnsForSelection [method] initializeUI [method] removeCnsFromSelection [method] selectCnsFromTree [method] compileCnsCtrlsAttrString [method] connectSignals [method] loadWindow [method]","title":"MnsCnsTool [Class]"},{"location":"cnsTool/#mnscnstool-methods","text":"","title":"MnsCnsTool  methods"},{"location":"controlShapes/","text":"controlShapes === Author: Assaf Ben Zur === Core control shapes creation function assembly. A main CtrlCreate function calls a veriaty of pre-defined shape creation, then handles them Defenitions arrowDodecagonShapeCreate Constructor: arrowDodecagonShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: arrowShapeCreate Constructor: arrowShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: arrowSquareShapeCreate Constructor: arrowSquareShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: bubblePinShapeCreate Constructor: bubblePinShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: circleShapeCreate Constructor: circleShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: sections ( int ) ; [default: 8] coneShapeCreate Constructor: coneShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: createRemoteControlStyleCtrl creates a frames ui remote-control style ctrl based on the input params. Constructor: createRemoteControlStyleCtrl( kwargs) Return: MnsNameStd (ctrl), MnsNameStd (uiOffsetGrp), MnsNameStd (Frame) Arguments: kwargs Keyword Arguments: horizontalMin ( float ) ; [default: -1.0] horizontalMax ( float ) ; [default: 1.0] verticalMin ( float ) ; [default: -1.0] verticalMax ( float ) ; [default: 1.0] bodySuffix ( str ) uiScale ( float ) ; [default: 1.0] crossShapeCreate Constructor: crossShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: ctrlCreate Main creation function. This function takes user defined parameters and creates a ctrl transform node following the mns naming convention. Based on the choice passed in, a shape node will be created with the shape selected, and will be parented under the transform ceated. Then a color selected will be assigned to it. The ctrl can be set to be created along all axes and in every color. The default color is white when used as standalone, and based on the rig's global color coding defined- based on the side flag. Constructor: ctrlCreate( kwargs) Return: MnsNameStd (MnsNameStd class instance containing all info for the new node created) Arguments: kwargs Keyword Arguments: side ( str ) ; [default: side] - side flag body ( str ) ; [default: body] - Node's name body alpha ( str ) ; [default: alpha] - Node's Alpha id id ( str ) ; [default: id] - Node's id isFacial ( bool ) bodySuffix ( str ) incrementAlpha ( bool ) - In case of a 'free' creation, if True will name the node to the first possible name- searching for new Alpha instead of the ID ctrlType ( str ) ; [default: ctrl] createBlkClassID ( bool ) ; [default: True] createBlkCtrlTypeID ( bool ) ; [default: True] blkCtrlTypeID ( int ) customParentTransform ( str ) skipColor ( bool ) createOffsetGrp ( bool ) createSpaceSwitchGroup ( bool ) symmetryType ( int ) doMirror ( bool ) forceMirrorGrp ( bool ) parentNode ( str ) ; [default: None] chennelControl ( str ) ; [default: None] controlShape ( str ) ; [default: circle] - Control's NURBS shape scale ( float ) ; [default: 1.0] - Ctrl scale. Relative to global settings. color ( tuple ) ; [default: (1.0, 1.0, 1.0)] - Shape's color alongAxis ( int ) ; [default: 1] - Along which axis to create the shape matchTransform ( str ) - if not empty, look for a node within the scene matching the string specefied. If found, match it's transforms. matchPosition ( str ) - if not empty, look for a node within the scene matching the string specefied. If found, match it's position. matchOrientation ( str ) - if not empty, look for a node within the scene matching the string specefied. If found, match it's Orientation. sections ( int ) ; [default: 1] - Aplicable only for circle creation cubeShapeCreate Constructor: cubeShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: curvedFourArrowShapeCreate Constructor: curvedFourArrowShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: cylinderShapeCreate Constructor: cylinderShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: dialRoundShapeCreate Constructor: dialRoundShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: dialShapeCreate Constructor: dialShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: dialSquareShapeCreate Constructor: dialSquareShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: diamondShapeCreate Constructor: diamondShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: directionCircle Constructor: directionCircle( kwargs) Return: None Arguments: kwargs Keyword Arguments: directionCubeShape Constructor: directionCubeShape( kwargs) Return: None Arguments: kwargs Keyword Arguments: directionDiamond Constructor: directionDiamond( kwargs) Return: None Arguments: kwargs Keyword Arguments: directionSphereShape Constructor: directionSphereShape( kwargs) Return: None Arguments: kwargs Keyword Arguments: dodecagonShapeCreate Constructor: dodecagonShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: doubleArrowShapeCreate Constructor: doubleArrowShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: flatDiamondRootShapeCreate Constructor: flatDiamondRootShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: flatDiamondShapeCreate Constructor: flatDiamondShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: fourArrowShapeCreate Constructor: fourArrowShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: guidesRootShape Constructor: guidesRootShape( kwargs) Return: None Arguments: kwargs Keyword Arguments: hexagonShapeCreate Constructor: hexagonShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: lightSphereShapeCreate Constructor: lightSphereShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: octagonShapeCreate Constructor: octagonShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: pickShapeCreate Constructor: pickShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: pinShapeCreate Constructor: pinShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: light ( bool ) ; [default: True] pinchedCircleShapeCreate Constructor: pinchedCircleShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: plusShapeCreate Constructor: plusShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: pointArrowShapeCreate Constructor: pointArrowShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: puppetRootShapeCreate Constructor: puppetRootShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: pyramidShapeCreate Constructor: pyramidShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: sphereShapeCreate Constructor: sphereShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: squareShapeCreate Constructor: squareShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: squareWithMidDividersShapeCreate Constructor: squareWithMidDividersShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: teardropShapeCreate Constructor: teardropShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: triangleShapeCreate Constructor: triangleShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: tripleArrowShapeCreate Constructor: tripleArrowShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"controlShapes"},{"location":"controlShapes/#controlshapes","text":"=== Author: Assaf Ben Zur === Core control shapes creation function assembly. A main CtrlCreate function calls a veriaty of pre-defined shape creation, then handles them","title":"controlShapes"},{"location":"controlShapes/#defenitions","text":"","title":"Defenitions"},{"location":"controlShapes/#arrowdodecagonshapecreate","text":"Constructor: arrowDodecagonShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"arrowDodecagonShapeCreate"},{"location":"controlShapes/#arrowshapecreate","text":"Constructor: arrowShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"arrowShapeCreate"},{"location":"controlShapes/#arrowsquareshapecreate","text":"Constructor: arrowSquareShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"arrowSquareShapeCreate"},{"location":"controlShapes/#bubblepinshapecreate","text":"Constructor: bubblePinShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"bubblePinShapeCreate"},{"location":"controlShapes/#circleshapecreate","text":"Constructor: circleShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: sections ( int ) ; [default: 8]","title":"circleShapeCreate"},{"location":"controlShapes/#coneshapecreate","text":"Constructor: coneShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"coneShapeCreate"},{"location":"controlShapes/#createremotecontrolstylectrl","text":"creates a frames ui remote-control style ctrl based on the input params. Constructor: createRemoteControlStyleCtrl( kwargs) Return: MnsNameStd (ctrl), MnsNameStd (uiOffsetGrp), MnsNameStd (Frame) Arguments: kwargs Keyword Arguments: horizontalMin ( float ) ; [default: -1.0] horizontalMax ( float ) ; [default: 1.0] verticalMin ( float ) ; [default: -1.0] verticalMax ( float ) ; [default: 1.0] bodySuffix ( str ) uiScale ( float ) ; [default: 1.0]","title":"createRemoteControlStyleCtrl"},{"location":"controlShapes/#crossshapecreate","text":"Constructor: crossShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"crossShapeCreate"},{"location":"controlShapes/#ctrlcreate","text":"Main creation function. This function takes user defined parameters and creates a ctrl transform node following the mns naming convention. Based on the choice passed in, a shape node will be created with the shape selected, and will be parented under the transform ceated. Then a color selected will be assigned to it. The ctrl can be set to be created along all axes and in every color. The default color is white when used as standalone, and based on the rig's global color coding defined- based on the side flag. Constructor: ctrlCreate( kwargs) Return: MnsNameStd (MnsNameStd class instance containing all info for the new node created) Arguments: kwargs Keyword Arguments: side ( str ) ; [default: side] - side flag body ( str ) ; [default: body] - Node's name body alpha ( str ) ; [default: alpha] - Node's Alpha id id ( str ) ; [default: id] - Node's id isFacial ( bool ) bodySuffix ( str ) incrementAlpha ( bool ) - In case of a 'free' creation, if True will name the node to the first possible name- searching for new Alpha instead of the ID ctrlType ( str ) ; [default: ctrl] createBlkClassID ( bool ) ; [default: True] createBlkCtrlTypeID ( bool ) ; [default: True] blkCtrlTypeID ( int ) customParentTransform ( str ) skipColor ( bool ) createOffsetGrp ( bool ) createSpaceSwitchGroup ( bool ) symmetryType ( int ) doMirror ( bool ) forceMirrorGrp ( bool ) parentNode ( str ) ; [default: None] chennelControl ( str ) ; [default: None] controlShape ( str ) ; [default: circle] - Control's NURBS shape scale ( float ) ; [default: 1.0] - Ctrl scale. Relative to global settings. color ( tuple ) ; [default: (1.0, 1.0, 1.0)] - Shape's color alongAxis ( int ) ; [default: 1] - Along which axis to create the shape matchTransform ( str ) - if not empty, look for a node within the scene matching the string specefied. If found, match it's transforms. matchPosition ( str ) - if not empty, look for a node within the scene matching the string specefied. If found, match it's position. matchOrientation ( str ) - if not empty, look for a node within the scene matching the string specefied. If found, match it's Orientation. sections ( int ) ; [default: 1] - Aplicable only for circle creation","title":"ctrlCreate"},{"location":"controlShapes/#cubeshapecreate","text":"Constructor: cubeShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"cubeShapeCreate"},{"location":"controlShapes/#curvedfourarrowshapecreate","text":"Constructor: curvedFourArrowShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"curvedFourArrowShapeCreate"},{"location":"controlShapes/#cylindershapecreate","text":"Constructor: cylinderShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"cylinderShapeCreate"},{"location":"controlShapes/#dialroundshapecreate","text":"Constructor: dialRoundShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"dialRoundShapeCreate"},{"location":"controlShapes/#dialshapecreate","text":"Constructor: dialShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"dialShapeCreate"},{"location":"controlShapes/#dialsquareshapecreate","text":"Constructor: dialSquareShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"dialSquareShapeCreate"},{"location":"controlShapes/#diamondshapecreate","text":"Constructor: diamondShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"diamondShapeCreate"},{"location":"controlShapes/#directioncircle","text":"Constructor: directionCircle( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"directionCircle"},{"location":"controlShapes/#directioncubeshape","text":"Constructor: directionCubeShape( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"directionCubeShape"},{"location":"controlShapes/#directiondiamond","text":"Constructor: directionDiamond( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"directionDiamond"},{"location":"controlShapes/#directionsphereshape","text":"Constructor: directionSphereShape( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"directionSphereShape"},{"location":"controlShapes/#dodecagonshapecreate","text":"Constructor: dodecagonShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"dodecagonShapeCreate"},{"location":"controlShapes/#doublearrowshapecreate","text":"Constructor: doubleArrowShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"doubleArrowShapeCreate"},{"location":"controlShapes/#flatdiamondrootshapecreate","text":"Constructor: flatDiamondRootShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"flatDiamondRootShapeCreate"},{"location":"controlShapes/#flatdiamondshapecreate","text":"Constructor: flatDiamondShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"flatDiamondShapeCreate"},{"location":"controlShapes/#fourarrowshapecreate","text":"Constructor: fourArrowShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"fourArrowShapeCreate"},{"location":"controlShapes/#guidesrootshape","text":"Constructor: guidesRootShape( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"guidesRootShape"},{"location":"controlShapes/#hexagonshapecreate","text":"Constructor: hexagonShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"hexagonShapeCreate"},{"location":"controlShapes/#lightsphereshapecreate","text":"Constructor: lightSphereShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"lightSphereShapeCreate"},{"location":"controlShapes/#octagonshapecreate","text":"Constructor: octagonShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"octagonShapeCreate"},{"location":"controlShapes/#pickshapecreate","text":"Constructor: pickShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"pickShapeCreate"},{"location":"controlShapes/#pinshapecreate","text":"Constructor: pinShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: light ( bool ) ; [default: True]","title":"pinShapeCreate"},{"location":"controlShapes/#pinchedcircleshapecreate","text":"Constructor: pinchedCircleShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"pinchedCircleShapeCreate"},{"location":"controlShapes/#plusshapecreate","text":"Constructor: plusShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"plusShapeCreate"},{"location":"controlShapes/#pointarrowshapecreate","text":"Constructor: pointArrowShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"pointArrowShapeCreate"},{"location":"controlShapes/#puppetrootshapecreate","text":"Constructor: puppetRootShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"puppetRootShapeCreate"},{"location":"controlShapes/#pyramidshapecreate","text":"Constructor: pyramidShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"pyramidShapeCreate"},{"location":"controlShapes/#sphereshapecreate","text":"Constructor: sphereShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"sphereShapeCreate"},{"location":"controlShapes/#squareshapecreate","text":"Constructor: squareShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"squareShapeCreate"},{"location":"controlShapes/#squarewithmiddividersshapecreate","text":"Constructor: squareWithMidDividersShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"squareWithMidDividersShapeCreate"},{"location":"controlShapes/#teardropshapecreate","text":"Constructor: teardropShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"teardropShapeCreate"},{"location":"controlShapes/#triangleshapecreate","text":"Constructor: triangleShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"triangleShapeCreate"},{"location":"controlShapes/#triplearrowshapecreate","text":"Constructor: tripleArrowShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"tripleArrowShapeCreate"},{"location":"curveZip/","text":"curveZip Author: Asaf Ben-Zur Best used for: Eyelids This module is depreciated. Please use CurveZipB. Defenitions connectCustomGuidesToPoc Constructor: connectCustomGuidesToPoc(mansur, guides, cGuides) Return: None Arguments: mansur guides cGuides Keyword Arguments: construct Constructor: construct(mansur, MnsBuildModule, kwargs) Return: list (controls), dict (internalSpaces) Arguments: mansur MnsBuildModule kwargs Keyword Arguments: createBindCurvesFromModuleSettings Constructor: createBindCurvesFromModuleSettings(mansur, rootGuide = None) Return: None Arguments: mansur rootGuide ( str ) ; [default: None] Keyword Arguments: createTangentsForCtrl Constructor: createTangentsForCtrl(mansur, MnsBuildModule, ctrl, btcNode, cornerACtrl, cornerBCtrl, nameID, doCornerTangents, mainCtrl) Return: None Arguments: mansur MnsBuildModule ctrl btcNode cornerACtrl cornerBCtrl nameID doCornerTangents mainCtrl Keyword Arguments: customGuides Constructor: customGuides(mansur, builtGuides) Return: None Arguments: mansur builtGuides Keyword Arguments: deconstruct Constructor: deconstruct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments: getEdgesFromModuleSettings Constructor: getEdgesFromModuleSettings(mansur, rootGuide = None) Return: None Arguments: mansur rootGuide ( str ) ; [default: None] Keyword Arguments: jointStructure Constructor: jointStructure(mansur, guides, mnsBuildModule = None, kwargs) Return: None Arguments: mansur guides mnsBuildModule ( str ) ; [default: None] kwargs Keyword Arguments:","title":"curveZip"},{"location":"curveZip/#curvezip","text":"Author: Asaf Ben-Zur Best used for: Eyelids This module is depreciated. Please use CurveZipB.","title":"curveZip"},{"location":"curveZip/#defenitions","text":"","title":"Defenitions"},{"location":"curveZip/#connectcustomguidestopoc","text":"Constructor: connectCustomGuidesToPoc(mansur, guides, cGuides) Return: None Arguments: mansur guides cGuides Keyword Arguments:","title":"connectCustomGuidesToPoc"},{"location":"curveZip/#construct","text":"Constructor: construct(mansur, MnsBuildModule, kwargs) Return: list (controls), dict (internalSpaces) Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"construct"},{"location":"curveZip/#createbindcurvesfrommodulesettings","text":"Constructor: createBindCurvesFromModuleSettings(mansur, rootGuide = None) Return: None Arguments: mansur rootGuide ( str ) ; [default: None] Keyword Arguments:","title":"createBindCurvesFromModuleSettings"},{"location":"curveZip/#createtangentsforctrl","text":"Constructor: createTangentsForCtrl(mansur, MnsBuildModule, ctrl, btcNode, cornerACtrl, cornerBCtrl, nameID, doCornerTangents, mainCtrl) Return: None Arguments: mansur MnsBuildModule ctrl btcNode cornerACtrl cornerBCtrl nameID doCornerTangents mainCtrl Keyword Arguments:","title":"createTangentsForCtrl"},{"location":"curveZip/#customguides","text":"Constructor: customGuides(mansur, builtGuides) Return: None Arguments: mansur builtGuides Keyword Arguments:","title":"customGuides"},{"location":"curveZip/#deconstruct","text":"Constructor: deconstruct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"deconstruct"},{"location":"curveZip/#getedgesfrommodulesettings","text":"Constructor: getEdgesFromModuleSettings(mansur, rootGuide = None) Return: None Arguments: mansur rootGuide ( str ) ; [default: None] Keyword Arguments:","title":"getEdgesFromModuleSettings"},{"location":"curveZip/#jointstructure","text":"Constructor: jointStructure(mansur, guides, mnsBuildModule = None, kwargs) Return: None Arguments: mansur guides mnsBuildModule ( str ) ; [default: None] kwargs Keyword Arguments:","title":"jointStructure"},{"location":"curveZipB/","text":"curveZipB Author: Asaf Ben-Zur Best used for: Eyelids, Eyelashes This facial module was created to allow adavnced control over eyelids and eyelashes. Based on settings, this module will create a very flexible control over eyelids, and if choosen (Attachment Curves) to eyelashes on top of the eyelids as well. The main features of this modules are: Joint positions based on a center matrix (Around the eye), Blink controls, Blink height control, Eyelid tweak controls (dynamic), Zip controls, and much more. The joint structure of this module will be dictated by input vertices on a given mesh. Note: Please select upper and lower vertices along a single closed loop, selecting each section from inner corener to outer corenr. Defenitions connectCustomGuidesToPoc Constructor: connectCustomGuidesToPoc(mansur, guides, cGuides) Return: None Arguments: mansur guides cGuides Keyword Arguments: construct Constructor: construct(mansur, MnsBuildModule, kwargs) Return: list (controls), dict (internalSpaces) Arguments: mansur MnsBuildModule kwargs Keyword Arguments: createBindCurvesFromModuleSettings Constructor: createBindCurvesFromModuleSettings(mansur, rootGuide = None) Return: None Arguments: mansur rootGuide ( str ) ; [default: None] Keyword Arguments: createTangentsForCtrl Constructor: createTangentsForCtrl(mansur, MnsBuildModule, ctrl, btcNode, cornerACtrl, cornerBCtrl, nameID, doCornerTangents, mainCtrl) Return: None Arguments: mansur MnsBuildModule ctrl btcNode cornerACtrl cornerBCtrl nameID doCornerTangents mainCtrl Keyword Arguments: customGuides Constructor: customGuides(mansur, builtGuides) Return: None Arguments: mansur builtGuides Keyword Arguments: deconstruct Constructor: deconstruct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments: getEdgesFromModuleSettings Constructor: getEdgesFromModuleSettings(mansur, rootGuide = None) Return: None Arguments: mansur rootGuide ( str ) ; [default: None] Keyword Arguments: jointStructure Constructor: jointStructure(mansur, guides, mnsBuildModule = None, kwargs) Return: None Arguments: mansur guides mnsBuildModule ( str ) ; [default: None] kwargs Keyword Arguments:","title":"curveZipB"},{"location":"curveZipB/#curvezipb","text":"Author: Asaf Ben-Zur Best used for: Eyelids, Eyelashes This facial module was created to allow adavnced control over eyelids and eyelashes. Based on settings, this module will create a very flexible control over eyelids, and if choosen (Attachment Curves) to eyelashes on top of the eyelids as well. The main features of this modules are: Joint positions based on a center matrix (Around the eye), Blink controls, Blink height control, Eyelid tweak controls (dynamic), Zip controls, and much more. The joint structure of this module will be dictated by input vertices on a given mesh. Note: Please select upper and lower vertices along a single closed loop, selecting each section from inner corener to outer corenr.","title":"curveZipB"},{"location":"curveZipB/#defenitions","text":"","title":"Defenitions"},{"location":"curveZipB/#connectcustomguidestopoc","text":"Constructor: connectCustomGuidesToPoc(mansur, guides, cGuides) Return: None Arguments: mansur guides cGuides Keyword Arguments:","title":"connectCustomGuidesToPoc"},{"location":"curveZipB/#construct","text":"Constructor: construct(mansur, MnsBuildModule, kwargs) Return: list (controls), dict (internalSpaces) Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"construct"},{"location":"curveZipB/#createbindcurvesfrommodulesettings","text":"Constructor: createBindCurvesFromModuleSettings(mansur, rootGuide = None) Return: None Arguments: mansur rootGuide ( str ) ; [default: None] Keyword Arguments:","title":"createBindCurvesFromModuleSettings"},{"location":"curveZipB/#createtangentsforctrl","text":"Constructor: createTangentsForCtrl(mansur, MnsBuildModule, ctrl, btcNode, cornerACtrl, cornerBCtrl, nameID, doCornerTangents, mainCtrl) Return: None Arguments: mansur MnsBuildModule ctrl btcNode cornerACtrl cornerBCtrl nameID doCornerTangents mainCtrl Keyword Arguments:","title":"createTangentsForCtrl"},{"location":"curveZipB/#customguides","text":"Constructor: customGuides(mansur, builtGuides) Return: None Arguments: mansur builtGuides Keyword Arguments:","title":"customGuides"},{"location":"curveZipB/#deconstruct","text":"Constructor: deconstruct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"deconstruct"},{"location":"curveZipB/#getedgesfrommodulesettings","text":"Constructor: getEdgesFromModuleSettings(mansur, rootGuide = None) Return: None Arguments: mansur rootGuide ( str ) ; [default: None] Keyword Arguments:","title":"getEdgesFromModuleSettings"},{"location":"curveZipB/#jointstructure","text":"Constructor: jointStructure(mansur, guides, mnsBuildModule = None, kwargs) Return: None Arguments: mansur guides mnsBuildModule ( str ) ; [default: None] kwargs Keyword Arguments:","title":"jointStructure"},{"location":"curveZipB_settings/","text":"curveZipB Settings Author: Asaf Ben-Zur Best used for: Eyelids, Eyelashes This facial module was created to allow adavnced control over eyelids and eyelashes. Based on settings, this module will create a very flexible control over eyelids, and if choosen (Attachment Curves) to eyelashes on top of the eyelids as well. The main features of this modules are: Joint positions based on a center matrix (Around the eye), Blink controls, Blink height control, Eyelid tweak controls (dynamic), Zip controls, and much more. The joint structure of this module will be dictated by input vertices on a given mesh. Note: Please select upper and lower vertices along a single closed loop, selecting each section from inner corener to outer corenr. Attributes GlobalSettings Attribute Name Default Description upperEdgeVerts [' '] These verticies will be used to build the joint structure for the upper section. Please select a sequence of vertices along the same loop, starting from the inner corner. First and last vertices should match between the upper and lower section, representing a single closed loop. Corner vertices will be present twice- once on the upper section, once on the lower section lowerEdgeVerts [' '] These verticies will be used to build the joint structure for the lower section. Please select a sequence of vertices along the same loop, starting from the inner corner. First and last vertices should match between the upper and lower section, representing a single closed loop. Corner vertices will be present twice- once on the upper section, once on the lower section upCurveOffset 1.0 Offset value for the up curve generation reverseCorners False In case you build this module and the zip controls aren't matching their corner (possibly due to a wrong order of vertex selection), set this attribute to True, which should correct the mismatch aroundCenter True Around center will normalize the result vectors around a given center matrix (module root in this case). This will provide a better range of motion, tranlating the joints around a sphere (assumed from the center matrix). Place your roog guide at the center of the eye (for example) for this to behave as expected curveResolution 24 Resample curve amount blinkHeight 0.5 Default value for the Blink height. This dictates the height of the Mid-Meet point between the upper and lower sections postSymmetryJntStruct True Comment wasn't inserted EyelidsControls Attribute Name Default Description raiseRange 0.5 This value dictates the upper and lower controls opposite direction movement range. uiCtrlsScale 0.15 Scale multiplier for the remote control style controls for upper and lower lids uiCtrlsPositionOffset 0.5 Offset value (Pointing away from the root guide) to offset the remote control style controls doZipControls True Create the Zip controls feature TweakCcontrols Attribute Name Default Description doTweakControls True Build the tweak controls feature for this module numTweakControlsPerSection 3 The amount of tweak controls per section (lower and upper) cornersControlShape diamond Tweak corners controls shape tweakersControlShape lightSphere Tweak controls shape tweakCurvesInterpolation 1 Tweak controls interpolation type flipRightX False Comment wasn't inserted flipRightY False Comment wasn't inserted flipRightZ False Comment wasn't inserted FollowRotation Attribute Name Default Description doFollowRotation False This feture is mainly used for eye configurations. Follow rotation will create a new layer of orientation control, allowing the animator th choose the amount follow desired based on the given eye module input. This is commonly known as Fleshy-Eye jntToFollow The joint orientation to follow horizontalFollow 0.05 Horizontal follow default value verticalFollow 0.1 Vertical follow default value UpperAttachmentCrv Attribute Name Default Description doUpperAttachment False This feature is mainly used to create another layer of controls for eyelashes. Since eyelashes should always follow the eyelids outline shape, common tendency is to simply skin them to the eyelid joints. Although in some cases, eyelashes control is required or desired. This feature will create a slave curve based controls layer that will allow for eyelash control, on top of the master eyelid solve that drives the main animation upperJntCount 2 The amount of upper-attachment joints to create LowerAttachmentCrv Attribute Name Default Description doLowerAttachment False This feature is mainly used to create another layer of controls for eyelashes. Since eyelashes should always follow the eyelids outline shape, common tendency is to simply skin them to the eyelid joints. Although in some cases, eyelashes control is required or desired. This feature will create a slave curve based controls layer that will allow for eyelash control, on top of the master eyelid solve that drives the main animation lowerJntCount 2 The amount of lower-attachment joints to create","title":"curveZipB settings"},{"location":"curveZipB_settings/#curvezipb-settings","text":"Author: Asaf Ben-Zur Best used for: Eyelids, Eyelashes This facial module was created to allow adavnced control over eyelids and eyelashes. Based on settings, this module will create a very flexible control over eyelids, and if choosen (Attachment Curves) to eyelashes on top of the eyelids as well. The main features of this modules are: Joint positions based on a center matrix (Around the eye), Blink controls, Blink height control, Eyelid tweak controls (dynamic), Zip controls, and much more. The joint structure of this module will be dictated by input vertices on a given mesh. Note: Please select upper and lower vertices along a single closed loop, selecting each section from inner corener to outer corenr.","title":"curveZipB Settings"},{"location":"curveZipB_settings/#attributes","text":"","title":"Attributes"},{"location":"curveZipB_settings/#globalsettings","text":"Attribute Name Default Description upperEdgeVerts [' '] These verticies will be used to build the joint structure for the upper section. Please select a sequence of vertices along the same loop, starting from the inner corner. First and last vertices should match between the upper and lower section, representing a single closed loop. Corner vertices will be present twice- once on the upper section, once on the lower section lowerEdgeVerts [' '] These verticies will be used to build the joint structure for the lower section. Please select a sequence of vertices along the same loop, starting from the inner corner. First and last vertices should match between the upper and lower section, representing a single closed loop. Corner vertices will be present twice- once on the upper section, once on the lower section upCurveOffset 1.0 Offset value for the up curve generation reverseCorners False In case you build this module and the zip controls aren't matching their corner (possibly due to a wrong order of vertex selection), set this attribute to True, which should correct the mismatch aroundCenter True Around center will normalize the result vectors around a given center matrix (module root in this case). This will provide a better range of motion, tranlating the joints around a sphere (assumed from the center matrix). Place your roog guide at the center of the eye (for example) for this to behave as expected curveResolution 24 Resample curve amount blinkHeight 0.5 Default value for the Blink height. This dictates the height of the Mid-Meet point between the upper and lower sections postSymmetryJntStruct True Comment wasn't inserted","title":"GlobalSettings"},{"location":"curveZipB_settings/#eyelidscontrols","text":"Attribute Name Default Description raiseRange 0.5 This value dictates the upper and lower controls opposite direction movement range. uiCtrlsScale 0.15 Scale multiplier for the remote control style controls for upper and lower lids uiCtrlsPositionOffset 0.5 Offset value (Pointing away from the root guide) to offset the remote control style controls doZipControls True Create the Zip controls feature","title":"EyelidsControls"},{"location":"curveZipB_settings/#tweakccontrols","text":"Attribute Name Default Description doTweakControls True Build the tweak controls feature for this module numTweakControlsPerSection 3 The amount of tweak controls per section (lower and upper) cornersControlShape diamond Tweak corners controls shape tweakersControlShape lightSphere Tweak controls shape tweakCurvesInterpolation 1 Tweak controls interpolation type flipRightX False Comment wasn't inserted flipRightY False Comment wasn't inserted flipRightZ False Comment wasn't inserted","title":"TweakCcontrols"},{"location":"curveZipB_settings/#followrotation","text":"Attribute Name Default Description doFollowRotation False This feture is mainly used for eye configurations. Follow rotation will create a new layer of orientation control, allowing the animator th choose the amount follow desired based on the given eye module input. This is commonly known as Fleshy-Eye jntToFollow The joint orientation to follow horizontalFollow 0.05 Horizontal follow default value verticalFollow 0.1 Vertical follow default value","title":"FollowRotation"},{"location":"curveZipB_settings/#upperattachmentcrv","text":"Attribute Name Default Description doUpperAttachment False This feature is mainly used to create another layer of controls for eyelashes. Since eyelashes should always follow the eyelids outline shape, common tendency is to simply skin them to the eyelid joints. Although in some cases, eyelashes control is required or desired. This feature will create a slave curve based controls layer that will allow for eyelash control, on top of the master eyelid solve that drives the main animation upperJntCount 2 The amount of upper-attachment joints to create","title":"UpperAttachmentCrv"},{"location":"curveZipB_settings/#lowerattachmentcrv","text":"Attribute Name Default Description doLowerAttachment False This feature is mainly used to create another layer of controls for eyelashes. Since eyelashes should always follow the eyelids outline shape, common tendency is to simply skin them to the eyelid joints. Although in some cases, eyelashes control is required or desired. This feature will create a slave curve based controls layer that will allow for eyelash control, on top of the master eyelid solve that drives the main animation lowerJntCount 2 The amount of lower-attachment joints to create","title":"LowerAttachmentCrv"},{"location":"curveZip_settings/","text":"curveZip Settings Author: Asaf Ben-Zur Best used for: This module is depreciated. Please use CurveZipB. Attributes GlobalSettings Attribute Name Default Description upperEdgeVerts [' '] This module is depreciated, please use curveZipB lowerEdgeVerts [' '] This module is depreciated, please use curveZipB upCurveOffset 1.0 This module is depreciated, please use curveZipB reverseCorners False This module is depreciated, please use curveZipB aroundCenter True This module is depreciated, please use curveZipB curveResolution 24 This module is depreciated, please use curveZipB blinkHeight 0.5 This module is depreciated, please use curveZipB postSymmetryJntStruct True This module is depreciated, please use curveZipB ZipControls Attribute Name Default Description raiseRange 0.5 This module is depreciated, please use curveZipB uiCtrlsScale 0.15 This module is depreciated, please use curveZipB uiCtrlsPositionOffset 0.5 This module is depreciated, please use curveZipB TweakCcontrols Attribute Name Default Description doTweakControls True This module is depreciated, please use curveZipB numTweakControlsPerSection 3 This module is depreciated, please use curveZipB cornersControlShape diamond This module is depreciated, please use curveZipB tweakersControlShape lightSphere This module is depreciated, please use curveZipB tweakCurvesInterpolation 1 This module is depreciated, please use curveZipB offsetX 20.0 This module is depreciated, please use curveZipB offsetZ 0.0 This module is depreciated, please use curveZipB doTweakTangents False This module is depreciated, please use curveZipB doCornerTangents False This module is depreciated, please use curveZipB BlinkTweak Attribute Name Default Description doBlinkTweak True This module is depreciated, please use curveZipB blinkTweakControlShape diamond This module is depreciated, please use curveZipB FollowRotation Attribute Name Default Description doFollowRotation False This module is depreciated, please use curveZipB jntToFollow This module is depreciated, please use curveZipB horizontalFollow 0.05 This module is depreciated, please use curveZipB verticalFollow 0.1 This module is depreciated, please use curveZipB UpperAttachmentCrv Attribute Name Default Description doUpperAttachment False This module is depreciated, please use curveZipB upperJntCount 2 This module is depreciated, please use curveZipB LowerAttachmentCrv Attribute Name Default Description doLowerAttachment False This module is depreciated, please use curveZipB lowerJntCount 2 This module is depreciated, please use curveZipB","title":"curveZip settings"},{"location":"curveZip_settings/#curvezip-settings","text":"Author: Asaf Ben-Zur Best used for: This module is depreciated. Please use CurveZipB.","title":"curveZip Settings"},{"location":"curveZip_settings/#attributes","text":"","title":"Attributes"},{"location":"curveZip_settings/#globalsettings","text":"Attribute Name Default Description upperEdgeVerts [' '] This module is depreciated, please use curveZipB lowerEdgeVerts [' '] This module is depreciated, please use curveZipB upCurveOffset 1.0 This module is depreciated, please use curveZipB reverseCorners False This module is depreciated, please use curveZipB aroundCenter True This module is depreciated, please use curveZipB curveResolution 24 This module is depreciated, please use curveZipB blinkHeight 0.5 This module is depreciated, please use curveZipB postSymmetryJntStruct True This module is depreciated, please use curveZipB","title":"GlobalSettings"},{"location":"curveZip_settings/#zipcontrols","text":"Attribute Name Default Description raiseRange 0.5 This module is depreciated, please use curveZipB uiCtrlsScale 0.15 This module is depreciated, please use curveZipB uiCtrlsPositionOffset 0.5 This module is depreciated, please use curveZipB","title":"ZipControls"},{"location":"curveZip_settings/#tweakccontrols","text":"Attribute Name Default Description doTweakControls True This module is depreciated, please use curveZipB numTweakControlsPerSection 3 This module is depreciated, please use curveZipB cornersControlShape diamond This module is depreciated, please use curveZipB tweakersControlShape lightSphere This module is depreciated, please use curveZipB tweakCurvesInterpolation 1 This module is depreciated, please use curveZipB offsetX 20.0 This module is depreciated, please use curveZipB offsetZ 0.0 This module is depreciated, please use curveZipB doTweakTangents False This module is depreciated, please use curveZipB doCornerTangents False This module is depreciated, please use curveZipB","title":"TweakCcontrols"},{"location":"curveZip_settings/#blinktweak","text":"Attribute Name Default Description doBlinkTweak True This module is depreciated, please use curveZipB blinkTweakControlShape diamond This module is depreciated, please use curveZipB","title":"BlinkTweak"},{"location":"curveZip_settings/#followrotation","text":"Attribute Name Default Description doFollowRotation False This module is depreciated, please use curveZipB jntToFollow This module is depreciated, please use curveZipB horizontalFollow 0.05 This module is depreciated, please use curveZipB verticalFollow 0.1 This module is depreciated, please use curveZipB","title":"FollowRotation"},{"location":"curveZip_settings/#upperattachmentcrv","text":"Attribute Name Default Description doUpperAttachment False This module is depreciated, please use curveZipB upperJntCount 2 This module is depreciated, please use curveZipB","title":"UpperAttachmentCrv"},{"location":"curveZip_settings/#lowerattachmentcrv","text":"Attribute Name Default Description doLowerAttachment False This module is depreciated, please use curveZipB lowerJntCount 2 This module is depreciated, please use curveZipB","title":"LowerAttachmentCrv"},{"location":"defSearch/","text":"defSearch === Author: Assaf Ben Zur === Core MNS Utility UI This UI will allow the user to search though all available function within a given library and build a dynamic UI for it, based on it's arguments and keyword arguments drawen as 'type' QObjects into a new UI window. This UI class will search thorugh the default library (mns), although has functionallity to add any library into the search. IMPORTANT: Any given custom library needs to follow the mns code structure convension in order to work and sraw properly. Please refer to some code examples. The main process of this UI class is: - Load the UI - procedurally look through the given libraries and add any found python defenition into the UI list. - Uppon a 'UI creation' call (via the button or souble-click): - Deconstruct the selected defenition into mandatory arguments and keyword arguments - Build a new UI based on the parameters got. - Uppon a 'Run' call: - Re-construct the function's argument based on the UI fields and recompile into a string - Call the selected function using the complied arguent string Features: - Prefs tab to control the UI's behavior. - Directory addition - Indepentent custom '.py' files add - Library reload - 'Default Prefs restore' - Settings export/import - Function 'pinning' (Global, session independent) - UI features - Search, Case-Sensative display, Pinned view only, clear all pinns - 'dev mode': - When set to False (default) the UI call will create a new UI only if it han't been created before- meaning that the UI objects are kept within the UI class, and when closed will not lose their user-set values. When called again, the UI will simply re-load- not re-create to keep previous set values. The function will not be read again to build. When set to True, instead of re-loading of a previously created UI- it will be deleted- and recreated, READING THE FUNCTION AGAIN. This allows the user to re-read a function every time the UI is called- that means that all previous value set will be lost- as the UI rebuilds it will set all items to default value. This gives a very fast way of developing a function- not needing to re-load maya after edit- The UI will rebuild based on any change made to the defenition code, adding any new items or running a different fuctionallity every run call. Use this feature when writing or developing a new fuction. Classes MnsDefSearch [Class] Main UI Class Constructor: MnsDefSearch( parent ( str ) ; [default: mnsUIUtils.get_maya_window()]) Inherits from: form_class, base_class Class Members: pinnedFilePath Methods: initializePinnedDir [method] clearResults [method] clearPins [method] connectSignals [method] importModules [method] loadWindow [method] updateResults [method] createUI [method] loadList [method] addModuleToResults [method] addPackageToResults [method] pin [method] pinnedOnlyView [method] import_submodules [method] reloadResults [method] MnsDefSearch methods initializePinnedDir [ MnsDefSearch class method] Constructor: initializePinnedDir(self) Return: None Arguments: self Optional Arguments: clearResults [ MnsDefSearch class method] Clear Serach method trigger. Constructor: clearResults(self) Return: None Arguments: self Optional Arguments: clearPins [ MnsDefSearch class method] Clear all pinns method trigger. Constructor: clearPins(self) Return: None Arguments: self Optional Arguments: connectSignals [ MnsDefSearch class method] Connect all UI signals Constructor: connectSignals(self) Return: None Arguments: self Optional Arguments: importModules [ MnsDefSearch class method] Import modules wrapper. Constructor: importModules(self) Return: None Arguments: self Optional Arguments: loadWindow [ MnsDefSearch class method] Main UI load Constructor: loadWindow(self) Return: None Arguments: self Optional Arguments: updateResults [ MnsDefSearch class method] Main UI view update method trigger. The UI list will be updated from this method based on the current UI state and prefs Constructor: updateResults(self) Return: None Arguments: self Optional Arguments: createUI [ MnsDefSearch class method] Main dynamic UI creation method trigger based on current selection. Constructor: createUI(self) Return: None Arguments: self Optional Arguments: loadList [ MnsDefSearch class method] Main list load method. A wrapper to filter all functions based on prefs selected and update the UI. Constructor: loadList(self) Return: None Arguments: self Optional Arguments: addModuleToResults [ MnsDefSearch class method] Module add method trigger. Constructor: addModuleToResults(self, module) Return: None Arguments: self module Optional Arguments: addPackageToResults [ MnsDefSearch class method] Package addition method trigger. Constructor: addPackageToResults(self, package) Return: None Arguments: self package Optional Arguments: pin [ MnsDefSearch class method] Pin call method trigger based on current selection. Constructor: pin(self) Return: None Arguments: self Optional Arguments: pinnedOnlyView [ MnsDefSearch class method] Pinned only view trigger method. Constructor: pinnedOnlyView(self, state) Return: None Arguments: self state Optional Arguments: import_submodules [ MnsDefSearch class method] Recursive method to walk thorugh a given package and sub-packages to store all sub-directories within. Constructor: import_submodules(self, package, recursive=True) Return: dict Arguments: self package recursive ( bool ) ; [default: True] Optional Arguments: reloadResults [ MnsDefSearch class method] Wrapper re-load method. Constructor: reloadResults(self) Return: None Arguments: self Optional Arguments:","title":"defSearch"},{"location":"defSearch/#defsearch","text":"=== Author: Assaf Ben Zur === Core MNS Utility UI This UI will allow the user to search though all available function within a given library and build a dynamic UI for it, based on it's arguments and keyword arguments drawen as 'type' QObjects into a new UI window. This UI class will search thorugh the default library (mns), although has functionallity to add any library into the search. IMPORTANT: Any given custom library needs to follow the mns code structure convension in order to work and sraw properly. Please refer to some code examples. The main process of this UI class is: - Load the UI - procedurally look through the given libraries and add any found python defenition into the UI list. - Uppon a 'UI creation' call (via the button or souble-click): - Deconstruct the selected defenition into mandatory arguments and keyword arguments - Build a new UI based on the parameters got. - Uppon a 'Run' call: - Re-construct the function's argument based on the UI fields and recompile into a string - Call the selected function using the complied arguent string Features: - Prefs tab to control the UI's behavior. - Directory addition - Indepentent custom '.py' files add - Library reload - 'Default Prefs restore' - Settings export/import - Function 'pinning' (Global, session independent) - UI features - Search, Case-Sensative display, Pinned view only, clear all pinns - 'dev mode': - When set to False (default) the UI call will create a new UI only if it han't been created before- meaning that the UI objects are kept within the UI class, and when closed will not lose their user-set values. When called again, the UI will simply re-load- not re-create to keep previous set values. The function will not be read again to build. When set to True, instead of re-loading of a previously created UI- it will be deleted- and recreated, READING THE FUNCTION AGAIN. This allows the user to re-read a function every time the UI is called- that means that all previous value set will be lost- as the UI rebuilds it will set all items to default value. This gives a very fast way of developing a function- not needing to re-load maya after edit- The UI will rebuild based on any change made to the defenition code, adding any new items or running a different fuctionallity every run call. Use this feature when writing or developing a new fuction.","title":"defSearch"},{"location":"defSearch/#classes","text":"","title":"Classes"},{"location":"defSearch/#mnsdefsearch-class","text":"Main UI Class Constructor: MnsDefSearch( parent ( str ) ; [default: mnsUIUtils.get_maya_window()]) Inherits from: form_class, base_class Class Members: pinnedFilePath Methods: initializePinnedDir [method] clearResults [method] clearPins [method] connectSignals [method] importModules [method] loadWindow [method] updateResults [method] createUI [method] loadList [method] addModuleToResults [method] addPackageToResults [method] pin [method] pinnedOnlyView [method] import_submodules [method] reloadResults [method]","title":"MnsDefSearch [Class]"},{"location":"defSearch/#mnsdefsearch-methods","text":"","title":"MnsDefSearch  methods"},{"location":"docBuildMansur/","text":"docBuildMansur === Author: Assaf Ben Zur === Core procedural documentation build Process flow: Read a given directory Build a structure based on the os directory given and the folders to filter Filter only .py files For each py file: Extract Header (such as this one) Extract Defenition Extract Def name and constructor Extract Arguments, and Optional Arguments Extract return Extract Classes Extract Header Extract Name and constructor Extract inheritence Extract Class members Extract Methods Extract Header Extract Name and constructor Extract Arguments and Optional Arguments Extract return rebuild the yml file given write the files within the 'docs' directory This procedural approach for a code documentation build ensures an up-to-date documentation based on code commenting. No additional actions are neccessery. This will yeild a readable commented code with will math the documentation 1-to-1. Also, this will yeild a very \"easy to change\" approach for the documentation generator of choice as well as a 100% cohirent documentation throuout. Defenitions appendMayaPluginsToYml Append the Maya-Plugins documentation page into the existing yml struct. Constructor: appendMayaPluginsToYml(ymlPath, parentPageName) Return: None Arguments: ymlPath parentPageName Keyword Arguments: buildDocItems Main dir build recursive function. The function builds only directory items, which in turn will be searched for '.py' files, and will be added to the structure only if in contains a direct '.py' within, or if a directory within comatins one, recursively. Depth independent. Constructor: buildDocItems(dir, rootDir, level, ymlPath, fileLines) Return: list (yml new file lines) Arguments: dir rootDir level ymlPath fileLines Keyword Arguments: buildDocsForDir Main build wrapper and the yml file writer wrapper function. Calls 'buildDocItems' within which in turn build the actual html files within the 'docs' directory. Finally re-writes the yml file using 'rebuildYmlFile' according to the file structure acquired Constructor: buildDocsForDir(mkDocksYmlPath, parentPageName, directory, folders, level = 0) Return: None Arguments: mkDocksYmlPath parentPageName directory folders level ( int ) ; [default: 0] Keyword Arguments: buildFileDoc Main file def. This is a wrapped def as well as a function one. Compiles all needed documentation from a given file path. Will compile Classes, methods, defenitions (icluding all relevant information for each) This is also the main WRITE defenition. After info assembly the info will be written as a new file, overriding existing ones, to create a new doc page. Any file doc 'display' is contained within this def. Constructor: buildFileDoc(path, ymlPath) Return: None Arguments: path ymlPath Keyword Arguments: buildMansurDocs Main wrapper call for the MANSUR directory doc build. Contains the requested folders within, hard-coded for safety. Constructor: buildMansurDocs() Return: None Arguments: Keyword Arguments: buildModSettingsFileDoc Constructor: buildModSettingsFileDoc(path, ymlPath) Return: None Arguments: path ymlPath Keyword Arguments: buildReleaseNotesPage Constructor: buildReleaseNotesPage(mkDocksYmlPath) Return: None Arguments: mkDocksYmlPath Keyword Arguments: buildSubItemsDir Last level recursive function. This function will call the documentation file build as well as build the last meanu item within the structure. The final pythonLib item is passed in, as well as the root directory and the current level and the yml path in order to write the new yml lines correctly, depending on the file's level position. Constructor: buildSubItemsDir(rootDir, pyLib, level, ymlPath, fileLines) Return: list (fileLines) Arguments: rootDir pyLib level ymlPath fileLines Keyword Arguments: collectHeaderFromCppFile For the given cpp file, extract the header comment. Constructor: collectHeaderFromCppFile(cppFullPath = None) Return: None Arguments: cppFullPath ( str ) ; [default: None] Keyword Arguments: commitAndDeployDocumentation Constructor: commitAndDeployDocumentation(rootDrive = \"d\", relativeDirectory = \"mansurProject\\mansur-docs\", kwargs) Return: None Arguments: rootDrive ( str ) ; [default: \"d\"] relativeDirectory ( str ) ; [default: \"mansurProject\\mansur-docs\"] kwargs Keyword Arguments: createPluginDocFile Create the Maya-Plugins attributes documentation page. Constructor: createPluginDocFile(rootBuildPath = \"D/mansurProject/mayaPlugins\", ymlPath = \"D/mansurProject/mansur-docs/mkdocs.yml\") Return: None Arguments: rootBuildPath ( str ) ; [default: \"D:/mansurProject/mayaPlugins\"] ymlPath ( str ) ; [default: \"D:/mansurProject/mansur-docs/mkdocs.yml\"] Keyword Arguments: extractAttributeDefenitionsFromCppFile From the given cpp path given, extract all attribute information. Constructor: extractAttributeDefenitionsFromCppFile(cppFullPath = None, buildName = None) Return: list (inuput attributes), list (output attributes) Arguments: cppFullPath ( str ) ; [default: None] buildName ( str ) ; [default: None] Keyword Arguments: extractClassMembersFromInitSrc Extracts class members from a Class' init method source as list Constructor: extractClassMembersFromInitSrc(src = []) Return: list (class members names) Arguments: src ( list ) ; [default: []] Keyword Arguments: extractConstructorValuesForClass Extracts constructor related values from a class source as list. Wrapper def. Extracts both Arguments (flattened) and class members Constructor: extractConstructorValuesForClass(src = []) Return: string (constructor), list (class members) Arguments: src ( list ) ; [default: []] Keyword Arguments: extractDocsForClass Wrapped def. Extracts full documentation from a given class source. Constructor: extractDocsForClass(classSrc = []) Return: string (title), list (header), string (sontructor), string (inherit object), list (class members), string (return) Arguments: classSrc ( list ) ; [default: []] Keyword Arguments: extractDocsForDef Wrapper def for a full doc extraction for a given file souce as list. extracts return statement, title, header, arguments and optionalArguments Constructor: extractDocsForDef(defSrc = []) Return: string(title), list(header), list(arguments), list(optionalArguments, string(return statement) Arguments: defSrc ( list ) ; [default: []] Keyword Arguments: extractHeaderFromSrc Extracts a header if exsits from a given elemnt src (Class/Def/Method) as list Constructor: extractHeaderFromSrc(src = [], kwargs) Return: list (header lines) Arguments: src ( list ) ; [default: []] kwargs Keyword Arguments: extractMethodsfromClassSrc Splits a given class source to orginized dict containing it's methods sources Constructor: extractMethodsfromClassSrc(src = []) Return: dict (methodName: methodSource) Arguments: src ( list ) ; [default: []] Keyword Arguments: extractParametersFromDefSrc Extract parametrs from a given def source as list Extracts arguments and optional arguments Constructor: extractParametersFromDefSrc(src = []) Return: list (arguments) , list(optionalArguments) Arguments: src ( list ) ; [default: []] Keyword Arguments: gatherPluginDocumentation From the build directory given, extract attributes data directly from the cpp files. compile the data into input/uotput lists containing dict info for all attributes. Constructor: gatherPluginDocumentation(rootBuildPath = \"D/mansurProject/mayaPlugins\") Return: list (build list containing extracted attributes data) Arguments: rootBuildPath ( str ) ; [default: \"D:/mansurProject/mayaPlugins\"] Keyword Arguments: getParameterForMnsArg Extracts arguments from a given def source lines as list Constructor: getParameterForMnsArg(arg) Return: string (flattened combined arguments) Arguments: arg Keyword Arguments: getPyLibForDir This is a complex recursive function that will assemble a file structure from a given path directory. The assembly will filter ONLY folders that contain at least one '.py' file, and ONLY '.py' files. This function returns a dictionary containing the file and folder structure as keys \"dirs\" and \"files\" respectively. As this is a recusrsive depth independent function, the return will be a complex compound dict, which contains instances of the same dict structure within. This is dependent of depth obviously- if a directory contains another directory within- which contains a '.py' the first item \"dirs\" key will contain another dictionary containing a \"dirs\" key and a \"files\" key. Ultimatly, the first dict \"dirs\" key should contain a single complex dict element. Constructor: getPyLibForDir(root) Return: dict (complex library dict) Arguments: root Keyword Arguments: rebuildYmlFile yml writer function. Writes the given yml file passed, with the new 'lines' passed. The yml 'parentPageName' is passed as an argument - the new 'lines' build is constructed underneeth. Existing required info is preserved by calculating the parent item indentation level, keeping every item with lower or matching level. Every item under the parent item passed in a higher level is removed or reconstructed. Constructor: rebuildYmlFile(ymlPath, parentPageName, lines) Return: None Arguments: ymlPath parentPageName lines Keyword Arguments:","title":"docBuildMansur"},{"location":"docBuildMansur/#docbuildmansur","text":"=== Author: Assaf Ben Zur === Core procedural documentation build Process flow: Read a given directory Build a structure based on the os directory given and the folders to filter Filter only .py files For each py file: Extract Header (such as this one) Extract Defenition Extract Def name and constructor Extract Arguments, and Optional Arguments Extract return Extract Classes Extract Header Extract Name and constructor Extract inheritence Extract Class members Extract Methods Extract Header Extract Name and constructor Extract Arguments and Optional Arguments Extract return rebuild the yml file given write the files within the 'docs' directory This procedural approach for a code documentation build ensures an up-to-date documentation based on code commenting. No additional actions are neccessery. This will yeild a readable commented code with will math the documentation 1-to-1. Also, this will yeild a very \"easy to change\" approach for the documentation generator of choice as well as a 100% cohirent documentation throuout.","title":"docBuildMansur"},{"location":"docBuildMansur/#defenitions","text":"","title":"Defenitions"},{"location":"docBuildMansur/#appendmayapluginstoyml","text":"Append the Maya-Plugins documentation page into the existing yml struct. Constructor: appendMayaPluginsToYml(ymlPath, parentPageName) Return: None Arguments: ymlPath parentPageName Keyword Arguments:","title":"appendMayaPluginsToYml"},{"location":"docBuildMansur/#builddocitems","text":"Main dir build recursive function. The function builds only directory items, which in turn will be searched for '.py' files, and will be added to the structure only if in contains a direct '.py' within, or if a directory within comatins one, recursively. Depth independent. Constructor: buildDocItems(dir, rootDir, level, ymlPath, fileLines) Return: list (yml new file lines) Arguments: dir rootDir level ymlPath fileLines Keyword Arguments:","title":"buildDocItems"},{"location":"docBuildMansur/#builddocsfordir","text":"Main build wrapper and the yml file writer wrapper function. Calls 'buildDocItems' within which in turn build the actual html files within the 'docs' directory. Finally re-writes the yml file using 'rebuildYmlFile' according to the file structure acquired Constructor: buildDocsForDir(mkDocksYmlPath, parentPageName, directory, folders, level = 0) Return: None Arguments: mkDocksYmlPath parentPageName directory folders level ( int ) ; [default: 0] Keyword Arguments:","title":"buildDocsForDir"},{"location":"docBuildMansur/#buildfiledoc","text":"Main file def. This is a wrapped def as well as a function one. Compiles all needed documentation from a given file path. Will compile Classes, methods, defenitions (icluding all relevant information for each) This is also the main WRITE defenition. After info assembly the info will be written as a new file, overriding existing ones, to create a new doc page. Any file doc 'display' is contained within this def. Constructor: buildFileDoc(path, ymlPath) Return: None Arguments: path ymlPath Keyword Arguments:","title":"buildFileDoc"},{"location":"docBuildMansur/#buildmansurdocs","text":"Main wrapper call for the MANSUR directory doc build. Contains the requested folders within, hard-coded for safety. Constructor: buildMansurDocs() Return: None Arguments: Keyword Arguments:","title":"buildMansurDocs"},{"location":"docBuildMansur/#buildmodsettingsfiledoc","text":"Constructor: buildModSettingsFileDoc(path, ymlPath) Return: None Arguments: path ymlPath Keyword Arguments:","title":"buildModSettingsFileDoc"},{"location":"docBuildMansur/#buildreleasenotespage","text":"Constructor: buildReleaseNotesPage(mkDocksYmlPath) Return: None Arguments: mkDocksYmlPath Keyword Arguments:","title":"buildReleaseNotesPage"},{"location":"docBuildMansur/#buildsubitemsdir","text":"Last level recursive function. This function will call the documentation file build as well as build the last meanu item within the structure. The final pythonLib item is passed in, as well as the root directory and the current level and the yml path in order to write the new yml lines correctly, depending on the file's level position. Constructor: buildSubItemsDir(rootDir, pyLib, level, ymlPath, fileLines) Return: list (fileLines) Arguments: rootDir pyLib level ymlPath fileLines Keyword Arguments:","title":"buildSubItemsDir"},{"location":"docBuildMansur/#collectheaderfromcppfile","text":"For the given cpp file, extract the header comment. Constructor: collectHeaderFromCppFile(cppFullPath = None) Return: None Arguments: cppFullPath ( str ) ; [default: None] Keyword Arguments:","title":"collectHeaderFromCppFile"},{"location":"docBuildMansur/#commitanddeploydocumentation","text":"Constructor: commitAndDeployDocumentation(rootDrive = \"d\", relativeDirectory = \"mansurProject\\mansur-docs\", kwargs) Return: None Arguments: rootDrive ( str ) ; [default: \"d\"] relativeDirectory ( str ) ; [default: \"mansurProject\\mansur-docs\"] kwargs Keyword Arguments:","title":"commitAndDeployDocumentation"},{"location":"docBuildMansur/#createplugindocfile","text":"Create the Maya-Plugins attributes documentation page. Constructor: createPluginDocFile(rootBuildPath = \"D/mansurProject/mayaPlugins\", ymlPath = \"D/mansurProject/mansur-docs/mkdocs.yml\") Return: None Arguments: rootBuildPath ( str ) ; [default: \"D:/mansurProject/mayaPlugins\"] ymlPath ( str ) ; [default: \"D:/mansurProject/mansur-docs/mkdocs.yml\"] Keyword Arguments:","title":"createPluginDocFile"},{"location":"docBuildMansur/#extractattributedefenitionsfromcppfile","text":"From the given cpp path given, extract all attribute information. Constructor: extractAttributeDefenitionsFromCppFile(cppFullPath = None, buildName = None) Return: list (inuput attributes), list (output attributes) Arguments: cppFullPath ( str ) ; [default: None] buildName ( str ) ; [default: None] Keyword Arguments:","title":"extractAttributeDefenitionsFromCppFile"},{"location":"docBuildMansur/#extractclassmembersfrominitsrc","text":"Extracts class members from a Class' init method source as list Constructor: extractClassMembersFromInitSrc(src = []) Return: list (class members names) Arguments: src ( list ) ; [default: []] Keyword Arguments:","title":"extractClassMembersFromInitSrc"},{"location":"docBuildMansur/#extractconstructorvaluesforclass","text":"Extracts constructor related values from a class source as list. Wrapper def. Extracts both Arguments (flattened) and class members Constructor: extractConstructorValuesForClass(src = []) Return: string (constructor), list (class members) Arguments: src ( list ) ; [default: []] Keyword Arguments:","title":"extractConstructorValuesForClass"},{"location":"docBuildMansur/#extractdocsforclass","text":"Wrapped def. Extracts full documentation from a given class source. Constructor: extractDocsForClass(classSrc = []) Return: string (title), list (header), string (sontructor), string (inherit object), list (class members), string (return) Arguments: classSrc ( list ) ; [default: []] Keyword Arguments:","title":"extractDocsForClass"},{"location":"docBuildMansur/#extractdocsfordef","text":"Wrapper def for a full doc extraction for a given file souce as list. extracts return statement, title, header, arguments and optionalArguments Constructor: extractDocsForDef(defSrc = []) Return: string(title), list(header), list(arguments), list(optionalArguments, string(return statement) Arguments: defSrc ( list ) ; [default: []] Keyword Arguments:","title":"extractDocsForDef"},{"location":"docBuildMansur/#extractheaderfromsrc","text":"Extracts a header if exsits from a given elemnt src (Class/Def/Method) as list Constructor: extractHeaderFromSrc(src = [], kwargs) Return: list (header lines) Arguments: src ( list ) ; [default: []] kwargs Keyword Arguments:","title":"extractHeaderFromSrc"},{"location":"docBuildMansur/#extractmethodsfromclasssrc","text":"Splits a given class source to orginized dict containing it's methods sources Constructor: extractMethodsfromClassSrc(src = []) Return: dict (methodName: methodSource) Arguments: src ( list ) ; [default: []] Keyword Arguments:","title":"extractMethodsfromClassSrc"},{"location":"docBuildMansur/#extractparametersfromdefsrc","text":"Extract parametrs from a given def source as list Extracts arguments and optional arguments Constructor: extractParametersFromDefSrc(src = []) Return: list (arguments) , list(optionalArguments) Arguments: src ( list ) ; [default: []] Keyword Arguments:","title":"extractParametersFromDefSrc"},{"location":"docBuildMansur/#gatherplugindocumentation","text":"From the build directory given, extract attributes data directly from the cpp files. compile the data into input/uotput lists containing dict info for all attributes. Constructor: gatherPluginDocumentation(rootBuildPath = \"D/mansurProject/mayaPlugins\") Return: list (build list containing extracted attributes data) Arguments: rootBuildPath ( str ) ; [default: \"D:/mansurProject/mayaPlugins\"] Keyword Arguments:","title":"gatherPluginDocumentation"},{"location":"docBuildMansur/#getparameterformnsarg","text":"Extracts arguments from a given def source lines as list Constructor: getParameterForMnsArg(arg) Return: string (flattened combined arguments) Arguments: arg Keyword Arguments:","title":"getParameterForMnsArg"},{"location":"docBuildMansur/#getpylibfordir","text":"This is a complex recursive function that will assemble a file structure from a given path directory. The assembly will filter ONLY folders that contain at least one '.py' file, and ONLY '.py' files. This function returns a dictionary containing the file and folder structure as keys \"dirs\" and \"files\" respectively. As this is a recusrsive depth independent function, the return will be a complex compound dict, which contains instances of the same dict structure within. This is dependent of depth obviously- if a directory contains another directory within- which contains a '.py' the first item \"dirs\" key will contain another dictionary containing a \"dirs\" key and a \"files\" key. Ultimatly, the first dict \"dirs\" key should contain a single complex dict element. Constructor: getPyLibForDir(root) Return: dict (complex library dict) Arguments: root Keyword Arguments:","title":"getPyLibForDir"},{"location":"docBuildMansur/#rebuildymlfile","text":"yml writer function. Writes the given yml file passed, with the new 'lines' passed. The yml 'parentPageName' is passed as an argument - the new 'lines' build is constructed underneeth. Existing required info is preserved by calculating the parent item indentation level, keeping every item with lower or matching level. Every item under the parent item passed in a higher level is removed or reconstructed. Constructor: rebuildYmlFile(ymlPath, parentPageName, lines) Return: None Arguments: ymlPath parentPageName lines Keyword Arguments:","title":"rebuildYmlFile"},{"location":"dynUI/","text":"dynUI === Author: Assaf Ben Zur === Supporting module for the 'defSearch' UI Class. This module build the base UI for any function UI build called from the defSerach UI. The build is based on a .ui base file, constructing an empty UI that will accomedate the dynamic UI elemnts requested. This module also holds the RunCmd. The run command will filter and get any elemnt value based on it's type and recompile an argument string to pass into the function requested. A template icon is created as well as an empty 'title' item to be changed after creation base on the function name requested. Classes MnsDynamicDefUI [Class] Main UI class Constructor: MnsDynamicDefUI( defenition , parent ( str ) ; [default: mnsUIUtils.get_maya_window()], **kwargs ) Inherits from: form_class, base_class Class Members: funObjectCreation defenition arguments optArguments txtFields defenitionName title preDefinedArgs sideCB colOverride rigTop split splitLayout dividerLayout allCollapsible mainVLayout rootGuide customRunCommand fullList Methods: setCollapsibleWidgetsBehaviour [method] closeEvent [method] keyPressEvent [method] toggleAllCollapsed [method] assembleFeildValues [method] drawUI [method] loadUI [method] runCmd [method] drawTitle [method] MnsDynamicDefUI methods setCollapsibleWidgetsBehaviour [ MnsDynamicDefUI class method] Constructor: setCollapsibleWidgetsBehaviour(self) Return: None Arguments: self Optional Arguments: closeEvent [ MnsDynamicDefUI class method] Constructor: closeEvent(self, event) Return: None Arguments: self event Optional Arguments: keyPressEvent [ MnsDynamicDefUI class method] Constructor: keyPressEvent(self, event) Return: None Arguments: self event Optional Arguments: toggleAllCollapsed [ MnsDynamicDefUI class method] Constructor: toggleAllCollapsed(self, pressedColWid) Return: None Arguments: self pressedColWid Optional Arguments: assembleFeildValues [ MnsDynamicDefUI class method] Assemble all UI values into a list Constructor: assembleFeildValues(self) Return: list Arguments: self Optional Arguments: drawUI [ MnsDynamicDefUI class method] Main UI draw method. Constructor: drawUI(self) Return: None Arguments: self Optional Arguments: loadUI [ MnsDynamicDefUI class method] Main UI load. Constructor: loadUI(self) Return: None Arguments: self Optional Arguments: runCmd [ MnsDynamicDefUI class method] Main method run command trigger. Constructor: runCmd(self) Return: None Arguments: self Optional Arguments: drawTitle [ MnsDynamicDefUI class method] Title set method. Constructor: drawTitle(self) Return: None Arguments: self Optional Arguments:","title":"dynUI"},{"location":"dynUI/#dynui","text":"=== Author: Assaf Ben Zur === Supporting module for the 'defSearch' UI Class. This module build the base UI for any function UI build called from the defSerach UI. The build is based on a .ui base file, constructing an empty UI that will accomedate the dynamic UI elemnts requested. This module also holds the RunCmd. The run command will filter and get any elemnt value based on it's type and recompile an argument string to pass into the function requested. A template icon is created as well as an empty 'title' item to be changed after creation base on the function name requested.","title":"dynUI"},{"location":"dynUI/#classes","text":"","title":"Classes"},{"location":"dynUI/#mnsdynamicdefui-class","text":"Main UI class Constructor: MnsDynamicDefUI( defenition , parent ( str ) ; [default: mnsUIUtils.get_maya_window()], **kwargs ) Inherits from: form_class, base_class Class Members: funObjectCreation defenition arguments optArguments txtFields defenitionName title preDefinedArgs sideCB colOverride rigTop split splitLayout dividerLayout allCollapsible mainVLayout rootGuide customRunCommand fullList Methods: setCollapsibleWidgetsBehaviour [method] closeEvent [method] keyPressEvent [method] toggleAllCollapsed [method] assembleFeildValues [method] drawUI [method] loadUI [method] runCmd [method] drawTitle [method]","title":"MnsDynamicDefUI [Class]"},{"location":"dynUI/#mnsdynamicdefui-methods","text":"","title":"MnsDynamicDefUI  methods"},{"location":"foot/","text":"foot Author: Asaf Ben-Zur Best used for: Foot This Module was created for a foot setup mainly. Some of it's main features are FK controls, BK (backward kinematics) controls, Roll control, Bank Controls, Heel and Tip controls, Dynamic pivot control. The best application for this module is placing it under a limb module, which will result in a connected (standard) behaviour. Defenitions construct Constructor: construct(mansur, MnsBuildModule, kwargs) Return: list (controls), dict (internalSpaces), MnsNameStd (moduleSpaceAttrHost) Arguments: mansur MnsBuildModule kwargs Keyword Arguments: createIKMuteForCtrl Constructor: createIKMuteForCtrl(mansur, ctrl, ikFkAttr, kwargs) Return: None Arguments: mansur ctrl ikFkAttr kwargs Keyword Arguments: customGuides Constructor: customGuides(mansur, builtGuides) Return: None Arguments: mansur builtGuides Keyword Arguments: jointStructure Constructor: jointStructure(mansur, guides, mnsBuildModule = None, kwargs) Return: None Arguments: mansur guides mnsBuildModule ( str ) ; [default: None] kwargs Keyword Arguments: postConstruct Constructor: postConstruct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"Foot"},{"location":"foot/#foot","text":"Author: Asaf Ben-Zur Best used for: Foot This Module was created for a foot setup mainly. Some of it's main features are FK controls, BK (backward kinematics) controls, Roll control, Bank Controls, Heel and Tip controls, Dynamic pivot control. The best application for this module is placing it under a limb module, which will result in a connected (standard) behaviour.","title":"foot"},{"location":"foot/#defenitions","text":"","title":"Defenitions"},{"location":"foot/#construct","text":"Constructor: construct(mansur, MnsBuildModule, kwargs) Return: list (controls), dict (internalSpaces), MnsNameStd (moduleSpaceAttrHost) Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"construct"},{"location":"foot/#createikmuteforctrl","text":"Constructor: createIKMuteForCtrl(mansur, ctrl, ikFkAttr, kwargs) Return: None Arguments: mansur ctrl ikFkAttr kwargs Keyword Arguments:","title":"createIKMuteForCtrl"},{"location":"foot/#customguides","text":"Constructor: customGuides(mansur, builtGuides) Return: None Arguments: mansur builtGuides Keyword Arguments:","title":"customGuides"},{"location":"foot/#jointstructure","text":"Constructor: jointStructure(mansur, guides, mnsBuildModule = None, kwargs) Return: None Arguments: mansur guides mnsBuildModule ( str ) ; [default: None] kwargs Keyword Arguments:","title":"jointStructure"},{"location":"foot/#postconstruct","text":"Constructor: postConstruct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"postConstruct"},{"location":"foot_settings/","text":"foot Settings Author: Asaf Ben-Zur Best used for: Foot This Module was created for a foot setup mainly. Some of it's main features are FK controls, BK (backward kinematics) controls, Roll control, Bank Controls, Heel and Tip controls, Dynamic pivot control. The best application for this module is placing it under a limb module, which will result in a connected (standard) behaviour. Attributes ToesFK Attribute Name Default Description FKControlShape cube Toes FK controls shape FKChannelControl T R S X v v v Y v v v Z v v v Toes FK controls channel-box settings ToesBK Attribute Name Default Description BKControlShape diamond BK (Backward Kinematics) controls shape BKChannelControl T R S X v Y v Z v BK controls channel-box settings BankControls Attribute Name Default Description bankControlShape lightSphere Bank controls shape bankChannelControl T R S X v Y v Z v bank controls channel-box settings RollControl Attribute Name Default Description doRollCtrl True If this is True, a foot Roll control will be created rollControlShape cylinder Roll control channel-box settings rollDefaultMaxAngle 30.0 Default Roll maximum limit angle. The roll control is used to roll the entire foot chain, and using an angle value to limit the roll of each section, before rolling the next section. This value will be used as default DynamicPivotControl Attribute Name Default Description doDynamicPivCtrl True This feature will create a control that will try to trace the desired foot shape with it's pivot when rotating it. When choosing to create this control, use the relevant guide's shape to trace the outline of your foot dynamicPivControlShape lightSphere Dynamic roll control shape mapRotXTo 2 as this feature uses local channels, it is essential to map input values correctly. Please map the correct axes based on the orientation of your guide mapRotYTo 3 as this feature uses local channels, it is essential to map input values correctly. Please map the correct axes based on the orientation of your guide mapRotZTo 6 as this feature uses local channels, it is essential to map input values correctly. Please map the correct axes based on the orientation of your guide distRateMultiplier 5.0 This feature will use the translation of a run-away transform to acquire the best pivot location along the given outline shape. This value will dictate the speed of translation dynamicPivChannelControl T R S X v Y v Z Roll control channel-box settings","title":"Foot settings"},{"location":"foot_settings/#foot-settings","text":"Author: Asaf Ben-Zur Best used for: Foot This Module was created for a foot setup mainly. Some of it's main features are FK controls, BK (backward kinematics) controls, Roll control, Bank Controls, Heel and Tip controls, Dynamic pivot control. The best application for this module is placing it under a limb module, which will result in a connected (standard) behaviour.","title":"foot Settings"},{"location":"foot_settings/#attributes","text":"","title":"Attributes"},{"location":"foot_settings/#toesfk","text":"Attribute Name Default Description FKControlShape cube Toes FK controls shape FKChannelControl T R S X v v v Y v v v Z v v v Toes FK controls channel-box settings","title":"ToesFK"},{"location":"foot_settings/#toesbk","text":"Attribute Name Default Description BKControlShape diamond BK (Backward Kinematics) controls shape BKChannelControl T R S X v Y v Z v BK controls channel-box settings","title":"ToesBK"},{"location":"foot_settings/#bankcontrols","text":"Attribute Name Default Description bankControlShape lightSphere Bank controls shape bankChannelControl T R S X v Y v Z v bank controls channel-box settings","title":"BankControls"},{"location":"foot_settings/#rollcontrol","text":"Attribute Name Default Description doRollCtrl True If this is True, a foot Roll control will be created rollControlShape cylinder Roll control channel-box settings rollDefaultMaxAngle 30.0 Default Roll maximum limit angle. The roll control is used to roll the entire foot chain, and using an angle value to limit the roll of each section, before rolling the next section. This value will be used as default","title":"RollControl"},{"location":"foot_settings/#dynamicpivotcontrol","text":"Attribute Name Default Description doDynamicPivCtrl True This feature will create a control that will try to trace the desired foot shape with it's pivot when rotating it. When choosing to create this control, use the relevant guide's shape to trace the outline of your foot dynamicPivControlShape lightSphere Dynamic roll control shape mapRotXTo 2 as this feature uses local channels, it is essential to map input values correctly. Please map the correct axes based on the orientation of your guide mapRotYTo 3 as this feature uses local channels, it is essential to map input values correctly. Please map the correct axes based on the orientation of your guide mapRotZTo 6 as this feature uses local channels, it is essential to map input values correctly. Please map the correct axes based on the orientation of your guide distRateMultiplier 5.0 This feature will use the translation of a run-away transform to acquire the best pivot location along the given outline shape. This value will dictate the speed of translation dynamicPivChannelControl T R S X v Y v Z Roll control channel-box settings","title":"DynamicPivotControl"},{"location":"freeControl/","text":"freeControl Author: Asaf Ben-Zur Best used for: Free objects, General Control, Mesh Tweaker, Mesh Local Tweaker This Module is a general single control at it's base state. It also contains a Mesh-Tweaker feature that will allow you to create a \"Double Directional\" tweaker- meaning that the control will follow the input Mesh's position (Rivet) and will also be able to affect it. This effect is also commonly knowen as the \"Dorito-Effect\". This feature also includes a \"local\" mode, to tunnel deformations from the control to a local skinCluster, then a blend-shape to the main Mesh, creating multi-layered skinned mesh. All of these features will use the main joint as the effector. Note: When using the \"Mesh-Tweaker\" feture, when needing to affect a mesh that will also be used as the rivet input- make sure \"sameMeshAffector\" is set to ON. Defenitions construct Constructor: construct(mansur, MnsBuildModule, kwargs) Return: list (controls), dict (internalSpaces) Arguments: mansur MnsBuildModule kwargs Keyword Arguments: jointStructure Constructor: jointStructure(mansur, guides, mnsBuildModule = None, kwargs) Return: None Arguments: mansur guides mnsBuildModule ( str ) ; [default: None] kwargs Keyword Arguments:","title":"freeControl"},{"location":"freeControl/#freecontrol","text":"Author: Asaf Ben-Zur Best used for: Free objects, General Control, Mesh Tweaker, Mesh Local Tweaker This Module is a general single control at it's base state. It also contains a Mesh-Tweaker feature that will allow you to create a \"Double Directional\" tweaker- meaning that the control will follow the input Mesh's position (Rivet) and will also be able to affect it. This effect is also commonly knowen as the \"Dorito-Effect\". This feature also includes a \"local\" mode, to tunnel deformations from the control to a local skinCluster, then a blend-shape to the main Mesh, creating multi-layered skinned mesh. All of these features will use the main joint as the effector. Note: When using the \"Mesh-Tweaker\" feture, when needing to affect a mesh that will also be used as the rivet input- make sure \"sameMeshAffector\" is set to ON.","title":"freeControl"},{"location":"freeControl/#defenitions","text":"","title":"Defenitions"},{"location":"freeControl/#construct","text":"Constructor: construct(mansur, MnsBuildModule, kwargs) Return: list (controls), dict (internalSpaces) Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"construct"},{"location":"freeControl/#jointstructure","text":"Constructor: jointStructure(mansur, guides, mnsBuildModule = None, kwargs) Return: None Arguments: mansur guides mnsBuildModule ( str ) ; [default: None] kwargs Keyword Arguments:","title":"jointStructure"},{"location":"freeControl_settings/","text":"freeControl Settings Author: Asaf Ben-Zur Best used for: Free objects, General Control, Mesh Tweaker, Mesh Local Tweaker This Module is a general single control at it's base state. It also contains a Mesh-Tweaker feature that will allow you to create a \"Double Directional\" tweaker- meaning that the control will follow the input Mesh's position (Rivet) and will also be able to affect it. This effect is also commonly knowen as the \"Dorito-Effect\". This feature also includes a \"local\" mode, to tunnel deformations from the control to a local skinCluster, then a blend-shape to the main Mesh, creating multi-layered skinned mesh. All of these features will use the main joint as the effector. Note: When using the \"Mesh-Tweaker\" feture, when needing to affect a mesh that will also be used as the rivet input- make sure \"sameMeshAffector\" is set to ON. Attributes symmetryType 0 Choose the mirror type for right side controls GlobalSettings Attribute Name Default Description controlShape circle Control shape channelControl T R S X v v v Y v v v Z v v v Control channel-box settings createJoint True Choose whether to create and attach a joint to this control asTweakerDivider MeshTweaker Comment wasn't inserted asMeshTweaker False This control can aslo act as a live mesh tweaker. This means that you can attach this control to a mesh, having it follow the deformed mesh. In case you want this control to be affected by the mesh (position of the control) and also affect the mesh (using a skinCluster for example), please make sure that you leave sameMeshEffector attribute ON. You do not need to use any other meshes or joints to implement this behaviour rivetToMesh The mesh you want to attach the control to sameMeshAffector True If this is set to False, you will NOT be able to use this control's related joint within the deformation of the above mesh (this will result as a cycle). In case you want the control to follow the mesh as well as have it's related joint within the deformation of the mesh- please leave this ON. In case you want to attach this control to a mesh that will not be affected by the control's related joint, you can safely turn this attribute OFF isLocal False In some cases, you may wish to use this control's related joint in a different skinCluster layer, channeled into the main mesh as a blendShape. If that is the case, you will need to set this attribute to ON. When set to ON, the related joint will be a part of the joint hierarchy, but will keep it's position at origin so you can you it in a local setup","title":"freeControl settings"},{"location":"freeControl_settings/#freecontrol-settings","text":"Author: Asaf Ben-Zur Best used for: Free objects, General Control, Mesh Tweaker, Mesh Local Tweaker This Module is a general single control at it's base state. It also contains a Mesh-Tweaker feature that will allow you to create a \"Double Directional\" tweaker- meaning that the control will follow the input Mesh's position (Rivet) and will also be able to affect it. This effect is also commonly knowen as the \"Dorito-Effect\". This feature also includes a \"local\" mode, to tunnel deformations from the control to a local skinCluster, then a blend-shape to the main Mesh, creating multi-layered skinned mesh. All of these features will use the main joint as the effector. Note: When using the \"Mesh-Tweaker\" feture, when needing to affect a mesh that will also be used as the rivet input- make sure \"sameMeshAffector\" is set to ON.","title":"freeControl Settings"},{"location":"freeControl_settings/#attributes","text":"symmetryType 0 Choose the mirror type for right side controls","title":"Attributes"},{"location":"freeControl_settings/#globalsettings","text":"Attribute Name Default Description controlShape circle Control shape channelControl T R S X v v v Y v v v Z v v v Control channel-box settings createJoint True Choose whether to create and attach a joint to this control asTweakerDivider MeshTweaker Comment wasn't inserted asMeshTweaker False This control can aslo act as a live mesh tweaker. This means that you can attach this control to a mesh, having it follow the deformed mesh. In case you want this control to be affected by the mesh (position of the control) and also affect the mesh (using a skinCluster for example), please make sure that you leave sameMeshEffector attribute ON. You do not need to use any other meshes or joints to implement this behaviour rivetToMesh The mesh you want to attach the control to sameMeshAffector True If this is set to False, you will NOT be able to use this control's related joint within the deformation of the above mesh (this will result as a cycle). In case you want the control to follow the mesh as well as have it's related joint within the deformation of the mesh- please leave this ON. In case you want to attach this control to a mesh that will not be affected by the control's related joint, you can safely turn this attribute OFF isLocal False In some cases, you may wish to use this control's related joint in a different skinCluster layer, channeled into the main mesh as a blendShape. If that is the case, you will need to set this attribute to ON. When set to ON, the related joint will be a part of the joint hierarchy, but will keep it's position at origin so you can you it in a local setup","title":"GlobalSettings"},{"location":"globals/","text":"globals All top level global variable declaration. Used thoughout the python structure to easily manipulate global settings.","title":"Globals"},{"location":"globals/#globals","text":"All top level global variable declaration. Used thoughout the python structure to easily manipulate global settings.","title":"globals"},{"location":"install/","text":"install Defenitions linux_mnsInstall Constructor: linux_mnsInstall(varValue = \"\", mode = \"install\", varName = \"MAYA_MODULE_PATH\") Return: None Arguments: varValue ( str ) ; [default: \"\"] mode ( str ) ; [default: \"install\"] varName ( str ) ; [default: \"MAYA_MODULE_PATH\"] Keyword Arguments: mnsInstall Constructor: mnsInstall(requestPath = \"\", kwargs) Return: None Arguments: requestPath ( str ) ; [default: \"\"] kwargs Keyword Arguments: win_mnsInstall Constructor: win_mnsInstall(varValue = \"\", mode = \"install\", varName = \"MAYA_MODULE_PATH\") Return: None Arguments: varValue ( str ) ; [default: \"\"] mode ( str ) ; [default: \"install\"] varName ( str ) ; [default: \"MAYA_MODULE_PATH\"] Keyword Arguments:","title":"Install"},{"location":"install/#install","text":"","title":"install"},{"location":"install/#defenitions","text":"","title":"Defenitions"},{"location":"install/#linux_mnsinstall","text":"Constructor: linux_mnsInstall(varValue = \"\", mode = \"install\", varName = \"MAYA_MODULE_PATH\") Return: None Arguments: varValue ( str ) ; [default: \"\"] mode ( str ) ; [default: \"install\"] varName ( str ) ; [default: \"MAYA_MODULE_PATH\"] Keyword Arguments:","title":"linux_mnsInstall"},{"location":"install/#mnsinstall","text":"Constructor: mnsInstall(requestPath = \"\", kwargs) Return: None Arguments: requestPath ( str ) ; [default: \"\"] kwargs Keyword Arguments:","title":"mnsInstall"},{"location":"install/#win_mnsinstall","text":"Constructor: win_mnsInstall(varValue = \"\", mode = \"install\", varName = \"MAYA_MODULE_PATH\") Return: None Arguments: varValue ( str ) ; [default: \"\"] mode ( str ) ; [default: \"install\"] varName ( str ) ; [default: \"MAYA_MODULE_PATH\"] Keyword Arguments:","title":"win_mnsInstall"},{"location":"limb/","text":"limb Author: Asaf Ben-Zur Best used for: Arms, Legs This module was designed to create a generic 3 joint limb control. This module will create both the FK and IK controls, and the standard blend control. On top of the standard behaviour, based on parameters, this module can also include bendy limb controls (as many as you want), Arc layer and Sleeve layer. Note: When used as a leg, try using the foot module as a direct child of this module to automatically achive a connected behaviour. Defenitions construct Constructor: construct(mansur, MnsBuildModule, kwargs) Return: list (controls), dict (internalSpaces), MnsNameStd (moduleSpaceAttrHost) Arguments: mansur MnsBuildModule kwargs Keyword Arguments: customGuides Constructor: customGuides(mansur, builtGuides) Return: None Arguments: mansur builtGuides Keyword Arguments: deconstruct deconstruct method implementation. Transfer interJoints control back to the main joints. Constructor: deconstruct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments: jointStructure Constructor: jointStructure(mansur, guides, mnsBuildModule = None, kwargs) Return: None Arguments: mansur guides mnsBuildModule ( str ) ; [default: None] kwargs Keyword Arguments: jointStructureSoftMod Constructor: jointStructureSoftMod(mansur, guides, mnsBuildModule = None, kwargs) Return: None Arguments: mansur guides mnsBuildModule ( str ) ; [default: None] kwargs Keyword Arguments:","title":"Limb"},{"location":"limb/#limb","text":"Author: Asaf Ben-Zur Best used for: Arms, Legs This module was designed to create a generic 3 joint limb control. This module will create both the FK and IK controls, and the standard blend control. On top of the standard behaviour, based on parameters, this module can also include bendy limb controls (as many as you want), Arc layer and Sleeve layer. Note: When used as a leg, try using the foot module as a direct child of this module to automatically achive a connected behaviour.","title":"limb"},{"location":"limb/#defenitions","text":"","title":"Defenitions"},{"location":"limb/#construct","text":"Constructor: construct(mansur, MnsBuildModule, kwargs) Return: list (controls), dict (internalSpaces), MnsNameStd (moduleSpaceAttrHost) Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"construct"},{"location":"limb/#customguides","text":"Constructor: customGuides(mansur, builtGuides) Return: None Arguments: mansur builtGuides Keyword Arguments:","title":"customGuides"},{"location":"limb/#deconstruct","text":"deconstruct method implementation. Transfer interJoints control back to the main joints. Constructor: deconstruct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"deconstruct"},{"location":"limb/#jointstructure","text":"Constructor: jointStructure(mansur, guides, mnsBuildModule = None, kwargs) Return: None Arguments: mansur guides mnsBuildModule ( str ) ; [default: None] kwargs Keyword Arguments:","title":"jointStructure"},{"location":"limb/#jointstructuresoftmod","text":"Constructor: jointStructureSoftMod(mansur, guides, mnsBuildModule = None, kwargs) Return: None Arguments: mansur guides mnsBuildModule ( str ) ; [default: None] kwargs Keyword Arguments:","title":"jointStructureSoftMod"},{"location":"limb_settings/","text":"limb Settings Author: Asaf Ben-Zur Best used for: Arms, Legs This module was designed to create a generic 3 joint limb control. This module will create both the FK and IK controls, and the standard blend control. On top of the standard behaviour, based on parameters, this module can also include bendy limb controls (as many as you want), Arc layer and Sleeve layer. Note: When used as a leg, try using the foot module as a direct child of this module to automatically achive a connected behaviour. Attributes GlobalSettings Attribute Name Default Description interpolationJoints 3 Comment wasn't inserted offsetX 20.0 Up curve X value offset for the interpolation joints offsetZ 0.0 Up curve Z value offset for the interpolation joints FKSymmetryType 0 FK controls symmetry type, in case it needs to differ from the main symmetry type scaleMode 2 Default scale mode. Please refer to the documentation of mnsPointsOnCurve node to learn more about each mode squashMode 0 Default squash mode. Please refer to the documentation of mnsPointsOnCurve node to learn more about each mode ikFkBlendDefault 0.0 Default value for the main IK-FK blend channel. 0 is IK, 1 is FK. IK Attribute Name Default Description stretchLimit 1.0 IK Handle stratch limit default value softness 0.0 IK handle softness default value Main-Ctrl-Shapes Attribute Name Default Description rootControlShape lightSphere Module root control control shape ikHandleControlShape square IK Handle control shape poleVectorControlShape diamond Pole Vector control shape fkControlShape hexagon FK controls shape tertiariesControlShape flatDiamond Tweak tertiary controls shape tweakers/bendy-Limbs Attribute Name Default Description doTweakers False This feature will create a secondary tweak layer below the main control chain. This is commonly known as Bendy-Limbs tweakersSymmetryType 3 Tweak controls symmetry type, in case it needs to differ from the main symmetry type tweakersPerSection 1 The amount of bendy controls per section. A value of one will create two controls in total - one for the upper section of the limb, on for the lower section createExtraAttributes True If this is set to True, some extra tertiary channel-box control attributes will be added to the attribute-host tweakControlShape dialSquare Tweak controls shape negateOffsetOnSymmetry False If this is set to True, the above offsetX and offsetZ value for the up curve will be negated tweakersChannelControl T R S X v v v Y v v v Z v v v Tweak controls channel-box settings arc Attribute Name Default Description doArc False This feature will use mnsThreePointArc node to create an automatic arc layer on the final curve output arcDegree 3 Arc's curve degree. Refer to mnsThreePointArc node documentation to learn more about this attribute arcSections 8 The amount of samples used to create the arc. Since three samples will create no effect (the result arc needs more points in between to describe the shape), use a higher value to create an effect. The higher the sample amount, the more precise the arc will be resampleCurveSections 16 Post creation sample amount collinearAction 0 this attribute will be used to dictate what to do when the limb is straight (the collinear case). Input curve will match the input curve plugged into this node (recommended), re-sample will create a new curve based on the node's attributes conformToMidPoint True If this is set to True, the node will attempt to pin the middle origin sample in its place, resulting in a much stabler result. If this is set to False, the middle origin sample might shift while animating the arc value (not recommended) addSwipes True Add swipe channel-channel box attributes to the attribute host sleeve Attribute Name Default Description doSleeve False Do sleeve feature. This feature will create a curbe and controls along the result interpolation joints of this module. This will result in the ability to control a sleeve position along the limb as well as many other features numSleeveJoints 3 The amount of joints to sample along the sleeve curve sleeveControlShape octagon Sleeve control shape sleeveCurveDegree 3 Sleeve curve degree sleeveBuildMode 0 Sleeve curve generation mode","title":"Limb settings"},{"location":"limb_settings/#limb-settings","text":"Author: Asaf Ben-Zur Best used for: Arms, Legs This module was designed to create a generic 3 joint limb control. This module will create both the FK and IK controls, and the standard blend control. On top of the standard behaviour, based on parameters, this module can also include bendy limb controls (as many as you want), Arc layer and Sleeve layer. Note: When used as a leg, try using the foot module as a direct child of this module to automatically achive a connected behaviour.","title":"limb Settings"},{"location":"limb_settings/#attributes","text":"","title":"Attributes"},{"location":"limb_settings/#globalsettings","text":"Attribute Name Default Description interpolationJoints 3 Comment wasn't inserted offsetX 20.0 Up curve X value offset for the interpolation joints offsetZ 0.0 Up curve Z value offset for the interpolation joints FKSymmetryType 0 FK controls symmetry type, in case it needs to differ from the main symmetry type scaleMode 2 Default scale mode. Please refer to the documentation of mnsPointsOnCurve node to learn more about each mode squashMode 0 Default squash mode. Please refer to the documentation of mnsPointsOnCurve node to learn more about each mode ikFkBlendDefault 0.0 Default value for the main IK-FK blend channel. 0 is IK, 1 is FK.","title":"GlobalSettings"},{"location":"limb_settings/#ik","text":"Attribute Name Default Description stretchLimit 1.0 IK Handle stratch limit default value softness 0.0 IK handle softness default value","title":"IK"},{"location":"limb_settings/#main-ctrl-shapes","text":"Attribute Name Default Description rootControlShape lightSphere Module root control control shape ikHandleControlShape square IK Handle control shape poleVectorControlShape diamond Pole Vector control shape fkControlShape hexagon FK controls shape tertiariesControlShape flatDiamond Tweak tertiary controls shape","title":"Main-Ctrl-Shapes"},{"location":"limb_settings/#tweakersbendy-limbs","text":"Attribute Name Default Description doTweakers False This feature will create a secondary tweak layer below the main control chain. This is commonly known as Bendy-Limbs tweakersSymmetryType 3 Tweak controls symmetry type, in case it needs to differ from the main symmetry type tweakersPerSection 1 The amount of bendy controls per section. A value of one will create two controls in total - one for the upper section of the limb, on for the lower section createExtraAttributes True If this is set to True, some extra tertiary channel-box control attributes will be added to the attribute-host tweakControlShape dialSquare Tweak controls shape negateOffsetOnSymmetry False If this is set to True, the above offsetX and offsetZ value for the up curve will be negated tweakersChannelControl T R S X v v v Y v v v Z v v v Tweak controls channel-box settings","title":"tweakers/bendy-Limbs"},{"location":"limb_settings/#arc","text":"Attribute Name Default Description doArc False This feature will use mnsThreePointArc node to create an automatic arc layer on the final curve output arcDegree 3 Arc's curve degree. Refer to mnsThreePointArc node documentation to learn more about this attribute arcSections 8 The amount of samples used to create the arc. Since three samples will create no effect (the result arc needs more points in between to describe the shape), use a higher value to create an effect. The higher the sample amount, the more precise the arc will be resampleCurveSections 16 Post creation sample amount collinearAction 0 this attribute will be used to dictate what to do when the limb is straight (the collinear case). Input curve will match the input curve plugged into this node (recommended), re-sample will create a new curve based on the node's attributes conformToMidPoint True If this is set to True, the node will attempt to pin the middle origin sample in its place, resulting in a much stabler result. If this is set to False, the middle origin sample might shift while animating the arc value (not recommended) addSwipes True Add swipe channel-channel box attributes to the attribute host","title":"arc"},{"location":"limb_settings/#sleeve","text":"Attribute Name Default Description doSleeve False Do sleeve feature. This feature will create a curbe and controls along the result interpolation joints of this module. This will result in the ability to control a sleeve position along the limb as well as many other features numSleeveJoints 3 The amount of joints to sample along the sleeve curve sleeveControlShape octagon Sleeve control shape sleeveCurveDegree 3 Sleeve curve degree sleeveBuildMode 0 Sleeve curve generation mode","title":"sleeve"},{"location":"lips/","text":"lips Author: Asaf Ben-Zur Best used for: Lips This module was designed around lips behaviour. This module has a few layers that will allow general as well as extremely fiddle control (based on parameters) over the lips deformation. Some of the main features in this module include: Macro corner controls, Along Surface feature, Around Center Feature, Jaw connections, Global \"Full-Lips\" control, Zip Controls, Curve meet controls, Tweak controls, Cheek Raise connection, and much more. The joint structure of this module will be dictated by input vertices on a given mesh. Defenitions construct Constructor: construct(mansur, MnsBuildModule, kwargs) Return: list (controls), dict (internalSpaces) Arguments: mansur MnsBuildModule kwargs Keyword Arguments: createBindCurvesFromModuleSettings Constructor: createBindCurvesFromModuleSettings(mansur, rootGuide = None) Return: None Arguments: mansur rootGuide ( str ) ; [default: None] Keyword Arguments: deconstruct Constructor: deconstruct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments: getEdgesFromModuleSettings Constructor: getEdgesFromModuleSettings(mansur, rootGuide = None) Return: None Arguments: mansur rootGuide ( str ) ; [default: None] Keyword Arguments: jointStructure Constructor: jointStructure(mansur, guides, mnsBuildModule = None, kwargs) Return: None Arguments: mansur guides mnsBuildModule ( str ) ; [default: None] kwargs Keyword Arguments: postConstruct Constructor: postConstruct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"Lips"},{"location":"lips/#lips","text":"Author: Asaf Ben-Zur Best used for: Lips This module was designed around lips behaviour. This module has a few layers that will allow general as well as extremely fiddle control (based on parameters) over the lips deformation. Some of the main features in this module include: Macro corner controls, Along Surface feature, Around Center Feature, Jaw connections, Global \"Full-Lips\" control, Zip Controls, Curve meet controls, Tweak controls, Cheek Raise connection, and much more. The joint structure of this module will be dictated by input vertices on a given mesh.","title":"lips"},{"location":"lips/#defenitions","text":"","title":"Defenitions"},{"location":"lips/#construct","text":"Constructor: construct(mansur, MnsBuildModule, kwargs) Return: list (controls), dict (internalSpaces) Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"construct"},{"location":"lips/#createbindcurvesfrommodulesettings","text":"Constructor: createBindCurvesFromModuleSettings(mansur, rootGuide = None) Return: None Arguments: mansur rootGuide ( str ) ; [default: None] Keyword Arguments:","title":"createBindCurvesFromModuleSettings"},{"location":"lips/#deconstruct","text":"Constructor: deconstruct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"deconstruct"},{"location":"lips/#getedgesfrommodulesettings","text":"Constructor: getEdgesFromModuleSettings(mansur, rootGuide = None) Return: None Arguments: mansur rootGuide ( str ) ; [default: None] Keyword Arguments:","title":"getEdgesFromModuleSettings"},{"location":"lips/#jointstructure","text":"Constructor: jointStructure(mansur, guides, mnsBuildModule = None, kwargs) Return: None Arguments: mansur guides mnsBuildModule ( str ) ; [default: None] kwargs Keyword Arguments:","title":"jointStructure"},{"location":"lips/#postconstruct","text":"Constructor: postConstruct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"postConstruct"},{"location":"lips_settings/","text":"lips Settings Author: Asaf Ben-Zur Best used for: Lips This module was designed around lips behaviour. This module has a few layers that will allow general as well as extremely fiddle control (based on parameters) over the lips deformation. Some of the main features in this module include: Macro corner controls, Along Surface feature, Around Center Feature, Jaw connections, Global \"Full-Lips\" control, Zip Controls, Curve meet controls, Tweak controls, Cheek Raise connection, and much more. The joint structure of this module will be dictated by input vertices on a given mesh. Attributes GlobalSettings Attribute Name Default Description upperEdgeVerts [' '] These verticies will be used to build the joint structure for the upper section. Please select a sequence of vertices along the same loop, starting from the inner corner. First and last vertices should match between the upper and lower section, representing a single closed loop. Corner vertices will be present twice- once on the upper section, once on the lower section lowerEdgeVerts [' '] These verticies will be used to build the joint structure for the lower section. Please select a sequence of vertices along the same loop, starting from the inner corner. First and last vertices should match between the upper and lower section, representing a single closed loop. Corner vertices will be present twice- once on the lower section, once on the lower section upCurveOffset 1.0 Comment wasn't inserted reverseCorners False Offset value for the up curve generation aroundCenter False Around center will normalize the result vectors around a given center matrix (module root in this case). This will provide a better range of motion, tranlating the joints around a sphere (assumed from the center matrix). This can be changed and animated post-construction curveResolution 24 Resample curve amount midCurveHeight 0.5 This dictates the height of the Mid-Meet point between the upper and lower sections jawRootGuide In case this module is used for lips (main use), input the Jaw control root guide. This will implement the Jaw control within the setup and will result in a better behaving setup AlongSurface Attribute Name Default Description doAlongSurface False In case it is desired, an internal surface(Nurbs)-follow mechanism is built in this module. In some cases, it is desired to model a pre-existing NurbsSurface that describes the range or limits of the joints related to this module. If a valid input is insrted, the setup will be created automatically. Remember that the follow controls will be pinned to the given surface, so remember to skin the surface to parent module which will follow the world position of the guide surface. Freezing transformation on the given setup is essential for this feature to behave as expected inputSurface Input surface (Nurbs) to follow CheekRaise Attribute Name Default Description doCheekRaise False when dealing with joint based facial deformation, and using this module as a lips setup, it is sometimes desired to incorporate another control that represents the cheek to achive a more lively deformation. Use this feature to do just that. Plug in the rootGuide of the cheeck control you wish to drive, then control the raise and push values based on your preferences or requirements l_CheekRaiseRoot Left side cheeck Root Guide r_CheekRaiseRoot Right side cheeck Root Guide raiseValue 0.5 Raise default value pushValue 0.5 Push-Out default value TweakCcontrols Attribute Name Default Description doTweakControls True First layer tweakers numTweakControlsPerSection 5 Number of tweak controls per section cornersControlShape triangle Tweak coreners control shape tweakersControlShape lightSphere Tweak controls shape tweakCurvesInterpolation 4 First layer tweaks curve interpolation type LayerBCtrls Attribute Name Default Description doLayerBCtrls True Second layer tweakers numLayerBCtrlsPerSection 9 Number of tweak controls per section layerBControlShape cube Second layer tweak controls shape","title":"Lips settings"},{"location":"lips_settings/#lips-settings","text":"Author: Asaf Ben-Zur Best used for: Lips This module was designed around lips behaviour. This module has a few layers that will allow general as well as extremely fiddle control (based on parameters) over the lips deformation. Some of the main features in this module include: Macro corner controls, Along Surface feature, Around Center Feature, Jaw connections, Global \"Full-Lips\" control, Zip Controls, Curve meet controls, Tweak controls, Cheek Raise connection, and much more. The joint structure of this module will be dictated by input vertices on a given mesh.","title":"lips Settings"},{"location":"lips_settings/#attributes","text":"","title":"Attributes"},{"location":"lips_settings/#globalsettings","text":"Attribute Name Default Description upperEdgeVerts [' '] These verticies will be used to build the joint structure for the upper section. Please select a sequence of vertices along the same loop, starting from the inner corner. First and last vertices should match between the upper and lower section, representing a single closed loop. Corner vertices will be present twice- once on the upper section, once on the lower section lowerEdgeVerts [' '] These verticies will be used to build the joint structure for the lower section. Please select a sequence of vertices along the same loop, starting from the inner corner. First and last vertices should match between the upper and lower section, representing a single closed loop. Corner vertices will be present twice- once on the lower section, once on the lower section upCurveOffset 1.0 Comment wasn't inserted reverseCorners False Offset value for the up curve generation aroundCenter False Around center will normalize the result vectors around a given center matrix (module root in this case). This will provide a better range of motion, tranlating the joints around a sphere (assumed from the center matrix). This can be changed and animated post-construction curveResolution 24 Resample curve amount midCurveHeight 0.5 This dictates the height of the Mid-Meet point between the upper and lower sections jawRootGuide In case this module is used for lips (main use), input the Jaw control root guide. This will implement the Jaw control within the setup and will result in a better behaving setup","title":"GlobalSettings"},{"location":"lips_settings/#alongsurface","text":"Attribute Name Default Description doAlongSurface False In case it is desired, an internal surface(Nurbs)-follow mechanism is built in this module. In some cases, it is desired to model a pre-existing NurbsSurface that describes the range or limits of the joints related to this module. If a valid input is insrted, the setup will be created automatically. Remember that the follow controls will be pinned to the given surface, so remember to skin the surface to parent module which will follow the world position of the guide surface. Freezing transformation on the given setup is essential for this feature to behave as expected inputSurface Input surface (Nurbs) to follow","title":"AlongSurface"},{"location":"lips_settings/#cheekraise","text":"Attribute Name Default Description doCheekRaise False when dealing with joint based facial deformation, and using this module as a lips setup, it is sometimes desired to incorporate another control that represents the cheek to achive a more lively deformation. Use this feature to do just that. Plug in the rootGuide of the cheeck control you wish to drive, then control the raise and push values based on your preferences or requirements l_CheekRaiseRoot Left side cheeck Root Guide r_CheekRaiseRoot Right side cheeck Root Guide raiseValue 0.5 Raise default value pushValue 0.5 Push-Out default value","title":"CheekRaise"},{"location":"lips_settings/#tweakccontrols","text":"Attribute Name Default Description doTweakControls True First layer tweakers numTweakControlsPerSection 5 Number of tweak controls per section cornersControlShape triangle Tweak coreners control shape tweakersControlShape lightSphere Tweak controls shape tweakCurvesInterpolation 4 First layer tweaks curve interpolation type","title":"TweakCcontrols"},{"location":"lips_settings/#layerbctrls","text":"Attribute Name Default Description doLayerBCtrls True Second layer tweakers numLayerBCtrlsPerSection 9 Number of tweak controls per section layerBControlShape cube Second layer tweak controls shape","title":"LayerBCtrls"},{"location":"log/","text":"log === Author: Assaf Ben Zur === Core mns logger. This module contains the mns logger which will construct a log based on given parametrs. All logs are written to the defined log file dectated by the project globals. In case a log doesn't exists it will be automatically created. Defenitions getCurrentFunctionName Constructor: getCurrentFunctionName() Return: None Arguments: Keyword Arguments: getPreviousFunctionName Constructor: getPreviousFunctionName() Return: None Arguments: Keyword Arguments: log Core logger function. Given a message line and a severity parameter, log the line into the log file. In case the log file doesn't exist, create one. In case the directory doesn't exist, create one. An output message is printed into the consule based on the severity. severities(svr): 0 = log 1 = msg 2 = warning 3 = error 4 = fatal Constructor: log(msg = \"\", kwargs) Return: None Arguments: msg ( str ) ; [default: \"\"] kwargs Keyword Arguments: svr ( int ) - set the sevarity of the log message currentContextRequested ( bool ) - in case a global context log was called logCurrentFrame Log the current requested frame. The frame is collected procedurally from the dtack, without needing to pass any arguments into methed. Constructor: logCurrentFrame() Return: None Arguments: Keyword Arguments: validateLogRootDirectory Validate log directory existence within the current project folder. Constructor: validateLogRootDirectory() Return: string (log directory path) Arguments: Keyword Arguments:","title":"Log"},{"location":"log/#log","text":"=== Author: Assaf Ben Zur === Core mns logger. This module contains the mns logger which will construct a log based on given parametrs. All logs are written to the defined log file dectated by the project globals. In case a log doesn't exists it will be automatically created.","title":"log"},{"location":"log/#defenitions","text":"","title":"Defenitions"},{"location":"log/#getcurrentfunctionname","text":"Constructor: getCurrentFunctionName() Return: None Arguments: Keyword Arguments:","title":"getCurrentFunctionName"},{"location":"log/#getpreviousfunctionname","text":"Constructor: getPreviousFunctionName() Return: None Arguments: Keyword Arguments:","title":"getPreviousFunctionName"},{"location":"log/#log_1","text":"Core logger function. Given a message line and a severity parameter, log the line into the log file. In case the log file doesn't exist, create one. In case the directory doesn't exist, create one. An output message is printed into the consule based on the severity. severities(svr): 0 = log 1 = msg 2 = warning 3 = error 4 = fatal Constructor: log(msg = \"\", kwargs) Return: None Arguments: msg ( str ) ; [default: \"\"] kwargs Keyword Arguments: svr ( int ) - set the sevarity of the log message currentContextRequested ( bool ) - in case a global context log was called","title":"log"},{"location":"log/#logcurrentframe","text":"Log the current requested frame. The frame is collected procedurally from the dtack, without needing to pass any arguments into methed. Constructor: logCurrentFrame() Return: None Arguments: Keyword Arguments:","title":"logCurrentFrame"},{"location":"log/#validatelogrootdirectory","text":"Validate log directory existence within the current project folder. Constructor: validateLogRootDirectory() Return: string (log directory path) Arguments: Keyword Arguments:","title":"validateLogRootDirectory"},{"location":"logviewer/","text":"logviewer === Author: Assaf Ben Zur === Core Mns log viewer class UI. This is a core utility UI to allow an admin or a user to read any mns log item in a readable manner. This UI allows many filtering abilities to nicely view a log, which by itself is human unredablble. Features: - log tree view tab to manipulate/remove/add/reload files and directories. - 'Depth View' option to cascade the log view based on log depth. - log items flagging and commenting - Search ability - Filtering : - Time based filtering - Flag based filtering - Severity based filtering - log exporting - log clearing - flag scroll feature IMPORTANT NOTE: Log files are being created automatically within the core logger based on project settings. There is a core log-file size management within the logger NOT whithin this module. The max-log file size can be changed through the global mns settings. File management is being handled when writing logs- the logger will check whether the curent file to write has passed it's limit before writing. If found that it does, before writing the new log a set number of lines will be automatically deleted from the beggening of the log file. In order to maintain preformance more then one line is being deleted each time, as re-reading and re-writing of the log will be quite slow in case of the need to do so each time a new log line needs to be entered when the file size has passed it's limit. When deleting multiple lines the logger only needs to do so every once for every x (50-100) logs entered when file size is approaching it's limit. Classes MnsLogViewer [Class] Main UI class Constructor: MnsLogViewer( parent ( str ) ; [default: mnsUIUtils.get_maya_window()]) Inherits from: form_class, base_class Class Members: iconsDir openedLog Methods: initView [method] collapseFolder [method] expandFolder [method] validateItemToUIState [method] processLogLine [method] addFileItem [method] addFolderItem [method] loadWindow [method] clearAllFlags [method] clearSearch [method] connectSignals [method] clearLog [method] flag [method] loadDirectoryLogs [method] loadLib [method] updateView [method] loadLog [method] openMenu [method] searchCurrent [method] uncheckAllSvr [method] checkAllSvr [method] MnsLogViewer methods initView [ MnsLogViewer class method] Constructor: initView(self) Return: None Arguments: self Optional Arguments: collapseFolder [ MnsLogViewer class method] Constructor: collapseFolder(self, QTreeWidgetItem) Return: None Arguments: self QTreeWidgetItem Optional Arguments: expandFolder [ MnsLogViewer class method] Constructor: expandFolder(self, QTreeWidgetItem) Return: None Arguments: self QTreeWidgetItem Optional Arguments: validateItemToUIState [ MnsLogViewer class method] Constructor: validateItemToUIState(self, item) Return: None Arguments: self item Optional Arguments: processLogLine [ MnsLogViewer class method] Constructor: processLogLine(self, line) Return: None Arguments: self line Optional Arguments: addFileItem [ MnsLogViewer class method] Constructor: addFileItem(self, parentItem, fullDirectory) Return: None Arguments: self parentItem fullDirectory Optional Arguments: addFolderItem [ MnsLogViewer class method] Constructor: addFolderItem(self, parentItem, fullDirectory) Return: None Arguments: self parentItem fullDirectory Optional Arguments: loadWindow [ MnsLogViewer class method] Main window load. Constructor: loadWindow(self) Return: None Arguments: self Optional Arguments: clearAllFlags [ MnsLogViewer class method] Clear all flags in the log file wrapper method trigger. Constructor: clearAllFlags(self) Return: None Arguments: self Optional Arguments: clearSearch [ MnsLogViewer class method] Clear search field method trigger. Constructor: clearSearch(self) Return: None Arguments: self Optional Arguments: connectSignals [ MnsLogViewer class method] Connect all the UI signals Constructor: connectSignals(self) Return: None Arguments: self Optional Arguments: clearLog [ MnsLogViewer class method] Delete a selected log file. Prompt dialog confirm dependent. Constructor: clearLog(self, item) Return: None Arguments: self item Optional Arguments: flag [ MnsLogViewer class method] Flag method. This method will flag/unflag a given log item file directly, then update the view. Instead of flaggin the item in view only (session based), the flagging is being done directly in the log file as a custom parameter. After the flag is made or cleared an 'update view' is being triggered to reload the view, flagging items if neccessary within the UI for user display. Constructor: flag(self, kwargs) Return: None Arguments: self kwargs Optional Arguments: loadDirectoryLogs [ MnsLogViewer class method] Load directory finction trigger. Constructor: loadDirectoryLogs(self, directory = None, parentItem = None) Return: None Arguments: self directory ( str ) ; [default: None] parentItem ( str ) ; [default: None] Optional Arguments: loadLib [ MnsLogViewer class method] Load library method trigger. Constructor: loadLib(self) Return: None Arguments: self Optional Arguments: updateView [ MnsLogViewer class method] Log view update wrapper. Update the log view depending on the UI state Constructor: updateView(self, kwargs) Return: None Arguments: self kwargs Optional Arguments: loadLog [ MnsLogViewer class method] Read a log file wrapper. Constructor: loadLog(self, logQTreeWidgetItem) Return: None Arguments: self logQTreeWidgetItem Optional Arguments: openMenu [ MnsLogViewer class method] Right click context menu command for the log-files tree view. Constructor: openMenu(self, position) Return: None Arguments: self position Optional Arguments: searchCurrent [ MnsLogViewer class method] Search current double clicked item method trigger. Constructor: searchCurrent(self) Return: None Arguments: self Optional Arguments: uncheckAllSvr [ MnsLogViewer class method] Set all severity check-box items to False wrapper. Constructor: uncheckAllSvr(self) Return: None Arguments: self Optional Arguments: checkAllSvr [ MnsLogViewer class method] Set all severity check-box items to True wrapper. Constructor: checkAllSvr(self) Return: None Arguments: self Optional Arguments:","title":"Logviewer"},{"location":"logviewer/#logviewer","text":"=== Author: Assaf Ben Zur === Core Mns log viewer class UI. This is a core utility UI to allow an admin or a user to read any mns log item in a readable manner. This UI allows many filtering abilities to nicely view a log, which by itself is human unredablble. Features: - log tree view tab to manipulate/remove/add/reload files and directories. - 'Depth View' option to cascade the log view based on log depth. - log items flagging and commenting - Search ability - Filtering : - Time based filtering - Flag based filtering - Severity based filtering - log exporting - log clearing - flag scroll feature IMPORTANT NOTE: Log files are being created automatically within the core logger based on project settings. There is a core log-file size management within the logger NOT whithin this module. The max-log file size can be changed through the global mns settings. File management is being handled when writing logs- the logger will check whether the curent file to write has passed it's limit before writing. If found that it does, before writing the new log a set number of lines will be automatically deleted from the beggening of the log file. In order to maintain preformance more then one line is being deleted each time, as re-reading and re-writing of the log will be quite slow in case of the need to do so each time a new log line needs to be entered when the file size has passed it's limit. When deleting multiple lines the logger only needs to do so every once for every x (50-100) logs entered when file size is approaching it's limit.","title":"logviewer"},{"location":"logviewer/#classes","text":"","title":"Classes"},{"location":"logviewer/#mnslogviewer-class","text":"Main UI class Constructor: MnsLogViewer( parent ( str ) ; [default: mnsUIUtils.get_maya_window()]) Inherits from: form_class, base_class Class Members: iconsDir openedLog Methods: initView [method] collapseFolder [method] expandFolder [method] validateItemToUIState [method] processLogLine [method] addFileItem [method] addFolderItem [method] loadWindow [method] clearAllFlags [method] clearSearch [method] connectSignals [method] clearLog [method] flag [method] loadDirectoryLogs [method] loadLib [method] updateView [method] loadLog [method] openMenu [method] searchCurrent [method] uncheckAllSvr [method] checkAllSvr [method]","title":"MnsLogViewer [Class]"},{"location":"logviewer/#mnslogviewer-methods","text":"","title":"MnsLogViewer  methods"},{"location":"lookAtControl/","text":"lookAtControl Author: Asaf Ben-Zur Best used for: Eyes, Generic Orientation based components This module was written to function as an eye IK (look at setup), but can be used for many other generic components. This module will create a slave control (at root position) which is aim-constraint to custom look-at guide. The slave control will be the control authority for the joint, as the look-at control will control its orientation. Defenitions construct Constructor: construct(mansur, MnsBuildModule, kwargs) Return: list (controls), dict (internalSpaces), MnsNameStd (moduleSpaceAttrHost) Arguments: mansur MnsBuildModule kwargs Keyword Arguments: customGuides Constructor: customGuides(mansur, builtGuides) Return: None Arguments: mansur builtGuides Keyword Arguments:","title":"lookAtControl"},{"location":"lookAtControl/#lookatcontrol","text":"Author: Asaf Ben-Zur Best used for: Eyes, Generic Orientation based components This module was written to function as an eye IK (look at setup), but can be used for many other generic components. This module will create a slave control (at root position) which is aim-constraint to custom look-at guide. The slave control will be the control authority for the joint, as the look-at control will control its orientation.","title":"lookAtControl"},{"location":"lookAtControl/#defenitions","text":"","title":"Defenitions"},{"location":"lookAtControl/#construct","text":"Constructor: construct(mansur, MnsBuildModule, kwargs) Return: list (controls), dict (internalSpaces), MnsNameStd (moduleSpaceAttrHost) Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"construct"},{"location":"lookAtControl/#customguides","text":"Constructor: customGuides(mansur, builtGuides) Return: None Arguments: mansur builtGuides Keyword Arguments:","title":"customGuides"},{"location":"lookAtControl_settings/","text":"lookAtControl Settings Author: Asaf Ben-Zur Best used for: Eyes, Generic Orientation based components This module was written to function as an eye IK (look at setup), but can be used for many other generic components. This module will create a slave control (at root position) which is aim-constraint to custom look-at guide. The slave control will be the control authority for the joint, as the look-at control will control its orientation. Attributes GlobalSettings Attribute Name Default Description slaveControlShape lightSphere Origin slave control shape targetControlShape circle Main control shape upLocalDirection 0 Main control shape channelControl T R S X v v v Y v v v Z v v v Main control channel-box settings spring Attribute Name Default Description doLookAtSpring False This feature will create a spring node blowe the look-at master. This will result in a rotation-based spring, mostly used for vehicle center suspension to achive secondary motion. defaultStiffness 0.5 Comment wasn't inserted defaultDamping 0.5 Comment wasn't inserted asEyeLook Attribute Name Default Description pupilDilateAttribute Input bland-shape attribute to connect pupil dialation control to pupilContractAttribute Input bland-shape attribute to connect pupil contaction control to irisDilateAttribute Input bland-shape attribute to connect iris dialation control to irisContractAttribute Input bland-shape attribute to connect iris contaction control to combinedAttributeHost If this is set to True, a global attribute for the above pupil and iris controls will be created on the specified attribute host. This feature is mainly to combine two different eye shapes controls into one single control, or moving the location of this attribute to a diffent module in case the eye meshs are combined","title":"lookAtControl settings"},{"location":"lookAtControl_settings/#lookatcontrol-settings","text":"Author: Asaf Ben-Zur Best used for: Eyes, Generic Orientation based components This module was written to function as an eye IK (look at setup), but can be used for many other generic components. This module will create a slave control (at root position) which is aim-constraint to custom look-at guide. The slave control will be the control authority for the joint, as the look-at control will control its orientation.","title":"lookAtControl Settings"},{"location":"lookAtControl_settings/#attributes","text":"","title":"Attributes"},{"location":"lookAtControl_settings/#globalsettings","text":"Attribute Name Default Description slaveControlShape lightSphere Origin slave control shape targetControlShape circle Main control shape upLocalDirection 0 Main control shape channelControl T R S X v v v Y v v v Z v v v Main control channel-box settings","title":"GlobalSettings"},{"location":"lookAtControl_settings/#spring","text":"Attribute Name Default Description doLookAtSpring False This feature will create a spring node blowe the look-at master. This will result in a rotation-based spring, mostly used for vehicle center suspension to achive secondary motion. defaultStiffness 0.5 Comment wasn't inserted defaultDamping 0.5 Comment wasn't inserted","title":"spring"},{"location":"lookAtControl_settings/#aseyelook","text":"Attribute Name Default Description pupilDilateAttribute Input bland-shape attribute to connect pupil dialation control to pupilContractAttribute Input bland-shape attribute to connect pupil contaction control to irisDilateAttribute Input bland-shape attribute to connect iris dialation control to irisContractAttribute Input bland-shape attribute to connect iris contaction control to combinedAttributeHost If this is set to True, a global attribute for the above pupil and iris controls will be created on the specified attribute host. This feature is mainly to combine two different eye shapes controls into one single control, or moving the location of this attribute to a diffent module in case the eye meshs are combined","title":"asEyeLook"},{"location":"meshUtility/","text":"meshUtility Defenitions getShapeFromTransform Constructor: getShapeFromTransform(node, inter=False) Return: None Arguments: node inter ( bool ) ; [default: False] Keyword Arguments: getSymDictForMesh Constructor: getSymDictForMesh(meshName = \"\", tolerance = 0.02) Return: None Arguments: meshName ( str ) ; [default: \"\"] tolerance ( float ) ; [default: 0.02] Keyword Arguments:","title":"meshUtility"},{"location":"meshUtility/#meshutility","text":"","title":"meshUtility"},{"location":"meshUtility/#defenitions","text":"","title":"Defenitions"},{"location":"meshUtility/#getshapefromtransform","text":"Constructor: getShapeFromTransform(node, inter=False) Return: None Arguments: node inter ( bool ) ; [default: False] Keyword Arguments:","title":"getShapeFromTransform"},{"location":"meshUtility/#getsymdictformesh","text":"Constructor: getSymDictForMesh(meshName = \"\", tolerance = 0.02) Return: None Arguments: meshName ( str ) ; [default: \"\"] tolerance ( float ) ; [default: 0.02] Keyword Arguments:","title":"getSymDictForMesh"},{"location":"meta/","text":"meta Author: Asaf Ben-Zur Best used for: Metacarpal (Fingers), Metatarsal (Toes) This module will create a control for every root guide position, as well as a few global splay controls for the collection of controls based on settings. The play controls will behave as a global tweaker for the control collection, allowing easier animation. In order to implement \"splayB\" feature, simply parent a FK chain modules under each of the main meta guides. This module construction will try to detect a FK module under each guide, and if any exist, will create the second layer splay control for these FK chains. Defenitions construct Constructor: construct(mansur, MnsBuildModule, kwargs) Return: list (controls), dict (internalSpaces), MnsNameStd (moduleSpaceAttrHost) Arguments: mansur MnsBuildModule kwargs Keyword Arguments: postConstruct Constructor: postConstruct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"Meta"},{"location":"meta/#meta","text":"Author: Asaf Ben-Zur Best used for: Metacarpal (Fingers), Metatarsal (Toes) This module will create a control for every root guide position, as well as a few global splay controls for the collection of controls based on settings. The play controls will behave as a global tweaker for the control collection, allowing easier animation. In order to implement \"splayB\" feature, simply parent a FK chain modules under each of the main meta guides. This module construction will try to detect a FK module under each guide, and if any exist, will create the second layer splay control for these FK chains.","title":"meta"},{"location":"meta/#defenitions","text":"","title":"Defenitions"},{"location":"meta/#construct","text":"Constructor: construct(mansur, MnsBuildModule, kwargs) Return: list (controls), dict (internalSpaces), MnsNameStd (moduleSpaceAttrHost) Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"construct"},{"location":"meta/#postconstruct","text":"Constructor: postConstruct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"postConstruct"},{"location":"meta_settings/","text":"meta Settings Author: Asaf Ben-Zur Best used for: Metacarpal (Fingers), Metatarsal (Toes) This module will create a control for every root guide position, as well as a few global splay controls for the collection of controls based on settings. The play controls will behave as a global tweaker for the control collection, allowing easier animation. In order to implement \"splayB\" feature, simply parent a FK chain modules under each of the main meta guides. This module construction will try to detect a FK module under each guide, and if any exist, will create the second layer splay control for these FK chains. Attributes GlobalSettings Attribute Name Default Description tweakersControlShape cone Meta main controls shape tweakerChannelControl T R S X v v v Y v v v Z v v v Meta control channel-box settings SplaySettings Attribute Name Default Description doSplayA True Choose if you want to create Splay A control doSplayAMid True Choose if you want to create Splay A Mid control doSplayB True Choose if you want to create Splay B control doSplayBMid True Choose if you want to create Splay B Mid control splayControlShape diamond splay controls shape splayChannelControl T R S X v v Y v v Z v v Splay control channel-box settings","title":"Meta settings"},{"location":"meta_settings/#meta-settings","text":"Author: Asaf Ben-Zur Best used for: Metacarpal (Fingers), Metatarsal (Toes) This module will create a control for every root guide position, as well as a few global splay controls for the collection of controls based on settings. The play controls will behave as a global tweaker for the control collection, allowing easier animation. In order to implement \"splayB\" feature, simply parent a FK chain modules under each of the main meta guides. This module construction will try to detect a FK module under each guide, and if any exist, will create the second layer splay control for these FK chains.","title":"meta Settings"},{"location":"meta_settings/#attributes","text":"","title":"Attributes"},{"location":"meta_settings/#globalsettings","text":"Attribute Name Default Description tweakersControlShape cone Meta main controls shape tweakerChannelControl T R S X v v v Y v v v Z v v v Meta control channel-box settings","title":"GlobalSettings"},{"location":"meta_settings/#splaysettings","text":"Attribute Name Default Description doSplayA True Choose if you want to create Splay A control doSplayAMid True Choose if you want to create Splay A Mid control doSplayB True Choose if you want to create Splay B control doSplayBMid True Choose if you want to create Splay B Mid control splayControlShape diamond splay controls shape splayChannelControl T R S X v v Y v v Z v v Splay control channel-box settings","title":"SplaySettings"},{"location":"moduleVisUI/","text":"moduleVisUI === Author: Assaf Ben Zur === mnsModuleVisUI A simple UI to control puppet's module animation controls visibility. Classes MnsModuleVisUI [Class] Main UI Class Constructor: MnsModuleVisUI( parent ( str ) ; [default: mnsUIUtils.get_maya_window()]) Inherits from: form_class, base_class Class Members: iconDir bodyLOHolder facialLOHolder layoutHolders puppetRoot rigTop rigTops moduleAttrs btnDict allBtnDict layoutByAttrs Methods: clearLocalVars [method] destroyUI [method] drawUI [method] filterRows [method] getAttrsFromPuppetRoot [method] getUITabState [method] initializeRigTopTab [method] initializeUI [method] refresh [method] setGlobAllTrigger [method] setGlobPrimariesTrigger [method] setGlobSecondariesTrigger [method] setGlobTertiariesTrigger [method] setRowsVisBasedOnState [method] detarmineAttrType [method] drawRigTopBoolRow [method] drawRigTopEnumRow [method] toggleAllStateForRow [method] changeModuleVisState [method] drawModuleRow [method] setRowVisBasedOnState [method] setRigTopBoolAttrState [method] setRigTopBtnState [method] connectSignals [method] loadWindow [method] MnsModuleVisUI methods clearLocalVars [ MnsModuleVisUI class method] Constructor: clearLocalVars(self) Return: None Arguments: self Optional Arguments: destroyUI [ MnsModuleVisUI class method] Constructor: destroyUI(self) Return: None Arguments: self Optional Arguments: drawUI [ MnsModuleVisUI class method] Constructor: drawUI(self) Return: None Arguments: self Optional Arguments: filterRows [ MnsModuleVisUI class method] Constructor: filterRows(self) Return: None Arguments: self Optional Arguments: getAttrsFromPuppetRoot [ MnsModuleVisUI class method] Constructor: getAttrsFromPuppetRoot(self) Return: None Arguments: self Optional Arguments: getUITabState [ MnsModuleVisUI class method] Constructor: getUITabState(self) Return: None Arguments: self Optional Arguments: initializeRigTopTab [ MnsModuleVisUI class method] Constructor: initializeRigTopTab(self) Return: None Arguments: self Optional Arguments: initializeUI [ MnsModuleVisUI class method] Constructor: initializeUI(self) Return: None Arguments: self Optional Arguments: refresh [ MnsModuleVisUI class method] Constructor: refresh(self) Return: None Arguments: self Optional Arguments: setGlobAllTrigger [ MnsModuleVisUI class method] Constructor: setGlobAllTrigger(self) Return: None Arguments: self Optional Arguments: setGlobPrimariesTrigger [ MnsModuleVisUI class method] Constructor: setGlobPrimariesTrigger(self) Return: None Arguments: self Optional Arguments: setGlobSecondariesTrigger [ MnsModuleVisUI class method] Constructor: setGlobSecondariesTrigger(self) Return: None Arguments: self Optional Arguments: setGlobTertiariesTrigger [ MnsModuleVisUI class method] Constructor: setGlobTertiariesTrigger(self) Return: None Arguments: self Optional Arguments: setRowsVisBasedOnState [ MnsModuleVisUI class method] Constructor: setRowsVisBasedOnState(self) Return: None Arguments: self Optional Arguments: detarmineAttrType [ MnsModuleVisUI class method] Constructor: detarmineAttrType(self, attr) Return: None Arguments: self attr Optional Arguments: drawRigTopBoolRow [ MnsModuleVisUI class method] Constructor: drawRigTopBoolRow(self, attr) Return: None Arguments: self attr Optional Arguments: drawRigTopEnumRow [ MnsModuleVisUI class method] Constructor: drawRigTopEnumRow(self, attr) Return: None Arguments: self attr Optional Arguments: toggleAllStateForRow [ MnsModuleVisUI class method] Constructor: toggleAllStateForRow(self, attr) Return: None Arguments: self attr Optional Arguments: changeModuleVisState [ MnsModuleVisUI class method] Constructor: changeModuleVisState(self, attr, dummy) Return: None Arguments: self attr dummy Optional Arguments: drawModuleRow [ MnsModuleVisUI class method] Constructor: drawModuleRow(self, attr = None, layoutParent = None) Return: None Arguments: self attr ( str ) ; [default: None] layoutParent ( str ) ; [default: None] Optional Arguments: setRowVisBasedOnState [ MnsModuleVisUI class method] Constructor: setRowVisBasedOnState(self, attrKey) Return: None Arguments: self attrKey Optional Arguments: setRigTopBoolAttrState [ MnsModuleVisUI class method] Constructor: setRigTopBoolAttrState(self, btn, attr, setCurrentState = False) Return: None Arguments: self btn attr setCurrentState ( bool ) ; [default: False] Optional Arguments: setRigTopBtnState [ MnsModuleVisUI class method] Constructor: setRigTopBtnState(self, visBtn, typeBtn, attr, btnType = 0, setCurrentState = False) Return: None Arguments: self visBtn typeBtn attr btnType ( int ) ; [default: 0] setCurrentState ( bool ) ; [default: False] Optional Arguments: connectSignals [ MnsModuleVisUI class method] Connect all UI signals Constructor: connectSignals(self) Return: None Arguments: self Optional Arguments: loadWindow [ MnsModuleVisUI class method] Main UI load Constructor: loadWindow(self) Return: None Arguments: self Optional Arguments:","title":"moduleVisUI"},{"location":"moduleVisUI/#modulevisui","text":"=== Author: Assaf Ben Zur === mnsModuleVisUI A simple UI to control puppet's module animation controls visibility.","title":"moduleVisUI"},{"location":"moduleVisUI/#classes","text":"","title":"Classes"},{"location":"moduleVisUI/#mnsmodulevisui-class","text":"Main UI Class Constructor: MnsModuleVisUI( parent ( str ) ; [default: mnsUIUtils.get_maya_window()]) Inherits from: form_class, base_class Class Members: iconDir bodyLOHolder facialLOHolder layoutHolders puppetRoot rigTop rigTops moduleAttrs btnDict allBtnDict layoutByAttrs Methods: clearLocalVars [method] destroyUI [method] drawUI [method] filterRows [method] getAttrsFromPuppetRoot [method] getUITabState [method] initializeRigTopTab [method] initializeUI [method] refresh [method] setGlobAllTrigger [method] setGlobPrimariesTrigger [method] setGlobSecondariesTrigger [method] setGlobTertiariesTrigger [method] setRowsVisBasedOnState [method] detarmineAttrType [method] drawRigTopBoolRow [method] drawRigTopEnumRow [method] toggleAllStateForRow [method] changeModuleVisState [method] drawModuleRow [method] setRowVisBasedOnState [method] setRigTopBoolAttrState [method] setRigTopBtnState [method] connectSignals [method] loadWindow [method]","title":"MnsModuleVisUI [Class]"},{"location":"moduleVisUI/#mnsmodulevisui-methods","text":"","title":"MnsModuleVisUI  methods"},{"location":"nodes/","text":"nodes === Author: Assaf Ben Zur === Mns nodes utility module. All node creation functions are covered by this module Defenitions adlNode Create a new addDoubleLinear node using the given inputs. Constructor: adlNode(input1 = None, input2 = None, output = None, kwargs) Return: MnsNameStd (addDoubleLinear node) Arguments: input1 ( str ) ; [default: None] input2 ( str ) ; [default: None] output ( str ) ; [default: None] kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: addDoubleLinear] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True blendColorsNode Create a new multiply devide node using the given inputs. Constructor: blendColorsNode(color1 = None, color2 = None, blender = None, output = None, kwargs) Return: MnsNameStd (MultiplyDevide node) Arguments: color1 ( str ) ; [default: None] color2 ( str ) ; [default: None] blender ( str ) ; [default: None] output ( str ) ; [default: None] kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: multDev] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID operation ( int ) ; [default: 1] incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True buildGeoAxisVis Utility aid function: Creates a Axis-Vis geometry object based on parameters Constructor: buildGeoAxisVis( kwargs) Return: MnsNameStd (created vis-geo object) Arguments: kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: pointsOnCurve] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True scale ( int ) ; [default: 1] - Relative to parent axisSubdevision ( int ) ; [default: 16] - Geometry cylinder axis subdevision cylinderWidth ( float ) ; [default: 0.015] deleteAll ( bool ) - If true, do not attempt to create any objects- instead look for any existing objects and delete them buildGeoAxisVisForParents Utility aid function. Created an Axis-Vis geometry object from each object within the list passed in. Constructor: buildGeoAxisVisForParents( kwargs) Return: dict ('visGeoObjs': visGeoMnsNameStdArray, 'visGeoObjsNodes': visGeoNodeArray) Arguments: kwargs Keyword Arguments: parentObjs ( list ) ; [default: [' ']] - If parent is empty, visGeo will not build parentMethod ( int ) scale ( int ) ; [default: 1] - Relative to parent axisSubdevision ( int ) ; [default: 16] - Geometry cylinder axis subdevision cylinderWidth ( float ) ; [default: 0.015] createNodeRelationship ( bool ) ; [default: True] buildVisCubesForPSOCNode Single use function. From a given MnsPointsOnCurve node, create output 'visCubes'. Constructor: buildVisCubesForPSOCNode(node = \"\", kwargs) Return: dict ('visCubesStds': output MnsNameStd list, 'nodes': output node list ) Arguments: node ( str ) ; [default: \"\"] kwargs Keyword Arguments: gapWidth ( float ) ; [default: 0.1] choiceNode Create a new choice node using the given inputs. Constructor: choiceNode(inputs = [], output = None, kwargs) Return: MnsNameStd (choice node) Arguments: inputs ( list ) ; [default: []] output ( str ) ; [default: None] kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: choice] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True clampNode Create a new clamp node using the given inputs. Constructor: clampNode(inputA = [], maxA = [], minA = [], output = [], kwargs) Return: MnsNameStd (reverse node) Arguments: inputA ( list ) ; [default: []] maxA ( list ) ; [default: []] minA ( list ) ; [default: []] output ( list ) ; [default: []] kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: clamp] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True conditionNode Create a new condition node using the given inputs. Constructor: conditionNode(firstTerm = None, secondTerm = None, colorIfTrue = None, colorIfFalse = None, outColor = None, kwargs) Return: MnsNameStd (condition node) Arguments: firstTerm ( str ) ; [default: None] secondTerm ( str ) ; [default: None] colorIfTrue ( str ) ; [default: None] colorIfFalse ( str ) ; [default: None] outColor ( str ) ; [default: None] kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: condition] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID operation ( int ) incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True connectAttrAttempt Attempt to connect the sourceAttr given to the target attribute passed in. Constructor: connectAttrAttempt(attrA, nodeAttr) Return: bool (sucess status) Arguments: attrA nodeAttr Keyword Arguments: connectSetAttempt Attemp to connect the values passed in. If a failue status was return, attempt a 'setAttr' next. Constructor: connectSetAttempt(attrA, nodeAttr, valType) Return: bool (sucess status) Arguments: attrA nodeAttr valType Keyword Arguments: decomposeMatrixNode Create a new multiplyDoubleLinear node using the given inputs. Constructor: decomposeMatrixNode(inputMatrix = None, outputTranslate = None, outputRotate = None, outputScale = None, kwargs) Return: MnsNameStd (multiplyDoubleLinear node) Arguments: inputMatrix ( str ) ; [default: None] outputTranslate ( str ) ; [default: None] outputRotate ( str ) ; [default: None] outputScale ( str ) ; [default: None] kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: decomposeMatrix] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True distBetweenNode Create a new distanceBetween node using the given inputs. Constructor: distBetweenNode(inMatrix1 = None, inMatrix2 = None, distance = None, kwargs) Return: MnsNameStd (distance between node) Arguments: inMatrix1 ( str ) ; [default: None] inMatrix2 ( str ) ; [default: None] distance ( str ) ; [default: None] kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: distBetween] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID operation ( int ) incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True imagePlaneNode Create a new imagePlane node using the given inputs. Constructor: imagePlaneNode(camera = None, kwargs) Return: MnsNameStd (imagePlane node) Arguments: camera ( str ) ; [default: None] kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: imagePlane] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True inverseMatrixNode Create a new inverseMatrix node using the given inputs. Constructor: inverseMatrixNode(inputMatrix = None, outputMatrix = None, kwargs) Return: MnsNameStd (inverseMatrix node) Arguments: inputMatrix ( str ) ; [default: None] outputMatrix ( str ) ; [default: None] kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: choice] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True mayaConstraint Create a new constraint node using the given inputs. Constructor: mayaConstraint(sources = [], target = None, kwargs) Return: MnsNameStd (constraint node) Arguments: sources ( list ) ; [default: []] target ( str ) ; [default: None] kwargs Keyword Arguments: type ( str ) ; [default: parent] - side flag side ( str ) ; [default: center] - side flag body ( str ) ; [default: cnsType+Constraint] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True maintainOffset ( bool ) - Node's maintainOffset attribute aimVector ( list ) ; [default: [' [0.0', '1.0', '0.0']] upVector ( list ) ; [default: [' [1.0', '0.0', '0.0']] worldUpType ( str ) ; [default: object] worldUpObject ( str ) ; [default: None] mdNode Create a new multiply devide node using the given inputs. Constructor: mdNode(input1 = None, input2 = None, output = None, kwargs) Return: MnsNameStd (MultiplyDevide node) Arguments: input1 ( str ) ; [default: None] input2 ( str ) ; [default: None] output ( str ) ; [default: None] kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: multDev] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID operation ( int ) ; [default: 1] incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True mdlNode Create a new multiplyDoubleLinear node using the given inputs. Constructor: mdlNode(input1 = None, input2 = None, output = None, kwargs) Return: MnsNameStd (multiplyDoubleLinear node) Arguments: input1 ( str ) ; [default: None] input2 ( str ) ; [default: None] output ( str ) ; [default: None] kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: multDoubleLinear] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True mnsAnnotateNode Creates an mnsAnnotateNode node based on specified parameters and outputs. Input as a node.channel list. Constructor: mnsAnnotateNode( kwargs) Return: dict ('node': MnsNameStd) Arguments: kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: annotate] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True attributes ( list ) ; [default: [' ']] nameOnlyMode ( bool ) mnsAutoWheelDriveNode Creates an mnsAutoWheelDrive node based on specified parameters and outputs. Constructor: mnsAutoWheelDriveNode( kwargs) Return: None Arguments: kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: autoWheelDrive] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True wheelDiameter ( float ) ; [default: 10.0] speedMultiplier ( float ) ; [default: 1.0] outRotation ( str ) ; [default: None] connectTime ( bool ) ; [default: True] mnsBuildTransformsCurveNode Creates an mnsBuildTransformsCurveNode node based on specified parameters and outputs. Constructor: mnsBuildTransformsCurveNode( kwargs) Return: dict ('transforms': input transforms list, 'outCurve': built output curve MnsNameStd, 'outOffsetCurve': built output up-curve MnsNameStd, 'node': Created node MnsNameStd) Arguments: kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: buildTransformsCurveCurve] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True transforms ( list ) ; [default: [' ']] - transforms to build the curve from buildOffsetCurve ( bool ) - Node's 'buildOffsetCurve' attribute offsetCurveSuffix ( str ) ; [default: Up] - Up curve creation name body suffix buildMode ( int ) - Node's buildMode attribute tangentDirection ( int ) ; [default: 1] - Node's tangentDirection attribute tangentLength ( float ) ; [default: 1.0] - Node's tangentLength attribute hermiteSteps ( int ) ; [default: 5] - Node's hermiteSteps attribute degree ( int ) ; [default: 3] - Node's degree attribute offsetType ( int ) - Node's offsetType attribute offsetX ( float ) - Node's offsetX attribute offsetY ( float ) - Node's offsetY attribute offsetZ ( float ) - Node's offsetZ attribute reverse ( bool ) - Node's reverse attribute mnsCameraGateRatioNode Create a new mnsCameraGateRatio node using the given inputs. Constructor: mnsCameraGateRatioNode( kwargs) Return: MnsNameStd (mnsCameraGateRatio node) Arguments: kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: cameraGateRatio] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True camera ( str ) widthInput ( str ) heightInput ( str ) mnsClosestPointsOnMeshNode Creates an mnsClosestPointsOnMesh node based on specified parameters and outputs. Constructor: mnsClosestPointsOnMeshNode( kwargs) Return: dict ('node': Created node MnsNameStd) Arguments: kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: closestPointsOnMesh] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True inputMesh ( str ) ; [default: None] inputTransforms ( list ) ; [default: [' ']] outputTransforms ( list ) ; [default: [' ']] mnsCurveTweakNode Creates an mnsLipZip node based on specified parameters and outputs. A 'buildOutputs' parameter is defaulted to True to build output (of a choice of any mnsType). Constructor: mnsCurveTweakNode( kwargs) Return: None Arguments: kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: pointsOnCurve] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True mnsCurveVariableNode Creates an mnsCurveVariable node based on specified parameters and outputs. Constructor: mnsCurveVariableNode( kwargs) Return: dict ('node': MnsNameStd) Arguments: kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: curveVariable] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True inputCurve ( str ) - name of the curve object to connect as input curve into the node. Setting as nothing or an invalid name will result in nothing connected inputUpCurve ( str ) - name of the up-curve object to connect as input up-curve into the node. Setting as nothing or an invalid name will result in nothing connected offsetCurveSuffix ( str ) ; [default: Up] - Up curve creation name body suffix inTransforms ( list ) ; [default: [' ']] - array of object to plug into the input array plug outOffsetTransforms ( list ) ; [default: [' ']] upMode ( int ) ; [default: 1] - Node's 'upMode' attribute aimAxis ( int ) - Node's 'aimAxis' attribute upAxis ( int ) ; [default: 1] - Node's 'upAxis' attribute connectTranslate ( bool ) ; [default: True] - Translate connect to the outputs if True connectRotate ( bool ) ; [default: True] - Rotate connect to the outputs if True offsetX ( float ) ; [default: 10.0] - Node's offsetX attribute offsetY ( float ) - Node's offsetY attribute offsetZ ( float ) - Node's offsetZ attribute substeps ( int ) ; [default: 20] degree ( int ) ; [default: 3] buildMode ( int ) ; [default: 1] translateMode ( int ) defaultFalloff ( float ) ; [default: 0.5] defaultStregth ( float ) ; [default: 1.0] offsetType ( int ) mnsCurveZipNode Creates an mnsPointOnCurve node based on specified parameters and outputs. A 'buildOutputs' parameter is defaulted to True to build output (of a choice of any mnsType). Constructor: mnsCurveZipNode( kwargs) Return: None Arguments: kwargs Keyword Arguments: type ( str ) ; [default: mnsCurveZip] side ( str ) ; [default: center] - side flag body ( str ) ; [default: pointsOnCurve] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True substeps ( int ) ; [default: 30] sampleMode ( int ) buildMode ( int ) degree ( int ) ; [default: 3] upCurveOffset ( float ) ; [default: 1.0] - Node's offsetX attribute aroundCenter ( bool ) ; [default: True] conformToMeetPoint ( bool ) ; [default: True] curveToConform ( int ) conformDistancethreshold ( float ) ; [default: 0.2] midGenerateFrom ( int ) mnsDynamicPivotNode Constructor: mnsDynamicPivotNode( kwargs) Return: MnsNameStd (MnsDynamicPivot node) Arguments: kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: springCurve] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True distRateMultiplier ( float ) ; [default: 1.0] mapRotXTo ( int ) ; [default: 2] mapRotYTo ( int ) ; [default: 6] mapRotZTo ( int ) ; [default: 3] originWorldMatrix ( str ) ; [default: None] targetParentInverseMatrix ( str ) ; [default: None] inputCurve ( str ) - name of the curve object to connect as input curve into the node. Setting as nothing or an invalid name will result in nothing connected rotate ( str ) ; [default: None] rotatePivot ( str ) ; [default: None] mnsIKSolver Create a new mnsIkSolver node using the given inputs. Constructor: mnsIKSolver( kwargs) Return: MnsNameStd (mnsIkSolver node) Arguments: kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: ikSolver] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True blend ( float ) roll ( float ) slide ( float ) softness ( float ) stretchLimit ( float ) ; [default: 1.0] aimAxis ( int ) ; [default: 1] - Node's 'aimAxis' attribute upAxis ( int ) ; [default: 2] - Node's 'upAxis' attribute boneLengthA ( float ) ; [default: 1.0] boneLengthB ( float ) ; [default: 1.0] rootPos ( str ) midPos ( str ) endPos ( str ) limbRoot ( str ) ikHandle ( str ) poleVector ( str ) fkRoot ( str ) fkMid ( str ) fkEnd ( str ) outputRoot ( str ) outputMid ( str ) outputEnd ( str ) mnsLipZipNode Creates an mnsLipZip node based on specified parameters and outputs. A 'buildOutputs' parameter is defaulted to True to build output (of a choice of any mnsType). Constructor: mnsLipZipNode( kwargs) Return: None Arguments: kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: pointsOnCurve] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True substeps ( int ) ; [default: 30] sampleMode ( int ) buildMode ( int ) degree ( int ) ; [default: 3] upCurveOffset ( float ) ; [default: 1.0] - Node's offsetX attribute aroundCenter ( bool ) ; [default: True] conformToMeetPoint ( bool ) ; [default: True] curveToConform ( int ) conformDistancethreshold ( float ) ; [default: 0.2] midGenerateFrom ( int ) mnsMatrixConstraintNode Creates an mnsMatrixConstraintNode node based on specified parameters and outputs. Constructor: mnsMatrixConstraintNode( kwargs) Return: dict ('nameStds': Created MnsNameStd list) Arguments: kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: matrixConstraint] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True targets ( list ) ; [default: [' ']] - Tragets to constrain sources ( list ) ; [default: [' ']] - Sources to constrain the targets to maintainOffset ( bool ) - Node's maintainOffset attribute connectTranslate ( bool ) ; [default: True] - Connect Translate if True connectRotate ( bool ) ; [default: True] - Connect Rotate if True connectScale ( bool ) ; [default: True] - Connect Scale if True mnsNodeRelationshipNode Create a new mnsNodeRelationship node using the given inputs. Constructor: mnsNodeRelationshipNode( kwargs) Return: MnsNameStd (mnsNodeRelationship node) Arguments: kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: nodeRelationship] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID connectDeleteSlavesOnly ( bool ) incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True master ( str ) ; [default: None] slaves ( list ) ; [default: [' ']] mnsPointsOnCurveNode Creates an mnsPointOnCurve node based on specified parameters and outputs. A 'buildOutputs' parameter is defaulted to True to build output (of a choice of any mnsType). Constructor: mnsPointsOnCurveNode( kwargs) Return: dict ('node': MnsNameStd, 'samplesSTDs': output MnsNameStd list, 'samples': output node list) Arguments: kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: pointsOnCurve] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True inputCurve ( str ) - name of the curve object to connect as input curve into the node. Setting as nothing or an invalid name will result in nothing connected inputUpCurve ( str ) - name of the up-curve object to connect as input up-curve into the node. Setting as nothing or an invalid name will result in nothing connected transforms ( list ) ; [default: [' ']] - array of object to output to buildMode ( int ) - Node's build mode attribute numOutputs ( int ) ; [default: 10] - set the number of outputs or samples to be outputed from the node doRotate ( bool ) ; [default: True] - Node's 'doRotate' attribute rotateMode ( int ) - Node's 'rotateMode' attribute upMode ( int ) ; [default: 1] - Node's 'upMode' attribute aimAxis ( int ) - Node's 'aimAxis' attribute upAxis ( int ) ; [default: 1] - Node's 'upAxis' attribute doScale ( bool ) ; [default: True] - Node's 'doScale' attribute doSpring ( bool ) - Node's 'doSpring' attribute connectTranslate ( bool ) ; [default: True] - Translate connect to the outputs if True connectRotate ( bool ) ; [default: True] - Rotate connect to the outputs if True connectScale ( bool ) ; [default: True] - Scale connect to the outputs if True buildOutputs ( bool ) ; [default: True] - in case output array is empty or invalid, build outpus as outputbuildType and outputBuildName outputBuildSuffix ( str ) ; [default: OutSample] - suffix fom built outputs, if chosen to build buildType ( int ) - if buildOutputs is executing, build based on this type. buildVisGeo ( bool ) - build axisVisGeo for the samples (debug mode) buildVisCubes ( bool ) - build axisVisGeo for the samples (debug mode) customPointsUpMode ( int ) ; [default: 1] isolatePolesTranlation ( bool ) isolatePolesRotation ( bool ) isolatePolesScale ( bool ) baseAlternateWorldMatrix ( str ) ; [default: None] tipAlternateWorldMatrix ( str ) ; [default: None] mnsRemapFloatArrayNode Create a new mnsRemapFlatArray node using the given inputs. Constructor: mnsRemapFloatArrayNode( kwargs) Return: MnsNameStd (mnsRemapFloatArray node) Arguments: kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: remapFloatArray] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID operation ( int ) incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True value ( str ) outputCount ( int ) ; [default: 1] angleOutputAsDegrees ( bool ) remapToRnage ( bool ) min ( float ) max ( float ) ; [default: 1.0] oldMin ( float ) oldMax ( float ) ; [default: 1.0] outValues ( list ) ; [default: [' ']] mnsResampleCurveNode Creates an mnsReampleCurve node based on specified parameters and outputs. Constructor: mnsResampleCurveNode( kwargs) Return: dict ('node': Created node MnsNameStd) Arguments: kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: resampleCurve] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True resampleMode ( int ) - Node's sample Mode degree ( int ) ; [default: 3] - Output curve degree sections ( int ) ; [default: 8] - Output curve number of sections inputCurve ( str ) - name of the curve object to connect as input curve into the node. Setting as nothing or an invalid name will result in nothing connected mnsSimpleRivetsNode Creates an mnsClosestPointsOnMesh node based on specified parameters and outputs. Constructor: mnsSimpleRivetsNode( kwargs) Return: MnsNameStd Arguments: kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: simpleRivets] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True inputMesh ( str ) ; [default: None] mnsSimpleSquashNode Constructor: mnsSimpleSquashNode( kwargs) Return: MnsNameStd (MnsDynamicPivot node) Arguments: kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: springCurve] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True globalScale ( float ) ; [default: 1.0] squashFactor ( float ) ; [default: 1.0] squashMin ( float ) ; [default: 0.001] squashMax ( float ) ; [default: 10.0] stretchFactor ( float ) ; [default: 1.0] stretchMin ( float ) ; [default: 0.001] stretchMax ( float ) ; [default: 10.0] squashRootWorldMatrix ( str ) ; [default: None] handleWorldMatrix ( str ) ; [default: None] scale ( str ) ; [default: None] mnsSpringCurveNode Creates an mnsSpringCurve node based on specified parameters and outputs. Constructor: mnsSpringCurveNode( kwargs) Return: dict ('node': MnsNameStd) Arguments: kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: springCurve] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True inputCurve ( str ) - name of the curve object to connect as input curve into the node. Setting as nothing or an invalid name will result in nothing connected inputUpCurve ( str ) - name of the up-curve object to connect as input up-curve into the node. Setting as nothing or an invalid name will result in nothing connected connectTime ( bool ) ; [default: True] startFrame ( int ) ; [default: 1] startFrameFromRange ( bool ) ; [default: True] strength ( float ) ; [default: 1.0] preventStretching ( bool ) ; [default: True] deleteCurveObjects ( bool ) offsetCurveSuffix ( str ) ; [default: Up] attributeHost ( str ) ; [default: None] strengthDefault ( float ) ; [default: 1.0] mnsThreePointArcNode Creates an mnsReampleCurve node based on specified parameters and outputs. Constructor: mnsThreePointArcNode( kwargs) Return: dict ('node': Created node MnsNameStd) Arguments: kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: threePointArc] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True resampleMode ( int ) - Node's sample Mode degree ( int ) ; [default: 3] - Output curve degree sections ( int ) ; [default: 8] - Output curve number of sections conformMidPoint ( bool ) ; [default: True] - conform to mid point flag collinearAction ( int ) blend ( float ) inputCurve ( str ) - name of the curve object to connect as input curve into the node. Setting as nothing or an invalid name will result in nothing connected inputUpCurve ( str ) - name of the curve object to connect as input offset curve into the node. Setting as nothing or an invalid name will result in nothing connected mnsTransformSpringNode Creates an mnsAutoWheelDrive node based on specified parameters and outputs. Constructor: mnsTransformSpringNode( kwargs) Return: None Arguments: kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: transformSpring] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True strength ( float ) ; [default: 1.0] damping ( float ) ; [default: 0.5] stiffness ( float ) ; [default: 0.5] outTranslate ( str ) ; [default: None] connectTime ( bool ) ; [default: True] multMatrixNode Create a new inverseMatrix node using the given inputs. Constructor: multMatrixNode(inputMatricies = [], outputMatrix = None, kwargs) Return: MnsNameStd (multMatrix node) Arguments: inputMatricies ( list ) ; [default: []] outputMatrix ( str ) ; [default: None] kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: choice] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True pmaNode Create a new inverseMatrix node using the given inputs. Constructor: pmaNode(input1Ds = [], input2Ds = [], input3Ds = [], output1D = None, output2D = None, output3D = None, kwargs) Return: MnsNameStd (plusMinusAverage node) Arguments: input1Ds ( list ) ; [default: []] input2Ds ( list ) ; [default: []] input3Ds ( list ) ; [default: []] output1D ( str ) ; [default: None] output2D ( str ) ; [default: None] output3D ( str ) ; [default: None] kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: choice] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True reverseCurveNode Constructor: reverseCurveNode(inputCurve = None, outputCurve = None, kwargs) Return: None Arguments: inputCurve ( str ) ; [default: None] outputCurve ( str ) ; [default: None] kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: pointsOnCurve] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True reverseNode Create a new reverse node using the given inputs. Constructor: reverseNode(inputA = None, output = None, kwargs) Return: MnsNameStd (reverse node) Arguments: inputA ( str ) ; [default: None] output ( str ) ; [default: None] kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: reverse] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True setAttrAttempt Attempt to set the passed in value into the attribute passed in. Constructor: setAttrAttempt(nodeAttr, value, valType) Return: bool (sucess status) Arguments: nodeAttr value valType Keyword Arguments: setRangeNode Create a new setRange node using the given inputs. Constructor: setRangeNode(maxIn = [], minIn = [], oldMax = [], oldMin = [], value = [], outValue = [], kwargs) Return: MnsNameStd (setRange node) Arguments: maxIn ( list ) ; [default: []] minIn ( list ) ; [default: []] oldMax ( list ) ; [default: []] oldMin ( list ) ; [default: []] value ( list ) ; [default: []] outValue ( list ) ; [default: []] kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: setRange] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True","title":"Nodes"},{"location":"nodes/#nodes","text":"=== Author: Assaf Ben Zur === Mns nodes utility module. All node creation functions are covered by this module","title":"nodes"},{"location":"nodes/#defenitions","text":"","title":"Defenitions"},{"location":"nodes/#adlnode","text":"Create a new addDoubleLinear node using the given inputs. Constructor: adlNode(input1 = None, input2 = None, output = None, kwargs) Return: MnsNameStd (addDoubleLinear node) Arguments: input1 ( str ) ; [default: None] input2 ( str ) ; [default: None] output ( str ) ; [default: None] kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: addDoubleLinear] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True","title":"adlNode"},{"location":"nodes/#blendcolorsnode","text":"Create a new multiply devide node using the given inputs. Constructor: blendColorsNode(color1 = None, color2 = None, blender = None, output = None, kwargs) Return: MnsNameStd (MultiplyDevide node) Arguments: color1 ( str ) ; [default: None] color2 ( str ) ; [default: None] blender ( str ) ; [default: None] output ( str ) ; [default: None] kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: multDev] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID operation ( int ) ; [default: 1] incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True","title":"blendColorsNode"},{"location":"nodes/#buildgeoaxisvis","text":"Utility aid function: Creates a Axis-Vis geometry object based on parameters Constructor: buildGeoAxisVis( kwargs) Return: MnsNameStd (created vis-geo object) Arguments: kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: pointsOnCurve] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True scale ( int ) ; [default: 1] - Relative to parent axisSubdevision ( int ) ; [default: 16] - Geometry cylinder axis subdevision cylinderWidth ( float ) ; [default: 0.015] deleteAll ( bool ) - If true, do not attempt to create any objects- instead look for any existing objects and delete them","title":"buildGeoAxisVis"},{"location":"nodes/#buildgeoaxisvisforparents","text":"Utility aid function. Created an Axis-Vis geometry object from each object within the list passed in. Constructor: buildGeoAxisVisForParents( kwargs) Return: dict ('visGeoObjs': visGeoMnsNameStdArray, 'visGeoObjsNodes': visGeoNodeArray) Arguments: kwargs Keyword Arguments: parentObjs ( list ) ; [default: [' ']] - If parent is empty, visGeo will not build parentMethod ( int ) scale ( int ) ; [default: 1] - Relative to parent axisSubdevision ( int ) ; [default: 16] - Geometry cylinder axis subdevision cylinderWidth ( float ) ; [default: 0.015] createNodeRelationship ( bool ) ; [default: True]","title":"buildGeoAxisVisForParents"},{"location":"nodes/#buildviscubesforpsocnode","text":"Single use function. From a given MnsPointsOnCurve node, create output 'visCubes'. Constructor: buildVisCubesForPSOCNode(node = \"\", kwargs) Return: dict ('visCubesStds': output MnsNameStd list, 'nodes': output node list ) Arguments: node ( str ) ; [default: \"\"] kwargs Keyword Arguments: gapWidth ( float ) ; [default: 0.1]","title":"buildVisCubesForPSOCNode"},{"location":"nodes/#choicenode","text":"Create a new choice node using the given inputs. Constructor: choiceNode(inputs = [], output = None, kwargs) Return: MnsNameStd (choice node) Arguments: inputs ( list ) ; [default: []] output ( str ) ; [default: None] kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: choice] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True","title":"choiceNode"},{"location":"nodes/#clampnode","text":"Create a new clamp node using the given inputs. Constructor: clampNode(inputA = [], maxA = [], minA = [], output = [], kwargs) Return: MnsNameStd (reverse node) Arguments: inputA ( list ) ; [default: []] maxA ( list ) ; [default: []] minA ( list ) ; [default: []] output ( list ) ; [default: []] kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: clamp] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True","title":"clampNode"},{"location":"nodes/#conditionnode","text":"Create a new condition node using the given inputs. Constructor: conditionNode(firstTerm = None, secondTerm = None, colorIfTrue = None, colorIfFalse = None, outColor = None, kwargs) Return: MnsNameStd (condition node) Arguments: firstTerm ( str ) ; [default: None] secondTerm ( str ) ; [default: None] colorIfTrue ( str ) ; [default: None] colorIfFalse ( str ) ; [default: None] outColor ( str ) ; [default: None] kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: condition] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID operation ( int ) incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True","title":"conditionNode"},{"location":"nodes/#connectattrattempt","text":"Attempt to connect the sourceAttr given to the target attribute passed in. Constructor: connectAttrAttempt(attrA, nodeAttr) Return: bool (sucess status) Arguments: attrA nodeAttr Keyword Arguments:","title":"connectAttrAttempt"},{"location":"nodes/#connectsetattempt","text":"Attemp to connect the values passed in. If a failue status was return, attempt a 'setAttr' next. Constructor: connectSetAttempt(attrA, nodeAttr, valType) Return: bool (sucess status) Arguments: attrA nodeAttr valType Keyword Arguments:","title":"connectSetAttempt"},{"location":"nodes/#decomposematrixnode","text":"Create a new multiplyDoubleLinear node using the given inputs. Constructor: decomposeMatrixNode(inputMatrix = None, outputTranslate = None, outputRotate = None, outputScale = None, kwargs) Return: MnsNameStd (multiplyDoubleLinear node) Arguments: inputMatrix ( str ) ; [default: None] outputTranslate ( str ) ; [default: None] outputRotate ( str ) ; [default: None] outputScale ( str ) ; [default: None] kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: decomposeMatrix] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True","title":"decomposeMatrixNode"},{"location":"nodes/#distbetweennode","text":"Create a new distanceBetween node using the given inputs. Constructor: distBetweenNode(inMatrix1 = None, inMatrix2 = None, distance = None, kwargs) Return: MnsNameStd (distance between node) Arguments: inMatrix1 ( str ) ; [default: None] inMatrix2 ( str ) ; [default: None] distance ( str ) ; [default: None] kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: distBetween] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID operation ( int ) incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True","title":"distBetweenNode"},{"location":"nodes/#imageplanenode","text":"Create a new imagePlane node using the given inputs. Constructor: imagePlaneNode(camera = None, kwargs) Return: MnsNameStd (imagePlane node) Arguments: camera ( str ) ; [default: None] kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: imagePlane] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True","title":"imagePlaneNode"},{"location":"nodes/#inversematrixnode","text":"Create a new inverseMatrix node using the given inputs. Constructor: inverseMatrixNode(inputMatrix = None, outputMatrix = None, kwargs) Return: MnsNameStd (inverseMatrix node) Arguments: inputMatrix ( str ) ; [default: None] outputMatrix ( str ) ; [default: None] kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: choice] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True","title":"inverseMatrixNode"},{"location":"nodes/#mayaconstraint","text":"Create a new constraint node using the given inputs. Constructor: mayaConstraint(sources = [], target = None, kwargs) Return: MnsNameStd (constraint node) Arguments: sources ( list ) ; [default: []] target ( str ) ; [default: None] kwargs Keyword Arguments: type ( str ) ; [default: parent] - side flag side ( str ) ; [default: center] - side flag body ( str ) ; [default: cnsType+Constraint] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True maintainOffset ( bool ) - Node's maintainOffset attribute aimVector ( list ) ; [default: [' [0.0', '1.0', '0.0']] upVector ( list ) ; [default: [' [1.0', '0.0', '0.0']] worldUpType ( str ) ; [default: object] worldUpObject ( str ) ; [default: None]","title":"mayaConstraint"},{"location":"nodes/#mdnode","text":"Create a new multiply devide node using the given inputs. Constructor: mdNode(input1 = None, input2 = None, output = None, kwargs) Return: MnsNameStd (MultiplyDevide node) Arguments: input1 ( str ) ; [default: None] input2 ( str ) ; [default: None] output ( str ) ; [default: None] kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: multDev] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID operation ( int ) ; [default: 1] incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True","title":"mdNode"},{"location":"nodes/#mdlnode","text":"Create a new multiplyDoubleLinear node using the given inputs. Constructor: mdlNode(input1 = None, input2 = None, output = None, kwargs) Return: MnsNameStd (multiplyDoubleLinear node) Arguments: input1 ( str ) ; [default: None] input2 ( str ) ; [default: None] output ( str ) ; [default: None] kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: multDoubleLinear] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True","title":"mdlNode"},{"location":"nodes/#mnsannotatenode","text":"Creates an mnsAnnotateNode node based on specified parameters and outputs. Input as a node.channel list. Constructor: mnsAnnotateNode( kwargs) Return: dict ('node': MnsNameStd) Arguments: kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: annotate] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True attributes ( list ) ; [default: [' ']] nameOnlyMode ( bool )","title":"mnsAnnotateNode"},{"location":"nodes/#mnsautowheeldrivenode","text":"Creates an mnsAutoWheelDrive node based on specified parameters and outputs. Constructor: mnsAutoWheelDriveNode( kwargs) Return: None Arguments: kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: autoWheelDrive] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True wheelDiameter ( float ) ; [default: 10.0] speedMultiplier ( float ) ; [default: 1.0] outRotation ( str ) ; [default: None] connectTime ( bool ) ; [default: True]","title":"mnsAutoWheelDriveNode"},{"location":"nodes/#mnsbuildtransformscurvenode","text":"Creates an mnsBuildTransformsCurveNode node based on specified parameters and outputs. Constructor: mnsBuildTransformsCurveNode( kwargs) Return: dict ('transforms': input transforms list, 'outCurve': built output curve MnsNameStd, 'outOffsetCurve': built output up-curve MnsNameStd, 'node': Created node MnsNameStd) Arguments: kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: buildTransformsCurveCurve] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True transforms ( list ) ; [default: [' ']] - transforms to build the curve from buildOffsetCurve ( bool ) - Node's 'buildOffsetCurve' attribute offsetCurveSuffix ( str ) ; [default: Up] - Up curve creation name body suffix buildMode ( int ) - Node's buildMode attribute tangentDirection ( int ) ; [default: 1] - Node's tangentDirection attribute tangentLength ( float ) ; [default: 1.0] - Node's tangentLength attribute hermiteSteps ( int ) ; [default: 5] - Node's hermiteSteps attribute degree ( int ) ; [default: 3] - Node's degree attribute offsetType ( int ) - Node's offsetType attribute offsetX ( float ) - Node's offsetX attribute offsetY ( float ) - Node's offsetY attribute offsetZ ( float ) - Node's offsetZ attribute reverse ( bool ) - Node's reverse attribute","title":"mnsBuildTransformsCurveNode"},{"location":"nodes/#mnscameragaterationode","text":"Create a new mnsCameraGateRatio node using the given inputs. Constructor: mnsCameraGateRatioNode( kwargs) Return: MnsNameStd (mnsCameraGateRatio node) Arguments: kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: cameraGateRatio] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True camera ( str ) widthInput ( str ) heightInput ( str )","title":"mnsCameraGateRatioNode"},{"location":"nodes/#mnsclosestpointsonmeshnode","text":"Creates an mnsClosestPointsOnMesh node based on specified parameters and outputs. Constructor: mnsClosestPointsOnMeshNode( kwargs) Return: dict ('node': Created node MnsNameStd) Arguments: kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: closestPointsOnMesh] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True inputMesh ( str ) ; [default: None] inputTransforms ( list ) ; [default: [' ']] outputTransforms ( list ) ; [default: [' ']]","title":"mnsClosestPointsOnMeshNode"},{"location":"nodes/#mnscurvetweaknode","text":"Creates an mnsLipZip node based on specified parameters and outputs. A 'buildOutputs' parameter is defaulted to True to build output (of a choice of any mnsType). Constructor: mnsCurveTweakNode( kwargs) Return: None Arguments: kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: pointsOnCurve] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True","title":"mnsCurveTweakNode"},{"location":"nodes/#mnscurvevariablenode","text":"Creates an mnsCurveVariable node based on specified parameters and outputs. Constructor: mnsCurveVariableNode( kwargs) Return: dict ('node': MnsNameStd) Arguments: kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: curveVariable] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True inputCurve ( str ) - name of the curve object to connect as input curve into the node. Setting as nothing or an invalid name will result in nothing connected inputUpCurve ( str ) - name of the up-curve object to connect as input up-curve into the node. Setting as nothing or an invalid name will result in nothing connected offsetCurveSuffix ( str ) ; [default: Up] - Up curve creation name body suffix inTransforms ( list ) ; [default: [' ']] - array of object to plug into the input array plug outOffsetTransforms ( list ) ; [default: [' ']] upMode ( int ) ; [default: 1] - Node's 'upMode' attribute aimAxis ( int ) - Node's 'aimAxis' attribute upAxis ( int ) ; [default: 1] - Node's 'upAxis' attribute connectTranslate ( bool ) ; [default: True] - Translate connect to the outputs if True connectRotate ( bool ) ; [default: True] - Rotate connect to the outputs if True offsetX ( float ) ; [default: 10.0] - Node's offsetX attribute offsetY ( float ) - Node's offsetY attribute offsetZ ( float ) - Node's offsetZ attribute substeps ( int ) ; [default: 20] degree ( int ) ; [default: 3] buildMode ( int ) ; [default: 1] translateMode ( int ) defaultFalloff ( float ) ; [default: 0.5] defaultStregth ( float ) ; [default: 1.0] offsetType ( int )","title":"mnsCurveVariableNode"},{"location":"nodes/#mnscurvezipnode","text":"Creates an mnsPointOnCurve node based on specified parameters and outputs. A 'buildOutputs' parameter is defaulted to True to build output (of a choice of any mnsType). Constructor: mnsCurveZipNode( kwargs) Return: None Arguments: kwargs Keyword Arguments: type ( str ) ; [default: mnsCurveZip] side ( str ) ; [default: center] - side flag body ( str ) ; [default: pointsOnCurve] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True substeps ( int ) ; [default: 30] sampleMode ( int ) buildMode ( int ) degree ( int ) ; [default: 3] upCurveOffset ( float ) ; [default: 1.0] - Node's offsetX attribute aroundCenter ( bool ) ; [default: True] conformToMeetPoint ( bool ) ; [default: True] curveToConform ( int ) conformDistancethreshold ( float ) ; [default: 0.2] midGenerateFrom ( int )","title":"mnsCurveZipNode"},{"location":"nodes/#mnsdynamicpivotnode","text":"Constructor: mnsDynamicPivotNode( kwargs) Return: MnsNameStd (MnsDynamicPivot node) Arguments: kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: springCurve] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True distRateMultiplier ( float ) ; [default: 1.0] mapRotXTo ( int ) ; [default: 2] mapRotYTo ( int ) ; [default: 6] mapRotZTo ( int ) ; [default: 3] originWorldMatrix ( str ) ; [default: None] targetParentInverseMatrix ( str ) ; [default: None] inputCurve ( str ) - name of the curve object to connect as input curve into the node. Setting as nothing or an invalid name will result in nothing connected rotate ( str ) ; [default: None] rotatePivot ( str ) ; [default: None]","title":"mnsDynamicPivotNode"},{"location":"nodes/#mnsiksolver","text":"Create a new mnsIkSolver node using the given inputs. Constructor: mnsIKSolver( kwargs) Return: MnsNameStd (mnsIkSolver node) Arguments: kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: ikSolver] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True blend ( float ) roll ( float ) slide ( float ) softness ( float ) stretchLimit ( float ) ; [default: 1.0] aimAxis ( int ) ; [default: 1] - Node's 'aimAxis' attribute upAxis ( int ) ; [default: 2] - Node's 'upAxis' attribute boneLengthA ( float ) ; [default: 1.0] boneLengthB ( float ) ; [default: 1.0] rootPos ( str ) midPos ( str ) endPos ( str ) limbRoot ( str ) ikHandle ( str ) poleVector ( str ) fkRoot ( str ) fkMid ( str ) fkEnd ( str ) outputRoot ( str ) outputMid ( str ) outputEnd ( str )","title":"mnsIKSolver"},{"location":"nodes/#mnslipzipnode","text":"Creates an mnsLipZip node based on specified parameters and outputs. A 'buildOutputs' parameter is defaulted to True to build output (of a choice of any mnsType). Constructor: mnsLipZipNode( kwargs) Return: None Arguments: kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: pointsOnCurve] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True substeps ( int ) ; [default: 30] sampleMode ( int ) buildMode ( int ) degree ( int ) ; [default: 3] upCurveOffset ( float ) ; [default: 1.0] - Node's offsetX attribute aroundCenter ( bool ) ; [default: True] conformToMeetPoint ( bool ) ; [default: True] curveToConform ( int ) conformDistancethreshold ( float ) ; [default: 0.2] midGenerateFrom ( int )","title":"mnsLipZipNode"},{"location":"nodes/#mnsmatrixconstraintnode","text":"Creates an mnsMatrixConstraintNode node based on specified parameters and outputs. Constructor: mnsMatrixConstraintNode( kwargs) Return: dict ('nameStds': Created MnsNameStd list) Arguments: kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: matrixConstraint] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True targets ( list ) ; [default: [' ']] - Tragets to constrain sources ( list ) ; [default: [' ']] - Sources to constrain the targets to maintainOffset ( bool ) - Node's maintainOffset attribute connectTranslate ( bool ) ; [default: True] - Connect Translate if True connectRotate ( bool ) ; [default: True] - Connect Rotate if True connectScale ( bool ) ; [default: True] - Connect Scale if True","title":"mnsMatrixConstraintNode"},{"location":"nodes/#mnsnoderelationshipnode","text":"Create a new mnsNodeRelationship node using the given inputs. Constructor: mnsNodeRelationshipNode( kwargs) Return: MnsNameStd (mnsNodeRelationship node) Arguments: kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: nodeRelationship] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID connectDeleteSlavesOnly ( bool ) incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True master ( str ) ; [default: None] slaves ( list ) ; [default: [' ']]","title":"mnsNodeRelationshipNode"},{"location":"nodes/#mnspointsoncurvenode","text":"Creates an mnsPointOnCurve node based on specified parameters and outputs. A 'buildOutputs' parameter is defaulted to True to build output (of a choice of any mnsType). Constructor: mnsPointsOnCurveNode( kwargs) Return: dict ('node': MnsNameStd, 'samplesSTDs': output MnsNameStd list, 'samples': output node list) Arguments: kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: pointsOnCurve] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True inputCurve ( str ) - name of the curve object to connect as input curve into the node. Setting as nothing or an invalid name will result in nothing connected inputUpCurve ( str ) - name of the up-curve object to connect as input up-curve into the node. Setting as nothing or an invalid name will result in nothing connected transforms ( list ) ; [default: [' ']] - array of object to output to buildMode ( int ) - Node's build mode attribute numOutputs ( int ) ; [default: 10] - set the number of outputs or samples to be outputed from the node doRotate ( bool ) ; [default: True] - Node's 'doRotate' attribute rotateMode ( int ) - Node's 'rotateMode' attribute upMode ( int ) ; [default: 1] - Node's 'upMode' attribute aimAxis ( int ) - Node's 'aimAxis' attribute upAxis ( int ) ; [default: 1] - Node's 'upAxis' attribute doScale ( bool ) ; [default: True] - Node's 'doScale' attribute doSpring ( bool ) - Node's 'doSpring' attribute connectTranslate ( bool ) ; [default: True] - Translate connect to the outputs if True connectRotate ( bool ) ; [default: True] - Rotate connect to the outputs if True connectScale ( bool ) ; [default: True] - Scale connect to the outputs if True buildOutputs ( bool ) ; [default: True] - in case output array is empty or invalid, build outpus as outputbuildType and outputBuildName outputBuildSuffix ( str ) ; [default: OutSample] - suffix fom built outputs, if chosen to build buildType ( int ) - if buildOutputs is executing, build based on this type. buildVisGeo ( bool ) - build axisVisGeo for the samples (debug mode) buildVisCubes ( bool ) - build axisVisGeo for the samples (debug mode) customPointsUpMode ( int ) ; [default: 1] isolatePolesTranlation ( bool ) isolatePolesRotation ( bool ) isolatePolesScale ( bool ) baseAlternateWorldMatrix ( str ) ; [default: None] tipAlternateWorldMatrix ( str ) ; [default: None]","title":"mnsPointsOnCurveNode"},{"location":"nodes/#mnsremapfloatarraynode","text":"Create a new mnsRemapFlatArray node using the given inputs. Constructor: mnsRemapFloatArrayNode( kwargs) Return: MnsNameStd (mnsRemapFloatArray node) Arguments: kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: remapFloatArray] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID operation ( int ) incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True value ( str ) outputCount ( int ) ; [default: 1] angleOutputAsDegrees ( bool ) remapToRnage ( bool ) min ( float ) max ( float ) ; [default: 1.0] oldMin ( float ) oldMax ( float ) ; [default: 1.0] outValues ( list ) ; [default: [' ']]","title":"mnsRemapFloatArrayNode"},{"location":"nodes/#mnsresamplecurvenode","text":"Creates an mnsReampleCurve node based on specified parameters and outputs. Constructor: mnsResampleCurveNode( kwargs) Return: dict ('node': Created node MnsNameStd) Arguments: kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: resampleCurve] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True resampleMode ( int ) - Node's sample Mode degree ( int ) ; [default: 3] - Output curve degree sections ( int ) ; [default: 8] - Output curve number of sections inputCurve ( str ) - name of the curve object to connect as input curve into the node. Setting as nothing or an invalid name will result in nothing connected","title":"mnsResampleCurveNode"},{"location":"nodes/#mnssimplerivetsnode","text":"Creates an mnsClosestPointsOnMesh node based on specified parameters and outputs. Constructor: mnsSimpleRivetsNode( kwargs) Return: MnsNameStd Arguments: kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: simpleRivets] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True inputMesh ( str ) ; [default: None]","title":"mnsSimpleRivetsNode"},{"location":"nodes/#mnssimplesquashnode","text":"Constructor: mnsSimpleSquashNode( kwargs) Return: MnsNameStd (MnsDynamicPivot node) Arguments: kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: springCurve] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True globalScale ( float ) ; [default: 1.0] squashFactor ( float ) ; [default: 1.0] squashMin ( float ) ; [default: 0.001] squashMax ( float ) ; [default: 10.0] stretchFactor ( float ) ; [default: 1.0] stretchMin ( float ) ; [default: 0.001] stretchMax ( float ) ; [default: 10.0] squashRootWorldMatrix ( str ) ; [default: None] handleWorldMatrix ( str ) ; [default: None] scale ( str ) ; [default: None]","title":"mnsSimpleSquashNode"},{"location":"nodes/#mnsspringcurvenode","text":"Creates an mnsSpringCurve node based on specified parameters and outputs. Constructor: mnsSpringCurveNode( kwargs) Return: dict ('node': MnsNameStd) Arguments: kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: springCurve] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True inputCurve ( str ) - name of the curve object to connect as input curve into the node. Setting as nothing or an invalid name will result in nothing connected inputUpCurve ( str ) - name of the up-curve object to connect as input up-curve into the node. Setting as nothing or an invalid name will result in nothing connected connectTime ( bool ) ; [default: True] startFrame ( int ) ; [default: 1] startFrameFromRange ( bool ) ; [default: True] strength ( float ) ; [default: 1.0] preventStretching ( bool ) ; [default: True] deleteCurveObjects ( bool ) offsetCurveSuffix ( str ) ; [default: Up] attributeHost ( str ) ; [default: None] strengthDefault ( float ) ; [default: 1.0]","title":"mnsSpringCurveNode"},{"location":"nodes/#mnsthreepointarcnode","text":"Creates an mnsReampleCurve node based on specified parameters and outputs. Constructor: mnsThreePointArcNode( kwargs) Return: dict ('node': Created node MnsNameStd) Arguments: kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: threePointArc] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True resampleMode ( int ) - Node's sample Mode degree ( int ) ; [default: 3] - Output curve degree sections ( int ) ; [default: 8] - Output curve number of sections conformMidPoint ( bool ) ; [default: True] - conform to mid point flag collinearAction ( int ) blend ( float ) inputCurve ( str ) - name of the curve object to connect as input curve into the node. Setting as nothing or an invalid name will result in nothing connected inputUpCurve ( str ) - name of the curve object to connect as input offset curve into the node. Setting as nothing or an invalid name will result in nothing connected","title":"mnsThreePointArcNode"},{"location":"nodes/#mnstransformspringnode","text":"Creates an mnsAutoWheelDrive node based on specified parameters and outputs. Constructor: mnsTransformSpringNode( kwargs) Return: None Arguments: kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: transformSpring] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True strength ( float ) ; [default: 1.0] damping ( float ) ; [default: 0.5] stiffness ( float ) ; [default: 0.5] outTranslate ( str ) ; [default: None] connectTime ( bool ) ; [default: True]","title":"mnsTransformSpringNode"},{"location":"nodes/#multmatrixnode","text":"Create a new inverseMatrix node using the given inputs. Constructor: multMatrixNode(inputMatricies = [], outputMatrix = None, kwargs) Return: MnsNameStd (multMatrix node) Arguments: inputMatricies ( list ) ; [default: []] outputMatrix ( str ) ; [default: None] kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: choice] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True","title":"multMatrixNode"},{"location":"nodes/#pmanode","text":"Create a new inverseMatrix node using the given inputs. Constructor: pmaNode(input1Ds = [], input2Ds = [], input3Ds = [], output1D = None, output2D = None, output3D = None, kwargs) Return: MnsNameStd (plusMinusAverage node) Arguments: input1Ds ( list ) ; [default: []] input2Ds ( list ) ; [default: []] input3Ds ( list ) ; [default: []] output1D ( str ) ; [default: None] output2D ( str ) ; [default: None] output3D ( str ) ; [default: None] kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: choice] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True","title":"pmaNode"},{"location":"nodes/#reversecurvenode","text":"Constructor: reverseCurveNode(inputCurve = None, outputCurve = None, kwargs) Return: None Arguments: inputCurve ( str ) ; [default: None] outputCurve ( str ) ; [default: None] kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: pointsOnCurve] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True","title":"reverseCurveNode"},{"location":"nodes/#reversenode","text":"Create a new reverse node using the given inputs. Constructor: reverseNode(inputA = None, output = None, kwargs) Return: MnsNameStd (reverse node) Arguments: inputA ( str ) ; [default: None] output ( str ) ; [default: None] kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: reverse] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True","title":"reverseNode"},{"location":"nodes/#setattrattempt","text":"Attempt to set the passed in value into the attribute passed in. Constructor: setAttrAttempt(nodeAttr, value, valType) Return: bool (sucess status) Arguments: nodeAttr value valType Keyword Arguments:","title":"setAttrAttempt"},{"location":"nodes/#setrangenode","text":"Create a new setRange node using the given inputs. Constructor: setRangeNode(maxIn = [], minIn = [], oldMax = [], oldMin = [], value = [], outValue = [], kwargs) Return: MnsNameStd (setRange node) Arguments: maxIn ( list ) ; [default: []] minIn ( list ) ; [default: []] oldMax ( list ) ; [default: []] oldMin ( list ) ; [default: []] value ( list ) ; [default: []] outValue ( list ) ; [default: []] kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: setRange] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True","title":"setRangeNode"},{"location":"picker/","text":"picker === Author: Assaf Ben Zur === mnsPicker UI Class This is the UI defenition for the dynamic picker UI build. The picker is essentially defined by the user using scene guides and attributes, this class handles the dynamic drawing of the picker into an actual live UI. - The global width and height attributes of the window is read from the \"Picker Layout Base\" - The picker buttons positions are read and interperted from the rig's 'Picker Layout Guides' - The buttons display settings and actions are drawen from each PLG attributes, which can be editted using the PLG Setting tool. Classes MnsPicker [Class] Picker UI Class. Constructor: MnsPicker( parent ( str ) ; [default: mnsUIUtils.get_maya_window()]) Inherits from: form_class, base_class Class Members: iconsDir rigTops rigTop puppetRoot pickerBase btnDrawDict btnControlRelationship deselectList namespace bodyCtrls facialCtrls rubberBand origin mayaSelectCallBack Methods: collectCurrentCtrls [method] displayHowToUseGuide [method] getCurrentCtrls [method] goToModuleRoot [method] initializeUI [method] setModuleVisStateBasedOnState [method] setRigTop [method] refreshBtnState [method] determaineSelection [method] btnClickedTrigger [method] connectSignals [method] destroyUI [method] initializeView [method] getPlgPositionandSize [method] acquirePickerSettingsWin [method] eventFilter [method] setBGImage [method] loadWindow [method] openMenu [method] btnDoubleClickedTrigger [method] drawPlgButton [method] setButtonHiddenStateBasedOnType [method] editBtnTrigger [method] MnsPicker methods collectCurrentCtrls [ MnsPicker class method] Constructor: collectCurrentCtrls(self) Return: None Arguments: self Optional Arguments: displayHowToUseGuide [ MnsPicker class method] Constructor: displayHowToUseGuide(self) Return: None Arguments: self Optional Arguments: getCurrentCtrls [ MnsPicker class method] Constructor: getCurrentCtrls(self) Return: None Arguments: self Optional Arguments: goToModuleRoot [ MnsPicker class method] Constructor: goToModuleRoot(self) Return: None Arguments: self Optional Arguments: initializeUI [ MnsPicker class method] Constructor: initializeUI(self) Return: None Arguments: self Optional Arguments: setModuleVisStateBasedOnState [ MnsPicker class method] Constructor: setModuleVisStateBasedOnState(self) Return: None Arguments: self Optional Arguments: setRigTop [ MnsPicker class method] Constructor: setRigTop(self) Return: None Arguments: self Optional Arguments: refreshBtnState [ MnsPicker class method] Constructor: refreshBtnState(self, dummy = None) Return: None Arguments: self dummy ( str ) ; [default: None] Optional Arguments: determaineSelection [ MnsPicker class method] Constructor: determaineSelection(self, rubberBand) Return: None Arguments: self rubberBand Optional Arguments: btnClickedTrigger [ MnsPicker class method] A simple trigger method for a button click. This trigger is re-implemented in order to 'catch' the 'edit' case. In case the edit case is True, the button's Actions arn't executed, and the 'mouseMove' event is triggered. In case the edit case is False, the btn's trigger actions is executed normally. Constructor: btnClickedTrigger(self, plgBtn) Return: None Arguments: self plgBtn Optional Arguments: connectSignals [ MnsPicker class method] Connect all UI Signals. Constructor: connectSignals(self) Return: None Arguments: self Optional Arguments: destroyUI [ MnsPicker class method] Destroys the entire dymanic UI draw. This method is used to 'refresh' or 'redraw' the UI. At any 'refresh' trigger, the UI needs to be completely destroyed then re-drawen with the current settings. Constructor: destroyUI(self) Return: None Arguments: self Optional Arguments: initializeView [ MnsPicker class method] Main method for the global UI draw. The UI is initialy destroyed, then re-drawen. Constructor: initializeView(self) Return: None Arguments: self Optional Arguments: getPlgPositionandSize [ MnsPicker class method] Maps a PLG scene position to the UI's local layout position. Since the positions of the PLG within the scene doesn't match the settings of QT, this method maps the passed in plg position, in relation to the main 'Picker Layout Base', and returns the new relative position to the UI layout. This method also retunes the bounding box size of the given plg. Constructor: getPlgPositionandSize(self, plg) Return: list, list (plgPosition(x,y), plgSize (width, height)) Arguments: self plg Optional Arguments: acquirePickerSettingsWin [ MnsPicker class method] Method to acquire the 'pickerSettings' tool from global, and store it. Constructor: acquirePickerSettingsWin(self) Return: None Arguments: self Optional Arguments: eventFilter [ MnsPicker class method] Override event filter to catch the tear off to override it's event. Constructor: eventFilter(self, source, event) Return: None Arguments: self source event Optional Arguments: setBGImage [ MnsPicker class method] Sets the bg image for the UI, in case there is one within the rig-top's attributes. The bg cannot be set to multiple layouts, hence, a 'tab changed' trigger is connected to this method, in order to toggle between the body and facial background images. Constructor: setBGImage(self) Return: None Arguments: self Optional Arguments: loadWindow [ MnsPicker class method] Show window method. Constructor: loadWindow(self) Return: None Arguments: self Optional Arguments: openMenu [ MnsPicker class method] Simple method to define the 'right-click-context-menu' trigger event. Constructor: openMenu(self, plgBtn, position) Return: None Arguments: self plgBtn position Optional Arguments: btnDoubleClickedTrigger [ MnsPicker class method] The global action trigger for any picker UI button double click trigger. This method will trigger the \"hierarchy selection\" and the \"action script\" for the passed in QPushButton passed in. Constructor: btnDoubleClickedTrigger(self, btn) Return: None Arguments: self btn Optional Arguments: drawPlgButton [ MnsPicker class method] This is the main dynamic button draw method. Flow: - Acquire PLG - calculate local space position - gather all relevant settings - draw the button based on the gathered settings and position, and connect it's click signal. Constructor: drawPlgButton(self, plg) Return: None Arguments: self plg Optional Arguments: setButtonHiddenStateBasedOnType [ MnsPicker class method] This method is used to define the 'visibility' state for the given butoon. The state is calculated by the attributes of the btn, and once established, the visibility state is set into the btns. Instead of drawing only valid buttons according to the UI state, ALL of the buttons are drawen every time the UI is, then this method is used to 'show' only valid ones. UI state to process: - 'primaries', 'secodaries' and 'tertiaries' buttons state - Current tab (body or facial) Constructor: setButtonHiddenStateBasedOnType(self) Return: None Arguments: self Optional Arguments: editBtnTrigger [ MnsPicker class method] Trigger method for the 'edit' command. This method will attempt to open the 'PLGSettings Tool' UI, as well as load the selected btn related plg into it, if possible. First the related scene plg is acquired and selected (if requested), then, an 'acquire' attempt is made in order to catch the settings window from global (acquirePickerSettingsWin). If the window was acquired seccessfully, its being loaded and a 'loadSelection' trigger is passed into it, in order to load the requested related plg settings into the UI. Constructor: editBtnTrigger(self, plgBtn) Return: None Arguments: self plgBtn Optional Arguments: pickerQPushButton [Class] A simple QPushButton re-implementation. This reimplementation is used to control the button's mouse events, used in 'Edit' mode. Constructor: pickerQPushButton( parent ( str ) ; [default: None]) Inherits from: QtWidgets.QPushButton Class Members: plgNode clickOffset clickedSignal last Methods: mouseDoubleClickEvent [method] mouseMoveEvent [method] mouseReleaseEvent [method] pickerQPushButton methods mouseDoubleClickEvent [ pickerQPushButton class method] Constructor: mouseDoubleClickEvent(self, QMouseEvent) Return: None Arguments: self QMouseEvent Optional Arguments: mouseMoveEvent [ pickerQPushButton class method] Re implementation of the QMouseMove event trigger. In addition to the default event, a 'btn move' implementation is added, in order for the user to move buttons across the UI in edit mode. Once the trigger is called, an initial check of the 'edit' button is performed. If the edit mode is on (editMode_btn.isChecked()), a move processing is established: - A 'Click To Local' offset is calculated (as the position of the btn is dectated by the btn's top left corener) - The button is translated into the new calculatd position (same position) - When the mouse is moved, the btn is translated to it's new position taking the offset into acount. A global boundingbox check is performed with every move, preventing the user from draging the button 'out of bounds'. Constructor: mouseMoveEvent(self, QMouseEvent) Return: None Arguments: self QMouseEvent Optional Arguments: mouseReleaseEvent [ pickerQPushButton class method] This event re-implementation is used to trigger an 'Button Position Edit' Finished event. Once a user moved a button across the UI, and chosen a new position- meaning released the mouse press, this event is triggered and the new position is set. Then a process is called to re-position the related PLG within the scene, to store the new position correctly. Constructor: mouseReleaseEvent(self, QMouseEvent) Return: None Arguments: self QMouseEvent Optional Arguments:","title":"Picker"},{"location":"picker/#picker","text":"=== Author: Assaf Ben Zur === mnsPicker UI Class This is the UI defenition for the dynamic picker UI build. The picker is essentially defined by the user using scene guides and attributes, this class handles the dynamic drawing of the picker into an actual live UI. - The global width and height attributes of the window is read from the \"Picker Layout Base\" - The picker buttons positions are read and interperted from the rig's 'Picker Layout Guides' - The buttons display settings and actions are drawen from each PLG attributes, which can be editted using the PLG Setting tool.","title":"picker"},{"location":"picker/#classes","text":"","title":"Classes"},{"location":"picker/#mnspicker-class","text":"Picker UI Class. Constructor: MnsPicker( parent ( str ) ; [default: mnsUIUtils.get_maya_window()]) Inherits from: form_class, base_class Class Members: iconsDir rigTops rigTop puppetRoot pickerBase btnDrawDict btnControlRelationship deselectList namespace bodyCtrls facialCtrls rubberBand origin mayaSelectCallBack Methods: collectCurrentCtrls [method] displayHowToUseGuide [method] getCurrentCtrls [method] goToModuleRoot [method] initializeUI [method] setModuleVisStateBasedOnState [method] setRigTop [method] refreshBtnState [method] determaineSelection [method] btnClickedTrigger [method] connectSignals [method] destroyUI [method] initializeView [method] getPlgPositionandSize [method] acquirePickerSettingsWin [method] eventFilter [method] setBGImage [method] loadWindow [method] openMenu [method] btnDoubleClickedTrigger [method] drawPlgButton [method] setButtonHiddenStateBasedOnType [method] editBtnTrigger [method]","title":"MnsPicker [Class]"},{"location":"picker/#mnspicker-methods","text":"","title":"MnsPicker  methods"},{"location":"picker/#pickerqpushbutton-class","text":"A simple QPushButton re-implementation. This reimplementation is used to control the button's mouse events, used in 'Edit' mode. Constructor: pickerQPushButton( parent ( str ) ; [default: None]) Inherits from: QtWidgets.QPushButton Class Members: plgNode clickOffset clickedSignal last Methods: mouseDoubleClickEvent [method] mouseMoveEvent [method] mouseReleaseEvent [method]","title":"pickerQPushButton [Class]"},{"location":"picker/#pickerqpushbutton-methods","text":"","title":"pickerQPushButton  methods"},{"location":"plgSettings/","text":"plgSettings === Author: Assaf Ben Zur === mnsPickerSettings UI Class This is simple UI class built to handle user manipulation to PLG settings easily. The settings window (at freest state) handles: - Color - Side - Control goruping (body/facial) - scaleX, scaleY - Button text - font size, color - font bold, italic, underline - controls select - Action script (pre/post) Classes MnsPLGSettingsUI [Class] mnsPickerSettings UI Class. Constructor: MnsPLGSettingsUI( parent ( str ) ; [default: mnsUIUtils.get_maya_window()]) Inherits from: form_class, base_class Class Members: iconsDir pickerWin relatedButton currentPlgNode Methods: clearScript [method] clearControls [method] createAndLoadPlg [method] runScript [method] acquirePickerWin [method] acquireRelatedButtonForPlg [method] addSceneSelectedControls [method] updateControlsSelect [method] updateActionScript [method] updateButtonColor [method] updateCtrlGroup [method] updatePre [method] updateScale [method] updateSide [method] updateButtonText [method] updateButtonTextColor [method] updateButtonFont [method] updateButtonFontSize [method] connectSignals [method] refreshPickerWindow [method] initView [method] loadSelection [method] removeSceneSelectedControls [method] replaceControls [method] selectControls [method] loadWindow [method] clearView [method] MnsPLGSettingsUI methods clearScript [ MnsPLGSettingsUI class method] 'Clear' (ActionScript) button trigger. Constructor: clearScript(self) Return: None Arguments: self Optional Arguments: clearControls [ MnsPLGSettingsUI class method] 'Clear' (Controls Select) button trigger. Constructor: clearControls(self) Return: None Arguments: self Optional Arguments: createAndLoadPlg [ MnsPLGSettingsUI class method] 'Create PLG' button trigger. A simple wrapper to create a new free plg, then selecting it and loading it into the UI. Constructor: createAndLoadPlg(self) Return: None Arguments: self Optional Arguments: runScript [ MnsPLGSettingsUI class method] 'Run Script' button trigger. Constructor: runScript(self) Return: None Arguments: self Optional Arguments: acquirePickerWin [ MnsPLGSettingsUI class method] A simple method to acquire a 'Picker' UI from global if exists. This is done to manipultae a live picker in turn, instead of needing to refresh the picker. Constructor: acquirePickerWin(self) Return: None Arguments: self Optional Arguments: acquireRelatedButtonForPlg [ MnsPLGSettingsUI class method] Acquire the related button to plg from a picker UI, if it exists. Constructor: acquireRelatedButtonForPlg(self, plg) Return: None Arguments: self plg Optional Arguments: addSceneSelectedControls [ MnsPLGSettingsUI class method] Add current scene selection into the controls to select list. Constructor: addSceneSelectedControls(self) Return: None Arguments: self Optional Arguments: updateControlsSelect [ MnsPLGSettingsUI class method] Button 'controls select' update requested trigger. Constructor: updateControlsSelect(self) Return: None Arguments: self Optional Arguments: updateActionScript [ MnsPLGSettingsUI class method] Button Action-script update requested trigger. Constructor: updateActionScript(self) Return: None Arguments: self Optional Arguments: updateButtonColor [ MnsPLGSettingsUI class method] Button color update requested trigger. Constructor: updateButtonColor(self) Return: None Arguments: self Optional Arguments: updateCtrlGroup [ MnsPLGSettingsUI class method] Button group update requested trigger. Constructor: updateCtrlGroup(self) Return: None Arguments: self Optional Arguments: updatePre [ MnsPLGSettingsUI class method] Button pre checkbox update requested trigger. Constructor: updatePre(self) Return: None Arguments: self Optional Arguments: updateScale [ MnsPLGSettingsUI class method] Button scale update requested trigger. Constructor: updateScale(self, size, kwargs) Return: None Arguments: self size kwargs Optional Arguments: updateSide [ MnsPLGSettingsUI class method] Button side update requested trigger. Constructor: updateSide(self) Return: None Arguments: self Optional Arguments: updateButtonText [ MnsPLGSettingsUI class method] Button text update requested trigger. Constructor: updateButtonText(self) Return: None Arguments: self Optional Arguments: updateButtonTextColor [ MnsPLGSettingsUI class method] Button text-color update requested trigger. Constructor: updateButtonTextColor(self) Return: None Arguments: self Optional Arguments: updateButtonFont [ MnsPLGSettingsUI class method] Button text-font update requested trigger. Constructor: updateButtonFont(self) Return: None Arguments: self Optional Arguments: updateButtonFontSize [ MnsPLGSettingsUI class method] Button text-size update requested trigger. Constructor: updateButtonFontSize(self, size) Return: None Arguments: self size Optional Arguments: connectSignals [ MnsPLGSettingsUI class method] Connect all UI signals. Constructor: connectSignals(self) Return: None Arguments: self Optional Arguments: refreshPickerWindow [ MnsPLGSettingsUI class method] In case a picker window is aquired, call it's 'refresh' method. Constructor: refreshPickerWindow(self) Return: None Arguments: self Optional Arguments: initView [ MnsPLGSettingsUI class method] Initialize view: - Set title - Set Icons - Initialize sides comboBox Constructor: initView(self) Return: None Arguments: self Optional Arguments: loadSelection [ MnsPLGSettingsUI class method] Main UI method- load current selection into the UI. This method will handle reading, and acquiring all settings into the UI from the selected PLG (only it is a plg type). Constructor: loadSelection(self, kwargs) Return: None Arguments: self kwargs Optional Arguments: removeSceneSelectedControls [ MnsPLGSettingsUI class method] Remove current selection from the controls list. Constructor: removeSceneSelectedControls(self) Return: None Arguments: self Optional Arguments: replaceControls [ MnsPLGSettingsUI class method] Replace current 'controls list' with the current scene selection. Constructor: replaceControls(self) Return: None Arguments: self Optional Arguments: selectControls [ MnsPLGSettingsUI class method] Select current controls list btn trigger. Constructor: selectControls(self) Return: None Arguments: self Optional Arguments: loadWindow [ MnsPLGSettingsUI class method] Show windoe method. Constructor: loadWindow(self) Return: None Arguments: self Optional Arguments: clearView [ MnsPLGSettingsUI class method] This method clears all setting from the UI, and restores 'empty' state. Constructor: clearView(self) Return: None Arguments: self Optional Arguments:","title":"plgSettings"},{"location":"plgSettings/#plgsettings","text":"=== Author: Assaf Ben Zur === mnsPickerSettings UI Class This is simple UI class built to handle user manipulation to PLG settings easily. The settings window (at freest state) handles: - Color - Side - Control goruping (body/facial) - scaleX, scaleY - Button text - font size, color - font bold, italic, underline - controls select - Action script (pre/post)","title":"plgSettings"},{"location":"plgSettings/#classes","text":"","title":"Classes"},{"location":"plgSettings/#mnsplgsettingsui-class","text":"mnsPickerSettings UI Class. Constructor: MnsPLGSettingsUI( parent ( str ) ; [default: mnsUIUtils.get_maya_window()]) Inherits from: form_class, base_class Class Members: iconsDir pickerWin relatedButton currentPlgNode Methods: clearScript [method] clearControls [method] createAndLoadPlg [method] runScript [method] acquirePickerWin [method] acquireRelatedButtonForPlg [method] addSceneSelectedControls [method] updateControlsSelect [method] updateActionScript [method] updateButtonColor [method] updateCtrlGroup [method] updatePre [method] updateScale [method] updateSide [method] updateButtonText [method] updateButtonTextColor [method] updateButtonFont [method] updateButtonFontSize [method] connectSignals [method] refreshPickerWindow [method] initView [method] loadSelection [method] removeSceneSelectedControls [method] replaceControls [method] selectControls [method] loadWindow [method] clearView [method]","title":"MnsPLGSettingsUI [Class]"},{"location":"plgSettings/#mnsplgsettingsui-methods","text":"","title":"MnsPLGSettingsUI  methods"},{"location":"pluginRelease/","text":"pluginRelease PluginRelease UI Class. === Author: Assaf Ben Zur === This admin util is used to procedurally release the mnsPlugins library and version control it. The UI will find c++ projects based on a directory (which can be changed), and will allow the user (admin) to add it to the next build. On top of that, the UI will find the latest released version and extract the existing library within it, and update the release colums accordingly. In case a plugin build exists in the latest version, but it's build project isn't available, the plugin will add to the release option with a flag \"[version]\"- This means that the plugin can only be copied from the version selected to the next release- it cannot bild. Of course this behaviour means that the internal version of the plugin will not change (expected behaviour) to inform the user of the ACTUAL plugin version. This Tool is meant to BUILD the project on each release as opposed to getting a copy of n .mll file. This means that the VS project will have to be maintained (expected) in order to be released- hence keeping up to date with maya's releases. The tool contains a version release choice between patch/minor/major and none. All mnsReleases, including this tool will mark a version with a suffix of the path version . a dateTime stamp. This tool also includes a maya version choice for release which will access a different build configuration within the VS project. The tool accesses the version parameter using a custom macro inserted into the VS project- which will be written with the user version choice- in order for the user to see the correct version when using the plugin-manager \"info\". Classes MnsPluginBuild [Class] MnsPluginBuild Class. A conviniency class. This class will contain eixsting plugin builds. Should contain a plugin name, directory, buildAvailable (bool), and a prevVerDirectory if a build is not available\" Used to access information in a clean manner. Constructor: MnsPluginBuild( name ( str ) ; [default: \"\"], direct ( str ) ; [default: \"\"], buildAvailable ( bool ) ; [default: False], prevVerDirectory ( str ) ; [default: \"\"]) Inherits from: object Class Members: pluginName pluginDirectory buildAvailable prevVerDirectory MnsPluginRelease [Class] pluginRelease UI class Constructor: MnsPluginRelease( parent ( str ) ; [default: mnsUIUtils.get_maya_window()]) Inherits from: form_class, base_class Class Members: pluginBuilds existingPluginNames existingVersionsFoundNames latestVersionPath Methods: getCMakeBaseDir [method] buildPlugin [method] linux_mnsLicDigest_addExtraCMakeLines [method] selectDevDir [method] selectRelDir [method] connectSignals [method] getNewVerString [method] getVersionsForBuild [method] getLastestReleaseVer [method] initExistingDirs [method] releasePluginVer [method] releasePluginVer_legacy [method] loadWindow [method] sortLists [method] dirChanged [method] splitVerStringToList [method] MnsPluginRelease methods getCMakeBaseDir [ MnsPluginRelease class method] Constructor: getCMakeBaseDir(self) Return: None Arguments: self Optional Arguments: buildPlugin [ MnsPluginRelease class method] Constructor: buildPlugin(self, MnsPluginBuild = None, cMakeDir = None, newVersionRootDir = None, plat = \"win\", versionString = None) Return: None Arguments: self MnsPluginBuild ( str ) ; [default: None] cMakeDir ( str ) ; [default: None] newVersionRootDir ( str ) ; [default: None] plat ( str ) ; [default: \"win\"] versionString ( str ) ; [default: None] Optional Arguments: linux_mnsLicDigest_addExtraCMakeLines [ MnsPluginRelease class method] Constructor: linux_mnsLicDigest_addExtraCMakeLines(self, cmakeListsFile = None) Return: None Arguments: self cmakeListsFile ( str ) ; [default: None] Optional Arguments: selectDevDir [ MnsPluginRelease class method] Change dev directory trigger action. Prompts a directory-select dialog for the user to change the dev directory. A directory change will trigger a 'text-changed' signal emit. Constructor: selectDevDir(self) Return: None Arguments: self Optional Arguments: selectRelDir [ MnsPluginRelease class method] Change release directory trigger action. Prompts a directory-select dialog for the user to change the release directory. A directory change will trigger a 'text-changed' signal emit. Constructor: selectRelDir(self) Return: None Arguments: self Optional Arguments: connectSignals [ MnsPluginRelease class method] Connect all the UI signals Constructor: connectSignals(self) Return: None Arguments: self Optional Arguments: getNewVerString [ MnsPluginRelease class method] Get a new vesrtion string based on user version element upgrade. Return as a string. Constructor: getNewVerString(self) Return: string (new version id as string) Arguments: self Optional Arguments: getVersionsForBuild [ MnsPluginRelease class method] Get all valid maya versions for the plugin build directory passed. Constructor: getVersionsForBuild(self, buildDir) Return: list (compatibleVersions) Arguments: self buildDir Optional Arguments: getLastestReleaseVer [ MnsPluginRelease class method] Get the latest version for the build directory Constructor: getLastestReleaseVer(self) Return: None Arguments: self Optional Arguments: initExistingDirs [ MnsPluginRelease class method] Initialize existing directory. Find all available builds for the selected directory. Constructor: initExistingDirs(self) Return: None Arguments: self Optional Arguments: releasePluginVer [ MnsPluginRelease class method] Main version release button trigger. Compiles all needed information based on user UI slections, and triggers a new version build. Constructor: releasePluginVer(self) Return: None Arguments: self Optional Arguments: releasePluginVer_legacy [ MnsPluginRelease class method] Main version release button trigger. Compiles all needed information based on user UI slections, and triggers a new version build. Constructor: releasePluginVer_legacy(self) Return: None Arguments: self Optional Arguments: loadWindow [ MnsPluginRelease class method] Main window load Constructor: loadWindow(self) Return: None Arguments: self Optional Arguments: sortLists [ MnsPluginRelease class method] Simple function to re-sort both culomn items. Used Throughout to simply update the display Constructor: sortLists(self) Return: None Arguments: self Optional Arguments: dirChanged [ MnsPluginRelease class method] User directory changed trigger action Constructor: dirChanged(self) Return: None Arguments: self Optional Arguments: splitVerStringToList [ MnsPluginRelease class method] split version string to a path/minor/major/timestamp elements Constructor: splitVerStringToList(self, versionString) Return: list (versionString) Arguments: self versionString Optional Arguments:","title":"pluginRelease"},{"location":"pluginRelease/#pluginrelease","text":"PluginRelease UI Class. === Author: Assaf Ben Zur === This admin util is used to procedurally release the mnsPlugins library and version control it. The UI will find c++ projects based on a directory (which can be changed), and will allow the user (admin) to add it to the next build. On top of that, the UI will find the latest released version and extract the existing library within it, and update the release colums accordingly. In case a plugin build exists in the latest version, but it's build project isn't available, the plugin will add to the release option with a flag \"[version]\"- This means that the plugin can only be copied from the version selected to the next release- it cannot bild. Of course this behaviour means that the internal version of the plugin will not change (expected behaviour) to inform the user of the ACTUAL plugin version. This Tool is meant to BUILD the project on each release as opposed to getting a copy of n .mll file. This means that the VS project will have to be maintained (expected) in order to be released- hence keeping up to date with maya's releases. The tool contains a version release choice between patch/minor/major and none. All mnsReleases, including this tool will mark a version with a suffix of the path version . a dateTime stamp. This tool also includes a maya version choice for release which will access a different build configuration within the VS project. The tool accesses the version parameter using a custom macro inserted into the VS project- which will be written with the user version choice- in order for the user to see the correct version when using the plugin-manager \"info\".","title":"pluginRelease"},{"location":"pluginRelease/#classes","text":"","title":"Classes"},{"location":"pluginRelease/#mnspluginbuild-class","text":"MnsPluginBuild Class. A conviniency class. This class will contain eixsting plugin builds. Should contain a plugin name, directory, buildAvailable (bool), and a prevVerDirectory if a build is not available\" Used to access information in a clean manner. Constructor: MnsPluginBuild( name ( str ) ; [default: \"\"], direct ( str ) ; [default: \"\"], buildAvailable ( bool ) ; [default: False], prevVerDirectory ( str ) ; [default: \"\"]) Inherits from: object Class Members: pluginName pluginDirectory buildAvailable prevVerDirectory","title":"MnsPluginBuild [Class]"},{"location":"pluginRelease/#mnspluginrelease-class","text":"pluginRelease UI class Constructor: MnsPluginRelease( parent ( str ) ; [default: mnsUIUtils.get_maya_window()]) Inherits from: form_class, base_class Class Members: pluginBuilds existingPluginNames existingVersionsFoundNames latestVersionPath Methods: getCMakeBaseDir [method] buildPlugin [method] linux_mnsLicDigest_addExtraCMakeLines [method] selectDevDir [method] selectRelDir [method] connectSignals [method] getNewVerString [method] getVersionsForBuild [method] getLastestReleaseVer [method] initExistingDirs [method] releasePluginVer [method] releasePluginVer_legacy [method] loadWindow [method] sortLists [method] dirChanged [method] splitVerStringToList [method]","title":"MnsPluginRelease [Class]"},{"location":"pluginRelease/#mnspluginrelease-methods","text":"","title":"MnsPluginRelease  methods"},{"location":"prefixSuffix/","text":"prefixSuffix === Author: Assaf Ben Zur === All global prefix and suffix declerations. All global Mns pre-defined dictionaries creation (i.e. mnsTypeDict/mnsSidesDict/mnsBuildObjectTypes) This module also holds the MnsTypeStd class and the MnsNameStd class. This module holds any global dict creation defenitions used in MNS. Classes MnsNameStd [Class] This class holds simple attributes to extend pythos's 'node' object in order to preserve additional information regarding a node. Any name related methods are held by this class. Constructor: MnsNameStd( **kwargs ) Inherits from: object Class Members: node side body type id alpha suffix name namespace comment Methods: buildName [method] findNextAlphaIncrement [method] findNextIncrement [method] splitName [method] MnsNameStd methods buildName [ MnsNameStd class method] Build the instance's name based on the current class members defenitions. Constructor: buildName(self) Return: None Arguments: self Optional Arguments: findNextAlphaIncrement [ MnsNameStd class method] Recursive. Find next available Alpha id increment Constructor: findNextAlphaIncrement(self) Return: None Arguments: self Optional Arguments: findNextIncrement [ MnsNameStd class method] Recursive. Find next available id increment Constructor: findNextIncrement(self) Return: None Arguments: self Optional Arguments: splitName [ MnsNameStd class method] This function splits a given node name as string into an MnsNameStd object Constructor: splitName(self) Return: None Arguments: self Optional Arguments: MnsTypeStd [Class] This class holds simple attributes to extend pythos's 'type' object in order to preserve additional information regarding a node's type. Constructor: MnsTypeStd( **kwargs ) Inherits from: object Class Members: name suffix createName comment","title":"prefixSuffix"},{"location":"prefixSuffix/#prefixsuffix","text":"=== Author: Assaf Ben Zur === All global prefix and suffix declerations. All global Mns pre-defined dictionaries creation (i.e. mnsTypeDict/mnsSidesDict/mnsBuildObjectTypes) This module also holds the MnsTypeStd class and the MnsNameStd class. This module holds any global dict creation defenitions used in MNS.","title":"prefixSuffix"},{"location":"prefixSuffix/#classes","text":"","title":"Classes"},{"location":"prefixSuffix/#mnsnamestd-class","text":"This class holds simple attributes to extend pythos's 'node' object in order to preserve additional information regarding a node. Any name related methods are held by this class. Constructor: MnsNameStd( **kwargs ) Inherits from: object Class Members: node side body type id alpha suffix name namespace comment Methods: buildName [method] findNextAlphaIncrement [method] findNextIncrement [method] splitName [method]","title":"MnsNameStd [Class]"},{"location":"prefixSuffix/#mnsnamestd-methods","text":"","title":"MnsNameStd  methods"},{"location":"prefixSuffix/#mnstypestd-class","text":"This class holds simple attributes to extend pythos's 'type' object in order to preserve additional information regarding a node's type. Constructor: MnsTypeStd( **kwargs ) Inherits from: object Class Members: name suffix createName comment","title":"MnsTypeStd [Class]"},{"location":"productRelease/","text":"productRelease === Author: Assaf Ben Zur === Classes MnsProductRelease [Class] Main UI class Constructor: MnsProductRelease( parent ( str ) ; [default: mnsUIUtils.get_maya_window()]) Inherits from: form_class, base_class Class Members: iconsDir pluginReleaseDir existingPluginVerLib releaseRootDir existingProductVerLib latestVerList releaseExclustions Methods: gatherExistingPluginVersions [method] gatherExistingProductVersions [method] getNextReleaseVersion [method] releaseVersion [method] createCopyrightHeaderInPythonFile [method] loadWindow [method] connectSignals [method] MnsProductRelease methods gatherExistingPluginVersions [ MnsProductRelease class method] Constructor: gatherExistingPluginVersions(self) Return: None Arguments: self Optional Arguments: gatherExistingProductVersions [ MnsProductRelease class method] Constructor: gatherExistingProductVersions(self) Return: None Arguments: self Optional Arguments: getNextReleaseVersion [ MnsProductRelease class method] Constructor: getNextReleaseVersion(self) Return: None Arguments: self Optional Arguments: releaseVersion [ MnsProductRelease class method] Constructor: releaseVersion(self) Return: None Arguments: self Optional Arguments: createCopyrightHeaderInPythonFile [ MnsProductRelease class method] Constructor: createCopyrightHeaderInPythonFile(self, filePath = None) Return: None Arguments: self filePath ( str ) ; [default: None] Optional Arguments: loadWindow [ MnsProductRelease class method] Main window load. Constructor: loadWindow(self) Return: None Arguments: self Optional Arguments: connectSignals [ MnsProductRelease class method] Connect all the UI signals Constructor: connectSignals(self) Return: None Arguments: self Optional Arguments:","title":"productRelease"},{"location":"productRelease/#productrelease","text":"=== Author: Assaf Ben Zur ===","title":"productRelease"},{"location":"productRelease/#classes","text":"","title":"Classes"},{"location":"productRelease/#mnsproductrelease-class","text":"Main UI class Constructor: MnsProductRelease( parent ( str ) ; [default: mnsUIUtils.get_maya_window()]) Inherits from: form_class, base_class Class Members: iconsDir pluginReleaseDir existingPluginVerLib releaseRootDir existingProductVerLib latestVerList releaseExclustions Methods: gatherExistingPluginVersions [method] gatherExistingProductVersions [method] getNextReleaseVersion [method] releaseVersion [method] createCopyrightHeaderInPythonFile [method] loadWindow [method] connectSignals [method]","title":"MnsProductRelease [Class]"},{"location":"productRelease/#mnsproductrelease-methods","text":"","title":"MnsProductRelease  methods"},{"location":"simpleSquash/","text":"simpleSquash Author: Asaf Ben-Zur Best used for: Head Squash, Nose, any general squash behaviour This module will create a squash behaviour to it's slave joint. Any child modules under this module will inherit the squash behaviour. The squash behaviour can be set by the module's settings, and can also be adjusted and keyed post construction. Defenitions construct Constructor: construct(mansur, MnsBuildModule, kwargs) Return: list (controls), dict (internalSpaces), MnsNameStd (moduleSpaceAttrHost) Arguments: mansur MnsBuildModule kwargs Keyword Arguments: customGuides Constructor: customGuides(mansur, builtGuides) Return: None Arguments: mansur builtGuides Keyword Arguments:","title":"simpleSquash"},{"location":"simpleSquash/#simplesquash","text":"Author: Asaf Ben-Zur Best used for: Head Squash, Nose, any general squash behaviour This module will create a squash behaviour to it's slave joint. Any child modules under this module will inherit the squash behaviour. The squash behaviour can be set by the module's settings, and can also be adjusted and keyed post construction.","title":"simpleSquash"},{"location":"simpleSquash/#defenitions","text":"","title":"Defenitions"},{"location":"simpleSquash/#construct","text":"Constructor: construct(mansur, MnsBuildModule, kwargs) Return: list (controls), dict (internalSpaces), MnsNameStd (moduleSpaceAttrHost) Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"construct"},{"location":"simpleSquash/#customguides","text":"Constructor: customGuides(mansur, builtGuides) Return: None Arguments: mansur builtGuides Keyword Arguments:","title":"customGuides"},{"location":"simpleSquash_settings/","text":"simpleSquash Settings Author: Asaf Ben-Zur Best used for: Head Squash, Nose, any general squash behaviour This module will create a squash behaviour to it's slave joint. Any child modules under this module will inherit the squash behaviour. The squash behaviour can be set by the module's settings, and can also be adjusted and keyed post construction. Attributes GlobalSettings Attribute Name Default Description controlShape arrow Main control shape upLocalDirection 0 Comment wasn't inserted Squash Attribute Name Default Description squashFactor 0.5 Squash Factor default value squashMin 0.8 Squash Minimum scale value squashMax 1.2 Squash Maximum scale value Stretch Attribute Name Default Description stretchFactor 0.5 Stretch Factor default value stretchMin 0.8 Stretch Minimum scale value stretchMax 1.2 Comment wasn't inserted ChanControl Attribute Name Default Description channelControl T R S X v Y v Z v Squash control channel-box settings","title":"simpleSquash settings"},{"location":"simpleSquash_settings/#simplesquash-settings","text":"Author: Asaf Ben-Zur Best used for: Head Squash, Nose, any general squash behaviour This module will create a squash behaviour to it's slave joint. Any child modules under this module will inherit the squash behaviour. The squash behaviour can be set by the module's settings, and can also be adjusted and keyed post construction.","title":"simpleSquash Settings"},{"location":"simpleSquash_settings/#attributes","text":"","title":"Attributes"},{"location":"simpleSquash_settings/#globalsettings","text":"Attribute Name Default Description controlShape arrow Main control shape upLocalDirection 0 Comment wasn't inserted","title":"GlobalSettings"},{"location":"simpleSquash_settings/#squash","text":"Attribute Name Default Description squashFactor 0.5 Squash Factor default value squashMin 0.8 Squash Minimum scale value squashMax 1.2 Squash Maximum scale value","title":"Squash"},{"location":"simpleSquash_settings/#stretch","text":"Attribute Name Default Description stretchFactor 0.5 Stretch Factor default value stretchMin 0.8 Stretch Minimum scale value stretchMax 1.2 Comment wasn't inserted","title":"Stretch"},{"location":"simpleSquash_settings/#chancontrol","text":"Attribute Name Default Description channelControl T R S X v Y v Z v Squash control channel-box settings","title":"ChanControl"},{"location":"skinUtility/","text":"skinUtility === Author: Assaf Ben Zur === Defenitions copySkin Constructor: copySkin(sourceMeshes = [], targetMeshes = [], kwargs) Return: None Arguments: sourceMeshes ( list ) ; [default: []] targetMeshes ( list ) ; [default: []] kwargs Keyword Arguments: createCombinedSkinProxyFromMeshes Constructor: createCombinedSkinProxyFromMeshes(sourceMeshes = []) Return: None Arguments: sourceMeshes ( list ) ; [default: []] Keyword Arguments: exportSkin Constructor: exportSkin(nodes = []) Return: None Arguments: nodes ( list ) ; [default: []] Keyword Arguments: filterValidMeshesFromList Constructor: filterValidMeshesFromList(meshTransforms = [], skinnedOnly = False, notSkinnedOnly = False) Return: None Arguments: meshTransforms ( list ) ; [default: []] skinnedOnly ( bool ) ; [default: False] notSkinnedOnly ( bool ) ; [default: False] Keyword Arguments: gatherBlendWeights Constructor: gatherBlendWeights(dagPath, components, skinClusterFn) Return: None Arguments: dagPath components skinClusterFn Keyword Arguments: gatherDataFromSkinCluster Constructor: gatherDataFromSkinCluster(skinClusterNode = None) Return: None Arguments: skinClusterNode ( str ) ; [default: None] Keyword Arguments: gatherInfluenceJointsFromMesh Constructor: gatherInfluenceJointsFromMesh(skinnedMesh = None) Return: None Arguments: skinnedMesh ( str ) ; [default: None] Keyword Arguments: gatherInfluenceJointsFromMeshes Constructor: gatherInfluenceJointsFromMeshes(sourceMeshes = None) Return: None Arguments: sourceMeshes ( str ) ; [default: None] Keyword Arguments: gatherInfluenceWeights Constructor: gatherInfluenceWeights(dagPath, components, skinClusterFn) Return: None Arguments: dagPath components skinClusterFn Keyword Arguments: gatherSkinData Constructor: gatherSkinData(nodes = []) Return: None Arguments: nodes ( list ) ; [default: []] Keyword Arguments: gatherSkinDataFromFile Constructor: gatherSkinDataFromFile(filePath = None) Return: None Arguments: filePath ( str ) ; [default: None] Keyword Arguments: getCurrentWeights Constructor: getCurrentWeights(dagPath, components, skinClusterFn) Return: None Arguments: dagPath components skinClusterFn Keyword Arguments: getGeometryComponents Constructor: getGeometryComponents(skinClusterFn = None) Return: None Arguments: skinClusterFn ( str ) ; [default: None] Keyword Arguments: getMeshesFromData Constructor: getMeshesFromData(skinsData = None) Return: None Arguments: skinsData ( str ) ; [default: None] Keyword Arguments: getSkinClusterFromMeshTransform Constructor: getSkinClusterFromMeshTransform(meshTransform = None) Return: None Arguments: meshTransform ( str ) ; [default: None] Keyword Arguments: getSkinningJointsFromSelection Constructor: getSkinningJointsFromSelection(mode = 1, kwargs) Return: list Arguments: mode ( int ) ; [default: 1] kwargs Keyword Arguments: importSkin Constructor: importSkin(filePath = None, kwargs) Return: None Arguments: filePath ( str ) ; [default: None] kwargs Keyword Arguments: injectSkinClusterNodeToMfn Constructor: injectSkinClusterNodeToMfn(skinClusterNode = None) Return: None Arguments: skinClusterNode ( str ) ; [default: None] Keyword Arguments: rebind Constructor: rebind(sourceMeshes = []) Return: None Arguments: sourceMeshes ( list ) ; [default: []] Keyword Arguments: setBlendWeights Constructor: setBlendWeights(dagPath, components, scFn, skinData) Return: None Arguments: dagPath components scFn skinData Keyword Arguments: setInfluenceWeights Constructor: setInfluenceWeights(dagPath, components, scFn, skinData) Return: None Arguments: dagPath components scFn skinData Keyword Arguments: setSkinData Constructor: setSkinData(skinClusterNode = None, skinData = None) Return: None Arguments: skinClusterNode ( str ) ; [default: None] skinData ( str ) ; [default: None] Keyword Arguments: unbind Constructor: unbind(sourceMeshes = []) Return: None Arguments: sourceMeshes ( list ) ; [default: []] Keyword Arguments:","title":"skinUtility"},{"location":"skinUtility/#skinutility","text":"=== Author: Assaf Ben Zur ===","title":"skinUtility"},{"location":"skinUtility/#defenitions","text":"","title":"Defenitions"},{"location":"skinUtility/#copyskin","text":"Constructor: copySkin(sourceMeshes = [], targetMeshes = [], kwargs) Return: None Arguments: sourceMeshes ( list ) ; [default: []] targetMeshes ( list ) ; [default: []] kwargs Keyword Arguments:","title":"copySkin"},{"location":"skinUtility/#createcombinedskinproxyfrommeshes","text":"Constructor: createCombinedSkinProxyFromMeshes(sourceMeshes = []) Return: None Arguments: sourceMeshes ( list ) ; [default: []] Keyword Arguments:","title":"createCombinedSkinProxyFromMeshes"},{"location":"skinUtility/#exportskin","text":"Constructor: exportSkin(nodes = []) Return: None Arguments: nodes ( list ) ; [default: []] Keyword Arguments:","title":"exportSkin"},{"location":"skinUtility/#filtervalidmeshesfromlist","text":"Constructor: filterValidMeshesFromList(meshTransforms = [], skinnedOnly = False, notSkinnedOnly = False) Return: None Arguments: meshTransforms ( list ) ; [default: []] skinnedOnly ( bool ) ; [default: False] notSkinnedOnly ( bool ) ; [default: False] Keyword Arguments:","title":"filterValidMeshesFromList"},{"location":"skinUtility/#gatherblendweights","text":"Constructor: gatherBlendWeights(dagPath, components, skinClusterFn) Return: None Arguments: dagPath components skinClusterFn Keyword Arguments:","title":"gatherBlendWeights"},{"location":"skinUtility/#gatherdatafromskincluster","text":"Constructor: gatherDataFromSkinCluster(skinClusterNode = None) Return: None Arguments: skinClusterNode ( str ) ; [default: None] Keyword Arguments:","title":"gatherDataFromSkinCluster"},{"location":"skinUtility/#gatherinfluencejointsfrommesh","text":"Constructor: gatherInfluenceJointsFromMesh(skinnedMesh = None) Return: None Arguments: skinnedMesh ( str ) ; [default: None] Keyword Arguments:","title":"gatherInfluenceJointsFromMesh"},{"location":"skinUtility/#gatherinfluencejointsfrommeshes","text":"Constructor: gatherInfluenceJointsFromMeshes(sourceMeshes = None) Return: None Arguments: sourceMeshes ( str ) ; [default: None] Keyword Arguments:","title":"gatherInfluenceJointsFromMeshes"},{"location":"skinUtility/#gatherinfluenceweights","text":"Constructor: gatherInfluenceWeights(dagPath, components, skinClusterFn) Return: None Arguments: dagPath components skinClusterFn Keyword Arguments:","title":"gatherInfluenceWeights"},{"location":"skinUtility/#gatherskindata","text":"Constructor: gatherSkinData(nodes = []) Return: None Arguments: nodes ( list ) ; [default: []] Keyword Arguments:","title":"gatherSkinData"},{"location":"skinUtility/#gatherskindatafromfile","text":"Constructor: gatherSkinDataFromFile(filePath = None) Return: None Arguments: filePath ( str ) ; [default: None] Keyword Arguments:","title":"gatherSkinDataFromFile"},{"location":"skinUtility/#getcurrentweights","text":"Constructor: getCurrentWeights(dagPath, components, skinClusterFn) Return: None Arguments: dagPath components skinClusterFn Keyword Arguments:","title":"getCurrentWeights"},{"location":"skinUtility/#getgeometrycomponents","text":"Constructor: getGeometryComponents(skinClusterFn = None) Return: None Arguments: skinClusterFn ( str ) ; [default: None] Keyword Arguments:","title":"getGeometryComponents"},{"location":"skinUtility/#getmeshesfromdata","text":"Constructor: getMeshesFromData(skinsData = None) Return: None Arguments: skinsData ( str ) ; [default: None] Keyword Arguments:","title":"getMeshesFromData"},{"location":"skinUtility/#getskinclusterfrommeshtransform","text":"Constructor: getSkinClusterFromMeshTransform(meshTransform = None) Return: None Arguments: meshTransform ( str ) ; [default: None] Keyword Arguments:","title":"getSkinClusterFromMeshTransform"},{"location":"skinUtility/#getskinningjointsfromselection","text":"Constructor: getSkinningJointsFromSelection(mode = 1, kwargs) Return: list Arguments: mode ( int ) ; [default: 1] kwargs Keyword Arguments:","title":"getSkinningJointsFromSelection"},{"location":"skinUtility/#importskin","text":"Constructor: importSkin(filePath = None, kwargs) Return: None Arguments: filePath ( str ) ; [default: None] kwargs Keyword Arguments:","title":"importSkin"},{"location":"skinUtility/#injectskinclusternodetomfn","text":"Constructor: injectSkinClusterNodeToMfn(skinClusterNode = None) Return: None Arguments: skinClusterNode ( str ) ; [default: None] Keyword Arguments:","title":"injectSkinClusterNodeToMfn"},{"location":"skinUtility/#rebind","text":"Constructor: rebind(sourceMeshes = []) Return: None Arguments: sourceMeshes ( list ) ; [default: []] Keyword Arguments:","title":"rebind"},{"location":"skinUtility/#setblendweights","text":"Constructor: setBlendWeights(dagPath, components, scFn, skinData) Return: None Arguments: dagPath components scFn skinData Keyword Arguments:","title":"setBlendWeights"},{"location":"skinUtility/#setinfluenceweights","text":"Constructor: setInfluenceWeights(dagPath, components, scFn, skinData) Return: None Arguments: dagPath components scFn skinData Keyword Arguments:","title":"setInfluenceWeights"},{"location":"skinUtility/#setskindata","text":"Constructor: setSkinData(skinClusterNode = None, skinData = None) Return: None Arguments: skinClusterNode ( str ) ; [default: None] skinData ( str ) ; [default: None] Keyword Arguments:","title":"setSkinData"},{"location":"skinUtility/#unbind","text":"Constructor: unbind(sourceMeshes = []) Return: None Arguments: sourceMeshes ( list ) ; [default: []] Keyword Arguments:","title":"unbind"},{"location":"string/","text":"string === Author: Assaf Ben Zur === This module covers all custom string operations used in MNS Defenitions camelCaseSplit Split input string into array based on the 'camel-casing' rule. Constructor: camelCaseSplit(ccString) Return: list (splitted string) Arguments: ccString Keyword Arguments: combineStringList Combine the given string array, into a single string, using the 'separatorS' string input as a seperator. Constructor: combineStringList(stringList = [], separatorS = \" \") Return: string (combined string) Arguments: stringList ( list ) ; [default: []] separatorS ( str ) ; [default: \"\"] Keyword Arguments: flattenArray Flatten a given list into a single string, seperated by commas Constructor: flattenArray(array = []) Return: string Arguments: array ( list ) ; [default: []] Keyword Arguments: flattenArrayColon Flatten a given list into a single string, seperated by colons Constructor: flattenArrayColon(array = []) Return: string Arguments: array ( list ) ; [default: []] Keyword Arguments: flattenArrayKeepBracets Flatten a given list into a single string, seperated by commas, adding the open and close square brackets as string. Constructor: flattenArrayKeepBracets(array = []) Return: string Arguments: array ( list ) ; [default: []] Keyword Arguments: flattenArrayKeepBracetsAndStrings Flatten a given list into a single string, seperated by commas, adding the open and close square brackets as string as well as add the \" into the actual string elements. Constructor: flattenArrayKeepBracetsAndStrings(array = []) Return: string Arguments: array ( list ) ; [default: []] Keyword Arguments: flattenArraySpace Flatten a given list into a single string, seperated by spaces Constructor: flattenArraySpace(array = []) Return: string Arguments: array ( list ) ; [default: []] Keyword Arguments: splitStringToArray Split the given string into a formatted array, using a \",\" split. Constructor: splitStringToArray(stringSplit = \"\") Return: list (splitted string) Arguments: stringSplit ( str ) ; [default: \"\"] Keyword Arguments: stringConvertToString convert the input provided to a string, regardless of its type. Constructor: stringConvertToString(var) Return: None Arguments: var Keyword Arguments: stringMultiReplaceBySingle Replace all given string characters by the 'replaceBy' string given. Constructor: stringMultiReplaceBySingle(element = \"\", replaceStrings = [], replaceBy = \"\") Return: string Arguments: element ( str ) ; [default: \"\"] replaceStrings ( list ) ; [default: []] replaceBy ( str ) ; [default: \"\"] Keyword Arguments:","title":"String"},{"location":"string/#string","text":"=== Author: Assaf Ben Zur === This module covers all custom string operations used in MNS","title":"string"},{"location":"string/#defenitions","text":"","title":"Defenitions"},{"location":"string/#camelcasesplit","text":"Split input string into array based on the 'camel-casing' rule. Constructor: camelCaseSplit(ccString) Return: list (splitted string) Arguments: ccString Keyword Arguments:","title":"camelCaseSplit"},{"location":"string/#combinestringlist","text":"Combine the given string array, into a single string, using the 'separatorS' string input as a seperator. Constructor: combineStringList(stringList = [], separatorS = \" \") Return: string (combined string) Arguments: stringList ( list ) ; [default: []] separatorS ( str ) ; [default: \"\"] Keyword Arguments:","title":"combineStringList"},{"location":"string/#flattenarray","text":"Flatten a given list into a single string, seperated by commas Constructor: flattenArray(array = []) Return: string Arguments: array ( list ) ; [default: []] Keyword Arguments:","title":"flattenArray"},{"location":"string/#flattenarraycolon","text":"Flatten a given list into a single string, seperated by colons Constructor: flattenArrayColon(array = []) Return: string Arguments: array ( list ) ; [default: []] Keyword Arguments:","title":"flattenArrayColon"},{"location":"string/#flattenarraykeepbracets","text":"Flatten a given list into a single string, seperated by commas, adding the open and close square brackets as string. Constructor: flattenArrayKeepBracets(array = []) Return: string Arguments: array ( list ) ; [default: []] Keyword Arguments:","title":"flattenArrayKeepBracets"},{"location":"string/#flattenarraykeepbracetsandstrings","text":"Flatten a given list into a single string, seperated by commas, adding the open and close square brackets as string as well as add the \" into the actual string elements. Constructor: flattenArrayKeepBracetsAndStrings(array = []) Return: string Arguments: array ( list ) ; [default: []] Keyword Arguments:","title":"flattenArrayKeepBracetsAndStrings"},{"location":"string/#flattenarrayspace","text":"Flatten a given list into a single string, seperated by spaces Constructor: flattenArraySpace(array = []) Return: string Arguments: array ( list ) ; [default: []] Keyword Arguments:","title":"flattenArraySpace"},{"location":"string/#splitstringtoarray","text":"Split the given string into a formatted array, using a \",\" split. Constructor: splitStringToArray(stringSplit = \"\") Return: list (splitted string) Arguments: stringSplit ( str ) ; [default: \"\"] Keyword Arguments:","title":"splitStringToArray"},{"location":"string/#stringconverttostring","text":"convert the input provided to a string, regardless of its type. Constructor: stringConvertToString(var) Return: None Arguments: var Keyword Arguments:","title":"stringConvertToString"},{"location":"string/#stringmultireplacebysingle","text":"Replace all given string characters by the 'replaceBy' string given. Constructor: stringMultiReplaceBySingle(element = \"\", replaceStrings = [], replaceBy = \"\") Return: string Arguments: element ( str ) ; [default: \"\"] replaceStrings ( list ) ; [default: []] replaceBy ( str ) ; [default: \"\"] Keyword Arguments:","title":"stringMultiReplaceBySingle"},{"location":"userManagement/","text":"userManagement === Author: Assaf Ben Zur === Classes MnsUserManagement [Class] Main UI class Constructor: MnsUserManagement( parent ( str ) ; [default: mnsUIUtils.get_maya_window()]) Inherits from: form_class, base_class Class Members: iconsDir dataDirectory data Methods: checkUserValidity [method] clearUserManagement [method] createAccount [method] initView [method] readData [method] setPrice [method] setSelection [method] writeData [method] subscribe [method] toggleAutoRenew [method] applyDataFromManageUsers [method] echo [method] createRandomHex [method] deleteItemsOfLayout [method] drawUserSlot [method] setLicenseAutoRenew [method] setLicenseExpired [method] setCouponStateForUser [method] getItemPrice [method] drawManageUsers [method] loadWindow [method] connectSignals [method] openManageMenu [method] openMenu [method] MnsUserManagement methods checkUserValidity [ MnsUserManagement class method] Constructor: checkUserValidity(self) Return: None Arguments: self Optional Arguments: clearUserManagement [ MnsUserManagement class method] Constructor: clearUserManagement(self) Return: None Arguments: self Optional Arguments: createAccount [ MnsUserManagement class method] Constructor: createAccount(self) Return: None Arguments: self Optional Arguments: initView [ MnsUserManagement class method] Constructor: initView(self) Return: None Arguments: self Optional Arguments: readData [ MnsUserManagement class method] Constructor: readData(self) Return: None Arguments: self Optional Arguments: setPrice [ MnsUserManagement class method] Constructor: setPrice(self) Return: None Arguments: self Optional Arguments: setSelection [ MnsUserManagement class method] Constructor: setSelection(self) Return: None Arguments: self Optional Arguments: writeData [ MnsUserManagement class method] Constructor: writeData(self) Return: None Arguments: self Optional Arguments: subscribe [ MnsUserManagement class method] Constructor: subscribe(self, kwargs) Return: None Arguments: self kwargs Optional Arguments: toggleAutoRenew [ MnsUserManagement class method] Constructor: toggleAutoRenew(self, actualLicItem) Return: None Arguments: self actualLicItem Optional Arguments: applyDataFromManageUsers [ MnsUserManagement class method] Constructor: applyDataFromManageUsers(self, actualLicItem = None, user_le = None, pw_le = None) Return: None Arguments: self actualLicItem ( str ) ; [default: None] user_le ( str ) ; [default: None] pw_le ( str ) ; [default: None] Optional Arguments: echo [ MnsUserManagement class method] Constructor: echo(self, exhoText = \"\") Return: None Arguments: self exhoText ( str ) ; [default: \"\"] Optional Arguments: createRandomHex [ MnsUserManagement class method] Constructor: createRandomHex(self, iteration = 0) Return: None Arguments: self iteration ( int ) ; [default: 0] Optional Arguments: deleteItemsOfLayout [ MnsUserManagement class method] Constructor: deleteItemsOfLayout(self, layout, kwargs) Return: None Arguments: self layout kwargs Optional Arguments: drawUserSlot [ MnsUserManagement class method] Constructor: drawUserSlot(self, licItem = None, kwargs) Return: None Arguments: self licItem ( str ) ; [default: None] kwargs Optional Arguments: setLicenseAutoRenew [ MnsUserManagement class method] Constructor: setLicenseAutoRenew(self, licenseItem) Return: None Arguments: self licenseItem Optional Arguments: setLicenseExpired [ MnsUserManagement class method] Constructor: setLicenseExpired(self, licenseItem) Return: None Arguments: self licenseItem Optional Arguments: setCouponStateForUser [ MnsUserManagement class method] Constructor: setCouponStateForUser(self, user) Return: None Arguments: self user Optional Arguments: getItemPrice [ MnsUserManagement class method] Constructor: getItemPrice(self, user, licType = \"Basic\", numNewLicenses = 1) Return: None Arguments: self user licType ( str ) ; [default: \"Basic\"] numNewLicenses ( int ) ; [default: 1] Optional Arguments: drawManageUsers [ MnsUserManagement class method] Constructor: drawManageUsers(self, userItem) Return: None Arguments: self userItem Optional Arguments: loadWindow [ MnsUserManagement class method] Main window load. Constructor: loadWindow(self) Return: None Arguments: self Optional Arguments: connectSignals [ MnsUserManagement class method] Connect all the UI signals Constructor: connectSignals(self) Return: None Arguments: self Optional Arguments: openManageMenu [ MnsUserManagement class method] This is the \"right click\" or \"contextMenuRequested\" trigger. This method defines the right-click menu items and their respective operations. Constructor: openManageMenu(self, position) Return: None Arguments: self position Optional Arguments: openMenu [ MnsUserManagement class method] This is the \"right click\" or \"contextMenuRequested\" trigger. This method defines the right-click menu items and their respective operations. Constructor: openMenu(self, position) Return: None Arguments: self position Optional Arguments:","title":"userManagement"},{"location":"userManagement/#usermanagement","text":"=== Author: Assaf Ben Zur ===","title":"userManagement"},{"location":"userManagement/#classes","text":"","title":"Classes"},{"location":"userManagement/#mnsusermanagement-class","text":"Main UI class Constructor: MnsUserManagement( parent ( str ) ; [default: mnsUIUtils.get_maya_window()]) Inherits from: form_class, base_class Class Members: iconsDir dataDirectory data Methods: checkUserValidity [method] clearUserManagement [method] createAccount [method] initView [method] readData [method] setPrice [method] setSelection [method] writeData [method] subscribe [method] toggleAutoRenew [method] applyDataFromManageUsers [method] echo [method] createRandomHex [method] deleteItemsOfLayout [method] drawUserSlot [method] setLicenseAutoRenew [method] setLicenseExpired [method] setCouponStateForUser [method] getItemPrice [method] drawManageUsers [method] loadWindow [method] connectSignals [method] openManageMenu [method] openMenu [method]","title":"MnsUserManagement [Class]"},{"location":"userManagement/#mnsusermanagement-methods","text":"","title":"MnsUserManagement  methods"},{"location":"utility/","text":"utility === Author: Assaf Ben Zur === Global Core MNS utility module. This module holds any 'global' function used within MNS. A 'misc' style module. Defenitions addAttrToObj A global conditioned wrapper for adding attributes to object/objects Exceptions: 1. Object to add attr to was found non-existing or invalid. Abort. 2. The 'replace' flag wasn't set, and the attribute already exists. Abort. 3. Attr name wasn't passed in. Abort. 4. The attribute type passed doesn't match the attribute value passed. Abort. 5. min/max values were passed in, although the attr type is not an Int or a Float. Skip min/max values. 6. min/max values were passed, and the attr type is Int or Float, although the min/max values passed arn't matching the data type. Skip min/max. 7. The replace flag was set to True, but the attribute doesn't exist. Ignore replace flag. Constructor: addAttrToObj(objects = [], kwargs) Return: list (added attributes 'attr' objects list) Arguments: objects ( list ) ; [default: []] kwargs Keyword Arguments: name ( str ) - Added attribute name replace ( bool ) - If attr exists and this flag is set to True- delete the existing attribute then recreate according to parameters type ( str ) ; [default: string] - Added attribute type value ( str ) ; [default: None] - Added attribute value max ( str ) ; [default: None] - Added attribute max (only if float or int) min ( str ) ; [default: None] - Added attribute min (only if float or int) locked ( bool ) - Added attribute lock state cb ( bool ) ; [default: True] - Added attribute channelBox/Displayed state keyable ( bool ) ; [default: True] - Added attribute keyable state enumDefault ( int ) - If added attr is enum, set its default to this value addBlockClasIDToObj Add a 'blkClassId' Attribute to the given input. Constructor: addBlockClasIDToObj(objectA, kwargs) Return: PyAttribute ('blkClassID') Arguments: objectA kwargs Keyword Arguments: applyChennelControlAttributesToTransform This method applies a 'channelControl' dict attributes into the given transform. Constructor: applyChennelControlAttributesToTransform(transform = None, ccDict = {}) Return: None Arguments: transform ( str ) ; [default: None] ccDict ( dict ) ; [default: {}] Keyword Arguments: autoLoadMnsPlugins Constructor: autoLoadMnsPlugins() Return: None Arguments: Keyword Arguments: checkForInternetConnection check for a valid internet connection. Constructor: checkForInternetConnection(host=\"8.8.8.8\", port=53, timeout=3) Return: bool Arguments: host ( str ) ; [default: \"8.8.8.8\"] port ( int ) ; [default: 53] timeout ( int ) ; [default: 3] Keyword Arguments: checkFunctionRedundencyForPackage Constructor: checkFunctionRedundencyForPackage(package, printRedundentOnly = True) Return: None Arguments: package printRedundentOnly ( bool ) ; [default: True] Keyword Arguments: checkIfObjExistsAndSet For the object passed in- three main cases: 1. If it is a 'PyNode' object, set it as the object to check. 2. If it is an MnsNameStd object,set it's .node property as the object to check. 3. If it is a string, assign it into a 'PyNode' obhect and set it as the object to check. Check whether the object exists in the current scene and valid. If so, return it. Else return None. Constructor: checkIfObjExistsAndSet(objB = None, kwargs) Return: PyNode if valid, None if not. Arguments: objB ( str ) ; [default: None] kwargs Keyword Arguments: obj ( str ) ; [default: objB] - object to act on and return namespace ( str ) checkLocalAxisPairing This method will check and return local axis pairing. Main use is for pre-connection check for pocNode and curveVarNode tweakers (inputs), in order to link local axes correctly, avoiding the need to check aim and up axes, as well as the offset axes. Constructor: checkLocalAxisPairing(origin = None, target = None) Return: dict (pairingDict - {\"x\", \"y\",\"z\"}) Arguments: origin ( str ) ; [default: None] target ( str ) ; [default: None] Keyword Arguments: connectShapeColorRGB Constructor: connectShapeColorRGB(source = None, target = None) Return: None Arguments: source ( str ) ; [default: None] target ( str ) ; [default: None] Keyword Arguments: convertAlphaToInt Recursive. Convert an Alpha input into an Int ID. Infinite. Constructor: convertAlphaToInt(alpha = \"A\") Return: int Arguments: alpha ( str ) ; [default: \"A\"] Keyword Arguments: convertIntToAlpha Recursive. Convert an Int input into an Alpha ID. Infinite. Constructor: convertIntToAlpha(intA = 0) Return: string Arguments: intA ( int ) ; [default: 0] Keyword Arguments: convertNodeToNameStd Attempt to convert a given node into a MnsNameStd object. Constructor: convertNodeToNameStd(node) Return: None Arguments: node Keyword Arguments: createAxisLamberts An axes colored lambert shaders creation function. Constructor: createAxisLamberts( kwargs) Return: dict ('X': xAxisLambert, 'Y': yAixsLambert, 'Z': zAxisLambert) Arguments: kwargs Keyword Arguments: doX ( bool ) ; [default: True] doY ( bool ) ; [default: True] doZ ( bool ) ; [default: True] deleteAll ( bool ) - If true, do not attempt to create any objects- instead look for any existing objects and delete them createFreeOffsetGroup For the given transform, create a free offset group transform parent. Constructor: createFreeOffsetGroup(transformObject) Return: MnsNameStd (offsetGrp) Arguments: transformObject Keyword Arguments: createMnsDefaultPrefs This method is called whenever a pref read is being called. In case this method fails to locate local prefs for the current user, it creates it from the defualt prefs file. Also, this method contains the \"restore\" flag, which will create a new prefs local file from the default file regardless of any other choice. This is used as a \"restore factory defaults\" option. Constructor: createMnsDefaultPrefs( kwargs) Return: string (prefs file path) Arguments: kwargs Keyword Arguments: createNodeReturnNameStd A core major MNS function. This function creates a new node, based on it's type passed in, and it's name parameters passed in, and returns it as a MnsNameStd object. This function also contains the 'search for next valid name' functionallity: In case the given parameter set returns an object name that already exists within the current scene a 'Handle' functionallity will be triggered: - In case the 'IncrementAlpha' argument is Flase, recursivly increment the ID value until a new name slot is available within the scene. - In case it's Flase, do the same while incrementing the Alpha value instead. Unlike Maya's core behavior- This function tests whether an object name exists whithin the entire scene- not only whether it exists whithin the current hirarchy level. In a sequence manner creation- the Alpha/ID should be incremented within the caller function loop- meaning while bulding an item sequence the 'search' functionallity should not be used. Another funtionallity of this function is the 'Fix Shape Name' functionallity: A simple shpe children name test of an object (after creation) and a renaming them. Constructor: createNodeReturnNameStd( kwargs) Return: MnsNameStd Arguments: kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: pointsOnCurve] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True buildType ( int ) createBlkClassID ( bool ) createBlkCtrlTypeID ( bool ) blkCtrlTypeID ( int ) parentNode ( str ) ; [default: None] segmentScaleCompensate ( bool ) createOffsetGroup For the given transform, create a predefined offset group transform parent. Constructor: createOffsetGroup(transformObject, kwargs) Return: MnsNameStd (offsetGrp) Arguments: transformObject kwargs Keyword Arguments: type ( str ) ; [default: offsetGrp] deleteFile A delete file global function that includes a pre-defined log write. Constructor: deleteFile(file) Return: None Arguments: file Keyword Arguments: distBetween Measure the distance between to maya transforms. Constructor: distBetween(transformA = None, transformB = None) Return: float (distance) Arguments: transformA ( str ) ; [default: None] transformB ( str ) ; [default: None] Keyword Arguments: extractHeaderFromPath Constructor: extractHeaderFromPath(fullPath) Return: None Arguments: fullPath Keyword Arguments: findAndReplaceInFile This is a simple method to replace the pattern given with a substitute string within a file, Then overriting the original file with new lines. Constructor: findAndReplaceInFile(file_path, pattern, subst) Return: None Arguments: file_path pattern subst Keyword Arguments: fixShapesName Simple shape name fix function based on parent's name. Constructor: fixShapesName(objects = []) Return: None Arguments: objects ( list ) ; [default: []] Keyword Arguments: getCurrentVersion Get the current mansur product version based on this file directory Constructor: getCurrentVersion() Return: string (version) Arguments: Keyword Arguments: getFirstLevelParentForObject Get the top level parent for a given object. Constructor: getFirstLevelParentForObject(obj) Return: pyNode (top level parent) Arguments: obj Keyword Arguments: getMansurPrefs This method retrives all of the current prefrences. In case the 'returnFileDirectory' flag is set to true, this will return the path of the prefs file, instead of the preferences as a dict. Constructor: getMansurPrefs( kwargs) Return: dict (prefrences) Arguments: kwargs Keyword Arguments: getNumLinesForDir Constructor: getNumLinesForDir(directory = \"D/mansurProject/mansurRig/scripts/mansur\") Return: None Arguments: directory ( str ) ; [default: \"D:/mansurProject/mansurRig/scripts/mansur\"] Keyword Arguments: getSideFromNode Attempt to collect the given input's side. Constructor: getSideFromNode(node) Return: string (side) Arguments: node Keyword Arguments: getTopParentForObj Recursively attempt to fet the top node of the maya heirarchy, from the given input upwards. Constructor: getTopParentForObj(obj) Return: MnsNameStd (Top Parent) Arguments: obj Keyword Arguments: getTopParentForSel get the top node of the current selected object's maya heirarchy. Constructor: getTopParentForSel() Return: MnsNameStd (Top Parent) Arguments: Keyword Arguments: importModuleFromPath Attempt to import the given path as a python package into the global scope. Constructor: importModuleFromPath(path) Return: pythonPkg Arguments: path Keyword Arguments: isPluginLoaded Constructor: isPluginLoaded(pluginName = None) Return: None Arguments: pluginName ( str ) ; [default: None] Keyword Arguments: jointOrientToRotation Transfer all jointOrient attributes for the jnt hirerchy to rotations. Essentially bake the joint orient attributes for the joints. Constructor: jointOrientToRotation(topNode = None) Return: None Arguments: topNode ( str ) ; [default: None] Keyword Arguments: locatePreferencesDirectory This method is used across to locate the prefs directory for the current user. Constructor: locatePreferencesDirectory() Return: string (preferences directory path) Arguments: Keyword Arguments: lockAndHideAllTransforms Lock and hide all of the given node's attributes. Override flags can be inserted to skip requested channels. Constructor: lockAndHideAllTransforms(node = None, kwargs) Return: bool Arguments: node ( str ) ; [default: None] kwargs Keyword Arguments: lock ( bool ) keyable ( bool ) cb ( bool ) t ( bool ) ; [default: True] r ( bool ) ; [default: True] s ( bool ) ; [default: True] x ( bool ) ; [default: True] y ( bool ) ; [default: True] z ( bool ) ; [default: True] lockAndHideTransforms Based on the given flags, lock/unlock, hide/unhide attributes for the given node. Constructor: lockAndHideTransforms(node = None, kwargs) Return: bool Arguments: node ( str ) ; [default: None] kwargs Keyword Arguments: lock ( bool ) keyable ( bool ) cb ( bool ) negateOperation ( bool ) tx ( bool ) ; [default: True] ty ( bool ) ; [default: True] tz ( bool ) ; [default: True] rx ( bool ) ; [default: True] ry ( bool ) ; [default: True] rz ( bool ) ; [default: True] sx ( bool ) ; [default: True] sy ( bool ) ; [default: True] sz ( bool ) ; [default: True] mnsLicStatusCheck Constructor: mnsLicStatusCheck() Return: None Arguments: Keyword Arguments: objectArrayValidExistsCheckReturn MNS core object array validity check. Two main Cases for the mode parameter: 1. trueOnlyIfAllValid - Run through the objects and only if ALL of them are found existing and valid, return the array back to the caller. If a single item failed- Return None. 2. trueIfSomeValid - Check all the objects and return any or all of them based on validity. Constructor: objectArrayValidExistsCheckReturn( kwargs) Return: List (Valid object list), None (If found invalid) Arguments: kwargs Keyword Arguments: objectArray ( list ) ; [default: [' ']] - Objects input list mode ( int ) - Validity return mode readJson Read the input json path into formatted python variables. Constructor: readJson(fullPath) Return: FormattedPythonJson Arguments: fullPath Keyword Arguments: readSetteingFromFile Read mns setting from a given file and collect into a dict. Constructor: readSetteingFromFile(settingsPath) Return: dict (arguments) Arguments: settingsPath Keyword Arguments: reloadLib Constructor: reloadLib() Return: None Arguments: Keyword Arguments: removeNamespaceFromString Constructor: removeNamespaceFromString(value) Return: None Arguments: value Keyword Arguments: returnIndexFromSideDict Return the corresponding index from the pre-defined input dictionary, for the given input elenment. Constructor: returnIndexFromSideDict(dict, searchElement) Return: int (index) Arguments: dict searchElement Keyword Arguments: returnKeyFromElementTypeDict Constructor: returnKeyFromElementTypeDict(dict, searchElement) Return: None Arguments: dict searchElement Keyword Arguments: returnNameStdChangeElement global MnsNameStd utility- Use this function to change any elemnt within a given MnsNameStd object based on keyword args given Constructor: returnNameStdChangeElement(nameStd = None, kwargs) Return: MnsNameStd Arguments: nameStd ( str ) ; [default: None] kwargs Keyword Arguments: autoRename ( bool ) ; [default: True] bodyPattern ( str ) ; [default: None] node ( str ) ; [default: nameStd.node] - change node parameter side ( str ) ; [default: nameStd.side] - change side parameter body ( str ) ; [default: nameStd.body] - change body parameter type ( str ) ; [default: nameStd.type] - change type parameter id ( str ) ; [default: nameStd.id] - change id parameter alpha ( str ) ; [default: nameStd.alpha] - change alpha parameter suffix ( str ) ; [default: nameStd.suffix] - change suffix comment ( str ) ; [default: nameStd.comment] - change comment parameter setAttr mns set attr. Simple method to set attributes. two cases: 1. attribute isn't locked - set the value 2. attribute is locked - unlock the attribute, set it's value, and re-lock the attribute. Constructor: setAttr(attr, value) Return: None Arguments: attr value Keyword Arguments: setCtrlColorIdx Global utility function: Change the shape color override to index type, and set to the input value index Constructor: setCtrlColorIdx(objects = [], colorIdx = 0) Return: None Arguments: objects ( list ) ; [default: []] colorIdx ( int ) ; [default: 0] Keyword Arguments: setCtrlColorRGB Global utility function: Change the shape color override to RGB type, and set to the input value RGB Constructor: setCtrlColorRGB(objects = [], color = (1,1,1)) Return: None Arguments: objects ( list ) ; [default: []] color ( str ) ; [default: (1] 1 1) Keyword Arguments: sortNameStdArrayByID Attempt to sort the given array based on it's content ID's. Constructor: sortNameStdArrayByID(nameStdArray) Return: list (sorted list) Arguments: nameStdArray Keyword Arguments: sorted_alphanumeric returns an alphanumeric ordered data from input given Constructor: sorted_alphanumeric(data) Return: list (sorted data) Arguments: data Keyword Arguments: splitDateTimeStringToList Split a 'dateTime' string to a major/minor/patch/timestemp list Constructor: splitDateTimeStringToList(dateTime = \"\") Return: list Arguments: dateTime ( str ) ; [default: \"\"] Keyword Arguments: splitEnumAttrToChannelControlList Split a pre-defined 'channel-control' enum attribute into a formatted python dict. Constructor: splitEnumAttrToChannelControlList(enumAttrName, node) Return: dict (formatted dictionary) Arguments: enumAttrName node Keyword Arguments: splitEnumAttrToColorSchemeFloatTupleList Constructor: splitEnumAttrToColorSchemeFloatTupleList(enumAttrName, node) Return: list (formatted list of tuples) Arguments: enumAttrName node Keyword Arguments: splitEnumToStringList Split the given enum attribute is a formated python list. Constructor: splitEnumToStringList(enumAttrName, node) Return: list (formated list) Arguments: enumAttrName node Keyword Arguments: splitNameStringToNameStd Split a given string object and return a MnsNameStd based on it's structure. Constructor: splitNameStringToNameStd(nameString = \"\") Return: MnsNameStd Arguments: nameString ( str ) ; [default: \"\"] Keyword Arguments: validateAttrAndGet For the given transform (or nameStd)- check whether the given attr exists. If the attr exist, get it and return it. Constructor: validateAttrAndGet(transform = None, attrName = \"\", default = None, kwargs) Return: bool (return status), unknownType (value) Arguments: transform ( str ) ; [default: None] attrName ( str ) ; [default: \"\"] default ( str ) ; [default: None] kwargs Keyword Arguments: validateNameStd For any input - string/PyNode/MnsNameStd - Validate it and attempt to convert it into a MnsNameStd Object. Constructor: validateNameStd(objectA) Return: MnsNameStd Arguments: objectA Keyword Arguments: writeJson Write the input data into the input json file path. Constructor: writeJson(directory, fileName, data = {}, kwargs) Return: None Arguments: directory fileName data ( dict ) ; [default: {}] kwargs Keyword Arguments: writeJsonFullPath Write the input data into the input json file path. Constructor: writeJsonFullPath(fullPath, data) Return: None Arguments: fullPath data Keyword Arguments: zeroJointOrient Zero all jointOrient attributes for the jnt hirerchy to rotations. Constructor: zeroJointOrient(topNode = None) Return: None Arguments: topNode ( str ) ; [default: None] Keyword Arguments: zeroTransforms Zero all available transforms for the given object passed in. Constructor: zeroTransforms(transform = \"\") Return: bool Arguments: transform ( str ) ; [default: \"\"] Keyword Arguments:","title":"Utility"},{"location":"utility/#utility","text":"=== Author: Assaf Ben Zur === Global Core MNS utility module. This module holds any 'global' function used within MNS. A 'misc' style module.","title":"utility"},{"location":"utility/#defenitions","text":"","title":"Defenitions"},{"location":"utility/#addattrtoobj","text":"A global conditioned wrapper for adding attributes to object/objects Exceptions: 1. Object to add attr to was found non-existing or invalid. Abort. 2. The 'replace' flag wasn't set, and the attribute already exists. Abort. 3. Attr name wasn't passed in. Abort. 4. The attribute type passed doesn't match the attribute value passed. Abort. 5. min/max values were passed in, although the attr type is not an Int or a Float. Skip min/max values. 6. min/max values were passed, and the attr type is Int or Float, although the min/max values passed arn't matching the data type. Skip min/max. 7. The replace flag was set to True, but the attribute doesn't exist. Ignore replace flag. Constructor: addAttrToObj(objects = [], kwargs) Return: list (added attributes 'attr' objects list) Arguments: objects ( list ) ; [default: []] kwargs Keyword Arguments: name ( str ) - Added attribute name replace ( bool ) - If attr exists and this flag is set to True- delete the existing attribute then recreate according to parameters type ( str ) ; [default: string] - Added attribute type value ( str ) ; [default: None] - Added attribute value max ( str ) ; [default: None] - Added attribute max (only if float or int) min ( str ) ; [default: None] - Added attribute min (only if float or int) locked ( bool ) - Added attribute lock state cb ( bool ) ; [default: True] - Added attribute channelBox/Displayed state keyable ( bool ) ; [default: True] - Added attribute keyable state enumDefault ( int ) - If added attr is enum, set its default to this value","title":"addAttrToObj"},{"location":"utility/#addblockclasidtoobj","text":"Add a 'blkClassId' Attribute to the given input. Constructor: addBlockClasIDToObj(objectA, kwargs) Return: PyAttribute ('blkClassID') Arguments: objectA kwargs Keyword Arguments:","title":"addBlockClasIDToObj"},{"location":"utility/#applychennelcontrolattributestotransform","text":"This method applies a 'channelControl' dict attributes into the given transform. Constructor: applyChennelControlAttributesToTransform(transform = None, ccDict = {}) Return: None Arguments: transform ( str ) ; [default: None] ccDict ( dict ) ; [default: {}] Keyword Arguments:","title":"applyChennelControlAttributesToTransform"},{"location":"utility/#autoloadmnsplugins","text":"Constructor: autoLoadMnsPlugins() Return: None Arguments: Keyword Arguments:","title":"autoLoadMnsPlugins"},{"location":"utility/#checkforinternetconnection","text":"check for a valid internet connection. Constructor: checkForInternetConnection(host=\"8.8.8.8\", port=53, timeout=3) Return: bool Arguments: host ( str ) ; [default: \"8.8.8.8\"] port ( int ) ; [default: 53] timeout ( int ) ; [default: 3] Keyword Arguments:","title":"checkForInternetConnection"},{"location":"utility/#checkfunctionredundencyforpackage","text":"Constructor: checkFunctionRedundencyForPackage(package, printRedundentOnly = True) Return: None Arguments: package printRedundentOnly ( bool ) ; [default: True] Keyword Arguments:","title":"checkFunctionRedundencyForPackage"},{"location":"utility/#checkifobjexistsandset","text":"For the object passed in- three main cases: 1. If it is a 'PyNode' object, set it as the object to check. 2. If it is an MnsNameStd object,set it's .node property as the object to check. 3. If it is a string, assign it into a 'PyNode' obhect and set it as the object to check. Check whether the object exists in the current scene and valid. If so, return it. Else return None. Constructor: checkIfObjExistsAndSet(objB = None, kwargs) Return: PyNode if valid, None if not. Arguments: objB ( str ) ; [default: None] kwargs Keyword Arguments: obj ( str ) ; [default: objB] - object to act on and return namespace ( str )","title":"checkIfObjExistsAndSet"},{"location":"utility/#checklocalaxispairing","text":"This method will check and return local axis pairing. Main use is for pre-connection check for pocNode and curveVarNode tweakers (inputs), in order to link local axes correctly, avoiding the need to check aim and up axes, as well as the offset axes. Constructor: checkLocalAxisPairing(origin = None, target = None) Return: dict (pairingDict - {\"x\", \"y\",\"z\"}) Arguments: origin ( str ) ; [default: None] target ( str ) ; [default: None] Keyword Arguments:","title":"checkLocalAxisPairing"},{"location":"utility/#connectshapecolorrgb","text":"Constructor: connectShapeColorRGB(source = None, target = None) Return: None Arguments: source ( str ) ; [default: None] target ( str ) ; [default: None] Keyword Arguments:","title":"connectShapeColorRGB"},{"location":"utility/#convertalphatoint","text":"Recursive. Convert an Alpha input into an Int ID. Infinite. Constructor: convertAlphaToInt(alpha = \"A\") Return: int Arguments: alpha ( str ) ; [default: \"A\"] Keyword Arguments:","title":"convertAlphaToInt"},{"location":"utility/#convertinttoalpha","text":"Recursive. Convert an Int input into an Alpha ID. Infinite. Constructor: convertIntToAlpha(intA = 0) Return: string Arguments: intA ( int ) ; [default: 0] Keyword Arguments:","title":"convertIntToAlpha"},{"location":"utility/#convertnodetonamestd","text":"Attempt to convert a given node into a MnsNameStd object. Constructor: convertNodeToNameStd(node) Return: None Arguments: node Keyword Arguments:","title":"convertNodeToNameStd"},{"location":"utility/#createaxislamberts","text":"An axes colored lambert shaders creation function. Constructor: createAxisLamberts( kwargs) Return: dict ('X': xAxisLambert, 'Y': yAixsLambert, 'Z': zAxisLambert) Arguments: kwargs Keyword Arguments: doX ( bool ) ; [default: True] doY ( bool ) ; [default: True] doZ ( bool ) ; [default: True] deleteAll ( bool ) - If true, do not attempt to create any objects- instead look for any existing objects and delete them","title":"createAxisLamberts"},{"location":"utility/#createfreeoffsetgroup","text":"For the given transform, create a free offset group transform parent. Constructor: createFreeOffsetGroup(transformObject) Return: MnsNameStd (offsetGrp) Arguments: transformObject Keyword Arguments:","title":"createFreeOffsetGroup"},{"location":"utility/#createmnsdefaultprefs","text":"This method is called whenever a pref read is being called. In case this method fails to locate local prefs for the current user, it creates it from the defualt prefs file. Also, this method contains the \"restore\" flag, which will create a new prefs local file from the default file regardless of any other choice. This is used as a \"restore factory defaults\" option. Constructor: createMnsDefaultPrefs( kwargs) Return: string (prefs file path) Arguments: kwargs Keyword Arguments:","title":"createMnsDefaultPrefs"},{"location":"utility/#createnodereturnnamestd","text":"A core major MNS function. This function creates a new node, based on it's type passed in, and it's name parameters passed in, and returns it as a MnsNameStd object. This function also contains the 'search for next valid name' functionallity: In case the given parameter set returns an object name that already exists within the current scene a 'Handle' functionallity will be triggered: - In case the 'IncrementAlpha' argument is Flase, recursivly increment the ID value until a new name slot is available within the scene. - In case it's Flase, do the same while incrementing the Alpha value instead. Unlike Maya's core behavior- This function tests whether an object name exists whithin the entire scene- not only whether it exists whithin the current hirarchy level. In a sequence manner creation- the Alpha/ID should be incremented within the caller function loop- meaning while bulding an item sequence the 'search' functionallity should not be used. Another funtionallity of this function is the 'Fix Shape Name' functionallity: A simple shpe children name test of an object (after creation) and a renaming them. Constructor: createNodeReturnNameStd( kwargs) Return: MnsNameStd Arguments: kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: pointsOnCurve] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True buildType ( int ) createBlkClassID ( bool ) createBlkCtrlTypeID ( bool ) blkCtrlTypeID ( int ) parentNode ( str ) ; [default: None] segmentScaleCompensate ( bool )","title":"createNodeReturnNameStd"},{"location":"utility/#createoffsetgroup","text":"For the given transform, create a predefined offset group transform parent. Constructor: createOffsetGroup(transformObject, kwargs) Return: MnsNameStd (offsetGrp) Arguments: transformObject kwargs Keyword Arguments: type ( str ) ; [default: offsetGrp]","title":"createOffsetGroup"},{"location":"utility/#deletefile","text":"A delete file global function that includes a pre-defined log write. Constructor: deleteFile(file) Return: None Arguments: file Keyword Arguments:","title":"deleteFile"},{"location":"utility/#distbetween","text":"Measure the distance between to maya transforms. Constructor: distBetween(transformA = None, transformB = None) Return: float (distance) Arguments: transformA ( str ) ; [default: None] transformB ( str ) ; [default: None] Keyword Arguments:","title":"distBetween"},{"location":"utility/#extractheaderfrompath","text":"Constructor: extractHeaderFromPath(fullPath) Return: None Arguments: fullPath Keyword Arguments:","title":"extractHeaderFromPath"},{"location":"utility/#findandreplaceinfile","text":"This is a simple method to replace the pattern given with a substitute string within a file, Then overriting the original file with new lines. Constructor: findAndReplaceInFile(file_path, pattern, subst) Return: None Arguments: file_path pattern subst Keyword Arguments:","title":"findAndReplaceInFile"},{"location":"utility/#fixshapesname","text":"Simple shape name fix function based on parent's name. Constructor: fixShapesName(objects = []) Return: None Arguments: objects ( list ) ; [default: []] Keyword Arguments:","title":"fixShapesName"},{"location":"utility/#getcurrentversion","text":"Get the current mansur product version based on this file directory Constructor: getCurrentVersion() Return: string (version) Arguments: Keyword Arguments:","title":"getCurrentVersion"},{"location":"utility/#getfirstlevelparentforobject","text":"Get the top level parent for a given object. Constructor: getFirstLevelParentForObject(obj) Return: pyNode (top level parent) Arguments: obj Keyword Arguments:","title":"getFirstLevelParentForObject"},{"location":"utility/#getmansurprefs","text":"This method retrives all of the current prefrences. In case the 'returnFileDirectory' flag is set to true, this will return the path of the prefs file, instead of the preferences as a dict. Constructor: getMansurPrefs( kwargs) Return: dict (prefrences) Arguments: kwargs Keyword Arguments:","title":"getMansurPrefs"},{"location":"utility/#getnumlinesfordir","text":"Constructor: getNumLinesForDir(directory = \"D/mansurProject/mansurRig/scripts/mansur\") Return: None Arguments: directory ( str ) ; [default: \"D:/mansurProject/mansurRig/scripts/mansur\"] Keyword Arguments:","title":"getNumLinesForDir"},{"location":"utility/#getsidefromnode","text":"Attempt to collect the given input's side. Constructor: getSideFromNode(node) Return: string (side) Arguments: node Keyword Arguments:","title":"getSideFromNode"},{"location":"utility/#gettopparentforobj","text":"Recursively attempt to fet the top node of the maya heirarchy, from the given input upwards. Constructor: getTopParentForObj(obj) Return: MnsNameStd (Top Parent) Arguments: obj Keyword Arguments:","title":"getTopParentForObj"},{"location":"utility/#gettopparentforsel","text":"get the top node of the current selected object's maya heirarchy. Constructor: getTopParentForSel() Return: MnsNameStd (Top Parent) Arguments: Keyword Arguments:","title":"getTopParentForSel"},{"location":"utility/#importmodulefrompath","text":"Attempt to import the given path as a python package into the global scope. Constructor: importModuleFromPath(path) Return: pythonPkg Arguments: path Keyword Arguments:","title":"importModuleFromPath"},{"location":"utility/#ispluginloaded","text":"Constructor: isPluginLoaded(pluginName = None) Return: None Arguments: pluginName ( str ) ; [default: None] Keyword Arguments:","title":"isPluginLoaded"},{"location":"utility/#jointorienttorotation","text":"Transfer all jointOrient attributes for the jnt hirerchy to rotations. Essentially bake the joint orient attributes for the joints. Constructor: jointOrientToRotation(topNode = None) Return: None Arguments: topNode ( str ) ; [default: None] Keyword Arguments:","title":"jointOrientToRotation"},{"location":"utility/#locatepreferencesdirectory","text":"This method is used across to locate the prefs directory for the current user. Constructor: locatePreferencesDirectory() Return: string (preferences directory path) Arguments: Keyword Arguments:","title":"locatePreferencesDirectory"},{"location":"utility/#lockandhidealltransforms","text":"Lock and hide all of the given node's attributes. Override flags can be inserted to skip requested channels. Constructor: lockAndHideAllTransforms(node = None, kwargs) Return: bool Arguments: node ( str ) ; [default: None] kwargs Keyword Arguments: lock ( bool ) keyable ( bool ) cb ( bool ) t ( bool ) ; [default: True] r ( bool ) ; [default: True] s ( bool ) ; [default: True] x ( bool ) ; [default: True] y ( bool ) ; [default: True] z ( bool ) ; [default: True]","title":"lockAndHideAllTransforms"},{"location":"utility/#lockandhidetransforms","text":"Based on the given flags, lock/unlock, hide/unhide attributes for the given node. Constructor: lockAndHideTransforms(node = None, kwargs) Return: bool Arguments: node ( str ) ; [default: None] kwargs Keyword Arguments: lock ( bool ) keyable ( bool ) cb ( bool ) negateOperation ( bool ) tx ( bool ) ; [default: True] ty ( bool ) ; [default: True] tz ( bool ) ; [default: True] rx ( bool ) ; [default: True] ry ( bool ) ; [default: True] rz ( bool ) ; [default: True] sx ( bool ) ; [default: True] sy ( bool ) ; [default: True] sz ( bool ) ; [default: True]","title":"lockAndHideTransforms"},{"location":"utility/#mnslicstatuscheck","text":"Constructor: mnsLicStatusCheck() Return: None Arguments: Keyword Arguments:","title":"mnsLicStatusCheck"},{"location":"utility/#objectarrayvalidexistscheckreturn","text":"MNS core object array validity check. Two main Cases for the mode parameter: 1. trueOnlyIfAllValid - Run through the objects and only if ALL of them are found existing and valid, return the array back to the caller. If a single item failed- Return None. 2. trueIfSomeValid - Check all the objects and return any or all of them based on validity. Constructor: objectArrayValidExistsCheckReturn( kwargs) Return: List (Valid object list), None (If found invalid) Arguments: kwargs Keyword Arguments: objectArray ( list ) ; [default: [' ']] - Objects input list mode ( int ) - Validity return mode","title":"objectArrayValidExistsCheckReturn"},{"location":"utility/#readjson","text":"Read the input json path into formatted python variables. Constructor: readJson(fullPath) Return: FormattedPythonJson Arguments: fullPath Keyword Arguments:","title":"readJson"},{"location":"utility/#readsetteingfromfile","text":"Read mns setting from a given file and collect into a dict. Constructor: readSetteingFromFile(settingsPath) Return: dict (arguments) Arguments: settingsPath Keyword Arguments:","title":"readSetteingFromFile"},{"location":"utility/#reloadlib","text":"Constructor: reloadLib() Return: None Arguments: Keyword Arguments:","title":"reloadLib"},{"location":"utility/#removenamespacefromstring","text":"Constructor: removeNamespaceFromString(value) Return: None Arguments: value Keyword Arguments:","title":"removeNamespaceFromString"},{"location":"utility/#returnindexfromsidedict","text":"Return the corresponding index from the pre-defined input dictionary, for the given input elenment. Constructor: returnIndexFromSideDict(dict, searchElement) Return: int (index) Arguments: dict searchElement Keyword Arguments:","title":"returnIndexFromSideDict"},{"location":"utility/#returnkeyfromelementtypedict","text":"Constructor: returnKeyFromElementTypeDict(dict, searchElement) Return: None Arguments: dict searchElement Keyword Arguments:","title":"returnKeyFromElementTypeDict"},{"location":"utility/#returnnamestdchangeelement","text":"global MnsNameStd utility- Use this function to change any elemnt within a given MnsNameStd object based on keyword args given Constructor: returnNameStdChangeElement(nameStd = None, kwargs) Return: MnsNameStd Arguments: nameStd ( str ) ; [default: None] kwargs Keyword Arguments: autoRename ( bool ) ; [default: True] bodyPattern ( str ) ; [default: None] node ( str ) ; [default: nameStd.node] - change node parameter side ( str ) ; [default: nameStd.side] - change side parameter body ( str ) ; [default: nameStd.body] - change body parameter type ( str ) ; [default: nameStd.type] - change type parameter id ( str ) ; [default: nameStd.id] - change id parameter alpha ( str ) ; [default: nameStd.alpha] - change alpha parameter suffix ( str ) ; [default: nameStd.suffix] - change suffix comment ( str ) ; [default: nameStd.comment] - change comment parameter","title":"returnNameStdChangeElement"},{"location":"utility/#setattr","text":"mns set attr. Simple method to set attributes. two cases: 1. attribute isn't locked - set the value 2. attribute is locked - unlock the attribute, set it's value, and re-lock the attribute. Constructor: setAttr(attr, value) Return: None Arguments: attr value Keyword Arguments:","title":"setAttr"},{"location":"utility/#setctrlcoloridx","text":"Global utility function: Change the shape color override to index type, and set to the input value index Constructor: setCtrlColorIdx(objects = [], colorIdx = 0) Return: None Arguments: objects ( list ) ; [default: []] colorIdx ( int ) ; [default: 0] Keyword Arguments:","title":"setCtrlColorIdx"},{"location":"utility/#setctrlcolorrgb","text":"Global utility function: Change the shape color override to RGB type, and set to the input value RGB Constructor: setCtrlColorRGB(objects = [], color = (1,1,1)) Return: None Arguments: objects ( list ) ; [default: []] color ( str ) ; [default: (1] 1 1) Keyword Arguments:","title":"setCtrlColorRGB"},{"location":"utility/#sortnamestdarraybyid","text":"Attempt to sort the given array based on it's content ID's. Constructor: sortNameStdArrayByID(nameStdArray) Return: list (sorted list) Arguments: nameStdArray Keyword Arguments:","title":"sortNameStdArrayByID"},{"location":"utility/#sorted_alphanumeric","text":"returns an alphanumeric ordered data from input given Constructor: sorted_alphanumeric(data) Return: list (sorted data) Arguments: data Keyword Arguments:","title":"sorted_alphanumeric"},{"location":"utility/#splitdatetimestringtolist","text":"Split a 'dateTime' string to a major/minor/patch/timestemp list Constructor: splitDateTimeStringToList(dateTime = \"\") Return: list Arguments: dateTime ( str ) ; [default: \"\"] Keyword Arguments:","title":"splitDateTimeStringToList"},{"location":"utility/#splitenumattrtochannelcontrollist","text":"Split a pre-defined 'channel-control' enum attribute into a formatted python dict. Constructor: splitEnumAttrToChannelControlList(enumAttrName, node) Return: dict (formatted dictionary) Arguments: enumAttrName node Keyword Arguments:","title":"splitEnumAttrToChannelControlList"},{"location":"utility/#splitenumattrtocolorschemefloattuplelist","text":"Constructor: splitEnumAttrToColorSchemeFloatTupleList(enumAttrName, node) Return: list (formatted list of tuples) Arguments: enumAttrName node Keyword Arguments:","title":"splitEnumAttrToColorSchemeFloatTupleList"},{"location":"utility/#splitenumtostringlist","text":"Split the given enum attribute is a formated python list. Constructor: splitEnumToStringList(enumAttrName, node) Return: list (formated list) Arguments: enumAttrName node Keyword Arguments:","title":"splitEnumToStringList"},{"location":"utility/#splitnamestringtonamestd","text":"Split a given string object and return a MnsNameStd based on it's structure. Constructor: splitNameStringToNameStd(nameString = \"\") Return: MnsNameStd Arguments: nameString ( str ) ; [default: \"\"] Keyword Arguments:","title":"splitNameStringToNameStd"},{"location":"utility/#validateattrandget","text":"For the given transform (or nameStd)- check whether the given attr exists. If the attr exist, get it and return it. Constructor: validateAttrAndGet(transform = None, attrName = \"\", default = None, kwargs) Return: bool (return status), unknownType (value) Arguments: transform ( str ) ; [default: None] attrName ( str ) ; [default: \"\"] default ( str ) ; [default: None] kwargs Keyword Arguments:","title":"validateAttrAndGet"},{"location":"utility/#validatenamestd","text":"For any input - string/PyNode/MnsNameStd - Validate it and attempt to convert it into a MnsNameStd Object. Constructor: validateNameStd(objectA) Return: MnsNameStd Arguments: objectA Keyword Arguments:","title":"validateNameStd"},{"location":"utility/#writejson","text":"Write the input data into the input json file path. Constructor: writeJson(directory, fileName, data = {}, kwargs) Return: None Arguments: directory fileName data ( dict ) ; [default: {}] kwargs Keyword Arguments:","title":"writeJson"},{"location":"utility/#writejsonfullpath","text":"Write the input data into the input json file path. Constructor: writeJsonFullPath(fullPath, data) Return: None Arguments: fullPath data Keyword Arguments:","title":"writeJsonFullPath"},{"location":"utility/#zerojointorient","text":"Zero all jointOrient attributes for the jnt hirerchy to rotations. Constructor: zeroJointOrient(topNode = None) Return: None Arguments: topNode ( str ) ; [default: None] Keyword Arguments:","title":"zeroJointOrient"},{"location":"utility/#zerotransforms","text":"Zero all available transforms for the given object passed in. Constructor: zeroTransforms(transform = \"\") Return: bool Arguments: transform ( str ) ; [default: \"\"] Keyword Arguments:","title":"zeroTransforms"},{"location":"releaseNotes/v1.1.0/","text":"Mansur-Rig 1.1.0 Mansur-Rig is a python modular rig-builder for Autodesk-Maya, equipped with a full custom rigging nodes-library to fill all of your Rigging needs in one place. What's new in Version 1.1.0 features Construct and Deconstruct performance improvements Block UI picker tab update createFreePlg will now create facial/body plg based on picker layout base state, instead of \"body\" type default lookAtControl module- added combinedAttributeHost to allow single combined attribute to control multiple modules dilate/contract within a single channel lips module- added cheeckRaise feature (dropdown). A new implementation to create a relationship between a lip corner control and an external cheek module ctrl, driving raise and push values to the slave cheek controls from the main lips corners controls. Bug fixes Version manager - version order was reversed to display the latest version on top, and the oldest version at the bottom. freeControl module - jumps/twitches bug related to mesh tweakers were fixed. Mesh tweaker local ctrl was transitioned to a techCtrl type to avoid getting any keys. Keys on the local control were causing the issue. Construction and deconstruction attribute connect warnings in the script editor were removed #33 - Foot not building in version 1.0.14 - fixed. Foot module should now build properly. #34 - Simple squash deconstruction issues - resolved. simpleSquash should now be stable on construction and deconstruction. #35 - Can't create freeControl with no attributes- fixed. Any module with all channel control attributes set to OFF should build with ease. mnsMayaPlugins v 1.0.0.17","title":"V1.1.0"},{"location":"releaseNotes/v1.1.0/#mansur-rig-110","text":"Mansur-Rig is a python modular rig-builder for Autodesk-Maya, equipped with a full custom rigging nodes-library to fill all of your Rigging needs in one place.","title":"Mansur-Rig 1.1.0"},{"location":"releaseNotes/v1.1.0/#whats-new-in-version-110","text":"","title":"What's new in Version 1.1.0"},{"location":"releaseNotes/v1.1.0/#features","text":"Construct and Deconstruct performance improvements Block UI picker tab update createFreePlg will now create facial/body plg based on picker layout base state, instead of \"body\" type default lookAtControl module- added combinedAttributeHost to allow single combined attribute to control multiple modules dilate/contract within a single channel lips module- added cheeckRaise feature (dropdown). A new implementation to create a relationship between a lip corner control and an external cheek module ctrl, driving raise and push values to the slave cheek controls from the main lips corners controls.","title":"features"},{"location":"releaseNotes/v1.1.0/#bug-fixes","text":"Version manager - version order was reversed to display the latest version on top, and the oldest version at the bottom. freeControl module - jumps/twitches bug related to mesh tweakers were fixed. Mesh tweaker local ctrl was transitioned to a techCtrl type to avoid getting any keys. Keys on the local control were causing the issue. Construction and deconstruction attribute connect warnings in the script editor were removed #33 - Foot not building in version 1.0.14 - fixed. Foot module should now build properly. #34 - Simple squash deconstruction issues - resolved. simpleSquash should now be stable on construction and deconstruction. #35 - Can't create freeControl with no attributes- fixed. Any module with all channel control attributes set to OFF should build with ease.","title":"Bug fixes"},{"location":"releaseNotes/v1.1.0/#mnsmayaplugins-v-10017","text":"","title":"mnsMayaPlugins v 1.0.0.17"},{"location":"releaseNotes/v1.1.1/","text":"Mansur-Rig 1.1.1 Mansur-Rig is a python modular rig-builder for Autodesk-Maya, equipped with a full custom rigging nodes-library to fill all of your Rigging needs in one place. What's new in Version 1.1.1 features #37 - Added \"Select Main joints\" button to Block UI (deformation tab) that will select all main joints ignoring interpolation joints. #40 - Default values save/load will now include world control's modules vis state attributes as well Bug fixes #38 - Simple Squash control shape not extracting - Fixed. #39 - Add guides/remove guides related bugs - Fixed. These should now be fully funstional again. #41 - Sleeve for limb module was construction outside the rig-top hierarchy - Fixed. CurveZipB module - interp joints where not inhereting global orientation properly - Fixed. Depreciated unused moduleRootVis attribute from puppet root. limb softMod related errors - Fixed. mnsMayaPlugins v 1.0.0.17","title":"V1.1.1"},{"location":"releaseNotes/v1.1.1/#mansur-rig-111","text":"Mansur-Rig is a python modular rig-builder for Autodesk-Maya, equipped with a full custom rigging nodes-library to fill all of your Rigging needs in one place.","title":"Mansur-Rig 1.1.1"},{"location":"releaseNotes/v1.1.1/#whats-new-in-version-111","text":"","title":"What's new in Version 1.1.1"},{"location":"releaseNotes/v1.1.1/#features","text":"#37 - Added \"Select Main joints\" button to Block UI (deformation tab) that will select all main joints ignoring interpolation joints. #40 - Default values save/load will now include world control's modules vis state attributes as well","title":"features"},{"location":"releaseNotes/v1.1.1/#bug-fixes","text":"#38 - Simple Squash control shape not extracting - Fixed. #39 - Add guides/remove guides related bugs - Fixed. These should now be fully funstional again. #41 - Sleeve for limb module was construction outside the rig-top hierarchy - Fixed. CurveZipB module - interp joints where not inhereting global orientation properly - Fixed. Depreciated unused moduleRootVis attribute from puppet root. limb softMod related errors - Fixed.","title":"Bug fixes"},{"location":"releaseNotes/v1.1.1/#mnsmayaplugins-v-10017","text":"","title":"mnsMayaPlugins v 1.0.0.17"},{"location":"releaseNotes/v1.1.2/","text":"Mansur-Rig 1.1.2 Mansur-Rig is a python modular rig-builder for Autodesk-Maya, equipped with a full custom rigging nodes-library to fill all of your Rigging needs in one place. What's new in Version 1.1.2 features Comments/Tooltips were written and inserted to all modules and all attributes Bug fixes limb module twist issues resolved (please rebuild you puppets) mnsMayaPlugins v 1.0.0.17","title":"V1.1.2"},{"location":"releaseNotes/v1.1.2/#mansur-rig-112","text":"Mansur-Rig is a python modular rig-builder for Autodesk-Maya, equipped with a full custom rigging nodes-library to fill all of your Rigging needs in one place.","title":"Mansur-Rig 1.1.2"},{"location":"releaseNotes/v1.1.2/#whats-new-in-version-112","text":"","title":"What's new in Version 1.1.2"},{"location":"releaseNotes/v1.1.2/#features","text":"Comments/Tooltips were written and inserted to all modules and all attributes","title":"features"},{"location":"releaseNotes/v1.1.2/#bug-fixes","text":"limb module twist issues resolved (please rebuild you puppets)","title":"Bug fixes"},{"location":"releaseNotes/v1.1.2/#mnsmayaplugins-v-10017","text":"","title":"mnsMayaPlugins v 1.0.0.17"},{"location":"releaseNotes/v1.1.3/","text":"Mansur-Rig 1.1.3 Mansur-Rig is a python modular rig-builder for Autodesk-Maya, equipped with a full custom rigging nodes-library to fill all of your Rigging needs in one place. What's new in Version 1.1.3 features Module description was implemented in Block UI, as well as the documentation page. Module settings was implemented in the documentation Bug fixes #36 - FKChains still need to have attrHosts - This bug was found and fixed and should now display the space switch attribute on the appropriate control in FKChain Module #42 - sleeve issue - Sleeve feature unstable behaviour on construction and deconstruction iterations is now fixed. Control shapes list in any UI is now sorted alphabetically Control shapes extraction action will now display correct log once completed Reference and Template modes for the puppet group is now removed, both in Rig-Top creation and Module-Vis UI mnsMayaPlugins v 1.0.0.17","title":"V1.1.3"},{"location":"releaseNotes/v1.1.3/#mansur-rig-113","text":"Mansur-Rig is a python modular rig-builder for Autodesk-Maya, equipped with a full custom rigging nodes-library to fill all of your Rigging needs in one place.","title":"Mansur-Rig 1.1.3"},{"location":"releaseNotes/v1.1.3/#whats-new-in-version-113","text":"","title":"What's new in Version 1.1.3"},{"location":"releaseNotes/v1.1.3/#features","text":"Module description was implemented in Block UI, as well as the documentation page. Module settings was implemented in the documentation","title":"features"},{"location":"releaseNotes/v1.1.3/#bug-fixes","text":"#36 - FKChains still need to have attrHosts - This bug was found and fixed and should now display the space switch attribute on the appropriate control in FKChain Module #42 - sleeve issue - Sleeve feature unstable behaviour on construction and deconstruction iterations is now fixed. Control shapes list in any UI is now sorted alphabetically Control shapes extraction action will now display correct log once completed Reference and Template modes for the puppet group is now removed, both in Rig-Top creation and Module-Vis UI","title":"Bug fixes"},{"location":"releaseNotes/v1.1.3/#mnsmayaplugins-v-10017","text":"","title":"mnsMayaPlugins v 1.0.0.17"},{"location":"releaseNotes/v1.1.4/","text":"Mansur-Rig 1.1.4 Mansur-Rig is a python modular rig-builder for Autodesk-Maya, equipped with a full custom rigging nodes-library to fill all of your Rigging needs in one place. What's new in Version 1.1.4 features Core module settings was added to the documentation Construct & deconstruct auto module path fix. Now when you get an external rig, you don't need to use \"fix module paths\" utility, the fix will happen automatically once you construct or deconstruct All new mnsTransformSpring node! Using the new node, added a spring feature to Look-At module. This can be used to create dynamic spring vehicle suspention behaviour! Bug fixes #46 - limb interJoints attribute missplaced is now fixed Module symmetry and duplicate error when using an emoty channel control is now fixed. Module mirror attribute read was missing from simple squash construction Added right side flip options for the tweakers is CurveZipB Module mnsMayaPlugins v 1.0.1.2","title":"V1.1.4"},{"location":"releaseNotes/v1.1.4/#mansur-rig-114","text":"Mansur-Rig is a python modular rig-builder for Autodesk-Maya, equipped with a full custom rigging nodes-library to fill all of your Rigging needs in one place.","title":"Mansur-Rig 1.1.4"},{"location":"releaseNotes/v1.1.4/#whats-new-in-version-114","text":"","title":"What's new in Version 1.1.4"},{"location":"releaseNotes/v1.1.4/#features","text":"Core module settings was added to the documentation Construct & deconstruct auto module path fix. Now when you get an external rig, you don't need to use \"fix module paths\" utility, the fix will happen automatically once you construct or deconstruct All new mnsTransformSpring node! Using the new node, added a spring feature to Look-At module. This can be used to create dynamic spring vehicle suspention behaviour!","title":"features"},{"location":"releaseNotes/v1.1.4/#bug-fixes","text":"#46 - limb interJoints attribute missplaced is now fixed Module symmetry and duplicate error when using an emoty channel control is now fixed. Module mirror attribute read was missing from simple squash construction Added right side flip options for the tweakers is CurveZipB Module","title":"Bug fixes"},{"location":"releaseNotes/v1.1.4/#mnsmayaplugins-v-1012","text":"","title":"mnsMayaPlugins v 1.0.1.2"},{"location":"releaseNotes/v1.1.5/","text":"Mansur-Rig 1.1.5 Mansur-Rig is a python modular rig-builder for Autodesk-Maya, equipped with a full custom rigging nodes-library to fill all of your Rigging needs in one place. What's new in Version 1.1.5 features #49 - A new attribute on Puppet-Root-Ctrl - Hide Controls On Playback. When animating, you can now set this attribute to True, to automatically hide controls when playing your animation. Bug fixes Attribute host creation position was always at origin. This has now been fixed and attribute host locator creation position will be the module's root guide Rig renaming was broken (renaming after creation). This has now been resolved. #47 - Problems with interpolation joints after promoting modules is ow resolved. #48 - FKChain's Variable FK was forcing joint structure uniform mode only at construction. This attribute is now marked as a jointStructSoftMod now, and will force a UNIFORM curve sampling on joint structure on guides state. This was added to the attribute's comment and the documentation. mnsMayaPlugins v 1.0.1.2","title":"V1.1.5"},{"location":"releaseNotes/v1.1.5/#mansur-rig-115","text":"Mansur-Rig is a python modular rig-builder for Autodesk-Maya, equipped with a full custom rigging nodes-library to fill all of your Rigging needs in one place.","title":"Mansur-Rig 1.1.5"},{"location":"releaseNotes/v1.1.5/#whats-new-in-version-115","text":"","title":"What's new in Version 1.1.5"},{"location":"releaseNotes/v1.1.5/#features","text":"#49 - A new attribute on Puppet-Root-Ctrl - Hide Controls On Playback. When animating, you can now set this attribute to True, to automatically hide controls when playing your animation.","title":"features"},{"location":"releaseNotes/v1.1.5/#bug-fixes","text":"Attribute host creation position was always at origin. This has now been fixed and attribute host locator creation position will be the module's root guide Rig renaming was broken (renaming after creation). This has now been resolved. #47 - Problems with interpolation joints after promoting modules is ow resolved. #48 - FKChain's Variable FK was forcing joint structure uniform mode only at construction. This attribute is now marked as a jointStructSoftMod now, and will force a UNIFORM curve sampling on joint structure on guides state. This was added to the attribute's comment and the documentation.","title":"Bug fixes"},{"location":"releaseNotes/v1.1.5/#mnsmayaplugins-v-1012","text":"","title":"mnsMayaPlugins v 1.0.1.2"},{"location":"releaseNotes/v1.1.6/","text":"Mansur-Rig 1.1.6 Mansur-Rig is a python modular rig-builder for Autodesk-Maya, equipped with a full custom rigging nodes-library to fill all of your Rigging needs in one place. What's new in Version 1.1.6 features #49 - A new attribute on Puppet-Root-Ctrl - Hide Controls On Playback. When animating, you can now set this attribute to True, to automatically hide controls when playing your animation. Bug fixes Attribute host creation position was always at origin. This has now been fixed and attribute host locator creation position will be the module's root guide Rig renaming was broken (renaming after creation). This has now been resolved. #47 - Problems with interpolation joints after promoting modules is ow resolved. #48 - FKChain's Variable FK was forcing joint structure uniform mode only at construction. This attribute is now marked as a jointStructSoftMod now, and will force a UNIFORM curve sampling on joint structure on guides state. This was added to the attribute's comment and the documentation. mnsMayaPlugins v 1.0.1.2","title":"V1.1.6"},{"location":"releaseNotes/v1.1.6/#mansur-rig-116","text":"Mansur-Rig is a python modular rig-builder for Autodesk-Maya, equipped with a full custom rigging nodes-library to fill all of your Rigging needs in one place.","title":"Mansur-Rig 1.1.6"},{"location":"releaseNotes/v1.1.6/#whats-new-in-version-116","text":"","title":"What's new in Version 1.1.6"},{"location":"releaseNotes/v1.1.6/#features","text":"#49 - A new attribute on Puppet-Root-Ctrl - Hide Controls On Playback. When animating, you can now set this attribute to True, to automatically hide controls when playing your animation.","title":"features"},{"location":"releaseNotes/v1.1.6/#bug-fixes","text":"Attribute host creation position was always at origin. This has now been fixed and attribute host locator creation position will be the module's root guide Rig renaming was broken (renaming after creation). This has now been resolved. #47 - Problems with interpolation joints after promoting modules is ow resolved. #48 - FKChain's Variable FK was forcing joint structure uniform mode only at construction. This attribute is now marked as a jointStructSoftMod now, and will force a UNIFORM curve sampling on joint structure on guides state. This was added to the attribute's comment and the documentation.","title":"Bug fixes"},{"location":"releaseNotes/v1.1.6/#mnsmayaplugins-v-1012","text":"","title":"mnsMayaPlugins v 1.0.1.2"},{"location":"releaseNotes/v1.1.7/","text":"Mansur-Rig 1.1.7 Mansur-Rig is a python modular rig-builder for Autodesk-Maya, equipped with a full custom rigging nodes-library to fill all of your Rigging needs in one place. What's new in Version 1.1.7 Depreciation CurveZip module depreciated. Please use CurveZipB. Bug fixes FK shain's \"IK secondaries\" weren't being collected to the build module contstruct and display as \"primaries\"- Fixed. #50 - Module Visibility UI Parenting issues resolved. #53 - Installation with existing MAYA_MODULE_PATH variable whould break the syntax, and the variable - Fixed. mnsMayaPlugins v 1.0.2","title":"V1.1.7"},{"location":"releaseNotes/v1.1.7/#mansur-rig-117","text":"Mansur-Rig is a python modular rig-builder for Autodesk-Maya, equipped with a full custom rigging nodes-library to fill all of your Rigging needs in one place.","title":"Mansur-Rig 1.1.7"},{"location":"releaseNotes/v1.1.7/#whats-new-in-version-117","text":"","title":"What's new in Version 1.1.7"},{"location":"releaseNotes/v1.1.7/#depreciation","text":"CurveZip module depreciated. Please use CurveZipB.","title":"Depreciation"},{"location":"releaseNotes/v1.1.7/#bug-fixes","text":"FK shain's \"IK secondaries\" weren't being collected to the build module contstruct and display as \"primaries\"- Fixed. #50 - Module Visibility UI Parenting issues resolved. #53 - Installation with existing MAYA_MODULE_PATH variable whould break the syntax, and the variable - Fixed.","title":"Bug fixes"},{"location":"releaseNotes/v1.1.7/#mnsmayaplugins-v-102","text":"","title":"mnsMayaPlugins v 1.0.2"},{"location":"releaseNotes/v1.1.9/","text":"Mansur-Rig 1.1.9 Released 25 Mar 2021 What's new in Version 1.1.9 Features Linux support! Bug fixes #57 - CurveZipB- BlinkHeight module setting value wasn't updated correctly on construction mnsMayaPlugins v 1.0.4","title":"V1.1.9"},{"location":"releaseNotes/v1.1.9/#mansur-rig-119","text":"Released 25 Mar 2021","title":"Mansur-Rig 1.1.9"},{"location":"releaseNotes/v1.1.9/#whats-new-in-version-119","text":"","title":"What's new in Version 1.1.9"},{"location":"releaseNotes/v1.1.9/#features","text":"Linux support!","title":"Features"},{"location":"releaseNotes/v1.1.9/#bug-fixes","text":"#57 - CurveZipB- BlinkHeight module setting value wasn't updated correctly on construction","title":"Bug fixes"},{"location":"releaseNotes/v1.1.9/#mnsmayaplugins-v-104","text":"","title":"mnsMayaPlugins v 1.0.4"},{"location":"releaseNotes/v1.2.0/","text":"Mansur-Rig 1.2.0 Released 1 Apr 2021 What's new in Version 1.2.0 Maya 2017-2022 Compatibility for both Windows and Linux Features Bug fixes mnsMayaPlugins v 1.0.5","title":"V1.2.0"},{"location":"releaseNotes/v1.2.0/#mansur-rig-120","text":"Released 1 Apr 2021","title":"Mansur-Rig 1.2.0"},{"location":"releaseNotes/v1.2.0/#whats-new-in-version-120","text":"Maya 2017-2022 Compatibility for both Windows and Linux","title":"What's new in Version 1.2.0"},{"location":"releaseNotes/v1.2.0/#features","text":"","title":"Features"},{"location":"releaseNotes/v1.2.0/#bug-fixes","text":"","title":"Bug fixes"},{"location":"releaseNotes/v1.2.0/#mnsmayaplugins-v-105","text":"","title":"mnsMayaPlugins v 1.0.5"},{"location":"releaseNotes/v1.2.1/","text":"Mansur-Rig 1.2.1 Released 11 Apr 2021 What's new in Version 1.2.1 Picker upgrades and maintenance Features #63 - Implemented default text attributes for plg creation. These new preferences are located in Mansur->Preferences->Picker Bug fixes PLG settings facial/body attribute change will now affect all controls within the changed module Non-Free PLG ctrl list and buttons re-locked Free PLG creation color will be dictated by the rig's color-scheme FKChain interpolation mode wasn't changing on construction- Fixed. Changed Block main window min/max values to allow further window adjustments in 4K monitors Removed redundant Qt libs from main code library mnsMayaPlugins v 1.0.6","title":"V1.2.1"},{"location":"releaseNotes/v1.2.1/#mansur-rig-121","text":"Released 11 Apr 2021","title":"Mansur-Rig 1.2.1"},{"location":"releaseNotes/v1.2.1/#whats-new-in-version-121","text":"Picker upgrades and maintenance","title":"What's new in Version 1.2.1"},{"location":"releaseNotes/v1.2.1/#features","text":"#63 - Implemented default text attributes for plg creation. These new preferences are located in Mansur->Preferences->Picker","title":"Features"},{"location":"releaseNotes/v1.2.1/#bug-fixes","text":"PLG settings facial/body attribute change will now affect all controls within the changed module Non-Free PLG ctrl list and buttons re-locked Free PLG creation color will be dictated by the rig's color-scheme FKChain interpolation mode wasn't changing on construction- Fixed. Changed Block main window min/max values to allow further window adjustments in 4K monitors Removed redundant Qt libs from main code library","title":"Bug fixes"},{"location":"releaseNotes/v1.2.1/#mnsmayaplugins-v-106","text":"","title":"mnsMayaPlugins v 1.0.6"},{"location":"releaseNotes/v1.2.2/","text":"Mansur-Rig 1.2.2 Released 15 Apr 2021 What's new in Version 1.2.2 Bug fixes Features Bug fixes Issues with module names that share the same prefix - fixed #65 - Mansur-Rig's install blocking main maya menus (file, edit) in Maya 2022 - Fixed #66 - Issues with module color overrides - Fixed FK Chain module- Construction fails when IK secondaries layer is ON, but the amount of controls selected is less then the amount of Primary FK controls - Fixed, and added to the attribute description and the documentation accordingly. mnsMayaPlugins v 1.0.6","title":"V1.2.2"},{"location":"releaseNotes/v1.2.2/#mansur-rig-122","text":"Released 15 Apr 2021","title":"Mansur-Rig 1.2.2"},{"location":"releaseNotes/v1.2.2/#whats-new-in-version-122","text":"Bug fixes","title":"What's new in Version 1.2.2"},{"location":"releaseNotes/v1.2.2/#features","text":"","title":"Features"},{"location":"releaseNotes/v1.2.2/#bug-fixes","text":"Issues with module names that share the same prefix - fixed #65 - Mansur-Rig's install blocking main maya menus (file, edit) in Maya 2022 - Fixed #66 - Issues with module color overrides - Fixed FK Chain module- Construction fails when IK secondaries layer is ON, but the amount of controls selected is less then the amount of Primary FK controls - Fixed, and added to the attribute description and the documentation accordingly.","title":"Bug fixes"},{"location":"releaseNotes/v1.2.2/#mnsmayaplugins-v-106","text":"","title":"mnsMayaPlugins v 1.0.6"},{"location":"releaseNotes/v1.2.3/","text":"Mansur-Rig 1.2.3 Released 7 May 2021 What's new in Version 1.2.3 Many bug fixes and few new features Features Block - New Guide/Joint toggle button in main tab. IK-FK blend default value attribute added to Limb-Module. Default symmetry mode for freeControl module was changes to- None. #72 - Custom script execution faliure will now display the error stack-trace in the errro dialog as well as print into maya's console. Added new sub-groups to rig-top. All of these sub groups were added for the cleanest setup possible - the objective is for the top group to contain the entire rig data, including the model, so when adding it as a reference, a single transform will contain everything related to the rig in the outliner. oSkelGrp - offset-skeleton-group, to contain the offset skeleton in the future extSetupGrp - extra setup group, to contain any manual setups mdlGrp - model group, to contain the model Accordingly, a new \"Check/Update Rig Top Structure\" Utility was added to Block's Utility tab, to update rig-tops created with previous Mansur-Rig versions. Bug fixes #68 - Once any channel-control related checkboxes were set to off by the user, they became permanently off- Fixed. #68 - Embedded IK construction was failing in case the user selected to turn off the rotation channels in the channel-control - Fixed. #71 - Updated error message in \"Copy-Skin\" failure. The message was not very informative, it is now updated to suggest possible fixes. Module Setting button press in Block was resulting in an error in case there was no selection- Fixed. FK Chain IK-Secondaries and Variable-FK attribute description typos fix. Transition Log In case you ned to update from a previous version of Mansur-Rig, please use the new \"Check/Update Rig Top Structure\" in Block's Utility tab to update your rig-top structure. mnsMayaPlugins v 1.0.6","title":"V1.2.3"},{"location":"releaseNotes/v1.2.3/#mansur-rig-123","text":"Released 7 May 2021","title":"Mansur-Rig 1.2.3"},{"location":"releaseNotes/v1.2.3/#whats-new-in-version-123","text":"Many bug fixes and few new features","title":"What's new in Version 1.2.3"},{"location":"releaseNotes/v1.2.3/#features","text":"Block - New Guide/Joint toggle button in main tab. IK-FK blend default value attribute added to Limb-Module. Default symmetry mode for freeControl module was changes to- None. #72 - Custom script execution faliure will now display the error stack-trace in the errro dialog as well as print into maya's console. Added new sub-groups to rig-top. All of these sub groups were added for the cleanest setup possible - the objective is for the top group to contain the entire rig data, including the model, so when adding it as a reference, a single transform will contain everything related to the rig in the outliner. oSkelGrp - offset-skeleton-group, to contain the offset skeleton in the future extSetupGrp - extra setup group, to contain any manual setups mdlGrp - model group, to contain the model Accordingly, a new \"Check/Update Rig Top Structure\" Utility was added to Block's Utility tab, to update rig-tops created with previous Mansur-Rig versions.","title":"Features"},{"location":"releaseNotes/v1.2.3/#bug-fixes","text":"#68 - Once any channel-control related checkboxes were set to off by the user, they became permanently off- Fixed. #68 - Embedded IK construction was failing in case the user selected to turn off the rotation channels in the channel-control - Fixed. #71 - Updated error message in \"Copy-Skin\" failure. The message was not very informative, it is now updated to suggest possible fixes. Module Setting button press in Block was resulting in an error in case there was no selection- Fixed. FK Chain IK-Secondaries and Variable-FK attribute description typos fix.","title":"Bug fixes"},{"location":"releaseNotes/v1.2.3/#transition-log","text":"In case you ned to update from a previous version of Mansur-Rig, please use the new \"Check/Update Rig Top Structure\" in Block's Utility tab to update your rig-top structure.","title":"Transition Log"},{"location":"releaseNotes/v1.2.3/#mnsmayaplugins-v-106","text":"","title":"mnsMayaPlugins v 1.0.6"},{"location":"userGuides/Asset-Scaling/","text":"Mansur-Rig\u2019s default scale is based on: Human-male character- 180cm in Height. There are three values that dictate Asset scaling: Preferences - \u201cBase Scale\u201d, or \u201cProject Scale\u201d- Global scale multiplier. Rig-Top Setting - \u201cAsset Scale\u201d, Asset specific scale multiplier. Preferences - \u201cRoot Guide Scale\u201d - This will dictate the multiplier for the \u201cRoot Guide\u201d only. Variables used internally : mnsProjectScale - Located in \"Preferences\", is set by the user using the preferences UI, which can be accesed through Mansur's main menu. assetScale - Rig-Top's attribute, can be accessed when creating a new Rig-Top, or via the \"Rig settings\" in Mansur BLOCK's main UI. gScale - Compiled in MnsBuildModule Class = mnsProjectScale * assetScale spacing - This variable dictates the spacing (distance) between guides when creating them. This variable is gScale * 10 examples (Recommended Values): Environment Scale Asset Height Base Scale Asset Scale Root Guide Scale 1:1 (Real-Scale) 180 cm 1.0 1.0 50.0 1:1 (Real-Scale) 135 cm 1.0 0.75 50.0 1:1 (Real-Scale) 45 cm 1.0 0.25 50.0 1:2 (Half-Scale) 180 cm 0.5 1.0 50.0 1:4 (Quarter-Scale) 135 cm 0.25 0.75 50.0","title":"Asset Scaling"},{"location":"userGuides/Log-In/","text":"In order for Mansur-Rig toolset to work properly, you must be logged in using an account connected to an active subscription. In case you haven't already, please visit Mansur-Rig.com to create an account and subscribe to a plan of your choosing. Once you have an account and an active subscription, you will be able to successfully log-in and activate the product. To do so, please open My-Account dialog via Mansur-Rig's main menu: How to use My-Account Via Mansur main menu, click the My-Account item to open the dialog. Use the same credentials you used to open your account to fill-in the form. Optianally, fill in a Machine-Name. This field is for your convenience in case you have a multi-seat subscription, and you want to easily identify active machines. Click the Log-In button. If the credentials are valid, a clear indication will be showen and the dialog will switch to an Active state. Once the account is active, the entire toolset will be active. Enjoy! Auto-log-in Once you entered your credentials and successfully activated the product, your credentials will be saved and the product will be activated automatically when you restart Maya. If that isn't your preference, feel free to disable this behavior using Mansur-Rig's Preferences dialog. Using a multi-seat subscription In case you have a multi-seat subscription, a few more features will be of your interest. Logging in with multiple machines at the same time You are will be able to log-in with multiple machines at the same time. The ammount of seats that are available within your subscription will be listed under your profile within the website. You can also see some of your license details via My-Account dialog, under License-Details dropdown menu Managing Users In case you have multiple machines, your credentials can be used in two ways: As an Admin (Account Owner) As a User , which was given user credentials. In case you own a multi-seat subscription, you might be interested in allowing multiple users, who are not yourself, to use your subscription (a member of your team most-likely). In case you don't want to give your full credentials which can be used to do actions within your account, you can alternatively use the User Password field of your account. This field can be edited via Mansur-Rig's website, in My-Profile section. Now, the user you want to give access to your account can log-in as a User , which will give him \"read-only\" access to your account. You, as an Admin are able to control access to your account, and even force log-out any user using the Manage-Users section in My-Account dialog: Logging in with different machines In case you have a single seat subscription and wish to use it on different machines (i.e Home, Office), you are welcome to do so. If in any case you did not log-out a machine, and want to use a second one, you can always log-out machines as an Admin remotely in order to release the seat using Manage-Users section in My-Account dialog.","title":"Log In"},{"location":"userGuides/Log-In/#how-to-use-my-account","text":"Via Mansur main menu, click the My-Account item to open the dialog. Use the same credentials you used to open your account to fill-in the form. Optianally, fill in a Machine-Name. This field is for your convenience in case you have a multi-seat subscription, and you want to easily identify active machines. Click the Log-In button. If the credentials are valid, a clear indication will be showen and the dialog will switch to an Active state. Once the account is active, the entire toolset will be active. Enjoy! Auto-log-in Once you entered your credentials and successfully activated the product, your credentials will be saved and the product will be activated automatically when you restart Maya. If that isn't your preference, feel free to disable this behavior using Mansur-Rig's Preferences dialog.","title":"How to use My-Account"},{"location":"userGuides/Log-In/#using-a-multi-seat-subscription","text":"In case you have a multi-seat subscription, a few more features will be of your interest.","title":"Using a multi-seat subscription"},{"location":"userGuides/Log-In/#logging-in-with-multiple-machines-at-the-same-time","text":"You are will be able to log-in with multiple machines at the same time. The ammount of seats that are available within your subscription will be listed under your profile within the website. You can also see some of your license details via My-Account dialog, under License-Details dropdown menu","title":"Logging in with multiple machines at the same time"},{"location":"userGuides/Log-In/#managing-users","text":"In case you have multiple machines, your credentials can be used in two ways: As an Admin (Account Owner) As a User , which was given user credentials. In case you own a multi-seat subscription, you might be interested in allowing multiple users, who are not yourself, to use your subscription (a member of your team most-likely). In case you don't want to give your full credentials which can be used to do actions within your account, you can alternatively use the User Password field of your account. This field can be edited via Mansur-Rig's website, in My-Profile section. Now, the user you want to give access to your account can log-in as a User , which will give him \"read-only\" access to your account. You, as an Admin are able to control access to your account, and even force log-out any user using the Manage-Users section in My-Account dialog:","title":"Managing Users"},{"location":"userGuides/Log-In/#logging-in-with-different-machines","text":"In case you have a single seat subscription and wish to use it on different machines (i.e Home, Office), you are welcome to do so. If in any case you did not log-out a machine, and want to use a second one, you can always log-out machines as an Admin remotely in order to release the seat using Manage-Users section in My-Account dialog.","title":"Logging in with different machines"},{"location":"userGuides/Naming-Convention/","text":"Mansur-Rig is following strict naming convention rules. These rules are followed throught the toolset and in most cases the provided tools will handle the names so you won't have to. The naming convention format is as follows (components seperated by an underscore): Component Valid Examples Comments Constructed Name Side c, l, r Lower case. Only the three listed components are valid. l_ ... Body arm, spine, frontHair, indexFinger ANY camel-cased name is valid. l_arm_ ... Alpha ID A, F, KB, DAC, G All upper case, base 26, up to 3 letters. l_arm_A ... Component ID 001, 039, 014, 005, 147 Integer index, represneted in 3 numbers. This component isn't seperated l_arm_A001 ... Suffix ctrl, grp, plg, blkRig This suffix represents the type of object. l_arm_A001_ctrl","title":"Naming Convention"},{"location":"userGuides/System-Requirements/","text":"Compatible Platforms Windows Linux (Tested on CentOS 7.9) Compatible Maya versions Maya 2017 Maya 2018 Maya 2019 Maya 2020 Maya 2022 Win Linux Win Linux Win Linux Win Linux Win Linux 1.2.0+ \u2726 \u2726 \u2726 \u2726 \u2726 \u2726 \u2726 \u2726 \u2726 \u2726 1.1.9 \u2726 \u2726 \u2726 \u2726 \u2726 \u2726 \u2726 \u2726 1.1.7- \u2726 \u2726 \u2726 \u2726 Windows - System requirements Microsoft Visual C++ Redistributable for Visual Studio 2015-2019 Important Microsoft Visual C++ Redistributable for Visual Studio 2015-2019 is a part of the native Maya installation. In most cases, no action is required to use Mansur-Rig in Maya. In some rare cases (incomplete Maya installation), if missing this component needs to be installed manually.","title":"System Requirements"},{"location":"userGuides/System-Requirements/#compatible-platforms","text":"Windows Linux (Tested on CentOS 7.9)","title":"Compatible Platforms"},{"location":"userGuides/System-Requirements/#compatible-maya-versions","text":"Maya 2017 Maya 2018 Maya 2019 Maya 2020 Maya 2022 Win Linux Win Linux Win Linux Win Linux Win Linux 1.2.0+ \u2726 \u2726 \u2726 \u2726 \u2726 \u2726 \u2726 \u2726 \u2726 \u2726 1.1.9 \u2726 \u2726 \u2726 \u2726 \u2726 \u2726 \u2726 \u2726 1.1.7- \u2726 \u2726 \u2726 \u2726","title":"Compatible Maya versions"},{"location":"userGuides/System-Requirements/#windows-system-requirements","text":"Microsoft Visual C++ Redistributable for Visual Studio 2015-2019 Important Microsoft Visual C++ Redistributable for Visual Studio 2015-2019 is a part of the native Maya installation. In most cases, no action is required to use Mansur-Rig in Maya. In some rare cases (incomplete Maya installation), if missing this component needs to be installed manually.","title":"Windows - System requirements"},{"location":"userGuides/Version-Updates/","text":"For your ease of use, Mansur-Rig is equipped with a Version-Manager tool How to use the Version-Manager Via Mansur main menu, click the Version-Manager item to open the tool. Current Mansur-Rig version will be visibly marked with a green V icon. To upgrade/downgrade to a version, you will need to make sure the version is Install Available . In case it isn't, you can easily download it using the download button. Once a version is Install Available , simply select the version you wish to upgrade/downgrade to, and click Install . Once the installation is complete, a message will be displayed stating the process finished. Restart Maya Version-Update is complete. Manual-verison-updates In case you wish to manually change a version, please follow the Install Guide using any version of your choosing. Installing a new version of Mansur-Rig when any version is installed will result in an upgrade/downgrade to the newly installed version.","title":"Version Updates"},{"location":"userGuides/Version-Updates/#how-to-use-the-version-manager","text":"Via Mansur main menu, click the Version-Manager item to open the tool. Current Mansur-Rig version will be visibly marked with a green V icon. To upgrade/downgrade to a version, you will need to make sure the version is Install Available . In case it isn't, you can easily download it using the download button. Once a version is Install Available , simply select the version you wish to upgrade/downgrade to, and click Install . Once the installation is complete, a message will be displayed stating the process finished. Restart Maya Version-Update is complete. Manual-verison-updates In case you wish to manually change a version, please follow the Install Guide using any version of your choosing. Installing a new version of Mansur-Rig when any version is installed will result in an upgrade/downgrade to the newly installed version.","title":"How to use the Version-Manager"},{"location":"userGuides/installation/","text":"Go to Mansur-Rig.com and create an account (if you haven't already). Log in to your account. Subscribe to any plan that fits you best Download the latest version of Mansur-Rig. Extract the .zip library to your preferred location. If you have another version already installed, preferably extract to the same location (version root folder should be placed in the same root folder of the previous version) .../ANY_DIRECTORY .../ANY_DIRECTORY/mansurRig_1.0.1 .../ANY_DIRECTORY/mansurRig_1.0.2 .../ANY_DIRECTORY/mansurRig_1.0.3 Go into the main version directory Drag and Drop the \"mansurRig_DragAndDrop_install.mel\" into any supported Maya version Follow the prompt instructions Restart Maya Updates Please make sure to update as appropriate. Version Updates Guide Uninstallation Locate any installation directory of Mansur-Rig in your file system Go into the main version (any version) directory Drag and Drop the \"mansurRig_DragAndDrop_UNINSTALL.mel\" into any supported Maya version Follow the prompt instructions Restart Maya Linux Notes As opposed to the Windows installer, the Linux version will install Mansur-Rig on the choosen maya version only. The Linux installer is using the local Maya.env file to append the new envioronment variable instead of installing a system-wide persistant variable, as the installer can not assume system write permissions. In case you want to install Mansur-Rig on multiple versions of Maya, please repeat the installation (drag-drop) on every required Maya version.","title":"Installation"},{"location":"userGuides/installation/#uninstallation","text":"Locate any installation directory of Mansur-Rig in your file system Go into the main version (any version) directory Drag and Drop the \"mansurRig_DragAndDrop_UNINSTALL.mel\" into any supported Maya version Follow the prompt instructions Restart Maya","title":"Uninstallation"},{"location":"userGuides/installation/#linux-notes","text":"As opposed to the Windows installer, the Linux version will install Mansur-Rig on the choosen maya version only. The Linux installer is using the local Maya.env file to append the new envioronment variable instead of installing a system-wide persistant variable, as the installer can not assume system write permissions. In case you want to install Mansur-Rig on multiple versions of Maya, please repeat the installation (drag-drop) on every required Maya version.","title":"Linux Notes"},{"location":"userGuides/license/","text":"End User License Agreement: Mansur-Rig's EULA Privacy-Policy: Mansur-Rig's Privacy-Policy","title":"License"},{"location":"userGuides/tutorials/mansurRig101/Building-The-Arm-And-Fingers/","text":"Video Overview In this video, we are going to set up the arm and fingers as well as learn about space splitting and a few more Block components. Covered subjects in this video: Guide Creation Orientation Space splitting Meta Module Finger Splays","title":"Building The Arm And Fingers"},{"location":"userGuides/tutorials/mansurRig101/Building-The-Arm-And-Fingers/#video-overview","text":"In this video, we are going to set up the arm and fingers as well as learn about space splitting and a few more Block components.","title":"Video Overview"},{"location":"userGuides/tutorials/mansurRig101/Building-The-Arm-And-Fingers/#covered-subjects-in-this-video","text":"Guide Creation Orientation Space splitting Meta Module Finger Splays","title":"Covered subjects in this video:"},{"location":"userGuides/tutorials/mansurRig101/Building-The-Leg-And-Foot/","text":"Video Overview In this video, we are going to build the leg & foot, and learn more about custom guides and space switching in Block. Covered subjects in this video: controls scale multiplier Limb Module Custom Guides Foot module Spaces/space switching","title":"Building The Leg And Foot"},{"location":"userGuides/tutorials/mansurRig101/Building-The-Leg-And-Foot/#video-overview","text":"In this video, we are going to build the leg & foot, and learn more about custom guides and space switching in Block.","title":"Video Overview"},{"location":"userGuides/tutorials/mansurRig101/Building-The-Leg-And-Foot/#covered-subjects-in-this-video","text":"controls scale multiplier Limb Module Custom Guides Foot module Spaces/space switching","title":"Covered subjects in this video:"},{"location":"userGuides/tutorials/mansurRig101/Completing-The-Guide-Template/","text":"Video Overview In this video, we are going to finalize our guides, learn about Block's guide editing utilities, and start deforming our geometry. Covered subjects in this video: Guides editting Utilities Duplicate Module duplicate Branch symmetrize branch Promote module Add/Remove Guides","title":"Completing The Guide Template"},{"location":"userGuides/tutorials/mansurRig101/Completing-The-Guide-Template/#video-overview","text":"In this video, we are going to finalize our guides, learn about Block's guide editing utilities, and start deforming our geometry.","title":"Video Overview"},{"location":"userGuides/tutorials/mansurRig101/Completing-The-Guide-Template/#covered-subjects-in-this-video","text":"Guides editting Utilities Duplicate Module duplicate Branch symmetrize branch Promote module Add/Remove Guides","title":"Covered subjects in this video:"},{"location":"userGuides/tutorials/mansurRig101/Conclusion/","text":"Video Overview Thanks for watching the series! Any questions and feedback are most welcome in the comments!","title":"Conclusion"},{"location":"userGuides/tutorials/mansurRig101/Conclusion/#video-overview","text":"Thanks for watching the series! Any questions and feedback are most welcome in the comments!","title":"Video Overview"},{"location":"userGuides/tutorials/mansurRig101/Getting-Started/","text":"Video Overview We're finally going to get started with rigging our character. Covered subjects in this video: Rig Top Creation Rig Top Sub Groups Root Guide Root Joint Joint-guide relationship Selection Dependence Guide Parenting Module Creation Number of guides Attribute Tool tips and documentation of modules Module Layers FKChain Module - embedded IK layer Anim Tech control Attribute Host","title":"Getting Started"},{"location":"userGuides/tutorials/mansurRig101/Getting-Started/#video-overview","text":"We're finally going to get started with rigging our character.","title":"Video Overview"},{"location":"userGuides/tutorials/mansurRig101/Getting-Started/#covered-subjects-in-this-video","text":"Rig Top Creation Rig Top Sub Groups Root Guide Root Joint Joint-guide relationship Selection Dependence Guide Parenting Module Creation Number of guides Attribute Tool tips and documentation of modules Module Layers FKChain Module - embedded IK layer Anim Tech control Attribute Host","title":"Covered subjects in this video:"},{"location":"userGuides/tutorials/mansurRig101/Introduction/","text":"Series Overview Welcome to Mansur-Rig 101 Tutorial Series! In this series i'm going to go over the basics of how to use Mansur-Rig to build your puppets. We are going to build a complete character from the ground up, so at the end of this series you will have a clear idea on how to use the product. Covered subjects in this video: Product overview Global Flow Covered subjects in this series: Product overview Global Flow Block UI Sections Rig Top Creation Rig Top Settings Custom Scripts Tab Module Creation Module Settings Window Guides Creation Rig Top Creation Rig Top Sub Groups Root Guide Root Joint Joint-guide relationship Selection Dependence Guide Parenting Module Creation Number of guides Attribute Tool tips and documentation of modules Module Layers FKChain Module - embedded IK layer Anim Tech control Attribute Host controls scale multiplier Limb Module Custom Guides Foot module Spaces/space switching Guide Creation Orientation Space splitting Meta Module Finger Splays Guides editting Utilities Duplicate Module duplicate Branch symmetrize branch Promote module Add/Remove Guides guide posing Control shapes Control shapes symmetry Control shapes extract controls grouping Controls default values Picker Basics Documentation page","title":"Introduction"},{"location":"userGuides/tutorials/mansurRig101/Introduction/#series-overview","text":"Welcome to Mansur-Rig 101 Tutorial Series! In this series i'm going to go over the basics of how to use Mansur-Rig to build your puppets. We are going to build a complete character from the ground up, so at the end of this series you will have a clear idea on how to use the product.","title":"Series Overview"},{"location":"userGuides/tutorials/mansurRig101/Introduction/#covered-subjects-in-this-video","text":"Product overview Global Flow","title":"Covered subjects in this video:"},{"location":"userGuides/tutorials/mansurRig101/Introduction/#covered-subjects-in-this-series","text":"Product overview Global Flow Block UI Sections Rig Top Creation Rig Top Settings Custom Scripts Tab Module Creation Module Settings Window Guides Creation Rig Top Creation Rig Top Sub Groups Root Guide Root Joint Joint-guide relationship Selection Dependence Guide Parenting Module Creation Number of guides Attribute Tool tips and documentation of modules Module Layers FKChain Module - embedded IK layer Anim Tech control Attribute Host controls scale multiplier Limb Module Custom Guides Foot module Spaces/space switching Guide Creation Orientation Space splitting Meta Module Finger Splays Guides editting Utilities Duplicate Module duplicate Branch symmetrize branch Promote module Add/Remove Guides guide posing Control shapes Control shapes symmetry Control shapes extract controls grouping Controls default values Picker Basics Documentation page","title":"Covered subjects in this series:"},{"location":"userGuides/tutorials/mansurRig101/Puppet-Finish/","text":"Video Overview In this video, we are going to finish our puppet and finalize it for delivery. We are going to create a T-Pose for our guides, adjust the control shapes, and set our default values. Covered subjects in this video: guide posing Control shapes Control shapes symmetry Control shapes extract controls grouping Controls default values Picker Basics","title":"Puppet Finish"},{"location":"userGuides/tutorials/mansurRig101/Puppet-Finish/#video-overview","text":"In this video, we are going to finish our puppet and finalize it for delivery. We are going to create a T-Pose for our guides, adjust the control shapes, and set our default values.","title":"Video Overview"},{"location":"userGuides/tutorials/mansurRig101/Puppet-Finish/#covered-subjects-in-this-video","text":"guide posing Control shapes Control shapes symmetry Control shapes extract controls grouping Controls default values Picker Basics","title":"Covered subjects in this video:"},{"location":"userGuides/tutorials/mansurRig101/The-Basics/","text":"Video Overview In this video, we are going to cover Block UI's basics, Rig-Creation Settings, Module settings, and some icon indications to keep an eye out for. Covered subjects in this video: Block UI Sections Rig Top Creation Rig Top Settings Custom Scripts Tab Module Creation Module Settings Window Guides Creation","title":"The Basics"},{"location":"userGuides/tutorials/mansurRig101/The-Basics/#video-overview","text":"In this video, we are going to cover Block UI's basics, Rig-Creation Settings, Module settings, and some icon indications to keep an eye out for.","title":"Video Overview"},{"location":"userGuides/tutorials/mansurRig101/The-Basics/#covered-subjects-in-this-video","text":"Block UI Sections Rig Top Creation Rig Top Settings Custom Scripts Tab Module Creation Module Settings Window Guides Creation","title":"Covered subjects in this video:"}]}