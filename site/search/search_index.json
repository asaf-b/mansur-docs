{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#_1","title":"Home","text":"<p>  Welcome to Mansur's documentaion page !   Here you can find detailed code documentation, as well as some helful guides to get started as a user, or as a developer. Here are some Quick-Links to get started: <ul> <li> about  </li> <li> Getting Started </li> <li> Support-Us  </li> <li> Documentation  </li> <li> Help-Desk  </li> </ul> </p> <p> </p>"},{"location":"Core_Module_Settings/","title":"Core Module Settings","text":"<p>"},{"location":"Core_Module_Settings/#core-module-settings","title":"Core Module Settings","text":""},{"location":"Core_Module_Settings/#attributes","title":"Attributes","text":""},{"location":"Core_Module_Settings/#module-name","title":"Module-Name","text":"<p>Attribute NameDefaultDescription body Main module name blkSide center Module side alpha A Module's Alpha id"},{"location":"Core_Module_Settings/#type-attributes","title":"Type-Attributes","text":"<p>Attribute NameDefaultDescription isFacial False Choose whether this module is marked as a facial module. This attribute is going to be used by the Picker and ModuleVisUI tools to seperate controls/modules in a Body group and a Facial group. symmetryType 3 Choose the mirror type for right side controls controlsMultiplier 2.0 Scale multiplier for this module's controls alongSurface Input surface to attach all joints within this module to the selected surface when constructing the rig. NurbsSurface is recommended doGimbleCtrls False Not implemented currently doPivotCtrls False Not implemented currently postSymmetryJntStruct False If this attribute is set to true, a joint structure re-build will be initiated after this module is symmetrized"},{"location":"Core_Module_Settings/#attribute-host","title":"Attribute-Host","text":"<p>Attribute NameDefaultDescription doAttributeHostCtrl False If this is set to True, a new attribute host control will be created along with this module in the position set by it's guide. Depending on the module, all relevant custom channel box attributes/contrls will be created on it for the sake of order and coherence controling the module attributeHostControlShape plus The shape created for the attribute host control attrHostSpace The space of which the attribute host control will be parented to. This cannot be changed post construction."},{"location":"Core_Module_Settings/#space-attributes","title":"Space-Attributes","text":"<p>Attribute NameDefaultDescription spaces [' '] Drag and drop items to reorder. Depending on the module, all relevant space-switch controls will contain these spaces. Valid object types are Guides, Joints, and iterpJoints splitOrientSpace False If this is set to True, all space switch attributes for this module will split into two spaces- Translate and Orient, for the animator to be able to set different space for tranlation and orientation."},{"location":"Core_Module_Settings/#color","title":"Color","text":"<p>Attribute NameDefaultDescription colOverride False Override the main rig's color scheme for this module only schemeOverride [(0.0, 1.0, 0.0), (0.15, 1.0, 0.15), (0.3, 1.0, 0.3), (0.45, 1.0, 0.45), (0.6, 1.0, 0.6)] Override with these colors"},{"location":"Core_Module_Settings/#extra-channels","title":"Extra-Channels","text":"<p>Attribute NameDefaultDescription extraChannels Use this UI to create custom attributes within your modules and automatically connect to an attribute."},{"location":"FKChain/","title":"FKChain","text":"<p>"},{"location":"FKChain/#fkchain","title":"FKChain","text":"<p>  Author: Asaf Ben-Zur  Best used for: General Chain, Spine, Neck, Tail, Elephant-Trunk, Tentacle   This Module when used in it's basic state, will create a simple FK hierarchy control chain.   Altough this module contains many layers with many features such as Variable FK, Spring, Embedded IK, Secondary IK chains (interpolation controls).  Use as many layers an in any combination to create any form of FK chain behaviour."},{"location":"FKChain/#defenitions","title":"Defenitions","text":""},{"location":"FKChain/#construct","title":"construct","text":"<p> Constructor:  construct(mansur, MnsBuildModule, kwargs) Return:   list (controls), dict (internalSpaces), MnsNameStd (moduleSpaceAttrHost) Arguments:   <ul> <li>mansur</li> <li>MnsBuildModule</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"FKChain/#deconstruct","title":"deconstruct","text":"<p>  deconstruct method implementation for FKChain.   Transfer interJoints control back to the main joints.  Constructor:  deconstruct(mansur, MnsBuildModule, kwargs) Return:  None Arguments:   <ul> <li>mansur</li> <li>MnsBuildModule</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"FKChain/#jointstructure","title":"jointStructure","text":"<p> Constructor:  jointStructure(mansur, guides, mnsBuildModule = None, kwargs) Return:  None Arguments:   <ul> <li>mansur</li> <li>guides</li> <li>mnsBuildModule(str) ; [default: None]</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"FKChain/#jointstructuresoftmod","title":"jointStructureSoftMod","text":"<p> Constructor:  jointStructureSoftMod(mansur, guides, mnsBuildModule = None, kwargs) Return:  None Arguments:   <ul> <li>mansur</li> <li>guides</li> <li>mnsBuildModule(str) ; [default: None]</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"FKChain/#postconstruct","title":"postConstruct","text":"<p> Constructor:  postConstruct(mansur, MnsBuildModule, kwargs) Return:  None Arguments:   <ul> <li>mansur</li> <li>MnsBuildModule</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"FKChain_settings/","title":"FKChain settings","text":"<p>"},{"location":"FKChain_settings/#fkchain-settings","title":"FKChain Settings","text":"<p>  Author: Asaf Ben-Zur  Best used for: General Chain, Spine, Neck, Tail, Elephant-Trunk, Tentacle   This Module when used in it's basic state, will create a simple FK hierarchy control chain.   Altough this module contains many layers with many features such as Variable FK, Spring, Embedded IK, Secondary IK chains (interpolation controls).  Use as many layers an in any combination to create any form of FK chain behaviour.  </p>"},{"location":"FKChain_settings/#attributes","title":"Attributes","text":""},{"location":"FKChain_settings/#globalsettings","title":"GlobalSettings","text":"<p>Attribute NameDefaultDescription doInterpolationJoints False Create interpolation joints for this module interpolationJoints 2 Minimun is the number of guides. This setting controls the number of driven interpolation joints needed. This interpolation joint chain will behave according to the module's design, and will inherit transformations that are required by this module. Usually the driven interpolation joint-chain is the compenents result behaviour in animation. isolatePolesRotation False If this is set to True, the first and last interpolation joints orientation will be isolated. This is primarily used in combination with the EmbeddedIK feature to achive a stable spine setup offsetX 20.0 Up curve X value offset for the interpolation joints offsetZ 0.0 Up curve Z value offset for the interpolation joints scaleMode 2 Default scale mode. Please refer to the documentation of mnsPointsOnCurve node to learn more about each mode squashMode 0 Default squash mode. Please refer to the documentation of mnsPointsOnCurve node to learn more about each mode doPrimariesSpaceSwitch False If this is set to True, primary controls will receive a space switcher. NOTE: This feature cannot work alongside the embeddedIK feature- In case the embeddedIK feature is turned on, this setting will be set to False automatically doIntepJntsSpring False If this is set to True, a mnsSpringCurve node will be created on top of the primary curve controling the interpolation joints doCurlAttrs True If this is set to True, extra curl attributes will be created on the main primary control, to curl the entire primary chain in all axes"},{"location":"FKChain_settings/#fk","title":"FK","text":"<p>Attribute NameDefaultDescription FKcontrolShape circle FK controls shape doFKSeconderyIK False If this is set to True, another level of IK controls will be created below the FK controls FKSecondaryIKControlShape diamond Secodary IK controls shape primaryCurveDegree 3 Primary interpolation joints curve generation degree. Please refer to the documentation of mnsBuildTransformsCurve node to learn more about curve generation degree primaryCurveMode 0 Primary interpolation joints curve sampling mode. Please refer to the documentation of mnsPointsOnCurve node to learn more about curve each mode primaryInterpolaion 0 Primary interpolation joints curve generation interpolation mode. Please refer to the documentation of mnsBuildTransformsCurve node to learn more about each mode FKChannelControl T R S X v v v Y v v v Z v v v FK controls channel-box settings"},{"location":"FKChain_settings/#embeddedik","title":"EmbeddedIK","text":"<p>Attribute NameDefaultDescription doEmbeddedIK False This feature is mainly used to create a spine setup, where another layer of IK control is needed. The result of this feature is three IK controls - Root, Mid and End controls, which will allow IK control over the entire chain defaultVisibilityMode 1 Default visibility settings. FK and IK main controls can be used in combination, or indevidually- hence a manuall visibility switch embIKMode 1 Setup mode. btcTranslation is legacy, please use btcRotation ikCurveInterpolation 0 IK curve interpolation mode embIKCurveDegree 3 Embedded IK curve degree. Please refer to the documentation of mnsBuildTransformsCurve node to learn more about curve generation degree doMidTangentCtrls True If this is set to True, two extra tangent controls will be build from the IK Mid control embIKControlShape flatDiamond Main shape for the embedded IK controls embIKChannelControl T R S X v v v Y v v v Z v v v Embedded IK controls channel-box settings"},{"location":"FKChain_settings/#ik_secondaries","title":"IK_Secondaries","text":"<p>Attribute NameDefaultDescription doSecondaryIKCtrls False This feature will create a secondary IK controls layer below the primary FK chain controls. The number of IK Secondaries MUST be equel or greater then the number of guides/Primary FK controls for this layer to execute. This layer's will not execute without creating Interp-Joints. numIKControls 2 Amount of secondary layer controls, this value MUST be equel or greater then the number of guides/Primary FK controls. isolateSecPolesRotation False If this is set to True, the first and last controls orientation will be isolated. IKControlShape dial Secondary IK layer control shape secondaryCurveDegree 3 Secondary IK curve generation degree. Please refer to the documentation of mnsBuildTransformsCurve node to learn more about curve generation degree secondaryCurveMode 0 Secondary IK curve sampling mode. Please refer to the documentation of mnsPointsOnCurve node to learn more about curve each mode secondaryInterpolaion 0 Secondary IK curve generation interpolation mode. Please refer to the documentation of mnsBuildTransformsCurve node to learn more about each mode doIKSpring False If this is set to True, a mnsSpringCurve node will be created on top of the secondary curve IKChannelControl T R S X v v v Y v v v Z v v v Secondary IK controls channel-box settings"},{"location":"FKChain_settings/#variablefk","title":"VariableFK","text":"<p>Attribute NameDefaultDescription doVariableFK False This will create a veriable FK setup on this chain. NOTE: Setting this attribute to True when the curve mode is set to PARAMETRIC, will force the joint structure curve mode to UNIFORM.  This layer's will not execute without creating Interp-Joints. numVarFKControls 2 Number of variable FK controls varFKControlShape pinchedCircle Variable FK control shape varFKDegree 3 Variable FK curve degree. Please refer to the documentation of mnsBuildTransformsCurve node to learn more about curve generation degree defaultFalloff 0.5 Default falloff value for the variable FK controls varFKSubsteps 20 The variable FK setup is able to re-sample the curve to any amount of control points to refine the fidelity of the setup. This is the default sampling value doVarFKSpring False If this is set to True, a mnsSpringCurve node will be created on top of the variable FK controls varFKChannelControl T R S X v v Y v v Z v v Variable FK controls channel-box settings"},{"location":"FKChain_settings/#tweakers","title":"Tweakers","text":"<p>Attribute NameDefaultDescription doTweakControls False This feature is a global extra layer to tweak the final result cuvre samples rotation and scale.  This layer's will not execute without creating Interp-Joints. numTweakers 2 Number of tweak controls to create tweakControlShape dialSquare Tweak controls shape tweakersChannelControl T R S X v v Y v v Z v v Tweak controls channel-box settings"},{"location":"LODsTool/","title":"LODsTool","text":"<p>"},{"location":"LODsTool/#lodstool","title":"LODsTool","text":"<p>  === Author: Assaf Ben Zur ===  This simple animation tool was created to allow animators to space switch and IK-&gt;FK switch easily.  This tool is selection based. Please select controls to enable relevant capabilities.  For spaces, simply select the controls you want to act upon, choose your target spaces, and press \"switch\". This will switch the space, while maintaining the controls's transforms, using keys created automatically.  For Limbs, simple select any control/s for the limbs that you wish to act upon, and press the relevant button- To-IK or To-FK.  This will switch the limb/controls to the selected state.   This tool also includes Auto-Key switches, as well as a sequence and bake modes."},{"location":"LODsTool/#classes","title":"Classes","text":""},{"location":"LODsTool/#MnsLodsTool TARGET","title":"LODsTool","text":""},{"location":"LODsTool/#mnslodstool-class","title":"MnsLodsTool [Class]","text":"<p>  Spaces Tool UI Class.  Constructor:  MnsLodsTool(parent(str) ; [default: mnsUIUtils.get_maya_window()]) Inherits from:  form_class, base_class Class Members:   <ul> <ul> <li>iconsDir</li> <li>rigTops</li> <li>rigTop</li> <li>puppetRoot</li> <li>namespace</li> <li>rootGuide</li> <li>lodVisAttr</li> </ul> Methods:  <ul> <li>addLod  [method] <li>clearALLLods  [method] <li>convertLodsDictKeysToInts  [method] <li>drawLODsView  [method] <li>initializeUI  [method] <li>initializeView  [method] <li>readDataFromUI  [method] <li>setAttrHost  [method] <li>setLodStyle  [method] <li>setRigTop  [method] <li>writeData  [method] <li>addSelectedItems  [method] <li>deleteLOD  [method] <li>removeSlectedItems  [method] <li>setSelectedItems  [method] <li>updateLODAttrState  [method] <li>openMenu  [method] <li>connectSignals  [method] <li>loadWindow  [method]"},{"location":"LODsTool/#mnslodstool-methods","title":"MnsLodsTool  methods","text":"<p>"},{"location":"LODsTool/#addLodTARGET","title":"LODsTool","text":"addLod  [MnsLodsTool  class method]  Constructor:  addLod(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"LODsTool/#clearALLLodsTARGET","title":"LODsTool","text":"clearALLLods  [MnsLodsTool  class method]  Constructor:  clearALLLods(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"LODsTool/#convertLodsDictKeysToIntsTARGET","title":"LODsTool","text":"convertLodsDictKeysToInts  [MnsLodsTool  class method]  Constructor:  convertLodsDictKeysToInts(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"LODsTool/#drawLODsViewTARGET","title":"LODsTool","text":"drawLODsView  [MnsLodsTool  class method]  Constructor:  drawLODsView(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"LODsTool/#initializeUITARGET","title":"LODsTool","text":"initializeUI  [MnsLodsTool  class method]  Constructor:  initializeUI(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"LODsTool/#initializeViewTARGET","title":"LODsTool","text":"initializeView  [MnsLodsTool  class method]  Constructor:  initializeView(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"LODsTool/#readDataFromUITARGET","title":"LODsTool","text":"readDataFromUI  [MnsLodsTool  class method]  Constructor:  readDataFromUI(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"LODsTool/#setAttrHostTARGET","title":"LODsTool","text":"setAttrHost  [MnsLodsTool  class method]  Constructor:  setAttrHost(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"LODsTool/#setLodStyleTARGET","title":"LODsTool","text":"setLodStyle  [MnsLodsTool  class method]  Constructor:  setLodStyle(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"LODsTool/#setRigTopTARGET","title":"LODsTool","text":"setRigTop  [MnsLodsTool  class method]  Constructor:  setRigTop(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"LODsTool/#writeDataTARGET","title":"LODsTool","text":"writeData  [MnsLodsTool  class method]  Constructor:  writeData(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"LODsTool/#addSelectedItemsTARGET","title":"LODsTool","text":"addSelectedItems  [MnsLodsTool  class method]  Constructor:  addSelectedItems(self, index = 0) Return:  None Arguments:   <ul> <li>self</li> <li>index(int) ; [default: 0]</li> </ul> Optional Arguments:"},{"location":"LODsTool/#deleteLODTARGET","title":"LODsTool","text":"deleteLOD  [MnsLodsTool  class method]  Constructor:  deleteLOD(self, index = 0) Return:  None Arguments:   <ul> <li>self</li> <li>index(int) ; [default: 0]</li> </ul> Optional Arguments:"},{"location":"LODsTool/#removeSlectedItemsTARGET","title":"LODsTool","text":"removeSlectedItems  [MnsLodsTool  class method]  Constructor:  removeSlectedItems(self, index = 0) Return:  None Arguments:   <ul> <li>self</li> <li>index(int) ; [default: 0]</li> </ul> Optional Arguments:"},{"location":"LODsTool/#setSelectedItemsTARGET","title":"LODsTool","text":"setSelectedItems  [MnsLodsTool  class method]  Constructor:  setSelectedItems(self, index = 0) Return:  None Arguments:   <ul> <li>self</li> <li>index(int) ; [default: 0]</li> </ul> Optional Arguments:"},{"location":"LODsTool/#updateLODAttrStateTARGET","title":"LODsTool","text":"updateLODAttrState  [MnsLodsTool  class method]  Constructor:  updateLODAttrState(self, index = 0) Return:  None Arguments:   <ul> <li>self</li> <li>index(int) ; [default: 0]</li> </ul> Optional Arguments:"},{"location":"LODsTool/#openMenuTARGET","title":"LODsTool","text":"openMenu  [MnsLodsTool  class method]  Constructor:  openMenu(self, position) Return:  None Arguments:   <ul> <li>self</li> <li>position</li> </ul> Optional Arguments:"},{"location":"LODsTool/#connectSignalsTARGET","title":"LODsTool","text":"connectSignals  [MnsLodsTool  class method]  Connect all UI Signals. Constructor:  connectSignals(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"LODsTool/#loadWindowTARGET","title":"LODsTool","text":"loadWindow  [MnsLodsTool  class method]  Show window method. Constructor:  loadWindow(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"LODsTool/#defenitions","title":"Defenitions","text":""},{"location":"LODsTool/#loadlodstool","title":"loadLodsTool","text":"<p>  Load the Def Serach UI from globals, avoid UI duplication.  Constructor:  loadLodsTool()  Return:  None Arguments:   Keyword Arguments:   </p>"},{"location":"Maya-Plugins/","title":"Maya-Plugins","text":"<p>"},{"location":"Maya-Plugins/#mnsannotate","title":"mnsAnnotate","text":"<p>  === Author: Assaf Ben Zur ===  This node is a utility node used to present value annotations in maya's viewport easily.  When needing to present any keyframed values in a playblast within maya, there isn't any maya native node to allow values display within the VP.  This node was created for this need.  All connected attributes will be displayed as a new line presenting attributes and their current values, updating in real time.  The display settings are controled within this node, where the position of the display is controlled via the custom locator created with it.  The amount of attribute display is unlimited, and multiple unlimited instances of this node can be created freely.  This is mainly used to display technicall setups.  Inputs<p> Long-NameShort-NameTypeDescription attributesattrsmultiInput attributes array to display, unlimited amount. Each attribute component will be displayed as a single line. fontSizefontSizefloatDisplay Font Size. fontColorfontColorfloat[3]Display Font Color, RGB (0 to 1). fontTransparencyfontTransparencyfloatFont transperancy. 1 = Fully opaque, 0 = Fully tansparennt. precisionprecisionintNumberic attribute display precision- value represents the amount of integers right to the decimal point. lineSpacinglineSpacingfloatLine spacing between attributes line. drawFlatdrawFlatintDraw in 2D mode, regardless of the matrix position. The position is dictated by positionX and positionY attributes, relative to the viewports screen space resolution. positionXpositionXdoubleDisplay top-left corener X position, if drawFlat attribute is True. positionYpositionYdoubleDisplay top-left corener y position, if drawFlat attribute is True. nameOnlyModenameOnlyModeintMObject   mnsAnnotate::aNameMode"},{"location":"Maya-Plugins/#mnsautowheeldrive","title":"mnsAutoWheelDrive","text":"<p>  === Author: Assaf Ben Zur ===  Inputs<p> Long-NameShort-NameTypeDescription startFramestartFrameintEvaluation start frame. startFrameFromRangestartFrameFromRangeboolIf true, take the start frame from current maya range instead of the input value given. timetimetimeTime input."},{"location":"Maya-Plugins/#mnsbuildtransformscurve","title":"mnsBuildTransformsCurve","text":"<p>  === Author: Assaf Ben Zur ===  This node builds a nurbsCurve shape, based on input transforms array.  The curve parameters are dictated by this node's attributes, and can be dynamiclly changed and even keyframed if needed.  This node also creates and offset curve shape result, to be used later as an Up-Vector for every single arbitrary point along the result main curve.  Inputs<p> Long-NameShort-NameTypeDescription globalScaleglobalScalefloatGlobal scale multiplier. tweakCurvetweakCurvenurbsCurveInput tweak curve shape. tweakCurveBasetweakCurveBasenurbsCurveInput tweak curve base shape. buildModebuildModeenumBuild mode- EPs, CVs, Hermite, TangentedCVs, bezier. transformstransformscompoundTransforms array to build the curve from. matrixmatrixmatrixInput matrix transform, child of transforms. If this plug is connected, offsetX value will be taken as an the offset amount. offsetBaseMatrixoffsetBaseMatrixmatrixMatrix to build offset vectors from degreedegreeintOutput curve degree, 1-5. offsetXoffsetXfloatOutput offset curve X parameter. offsetYoffsetYfloatOutput offset curve Y parameter. offsetZoffsetZfloatOutput offset curve Z parameter. tangentDirectiontangentDirectionenumIf build mode is on Hermite, this paremeter dictates the tangent direction. reversereverseintReverse output curve and offset curve. formformenumResult curve form- open or closed HermiteStepsHermiteStepsintHermite mode steps amount. tangentLengthtangentLengthfloatControl tangent length (if present) OffsetTypeOffsetTypeenumOffset build type - world or local. buildOffsetCurvebuildOffsetCurveintInitiate offset curve build. resampleresampleboolResample curve before output, based on substeps paremeter. substepssubstepsintresample substeps. localizelocalizebool In case this attribute is on, the result will be localized based on the input worldToLocal matrix. worldToLocalMatrixworldToLocalMatrixmatrix In case localize attribute is on, the result will be localized based on this matrix. Outputs<p> Long-NameShort-NameTypeDescription outCurveoutCurvekNurbsCurveResult curve shape. outOffsetCurveoutOffsetCurvenurbsCurveResult offset curve shape. lengthlengthdoubleResult curve length. offsetLengthoffsetLengthdoubleResult offset curve length."},{"location":"Maya-Plugins/#mnscameragateratio","title":"mnsCameraGateRatio","text":"<p>  === Author: Assaf Ben Zur ===  A simple utility callback node to dynamiclly control and update the input camer'as display \"Camera-Gate\" parameters.  Inputs<p> Long-NameShort-NameTypeDescription cameraIncameraInmessageAffected camera node. gateWidthgateWidthfloatCemera gate width. gateHeightgateHeightfloatCemera gate height."},{"location":"Maya-Plugins/#mnsclosestpointsonmesh","title":"mnsClosestPointsOnMesh","text":"<p> Inputs<p> Long-NameShort-NameTypeDescription inMeshinMeshmeshInput mesh to find closest point to. inPositioninPositioncompound(Array)Input position to calculate a result for. Array Attr. matrixmatrixmatrixInput matrix to calculate a result for. Array Attr. targetParentMatrixtargetParentMatrixmatrixTarget parent matrix to multiply by before setting the result. Outputs<p> Long-NameShort-NameTypeDescription outPositionopvectorOutput position result."},{"location":"Maya-Plugins/#mnscompressiontensionblend","title":"mnsCompressionTensionBlend","text":"<p>  === Author: Assaf Ben Zur ===  Deformer.  A simple compression and tension based deformer.  This deformer will detect, display and deform a mesh  based on the difference between the current  deformed state and an input base-state (base-mesh).  <p> The deformer contains 3 display modes:  - Compression &amp; Tension (50% gray as base-state)  - Compression Only (black as base-state)  - Tension (black as base-state) </p> <p> The deformer also conatins separate multipliers for both tension and compression.  This deformer can be used to drive corrective shapes, wrinkles, volume gain/loss and much more.  Inputs<p> Long-NameShort-NameTypeDescription baseMeshbaseMeshmeshStatic base mesh input. tensionTargettensionTargetmeshTension blend target. compressionTargetcompressionTargetmeshCompression blend target. liveModeliveModeboolLive mode. Re-calculate edge lengthes on evaluation. displayModedisplayModeenumMap display mode- None, compressionTension, compression, tension. compressionMultipliercompressionMultiplierfloatGlobal compression multiplier. tensionMultipliertensionMultiplierfloatGlobal tension multiplier."},{"location":"Maya-Plugins/#mnscurvetweak","title":"mnsCurveTweak","text":"<p>  === Author: Assaf Ben Zur ===  This node was created in order to achive curve modifications/tweaks, without changing its form, not it's shape at bind position.  The input and output curves will match while the base curve and tweak curve match in shape.  Once any difference between the base shape and tweak shape was detected, the difference between these curves will be projected onto the input curve.  The objective of this node is to maintain all curve attributes/data (nSpans, nCvs, form, degree) unchanged while still having the ability to tweak the curve with different parameters.  Inputs<p> Long-NameShort-NameTypeDescription inputCurveinputCurvekNurbsCurve Input curve to tweak. Output curve will be the same as this curve while the tweak curve matches the base curve. inputBaseCurveinputBaseCurvekNurbsCurveInput base curve. This curve will be used to calculate the delta for the tweak. inputTweakCurveinputTweakCurvekNurbsCurveInput twek curve. This curve is intended to match the base curve as bind. This curve should be modified - after the curve is modified, the delta difference between it and the base curve will be projected on the input curve. buildOffsetCurvebuildOffsetCurveintInitiate offset curve build. tweakOffsettweakOffsetintThis will determine whether the offset curve created will be tweaked or not. offsetBaseMatrixoffsetBaseMatrixmatrixMatrix to build offset vectors from offsetoffsetfloatOutput offset curve parameter. Outputs<p> Long-NameShort-NameTypeDescription outCurveoutCurvekNurbsCurveResult curve shape. outOffsetCurveoutOffsetCurvekNurbsCurveResult offset curve shape."},{"location":"Maya-Plugins/#mnscurvevariable","title":"mnsCurveVariable","text":"<p>  === Author: Assaf Ben Zur ===  Curve based solve for a Variable-FK Setup.  This fast and efficient node allows the user to create a variable FK setup using input curves and local transformations, outputting a solved curve and up-curve- instead of the more common transforms output method.  The node will accept any amount of input transforms, outputting the complex offset parent solve for each input as well as the solved curves shapes.  This is to avoid the use of any extra nodes or multiple parent transforms- pinning the controls to the output curve at all times.  The initial solve, as well as all features are calculated within a single loop.  As opposed to the common Variable FK setup, the curve based approach eliminates the Rest-Pose constant- making the node's algorithm Rest-Pose dynamic. In fact, it doesn't exist.  This approach uses only the input array amount constant to calculate a uniform positioning along the output curve- allowing the input curve to be changeable (live / dynamic).  Notice that the amount of input variable controls is completely independent of the main controls input.  Inputs<p> Long-NameShort-NameTypeDescription curvecrvnurbsCurveInput curve. upCurveupCrvnurbsCurveInput offset curve. inTransforminTransformcompoundInput variable control values array. uPositionuPosfloatInput U position. Child of inTransform. strengthstrengthfloatInput strength. Child of inTransform. aimTranslateaimTfloatInput aim translation. Child of inTransform. upTranslateupTfloatInput up translation. Child of inTransform. terTranslateterTfloatInput tertiary translation. Child of inTransform. fallofffallofffloatInput falloff value. Child of inTransform. aimRotationaimRotangleInput aim-rotation value. Child of inTransform. upRotationupRotangleInput up-rotation value. Child of inTransform. tertiaryRotationterRotangleInput tertiary-rotation value. Child of inTransform. localMatrixlocalMatrixangleInput local transformation matrix. Child of inTransform. upModeupModeenumUp mode- normal, curve, worldX, worldY, worldZ. substepssubstepsintResample substeps value. translateModetModeenumControl translation mode- IK, FK. degreedegreeintResult curves degree. buildModebuildModeenumResult curve build mode- EPs, CVs. rotateOrderroenumCalculation rotation-order. aimAxisaimAxisenumAim axis choice. upAxisupAxisenumUp axis choice. offsetTypeoffsetTypeenumOffset curve adjustment mode- local, world. offsetXoffsetXfloatOffset curve adjustment offset X parameter. offsetYoffsetYfloatOffset curve adjustment offset Y parameter. offsetZoffsetZfloatOffset curve adjustment offset Z parameter. uScaleuScalefloatGlobal U-Scale adjusment. Addative to array indevidual u inputs. uOffsetuOffsetfloatGlobal U-Offfset adjusment. Addative to array indevidual u inputs. startAmpstartAmpfloatSine start amplitude value. endAmpendAmpfloatSine end amplitude value. amplitudeAimamplitudeAimfloatSine calculation X direction amplitude value. amplitudeUpamplitudeUpfloatSine calculation Y direction amplitude value. amplitudeTertiaryamplitudeTertiaryfloatSine calculation Z direction amplitude value. frequencyAimfrequencyAimfloatSine calculation X direction frequency value. frequencyUpfrequencyUpfloatSine calculation Y direction frequency value. frequencyTertiaryfrequencyTertiaryfloatSine calculation Z direction frequency value. phaseAimphaseAimfloatSine calculation X direction phase value. phaseUpphaseUpfloatSine calculation Y direction phase value phaseTertiaryphaseTertiaryfloatSine calculation Z direction phase value frequencyfrequencyfloatSine calculation global addative frequency value. phasephasefloatSine calculation global addative phase value. startPosstartPosfloatSine start position value. outCtrlsUpModeoutCtrlsUpModeenumOut position transforms up type - normal, curve, worldX, worldY, worldZ. Outputs<p> Long-NameShort-NameTypeDescription outCurveoutCurvenurbsCurveOutput curve shape. outOffsetCurveoutOffsetCurvenurbsCurveOutput offset curve shape. outTransformoutTransformcompoundOutput control offset position and rotation array. translatetfloat[3]Output control offset position, child of outTransform. rotaterangle[3]Output control offset rotation, child of outTransform. rotateXrotXangleOutput control offset rotation, X component, child of rotate. rotateYrotYangleOutput control offset rotation, Y component, child of rotate. rotateZrotZangleOutput control offset rotation, Z component, child of rotate."},{"location":"Maya-Plugins/#mnscurvezip","title":"mnsCurveZip","text":"<p>  === Author: Assaf Ben Zur ===  Curve based node.  This is primarily used for eyelids and lips.  This fast solution was developed to replace complex and heavy graphs- containing many math nodes, curve deformers and constraints.  This setup provides a very clean deployment, processing the math algorithm internally.  Combining this node with mnsBuildTransformsCurve and mnsPointsOnCurve, will result in a very efficient, dynamic and flexible setup.  All calculations are processed within a single loop.  All curve operations are aware of one another, and are NOT addative- meaning that all operations are available at any position, and will NOT break one another, nor overlap.  All attributes are not minimum limited to 0 and can be adjusted to the negative direction- pulling the bind pose against each other instead of towards each other.  The node contains a centerMatrix input plug, which is a live world position that is used to scale the calculated vectors based on the bind position offset (per curve parameter).  The problem arising from this method is a mismatch at any meet position between curve A and B due to an offset variation between all points (except for a perfect circle scenario, which is never the case).  This problem is solved using a conform attribute within which will pull one of the curves (based on user choice) to the other below a selected distance threshold- Resulting in a watertight-seal.  Using mnsPointsOnCurve to sample the result curves allows for a simple skinCluster to deform the mesh.  mnsCurveZip will output a pair of offset curves as well as the result curves, calculated by world axis vectors or the centerMatrix as a base, which are used as an Up-Curve input for the mnsPointsOnCurve node to manage rotations correctly as well.  The node contatins some more important inputs: The tweakCurves inputs.  Aspiring to an inclusive and comprehensive setup, tweak curves (A, B and Mid) can be plugged in to expose another manual layer of animation using scene controls.  The input curves are 100% independent of the base curve inputs and DO-NOT need to share topology with each other, nor the source inputs - as they are being re-sampled internally based on the build mode.  This means that the tweak controls amount is limitless and is NOT a constant, nor predefined.  Inputs<p> Long-NameShort-NameTypeDescription bindCurveAbindCurveAnurbsCurveInput curve A base-curve shape. tweakCurveAtweakCurveAnurbsCurveInput curve A curve shape. bindCurveBbindCurveBnurbsCurveInput curve B base-curve shape. tweakCurveBtweakCurveBnurbsCurveInput curve B curve shape. tweakCurveABasetweakCurveABasenurbsCurveInput curve A tweak base-curve shape. tweakCurveBBasetweakCurveBBasenurbsCurveInput curve B tweak base-curve shape. midCurvemidCrvnurbsCurveInput target mid curve. midCurveBasemidCrvBasenurbsCurveInput mid tweak curve base. midCurveTweakmidCrvTweaknurbsCurveInput mid tweak curve. centerMatrixcenterMatrixmatrixInput center transformation matrix. midPointMatrixmidPointMatrixmatrixInput mid point traget matrix. sampleModemenumCurve sample mode- parametric, uniform. matchInputCurvematchInputCurveenumResult curve matched parameters to- none, curveA, curveB. substepssubstepsintResult curve resampling sub-step value. degreedegreeintResult curve degree value. buildModebuildModeenumCurve build mode- EPs, CVs. midGenerateFrommidGenerateFromenumGenerate automatic mid curve from- bindBases, tweakCurves, input. midBiasmidBiasfloatGenerated curve bias. aroundCenteraroundCenterboolCalculate results considering the input center matrix. conformToMeetPointconformToMeetPointboolConform the selected curve result to meet the oter curve based on set parameters. curveToConformcurveToConformenumWhich curve to conform - curveA, curveB. conformDistancethresholdconformDistancethresholdenumWhich curve to conform - curveA, curveB. AToMidAToMidfloatBlend curve A to mid-curve. BToMidBToMidfloatBlend curve B to mid-curve. AToBAToBfloatBlend curve A to curve B. BToABToAfloatBlend curve B to curve A. allToMidPointallToMidPointfloatBlend both curves to mid-curve. pushOutpushOutfloatCurves push-out added value. zipStartzipStartfloatZip start value. zipStartFalloffzipStartFallofffloatZip start falloff value. zipEndzipEndfloatZip end value. zipEndFalloffzipEndFallofffloatZip end falloff value. glueglueboolDo glue. glueTherholdglueTherholdfloatGlue threshold value. offsetBaseoffsetBaseenumOffset curve build mode. centerMatrix, worldX, worldY, worldZ. offsetoffsetfloatOffset curve build parameter. globalMultiplierglobalMultiplierfloatGlobal value multiplier. Outputs<p> Long-NameShort-NameTypeDescription outCurveAoutCurveAnurbsCurveResult curve A shape. outCurveBoutCurveBnurbsCurveResult curve B shape. outCurveAOffsetoutCurveAOffsetnurbsCurveResult curve A offset shape. outCurveBOffsetoutCurveBOffsetnurbsCurveResult curve B offset shape."},{"location":"Maya-Plugins/#mnscurvezipb","title":"mnsCurveZipB","text":"<p>  === Author: Assaf Ben Zur ===  Curve based node.  This is primarily used for eyelids and lips.  This fast solution was developed to replace complex and heavy graphs- containing many math nodes, curve deformers and constraints.  This setup provides a very clean deployment, processing the math algorithm internally.  Combining this node with mnsBuildTransformsCurve and mnsPointsOnCurve, will result in a very efficient, dynamic and flexible setup.  All calculations are processed within a single loop.  All curve operations are aware of one another, and are NOT addative- meaning that all operations are available at any position, and will NOT break one another, nor overlap.  All attributes are not minimum limited to 0 and can be adjusted to the negative direction- pulling the bind pose against each other instead of towards each other.  The node contains a centerMatrix input plug, which is a live world position that is used to scale the calculated vectors based on the bind position offset (per curve parameter).  The problem arising from this method is a mismatch at any meet position between curve A and B due to an offset variation between all points (except for a perfect circle scenario, which is never the case).  This problem is solved using a conform attribute within which will pull one of the curves (based on user choice) to the other below a selected distance threshold- Resulting in a watertight-seal.  Using mnsPointsOnCurve to sample the result curves allows for a simple skinCluster to deform the mesh.  mnsCurveZip will output a pair of offset curves as well as the result curves, calculated by world axis vectors or the centerMatrix as a base, which are used as an Up-Curve input for the mnsPointsOnCurve node to manage rotations correctly as well.  The node contatins some more important inputs: The tweakCurves inputs.  Aspiring to an inclusive and comprehensive setup, tweak curves (A, B and Mid) can be plugged in to expose another manual layer of animation using scene controls.  The input curves are 100% independent of the base curve inputs and DO-NOT need to share topology with each other, nor the source inputs - as they are being re-sampled internally based on the build mode.  This means that the tweak controls amount is limitless and is NOT a constant, nor predefined.  Inputs<p> Long-NameShort-NameTypeDescription globalScaleglobalScaledoubleGlobal scale value. inTweakAPositioninTweakAPositionmatrix (array)Input tweaker local matrix. inTweakBPositioninTweakBPositionmatrix (array)Input tweaker local matrix. tweakModetweakModeenumTweak curve build mode. tweakMirrorMatrixtweakMirrorMatrixmatrixMirror matrix to add to the local tweaker transfomation build. bindCurveAbindCurveAnurbsCurveInput curve A base-curve shape. bindCurveBbindCurveBnurbsCurveInput curve B base-curve shape. centerMatrixcenterMatrixmatrixInput center transformation matrix. sampleModemenumCurve sample mode- parametric, uniform. midCurveModemidCurveModeenumMid curve generation mode. One To one - calculate mid point for every upper and lower pair. Regenerate- create a new mid curve, resample based on midCurveSubsteps attribute value. midCurveSubstepsmidCurveSubstepsintMid curve generation sampling amount matchInputCurvematchInputCurveenumResult curve matched parameters to- none, curveA, curveB. substepssubstepsintResult curve resampling sub-step value. degreedegreeintResult curve degree value. buildModebuildModeenumCurve build mode- EPs, CVs. midBiasmidBiasfloatGenerated curve bias. aroundCenteraroundCenterboolCalculate results considering the input center matrix. conformToMeetPointconformToMeetPointboolConform the selected curve result to meet the oter curve based on set parameters. curveToConformcurveToConformenumWhich curve to conform - curveA, curveB. conformDistancethresholdconformDistancethresholdenumWhich curve to conform - curveA, curveB. AToMidAToMidfloatBlend curve A to mid-curve. BToMidBToMidfloatBlend curve B to mid-curve. AToBindBAToBindBfloatBlend curve A to curve B. BToBindABToBindAfloatBlend curve B to curve A. AToBAToBfloatBlend curve A to curve B. BToABToAfloatBlend curve B to curve A. sCurveAsCurveAfloatBlend curve A into a procedural S shape. sCurveBsCurveBfloatBlend curve B into a procedural S shape. allToMidPointallToMidPointfloatBlend both curves to mid-curve. pushOutpushOutfloatCurves push-out added value. zipStartzipStartfloatZip start value. zipStartFalloffzipStartFallofffloatZip start falloff value. zipEndzipEndfloatZip end value. zipEndFalloffzipEndFallofffloatZip end falloff value. offsetBaseoffsetBaseenumOffset curve build mode. centerMatrix, worldX, worldY, worldZ. offsetoffsetfloatOffset curve build parameter. Outputs<p> Long-NameShort-NameTypeDescription outCurveAoutCurveAnurbsCurveResult curve A shape. outCurveBoutCurveBnurbsCurveResult curve B shape. outCurveAOffsetoutCurveAOffsetnurbsCurveResult curve A offset shape. outCurveBOffsetoutCurveBOffsetnurbsCurveResult curve B offset shape. outTweakAoutTweakAcompound (array)Parent attribute that holds output values for tweaker offset position. outTweakATranslateoutTweakATranslatevectorOutput offset position for a given tweaker. outTweakARotateoutTweakARotatevectorOutput offset rotation for a given tweaker. outTweakBoutTweakBcompound (array)Parent attribute that holds output values for tweaker offset position. outTweakBTranslateoutTweakBTranslatevectorOutput offset position for a given tweaker. outTweakBRotateoutTweakBRotatevectorOutput offset rotation for a given tweaker."},{"location":"Maya-Plugins/#mnsdynamicpivot","title":"mnsDynamicPivot","text":"<p>  === Author: Assaf Ben Zur ===  This is a simple node to calculate a foot's dynamic pivot internally, acoiding the use of many transforms and node connections.  Given an input curve, world origin position (as matrix) and mapping info, this node will map the input rotation values into a new custom point adding the rotation into the translation.  This essentailly will push the new point rapidly away from it's origin into the mapping direction.  Now using the given input curve, the closest point on curve from the new point will be calcultaed and outputted into the rotatePivot plug.  This output plug can then be plugged into a custom pivot attribute of any transform- creating a dynamiclly calculated pivot along the given curve.  Inputs<p> Long-NameShort-NameTypeDescription inputCurveinputCurvenurbsCurveInput curve. rotateXrxangleInput local X rotation. rotateYryangleInput local Y rotation. rotateZrzangleInput local Z rotation. rotaterangle[3]Input rotations. originWorldMatrixowmmatrixInput origin position to strat the calculation from. targetParentInverseMatrixtpimmatrix Target transform parent inverse matrix to localize the rotate pivot position result. mapRotXTomapRotXToenumMapping info from input X rotation. mapRotYTomapRotYToenumMapping info from input Y rotation. mapRotZTomapRotZToenumMapping info from input Z rotation. distRateMultiplierdistRateMultiplierdoubleThe rotation rate of addition in the translation values. inputMultipliersinputMultipliersboolPre-calc input multipliers. Outputs<p> Long-NameShort-NameTypeDescription rotatePivotrotatePivotfloat[3]Result rotate pivot position."},{"location":"Maya-Plugins/#mnsexponential","title":"mnsExponential","text":"<p>"},{"location":"Maya-Plugins/#mnsiksolver","title":"mnsIKSolver","text":"<p>  === Author: Assaf Ben Zur ===  This IK-Solver node provides an alternative, faster and more reliable solution for a 2-joint IK set-up.  This enhanced IK-solution offers a much cleaner approach as well, computing the blend internally- making any basic IK-FK set-up efficient, stable, fast and clean.  To add on the internal FK-IK switch, this node contains a few more features that are already an industry  standard:  Softness - prevents a pop on ik limit approach.  Slide - Knee position sliding (for character animation).  Stretch - Providing a limb-stretch when the ik-solve is beyond its limit.  Axis Switching - Offering an easy switch to any joint orientation.  Inputs<p> Long-NameShort-NameTypeDescription boneLengthAblafloatBase length A. boneLengthBblbfloatBase length B. restHandleLengthrestHandleLengthfloatBase length between the root position and the handle. blendblendfloatIK-FK blend value. rootFKrootFKmatrixInput FK root matrix. midFKmidFKmatrixInput FK mid matrix. endFKendFKmatrixInput FK end matrix. ikTargetikTargetmatrixInput IK target matrix. poleVectorpoleVectormatrixInput pole-vector target matrix. rootWorldMatrixrootWorldMatrixmatrixModule root input matrix. rollrollfloatIK addative roll value. slideslidefloatIK mid slide value. softnesssoftnessfloatIK softness parameter. stretchLimitstretchLimitfloatIK stretch limit value. 1 is no stretch, 2 is double the length. aimAxisaimAxisenumAim axis choice. upAxisupAxisenumUp axis choice. segmentScaleCompensatesegmentScaleCompensateboolcalculate with segment scale compensate on or off. Outputs<p> Long-NameShort-NameTypeDescription rootTranslaterootTranslatefloat[3]Root out translate output. Child of outRoot. rootRotateXrootRotateXfloatRoot out translate X output. Child of outRoot. rootRotateYrootRotateYfloatRoot out translate Y output. Child of outRoot. rootRotateZrootRotateZfloatRoot out translate Z output. Child of outRoot. rootRotaterootRotateangle[3]Root out rotate output. Child of outRoot. rootScalerootScalefloat[3]Root out scale output. Child of outRoot. outRootoutRootcompoundRoot output transformation values. midTranslatemidTranslatefloat[3]Mid out translate output. Child of outMid. midRotateXmidRotateXfloatMid out translate X output. Child of outMid. midRotateYmidRotateYfloatMid out translate Y output. Child of outMid. midRotateZmidRotateZfloatMid out translate Z output. Child of outMid. midRotatemidRotateangle[3]Mid out rotate output. Child of outMid. midScalemidScalefloat[3]Mid out scale output. Child of outMid. outMidoutMidcompoundMid output transformation values. endTranslateendTranslatefloat[3]End out translate output. Child of outEnd. endRotateXendRotateXfloatEnd out translate X output. Child of outEnd. endRotateYendRotateYfloatEnd out translate Y output. Child of outEnd. endRotateZendRotateZfloatEnd out translate Z output. Child of outEnd. endRotateendRotateangle[3]End out rotate output. Child of outEnd. endScaleendScalefloat[3]End out scale output. Child of outEnd. outEndoutEndcompoundEnd output transformation values. ikVisikVisboolIK mode visibility. fkVisfkVisboolFK mode visibility."},{"location":"Maya-Plugins/#mnslipzip","title":"mnsLipZip","text":"<p>  === Author: Assaf Ben Zur ===  Curve based node.  Inputs<p> Long-NameShort-NameTypeDescription globalScaleglobalScaledoubleGlobal scale value. inTweakAPositioninTweakAPositionmatrix (array)Input tweaker local matrix. inTweakBPositioninTweakBPositionmatrix (array)Input tweaker local matrix. tweakModetweakModeenumTweak curve build mode. tweakMirrorMatrixtweakMirrorMatrixmatrixMirror matrix to add to the local tweaker transfomation build. centerMatrixcenterMatrixmatrixInput center transformation matrix. sampleModemenumCurve sample mode- parametric, uniform. substepssubstepsintResult curve resampling sub-step value. degreedegreeintResult curve degree value. buildModebuildModeenumCurve build mode- EPs, CVs. midBiasmidBiasfloatGenerated curve bias. aroundCenteraroundCenterboolCalculate results considering the input center matrix. alongSurfacealongSurfaceboolCalculate results considering the input surface. conformToMeetPointconformToMeetPointboolConform the selected curve result to meet the oter curve based on set parameters. curveToConformcurveToConformenumWhich curve to conform - curveA, curveB. conformDistancethresholdconformDistancethresholdenumWhich curve to conform - curveA, curveB. AToMidAToMidfloatBlend curve A to mid-curve. BToMidBToMidfloatBlend curve B to mid-curve. AToBAToBfloatBlend curve A to curve B. BToABToAfloatBlend curve B to curve A. sCurveAsCurveAfloatBlend curve A into a procedural S shape. sCurveBsCurveBfloatBlend curve B into a procedural S shape. allToMidPointallToMidPointfloatBlend both curves to mid-curve. upperCurlBaseMatrixupperCurlBaseMatrixmatrixBase upper matrix to calculate offsets before calculating the curl. upperCurlMatrixupperCurlMatrixmatrix Upper matrix for calculating the curl. upperCurlFalloffupperCurlFallofffloat Upper curl falloff lowerCurlBaseMatrixlowerCurlBaseMatrixmatrixBase lower matrix to calculate offsets before calculating the curl. lowerCurlMatrixlowerCurlMatrixmatrix Lower matrix for calculating the curl. lowerCurlFallofflowerCurlFallofffloat Lower curl falloff pushOutApushOutAfloatCurves push-out added value. pushOutBpushOutBfloatCurves push-out added value. zipStartzipStartfloatZip start value. zipStartFalloffzipStartFallofffloatZip start falloff value. zipEndzipEndfloatZip end value. zipEndFalloffzipEndFallofffloatZip end falloff value. offsetBaseoffsetBaseenumOffset curve build mode. centerMatrix, worldX, worldY, worldZ. offsetoffsetfloatOffset curve build parameter. Outputs<p> Long-NameShort-NameTypeDescription outCurveAoutCurveAnurbsCurveResult curve A shape. outCurveBoutCurveBnurbsCurveResult curve B shape. outCurveAOffsetoutCurveAOffsetnurbsCurveResult curve A offset shape. outCurveBOffsetoutCurveBOffsetnurbsCurveResult curve B offset shape. outTweakAoutTweakAcompound (array)Parent attribute that holds output values for tweaker offset position. outTweakATranslateoutTweakATranslatevectorOutput offset position for a given tweaker. outTweakARotateoutTweakARotatevectorOutput offset rotation for a given tweaker. outTweakBoutTweakBcompound (array)Parent attribute that holds output values for tweaker offset position. outTweakBTranslateoutTweakBTranslatevectorOutput offset position for a given tweaker. outTweakBRotateoutTweakBRotatevectorOutput offset rotation for a given tweaker."},{"location":"Maya-Plugins/#mnsmatrixconstraint","title":"mnsMatrixConstraint","text":"<p>  === Author: Assaf Ben Zur ===  Light weight alternative to Maya's native constraints - All within one node.  Live switchable/keyable maintainOffset channel.  Easily add spaces/masters to existing constraint using recalcOffset channel.  Inputs<p> Long-NameShort-NameTypeDescription sourceWorldMatrixsourceWorldMatrixmatrixSource world matrix. spaceSetspaceSetintConstraint Space index. maintainOffsetmaintainOffsetboolMaintain offset attribute. recalcOffsetsrecalcOffsetsintRecalculate offset in current state. targetParentInverseMatrixtargetParentInverseMatrixmatrixTraget inverse matrix. targetRotateOrdertargetRotateOrderenumCalculation rotate-order. targetWorldMatrixtargetWorldMatrixmatrixTraget world matrix. Outputs<p> Long-NameShort-NameTypeDescription matrixmmatrixResult as matrix form. translatetfloat[3]Translation values result. rotaterangle[3]Rotation values result. scalesfloat[3]Scale values result. shearshearfloat[3]Shear values result."},{"location":"Maya-Plugins/#mnsmeshrivets","title":"mnsMeshRivets","text":"<p>  === Author: Assaf Ben Zur ===  A multi \"Point-On-Poly\" constraint style compute node.  The node will accept any amount of input positions, as well as an input base-mesh and a target mesh.  The base mesh is used to calculate the source position and offset, the target mesh is used to calculate the result position based on the selected attributes within the node:  - Calculation Method: Closest UV, Vertex, Face  - Do Rotation: On, Off  - Do Scale: On, Off  - Rotation: Aim-Axis and up Axis choice (All 6)  - Up-Mode: World (X,Y,Z), Closest Tangent, Closest Binormal  The node will accept any amount on input tweaker matrices that can be used to adjust the riveted transforms globally and easily.  The tweakers adjustments are calculated in world spcae and the algorithm is fully independent, additive, and keyable.  The proximity calculation is matrix based to achieve non-spherical tweaks.  As tweaking the position of the rivets is not sensible as the transforms' position is based on the target mesh, the proximity tweakers are used to adjust rotation and scale only.  The node contains two adjustemt spaces:  - World- Will transform the outputs in world space, providing a more intuative behaviour, although less practical.  - Object - Will transform the outputs in their relative local spaces (preferable), which will provide a less intuative behaviour (dependent of the tweaker and output orientation), although very practical.  A falloff attribute is also implemented to allow control over the decay within the \"collision\" zone.  Inputs<p> Long-NameShort-NameTypeDescription meshmeshmeshInput mesh to rivet to. targetWorldMatrixtargetWorldMatrixmatrixInput mesh world matrix. rivetrivetcompoundInput rivet transforms array. worldMatrixworldMatrixmatrixInput rivet transforms matrix. Child of rivet. parentInverseMatrixparentInverseMatrixmatrixInput rivet transforms inverse parent matrix. Child of rivet. liveModeliveModeboolLive mode. Calculate everything in every evaluation. calculationMethodcalculationMethodenumCalculation basis- UV, closestVertex, closestFace. uvToleranceuvTolerancefloatUV search tolerance threshold value. doRotationdoRotationboolCalculate rotations. doRivetRotationdoRivetRotationboolCalculate rivet local rotations. rotateOrderroenumCalculation rotate-order. upModeupModeenumRotation calculation up mode- worldX, worldY, worldZ, closestVertexBinormal, closestVertexTangent. aimAxisaimAxisenumAim Axis choice. upAxisupAxisenumUp Axis choice. doRivetScaledoRivetScaleboolCalculate scale. doScaledoScaleboolScale the rivets with the target mesh scale. When off the mesh's scale doesn't affect the rivets. maintainOffsetmaintainOffsetboolMaintain offset between rivet position and target mesh. proximityRotationSpaceproximityRotationSpaceenumProximity tweak rotation space- object, world. proximityTweakerproximityTweakercompoundProximity tweakers input array. proximityWorldMatrixproximityWorldMatrixmatrixProximity tweaker matrix. Child of proximityTweaker. proximityLocalMatrixproximityLocalMatrixmatrixProximity tweaker local matrix. Child of proximityTweaker. rivetScalerivetScalefloat[3]Scale tweak input. fallofffallofffloatProximity tweak falloff. Child of proximityTweaker. texturetexturecolorInput color map adjustment. rotationTextureAmplituderotationTextureAmplitudefloatColor map adjustment amplitude. textureBothDirectionstextureBothDirectionsboolAvarage color map adjustment to both direction. -0.5 0.5 instead of 0 to 1. scaleTextureAmplitudescaleTextureAmplitudefloatColor map scale affect amplitude. Outputs<p> Long-NameShort-NameTypeDescription translatetfloat[3]Translation output. Child of transform. rotaterangle[3]Rotation output. Child of transform. transformtransformcompoundOutput transforms array. scalesangle[3]Scale output. Child of transform. baseMeshbaseMeshmeshInput base-mesh."},{"location":"Maya-Plugins/#mnsmeshseparate","title":"mnsMeshSeparate","text":"<p>  === Author: Assaf Ben Zur ===  A simple node to drive seprated shell objects using one combined mesh.  Inputs<p> Long-NameShort-NameTypeDescription meshmeshmeshInput mesh to separate. inShellinShellmeshInput shell object array. Outputs<p> Long-NameShort-NameTypeDescription outMeshoutMeshmeshResult shell meshes array."},{"location":"Maya-Plugins/#mnsmodulo","title":"mnsModulo","text":"<p>  === Author: Assaf Ben Zur ===  A simple math node missing from Maya's native library.  Given a value and a devisor, the node will compute modulo based operations:  - modulos - the remainder or signed remainder of a division, after one number is divided by another- double.  - modulosInt - the remainder or signed remainder of a division, after one number is divided by another- int.  - Cycles - Number of repetitions - double.  - CyclesInt - Number of repetitions - int.  - Alternate - Alternating between 0 and the devisor.  - Alternate - Alternating between 0 and 1, based on the devisor.  Inputs<p> Long-NameShort-NameTypeDescription valuevaluedoubleValue to compute. devisordevisordoubleDevisor to compute. Outputs<p> Long-NameShort-NameTypeDescription modulusmodulusdoubleThe remainder or signed remainder of a division, after value is divided by the devisor. modulusIntmodulusIntintThe remainder or signed remainder of a division, after value is divided by the devisor. cyclescyclesdoubleNumber of repetitions-Double. cyclesIntcyclesIntdoubleNumber of repetitions-Int. alternatealternatedoubleAlternating value between 0 and the devisor. alternateNormalizedalternateNormalizeddoubleAlternating between 0 and 1, based on the devisor."},{"location":"Maya-Plugins/#mnsnoderelationship","title":"mnsNodeRelationship","text":"<p>  === Author: Assaf Ben Zur ===  BLOCK main relationship node.  Inputs<p> Long-NameShort-NameTypeDescription messageInmessageInmessageInput master node. messageOutmessageOutmessageInput slaves nodes array. deleteSlavesdeleteSlavesmessageInput delete only slaves nodes array."},{"location":"Maya-Plugins/#mnspointsoncurve","title":"mnsPointsOnCurve","text":"<p>  === Author: Assaf Ben Zur ===  A fast and efficient parameter based compute node to sample and control points along a given curve.  In combination with mnsBuildTransformsCurve will result in a very advanced and robust \"spline IK\" control.  - Creation modes       + Parametric - curve parameterized position calculation       + Uniform - Addaptive uniform sampling       + Fixed length - Uniform sampling based on an input max length. Initialized to curve length on creation, Keyable.  - Position control  - Rotation control       + Aim modes - curveTangent, object       + Up modes - curveNormal, up-curve, worldX, worldY, worldZ, object  - Scale control  - Spring ability  Inputs<p> Long-NameShort-NameTypeDescription curvecrvnurbsCurveInput curve to sample. upCurveupCrvnurbsCurveInput up curve to sample. bindCurvebindCrvnurbsCurveInput bind curve to sample. Used only in parametrically-uniform build mode. aimCurveaimCurvenurbsCurveInput aim curve to sample. Used only in curveAim rotation mode. upObjectupObjmatrixInput up object matrix to use if requsted. objectOrientUpAxisobjectOrientUpAxisenumIn case object orient up mode is selected, which axis to use. objectOrientAimAxisobjectOrientAimAxisenumIn case object orient aim mode is selected, which axis to use. aimObjectaimObjmatrixInput aim object matrix to use if requsted. globalScaleglobalScalefloatGlobal scale multiplier. numOutputsnumOintNumber of outputs/samples. modemenum direction=iSmaple mode- parametric, uniform, uniformFixedLength. cyclecycleboolEnable cycle mode. closedShapeclosedShapeboolEnable closed shape mode. uScaleuSclfloatGlobal positions U-Scale adjustment. uScaleInverseuSclInvfloatGlobal positions U-Scale-Inverse adjustment. uScaleMiduSclMidfloatGlobal positions U-Scale-mid adjustment. uScaleMidPosuSclMidPosfloatU-Scale-mid-position value. uScaleMidInverseuSclMidInvfloatGlobal positions U-Scale-mid-inverse adjustment. uOffsetuOffsetfloatGlobal positions U-offset adjustment. inverseinvboolInverse result order. fixedLengthfixedLengthfloatThe maximum fixed length for the result sample if requested. creationLengthcreationLenfloatValue store for the creation curve length. curveLengthcrvLrnfloatCurrent curve length display. uTugScaleuTugSclfloatGlobal positions U-Tug-Scale adjustment. uTugScaleTensionuTugSclTensionfloatGlobal positions U-Tug-Scale-tension parameter. uTugOffsetuTugOffsetfloatGlobal positions U-Tug-Offset adjustment. rotateModerotModeenumSamples rotation mode- curveTangent, objectAim. upModeupModeenumSamples rotation up mode- normal, curve, worldX, worldY, worldZ, objectUp. scaleModesclModeenumSamples scale mode- absuloteCurveLength, addaptiveCurveLength, segmentLengthDependent. squashModesquashModeenumSamples squash mode- squashStretch, squash, stretch, uniform, none. doRotationdoRotboolDo samples rotation. doScaledoSclboolDo samples scale. rotateOrderroenum direction=iCalculation rotation order. aimAxisaimAxisenumAim axis choice. upAxisupAxisenumUp axis choice. customPointsUpModecusPointsUpModeenumCustom tweakers rotation up mode. enableParamAdjustenableParamAdjustbool Enable Manual parameter adjustments. paramAdjustmentparamAdjustmentdoubleManual parameter adjustments array input. Use this parameter to adjust calculated curve parameters manually. This parameter is addative. aimParamAdjustmentaimParamAdjustmentdoubleManual parameter adjustments array input for the aim curve param. Use this parameter to adjust calculated aim curve parameters manually. This parameter is addative. excludePolesTranslationexcludePolesTranslationboolexclude translation set for base and tip. excludePolesRotationexcludePolesRotationboolexclude rotation set for base and tip. excludeBaseRotationexcludeBaseRotationboolexclude rotation set for base. Only if excludePolesRotation is set to True. excludeTipRotationexcludeTipRotationboolexclude rotation set for tip. Only if excludePolesRotation is set to True. excludePolesScaleexcludePolesScaleboolexclude scale set for base and tip. twistAimStarttwistAimStartfloatSelf explanatory. twistAimMidtwistAimMidfloatSelf explanatory. squeezeAimsqueezeAimfloatSelf explanatory. waveAimAnglewaveAimAngfloatSelf explanatory. twistAimWavePhasetwistAimWavePhasefloatSelf explanatory. twistAimMidPostwistAimMidPosfloatSelf explanatory. twistAimEndtwistAimEndfloatSelf explanatory. twistAimAlltwistAimAllfloatSelf explanatory. aimToObjaimToObjfloatSelf explanatory. upToObjupToObjfloatSelf explanatory. twistUpStarttwistUpStartfloatSelf explanatory. twistUpMidtwistUpMidfloatSelf explanatory. twistUpSqueezetwistUpqueezefloatSelf explanatory. waveUpAnglewaveUpAngfloatSelf explanatory. waveUpPhasewaveUPPhasefloatSelf explanatory. twistUpMidPostwistUpMidPosfloatSelf explanatory. twistUpEndtwistUpEndfloatSelf explanatory. twistUpAlltwistUpAllfloatSelf explanatory. twistTertiaryStarttwistTerStartfloatSelf explanatory. twistTertiaryMidtwistTerMidfloatSelf explanatory. tertiarySqueezeterSqueezefloatSelf explanatory. tertiaryWaveAngletertiaryWaveAngfloatSelf explanatory. tertiaryWavePhaseterWavePhasefloatSelf explanatory. twistTertiaryMidPostwistTerMidPosfloatSelf explanatory. tertiaryTwistEndterTwistEndfloatSelf explanatory. tertiaryTwistAllterTwistAllfloatSelf explanatory. resetScaleresetSclintReset scale values to current state. scaleMaxAddaptivesclMaxAddaptiveboolAdapt max scale to squash/scale relative values. squashFactorsquashFactorfloatSquash multiplier. squashPossquashPosfloatSquash position. scaleStartsclStartfloatSelf explanatory. scaleMidsclMidfloatSelf explanatory. scaleMidPossclMidPosfloatSelf explanatory. scaleWaveAmpsclWaveAmpfloatSelf explanatory. scaleWavePhasesclWavePhasefloatSelf explanatory. scaleEndsclEndfloatSelf explanatory. scaleAllsclAllfloatSelf explanatory. scaleAllAimscaleAllAimfloatSelf explanatory. scaleAllUpscaleAllUpfloatSelf explanatory. scaleAllTertiaryscaleAllTertiaryfloatSelf explanatory. scaleMinsclMinfloatSelf explanatory. scaleMaxsclMaxfloatSelf explanatory. springModesprModeenumSamples spring mode- UScale, UScaleInverse, UMidScaleInverse, UTugOffset, UTugScale. springStrengthsprStrengthfloatspring strength. springDampsprDampfloatSpring damping factor. springStiffnesssprStiffnessfloatSpring stiffness factor. goalMatrixgoalMatrixmatrixSpring goal matrix. doSpringdoSprboolDo spring calculation. timetimetimeInput time value. customPositioncustomPositioncompoundCustom tweakers input transforms array. uPositionuPosfloatCustom tweaker U-Position. Child of customPositionOut. twisttwistfloatCustom tweaker twist value. Child of customPositionOut. aimRotationaimRotfloatCustom tweaker aim-rotation value. Child of customPositionOut. tertiaryRotationtertiaryRotfloatCustom tweaker tertiary-rotation value. Child of customPositionOut. scaleAimsclAimfloatCustom tweaker aim-scale value. Child of customPositionOut. scaleUpsclUpfloatCustom tweaker up-scale value. Child of customPositionOut. tertiaryScaleterSclfloatCustom tweaker tertiary-scale value. Child of customPositionOut. fallofffallofffloatCustom tweaker falloff value. Child of customPositionOut. Outputs<p> Long-NameShort-NameTypeDescription transformstransformscompoundResult transforms array. translatetfloat[3]Result transform translation values. Child of transforms. rotaterangle[3]Result rotation translation values. Child of transforms. matrixResult matrix. Child of transforms. scalesfloat[3]Result scale translation values. Child of transforms. customPositionOutcusPosOutcompoundCustom tweakers offset transformation values array. cusTranslatecusTfloat[3]Custom tweakers offset translation values. Child of customPositionOut. cusRotatecusRangle[3]Custom tweakers offset rotation values. Child of customPositionOut."},{"location":"Maya-Plugins/#mnsposeblend","title":"mnsPoseBlend","text":"<p>"},{"location":"Maya-Plugins/#mnsquaternionblend","title":"mnsQuaternionBlend","text":"<p>  === Author: Assaf Ben Zur ===  Inputs<p> Long-NameShort-NameTypeDescription inMatrix1inMatrix1matrix Input matrix1. Blend source A. inMatrix2inMatrix2matrix Input matrix1. Blend source B. Outputs<p> Long-NameShort-NameTypeDescription rotaterangle[3]Rotation output."},{"location":"Maya-Plugins/#mnsremapfloatarray","title":"mnsRemapFloatArray","text":"<p>  === Author: Assaf Ben Zur ===  This simple node will take the input value (as float or angle) and split and remap the values across the requested output count, based on the given values map graph attribute.  The value can also be re-ranged between two values, using the remapToRnage attributes given.  The input value plug will accept floats, doubles and angles (genericAttr).  The output plug will be set according to the input type given.  Inputs<p> Long-NameShort-NameTypeDescription valuesMapvaluesMapfloat(array)Output values remap graph. valuevaluefloatInput value to remap. Can be float, double and angle. angleOutputAsDegreesangleOutputAsDegreesboolIn case the input is set to angle, if this is set to true, the output values will be in degrees instead of the original radians input. remapToRangeremapToRangeboolA choice to remap the outputs to a new range, using the relevant attributes. outputCountoutputCountintThe amount of outputs to remap the input value to. minminfloatRemapToRnage new minimum value. maxmaxfloatRemapToRnage new maximum value. oldMinoldMinfloatRemapToRnage old minimum value. oldMaxoldMaxfloatRemapToRnage old maximum value. Outputs<p> Long-NameShort-NameTypeDescription outValueoutValuefloatOutput values array."},{"location":"Maya-Plugins/#mnsresamplecurve","title":"mnsResampleCurve","text":"<p>  === Author: Assaf Ben Zur ===  A simple light weight curve re-sampler.  Primaraly used to embed mnsThreePointArc into an IK setup.  Inputs<p> Long-NameShort-NameTypeDescription resampleModeresampleModeenumReample mode- parametric, uniform. degreedegreeintReample degree. sectionssectionsintReample amount of sections. inputCurveinputCurvenurbsCurveInput curve to re-sample. Outputs<p> Long-NameShort-NameTypeDescription outCurveoutCurvenurbsCurveResult curve."},{"location":"Maya-Plugins/#mnssimplerivets","title":"mnsSimpleRivets","text":"<p>  === Author: Assaf Ben Zur ===  This is a simple mesh rivet node.  This node will take any amount of input start position as matrix and will compile a transformation matrix for the closest face center position on the given input mesh.  This node will output the result in world space, unless an inpur targetParentInverseMatrix is plugged into the relevant element.  The deafult output will be the closest face center transformation matrix unless maintainOffset is set to ON- then the offset will be calculated and stored resulting in the same transformation matrix as the startPosition at bind.  Live mode should only be used for debugging purposes as this will initiate the nodes initialization process on every evaluation- impacting the nodes performance significantly.  The initialization process will be performed from from the given input mesh, unless a base mesh is plugged in to baseMesh plug.  It is recommended to avoid keeping baseMesh and startPosition plugs live.  Inputs<p> Long-NameShort-NameTypeDescription meshmeshmeshInput mesh to rivet to. positionModepositionModeint position mode. 0 is closest face center, 1 is closest vertex upModeupModeint up mode. 0 is closest vertex, 1 is input up matrix. upMatrixupMatrixint Up matrix to use in case upMode is set to 1. targetWorldMatrixtargetWorldMatrixmatrixInput mesh world matrix. rivetrivetcompound (Array)Input rivets compound array. rivetStartPositionrivetStartPositionmatrixInput start position. Rivet position will be calculated from this origin matrix. targetParentInverseMatrixtargetParentInverseMatrixmatrixTarget transform parent inverse matrix. Use when output result is needed in local space (connect the target transform parentInverseMatrix plug) liveModeliveModeboolLive mode. Calculate everything in every evaluation. maintainOffsetmaintainOffsetboolMaintain offset between rivet position and target mesh. Outputs<p> Long-NameShort-NameTypeDescription translatetfloat[3]Translation output. Child of transform. rotaterangle[3]Rotation output. Child of transform. transformtransformcompoundOutput transforms array. scalesangle[3]Scale output. Child of transform. baseMeshbaseMeshmeshInput base-mesh."},{"location":"Maya-Plugins/#mnssimplesquash","title":"mnsSimpleSquash","text":"<p>  === Author: Assaf Ben Zur ===  This simple node is designed to output a scale value to squash and stretch a given single transform value.  Based on the creation distance between the target and source matricies, the scale values will be calculated using a squash/stretch algorithm using the dynamic distance (or current distance).  All input values will be taken into account calculating the result.  The static arc length is the creation length. This value can be set manually if needed, although the node will set this value in it's initialization stage- in case the source and handle matricies where connected.  This value will be set automatically only once, in case this value needs to be changed it will need to be set manually.  Aim axis attribute- stretch value will be set to the aim axis selection, squash value will be set to the remaining axes.  Global scale attribute - this attribute is set to scale the static arc length to avoid unwanted scaling issues when aiming for a uniform scale of the target transform.  Inputs<p> Long-NameShort-NameTypeDescription handleWorldMatrixhandleWorldMatrixmatrixInput handle world matrix. squashRootWorldMatrixsquashRootWorldMatrixmatrixInput squash root position world matrix. squashFactorsquashFactorfloatInput squash factor. stretchFactorstretchFactorfloatInput stretch factor. stretchMinstretchMinfloatInput minimum stretch value. stretchMaxstretchMaxfloatInput maximum stretch value. squashMinsquashMinfloatInput maximum squash value. squashMaxsquashMaxfloatInput minimum squash value. staticArcLengthstaticArcLengthfloatStatic arc length / creation length value. aimAxisaimAxisenumAim axis- stretch value will be set to the aim axis selection, squash value will be set to the remaining axes. globalScaleglobalScalefloatGlobal scale multiplier value. Outputs<p> Long-NameShort-NameTypeDescription scalesfloat[3]Output scale result. arcLengtharcLengthfloatCurrent arc length."},{"location":"Maya-Plugins/#mnssphereroll","title":"mnsSphereRoll","text":"<p>  === Author: Assaf Ben Zur ===  This node was created to deal with a ball/sphere rolling.  As oposed to common solutions, this node will evaluate the rotation of the target based on it's previous state, resulting in a non-gimble solution.  This node will solve the rotation for the current time.  Since ball rolling is a non-deterministic solution, this node will consider the previous state of the target transform to solve for the best posssible rotation given the input values.  Best used for a simple ball rolling on the ground, or a BB-8 style character, where the charcter's movements are rotation (roll) based.  Inputs<p> Long-NameShort-NameTypeDescription globalScaleglobalScaledoubleMObject  MnsSphereRoll::aGlobalScale speedMultiplierspeedMultiplierdouble a global keyable multiplier to offset the solve. 1 is even, less then 1 will result in a backspin, greater then one will result in a topspin. sphereRadiussphereRadiusdouble The radius of the traget sphere to rotate. driverWorldMatrixdriverWorldMatrixmatrix This matrix will be sampled in order to evaluate the transition to the next calculation. This should be the target transform for the output rotation. upVectorWorldMatrixupVectorWorldMatrixmatrix This up vector direction will be calculated in relation to the input driver world matrix. startFramestartFrameintEvaluation start frame. startFrameFromRangestartFrameFromRangeboolIf true, take the start frame from current maya range instead of the input value given. timetimetimeTime input. Outputs<p> Long-NameShort-NameTypeDescription outRotationoutRotationvectorMObject  MnsSphereRoll::aOutRotation"},{"location":"Maya-Plugins/#mnsspherevectorpush","title":"mnsSphereVectorPush","text":"<p>  === Author: Assaf Ben Zur ===  Presenting mnsSphereVectorPush deformer.  This deformer was purpose built for the Eye-Meniscus deformation, but can be used for many more applications.  As opposed to the commonly used \"matrixCollision\", mnsSphereVectorPush will also collide back faces and push them at a higher radius based on a thickness threshold (keyable).  The node will accept unlimited collider matrix inputs and will combine the deformations with ease.  The input radiuses and thicknesses can be varied and keyed to choice.  Implementing the mnsSphereVectorPush deformer within the eyelid setup will result in a natural looking deformation of the cornea and the eyelids.  This is the case for a closed eye pose as well- which will naturally suggest the eye aim even when it isn't seen, corresponding to real life behavior.  The deformer can also be used to represent the eye volume- pushing the eyelid verticies towards the eye surface, for extreme poses of which are not handled correctly by the \"aroundCenterMatrix\" of mnsCurveZip due to a range which exceeds the normalization.  Inputs<p> Long-NameShort-NameTypeDescription collideMatrixcollideMatrixmatrixInput collision matrix. radiusradiusmatrixInput collision radius. thicknessCollidethicknessCollideboolIf true, collide against back-faces using the input threshold. thicknessThresholdthicknessThresholdfloatBackface avarage distance to collide against. collidercollidercompoundCollision object input array. collideMethodcollideMethodenumCollision method- matrix, position."},{"location":"Maya-Plugins/#mnsspringcurve","title":"mnsSpringCurve","text":"<p>  === Author: Assaf Ben Zur ===  This node is used to achive simple secondary motion proceduraly.  Tihs node will accept an input curve and offset curves to act upon, and using the stiffness and damping graph attributes it will calculate a new curve with secondary motion embedded.  This is an evaluation node rather then a simulation. Time needs to be connected to the node in order to see it's effect.  Inputs<p> Long-NameShort-NameTypeDescription inputCurveinputCurvenurbsCurveInput curve. inputOffsetCurveinputOffsetCurvenurbsCurveInput offset curve. strengthstrengthfloatGlobal strength. 0 is do nothing. preventStretchingpreventStretchingboolCalculate stretch prevention. startFramestartFrameintEvaluation start frame. startFrameFromRangestartFrameFromRangeboolIf true, take the start frame from current maya range instead of the input value given. timetimetimeTime input. stiffnessstiffnessgraphStiffness graph control. dampingdampinggraphDamping graph control. Outputs<p> Long-NameShort-NameTypeDescription outCurveoutCurvenurbsCurveResult curve. outOffsetCurveoutOffsetCurvenurbsCurveResult offset curve."},{"location":"Maya-Plugins/#mnsthreepointarc","title":"mnsThreePointArc","text":"<p>  === Author: Assaf Ben Zur ===  This node was written to create a perfectly curved limb blend, instead of using common approaches like skinned curves, simulated tangents, scaled points, etc.  This method provides a very elegant way of enabling curvable limbs to animators, avoiding the use of Maya's 'makeThreePointCircularArc' which doesn't support a case where the 3 input points are collinear, nor any input curve or blending support.  Another major advantage of this node is the 'conformToMidPoint' attribute-  This attribute signals the algorithm to take the mid-point into consideration when drawing the edit points of the calculated arc, 'pinning' the elbow/knee in place when blending to the curved shape, even when the ratio between the 2 bones is not even (most cases).  The blend is triggered once with the attribute set to 'Off' - causing the knee to shift position completely- making it unusable in animation. Then, the blend is triggered when the attribute is 'On' and the knee is pinned in place, while the result curve edit points are being shifted based on the mid-point's position.  Inputs<p> Long-NameShort-NameTypeDescription point1point1matrixInput position A. point2point2matrixInput position B. point3point3matrixInput position C. blendblendfloatBlend value. blendSectionAblendSectionAfloatSection A only blend value. blendSectionBblendSectionBfloatSection B only blend value. swipeStartswipeStartfloatSwipe blend from start value. swipeStartFalloffswipeStartFallofffloatSwipe blend from start falloff value. swipeMidToRootswipeMidToRootfloatSwipe blend from mid to start value. swipeMidToRootFalloffswipeMidToRootFallofffloatSwipe blend from mid to start falloff value. swipeMidToEndswipeMidToEndfloatSwipe blend from mid to end value. swipeMidToEndFalloffswipeMidToEndFallofffloatSwipe blend from mid to end falloff value. swipeEndswipeEndfloatSwipe blend from end to start value. swipeEndFalloffswipeEndFallofffloatSwipe blend from end to start falloff value. collinearActioncollinearActionenumCollinear action choice- inputCurve, resample. resampleModeresampleModeenumIf resmapling is chosen, use this mode to resample- parametric, uniform. degreedegreeintIf resmapling is chosen, use this degree. sectionssectionsintIf resmapling is chosen, use this amount of sections. conformMidPointconformMidPointboolUse the mid point to enhance clending algorithm. inputCurveinputCurvenurbsCurveInput curve. inputOffsetCurveinputOffsetCurvenurbsCurveInput offset curve. Outputs<p> Long-NameShort-NameTypeDescription outCurveoutCurvenurbsCurveResult Curve. outOffsetCurveoutOffsetCurvenurbsCurveResult offset Curve. centercenterfloat[3]Result circle center point. radiusradiusfloatResult circle radius."},{"location":"Maya-Plugins/#mnstransformspring","title":"mnsTransformSpring","text":"<p>  === Author: Assaf Ben Zur ===  Inputs<p> Long-NameShort-NameTypeDescription inputWorldMatrixinputWorldMatrixfloatMObject  MnsTransformSpring::aInputWorldMatrix targetParentInverseMatrixtargetParentInverseMatrixfloatMObject  MnsTransformSpring::aTargetParentInverseMatrix strengthstrengthfloatGlobal strength. 0 is do nothing. startFramestartFrameintEvaluation start frame. startFrameFromRangestartFrameFromRangeboolIf true, take the start frame from current maya range instead of the input value given. timetimetimeTime input. stiffnessstiffnessgraphStiffness graph control. dampingdampinggraphDamping graph control. Outputs<p> Long-NameShort-NameTypeDescription translatetfloatMObject  MnsTransformSpring::aOutTranslate"},{"location":"Maya-Plugins/#mnsvolumejoint","title":"mnsVolumeJoint","text":"<p>  === Author: Assaf Ben Zur ===  Inputs<p> Long-NameShort-NameTypeDescription globalScaleglobalScaledoubleGlobal scale multiplier. parentJointWorldMatrixparentJointWorldMatrixmatrix Input parent joint world Matrix. Angle source-A. childJointWorldMatrixchildJointWorldMatrixmatrix Input child joint world Matrix. Angle source-B. childJointRestWorldMatrixchildJointRestWorldMatrixmatrix Input child joint rest matrix. This will dictate the zero position for the calculation. volumeJointvolumeJointcompound array Input array compound for a volume joint calculation. Unlimited. restTranslaterestTranslatevector[3] Rest translation values. posXTranslateposXTranslatevector[3] Positive X angle translation values. negXTranslatenegXTranslatevector[3] Negative X angle translation values. posYTranslateposYTranslatevector[3] Positive Y angle translation values. negYTranslatenegYTranslatevector[3] Negative Y angle translation values. posZTranslateposZTranslatevector[3] Positive Z angle translation values. negZTranslatenegZTranslatevector[3] Negative Z angle translation values. posXScaleposXScalevector[3] Positive X angle scale values. negXScalenegXScalevector[3] Negative X angle scale values. posYScaleposYScalevector[3] Positive Y angle scale values. negYScalenegYScalevector[3] Negative Y angle scale values. posZScaleposZScalevector[3] Positive Z angle scale values. negZScalenegZScalevector[3] Negative Z angle scale values. rotationBlendrotationBlenddouble Rotation blend between the 2 sources (parent and child joints) for this volume joint. 0 is parent rotation, 1 is child rotation. parentInverseMatrixparentInverseMatrixmatrix Target joint's parent inverse matrix to be used to localize the output values. Outputs<p> Long-NameShort-NameTypeDescription resultresultcompoundOutput transforms array. translatetfloat[3]Translation output. Child of transform. rotaterangle[3]Rotation output. Child of transform. scalesangle[3]Scale output. Child of transform. posXStateposXStatedoubleCurrent Positive-X direction state, between 0 and 1. negXStatenegXStatedoubleCurrent Negative-X direction state, between 0 and 1. posYStateposYStatedoubleCurrent Positive-Y direction state, between 0 and 1. negYStatenegYStatedoubleCurrent Negative-Y direction state, between 0 and 1. posZStateposZStatedoubleCurrent Positive-Z direction state, between 0 and 1. negZStatenegZStatedoubleCurrent Negative-Z direction state, between 0 and 1."},{"location":"Support-Us/","title":"Support Us","text":""},{"location":"Support-Us/#any-type-of-support-goes-a-long-way-thank-you","title":"Any type of support goes a long way, thank you!","text":""},{"location":"Support-Us/#so-how-can-you-support-this-project","title":"So how can you support this project ?","text":"<p> <ul> <li>  Subscribe to our YouTube channel! <li>  Join our Discord community! <li> Follow our social-media pages</li> <li>Share it Share it with your colleges and friends or share it on any social media platform!     Exposure and user-base is the key to keep this project going, so don't hold back !</li> <li>Write a testimonial In case you want to write a testimonial to be featured in the testimonial section in our main website Mansur-Rig.com, we will greatly appreciate it! Please contact us at support@mansur-rig.com</li> <li>Mention Mansur-Rig on posts Hashtags and mentions in social-media increase the exposure and credibility of the product, so when you can- mantion Mansur-Rig</li> <li>Every like counts! Likes go a long way, as they help promote the project by promoting videos/posts.</li>"},{"location":"UIUtils/","title":"UIUtils","text":"<p>"},{"location":"UIUtils/#uiutils","title":"UIUtils","text":"<p>  === Author: Assaf Ben Zur ===  UI Utility function assembly.  This module holds all UI utility functions as well s any QT dynamic draw functions.  All UI functions should be held in here for multi-usage of the same UI draw functions.  This module also holds the QT ui dynamic conversion to '.py' and the 'get_maya_window' function."},{"location":"UIUtils/#classes","title":"Classes","text":""},{"location":"UIUtils/#CollapsibleFrameWidget TARGET","title":"UIUtils","text":""},{"location":"UIUtils/#collapsibleframewidget-class","title":"CollapsibleFrameWidget [Class]","text":"<p>  Collapsible frame Widget class.  This is a wrapper widget that allows for a collapisble frame to be built.  The QFrame object will allow for Layouts to be inserted into the Collapsible frame, inserting any widgets within it,   collapsing and expanding it by a click trigger (from the user).  Constructor:  CollapsibleFrameWidget(parent(str) ; [default: None],title(str) ; [default: None]) Inherits from:  QFrame Class Members:   <ul> <ul> <li>_is_collasped</li> <li>_title_frame</li> <li>_content</li> <li>_main_v_layout</li> <li>clickedSignal</li> </ul> Methods:  <ul> <li>initCollapsable  [method] <li>toggleCollapsed  [method] <li>setArrow  [method] <li>initArrow  [method] <li>initContent  [method] <li>initTitleFrame  [method] <li>addWidget  [method]"},{"location":"UIUtils/#collapsibleframewidget-methods","title":"CollapsibleFrameWidget  methods","text":"<p>"},{"location":"UIUtils/#initCollapsableTARGET","title":"UIUtils","text":"initCollapsable  [CollapsibleFrameWidget  class method]  Constructor:  initCollapsable(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"UIUtils/#toggleCollapsedTARGET","title":"UIUtils","text":"toggleCollapsed  [CollapsibleFrameWidget  class method]  Constructor:  toggleCollapsed(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"UIUtils/#setArrowTARGET","title":"UIUtils","text":"setArrow  [CollapsibleFrameWidget  class method]  Constructor:  setArrow(self, arrow_dir) Return:  None Arguments:   <ul> <li>self</li> <li>arrow_dir</li> </ul> Optional Arguments:"},{"location":"UIUtils/#initArrowTARGET","title":"UIUtils","text":"initArrow  [CollapsibleFrameWidget  class method]  Constructor:  initArrow(self, collapsed) Return:  None Arguments:   <ul> <li>self</li> <li>collapsed</li> </ul> Optional Arguments:"},{"location":"UIUtils/#initContentTARGET","title":"UIUtils","text":"initContent  [CollapsibleFrameWidget  class method]  Constructor:  initContent(self, collapsed) Return:  None Arguments:   <ul> <li>self</li> <li>collapsed</li> </ul> Optional Arguments:"},{"location":"UIUtils/#initTitleFrameTARGET","title":"UIUtils","text":"initTitleFrame  [CollapsibleFrameWidget  class method]  Constructor:  initTitleFrame(self, title, collapsed) Return:  None Arguments:   <ul> <li>self</li> <li>title</li> <li>collapsed</li> </ul> Optional Arguments:"},{"location":"UIUtils/#addWidgetTARGET","title":"UIUtils","text":"addWidget  [CollapsibleFrameWidget  class method]  Constructor:  addWidget(self, widget) Return:  None Arguments:   <ul> <li>self</li> <li>widget</li> </ul> Optional Arguments:"},{"location":"UIUtils/#MnsAbout TARGET","title":"UIUtils","text":""},{"location":"UIUtils/#mnsabout-class","title":"MnsAbout [Class]","text":"<p>  Mansur - About dialog  Constructor:  MnsAbout(parent(str) ; [default: get_maya_window()],version(str) ; [default: \"dev\"]) Inherits from:  QtWidgets.QDialog Class Members:   <ul> <ul> <li>iconsDir</li> <li>versionDisplay</li> <li>close_btn</li> </ul>"},{"location":"UIUtils/#extraChannelsDelegate TARGET","title":"UIUtils","text":""},{"location":"UIUtils/#extrachannelsdelegate-class","title":"extraChannelsDelegate [Class]","text":"<p> Constructor:  extraChannelsDelegate(parent(str) ; [default: None],*args) Inherits from:  QtWidgets.QItemDelegate Class Members:   <ul> Methods:  <ul> <li>setModelData  [method] <li>createEditor  [method]"},{"location":"UIUtils/#extrachannelsdelegate-methods","title":"extraChannelsDelegate  methods","text":"<p>"},{"location":"UIUtils/#setModelDataTARGET","title":"UIUtils","text":"setModelData  [extraChannelsDelegate  class method]  Constructor:  setModelData(self, editor, model, index) Return:  None Arguments:   <ul> <li>self</li> <li>editor</li> <li>model</li> <li>index</li> </ul> Optional Arguments:"},{"location":"UIUtils/#createEditorTARGET","title":"UIUtils","text":"createEditor  [extraChannelsDelegate  class method]  Constructor:  createEditor(self, parent, option, index) Return:  None Arguments:   <ul> <li>self</li> <li>parent</li> <li>option</li> <li>index</li> </ul> Optional Arguments:"},{"location":"UIUtils/#defenitions","title":"Defenitions","text":""},{"location":"UIUtils/#acquireexternalwindow","title":"acquireExternalWindow","text":"<p>  A simple method to acquire an external QT window, into an actual PyQt MianWindow object.  Constructor:  acquireExternalWindow(UIName = None) Return:  QMainWindow (UI Class) Arguments:   <ul> <li>UIName(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"UIUtils/#buildformbaseclassforui","title":"buildFormBaseClassForUI","text":"<p> Constructor:  buildFormBaseClassForUI(script_dir, rel_path) Return:  baseClass, formClass Arguments:   <ul> <li>script_dir</li> <li>rel_path</li> </ul> Keyword Arguments:   </p>"},{"location":"UIUtils/#buildstackedtabformoduleparentdir","title":"buildStackedTabForModuleParentDir","text":"<p>  Main BLOCK dynamiuc tab builder.  Builds a tab for a given tab parent including all the neccesary layouts within, returning the main layout that can be inserted with new q items.  Constructor:  buildStackedTabForModuleParentDir(modDirName, insertIndex, tabWidget, kwargs) Return:  None Arguments:   <ul> <li>modDirName</li> <li>insertIndex</li> <li>tabWidget</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"UIUtils/#buildtabformoduleparentdir","title":"buildTabForModuleParentDir","text":"<p>  Main BLOCK dynamiuc tab builder.  Builds a tab for a given tab parent including all the neccesary layouts within, returning the main layout that can be inserted with new q items.  Constructor:  buildTabForModuleParentDir(modDirName, insertIndex, tabWidget, kwargs) Return:  None Arguments:   <ul> <li>modDirName</li> <li>insertIndex</li> <li>tabWidget</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"UIUtils/#checkchannelcommand","title":"checkChannelCommand","text":"<p>  DynUI 'channel control' checkBox changed command trigger.  Constructor:  checkChannelCommand(chanBtn,chanCbxs) Return:  None Arguments:   <ul> <li>chanBtn</li> <li>chanCbxs</li> </ul> Keyword Arguments:   </p>"},{"location":"UIUtils/#coloverrideblockdeftriggercommand","title":"colOverrideBlockDefTriggerCommand","text":"<p>  DynUI color-override default command trigger.  Constructor:  colOverrideBlockDefTriggerCommand(colorOverrideCbx, sideCB, ovverideBtnList) Return:  None Arguments:   <ul> <li>colorOverrideCbx</li> <li>sideCB</li> <li>ovverideBtnList</li> </ul> Keyword Arguments:   </p>"},{"location":"UIUtils/#coloverridestatechange","title":"colOverrideStateChange","text":"<p>  DynUI color-override changed command trigger.  Constructor:  colOverrideStateChange(colorOverrideCbx, sideCB, ovverideBtnList) Return:  None Arguments:   <ul> <li>colorOverrideCbx</li> <li>sideCB</li> <li>ovverideBtnList</li> </ul> Keyword Arguments:   </p>"},{"location":"UIUtils/#convertrelativepathtoabs","title":"convertRelativePathToAbs","text":"<p>  A method for replacing a projectRoot variable within a relative path to the absolute path  Based on the current project directory  Constructor:  convertRelativePathToAbs(filePath = \"\") Return:  string Arguments:   <ul> <li>filePath(str) ; [default: \"\"]</li> </ul> Keyword Arguments:   </p>"},{"location":"UIUtils/#createaboutwindow","title":"createAboutWindow","text":"<p>  Load about dialog  Constructor:  createAboutWindow() Return:  None Arguments:   Keyword Arguments:   </p>"},{"location":"UIUtils/#createtextseparator","title":"createTextSeparator","text":"<p> Constructor:  createTextSeparator(label = \"\", QMenuItem = None, parent = get_maya_window()) Return:  None Arguments:   <ul> <li>label(str) ; [default: \"\"]</li> <li>QMenuItem(str) ; [default: None]</li> <li>parent(str) ; [default: get_maya_window()]</li> </ul> Keyword Arguments:   </p>"},{"location":"UIUtils/#customscriptsaddcommand","title":"customScriptsAddCommand","text":"<p>  Add button trigger command for \"custom scripts\" slot of synamic UI.  Constructor:  customScriptsAddCommand(listWidget) Return:  None Arguments:   <ul> <li>listWidget</li> </ul> Keyword Arguments:   </p>"},{"location":"UIUtils/#customscriptsdefaultcommand","title":"customScriptsDefaultCommand","text":"<p>  Default trigger command for 'custom scripts' slot in dynUI.  Constructor:  customScriptsDefaultCommand(listWidget, MnsArgumentObj) Return:  None Arguments:   <ul> <li>listWidget</li> <li>MnsArgumentObj</li> </ul> Keyword Arguments:   </p>"},{"location":"UIUtils/#customscriptsremovecommand","title":"customScriptsRemoveCommand","text":"<p>  Remove button trigger command for \"custom scripts\" slot of synamic UI.  Constructor:  customScriptsRemoveCommand(listWidget) Return:  None Arguments:   <ul> <li>listWidget</li> </ul> Keyword Arguments:   </p>"},{"location":"UIUtils/#deletealllayoutitems","title":"deleteAllLayoutItems","text":"<p>  A method to delete all widgets/object from a given layout  Constructor:  deleteAllLayoutItems(layout, kwargs) Return:  None Arguments:   <ul> <li>layout</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"UIUtils/#drawbooleanchk","title":"drawBooleanChk","text":"<p>  Main dynamic check-box UI draw.  Creates a simple boolean check-box (QCheckBox) as well as a connected 'default' button.  Constructor:  drawBooleanChk(MnsArgumentObj, layoutParent) Return:  QCheckBox Arguments:   <ul> <li>MnsArgumentObj</li> <li>layoutParent</li> </ul> Keyword Arguments:   </p>"},{"location":"UIUtils/#drawbuttonandfield","title":"drawButtonAndField","text":"<p>  Main dynamic 'button and field' draw.   Draws a deault button, text field and an 'Insert items from scene' button into the given parent layout.  This function makes all relevant connections between the QItems created-  - 'Load command' from the QPushButton (insert) to the text field  - 'Clear' trigger for the text field.  - 'Set default' from the QPushButton 'default' to the text field.  These connections are made within in order the return the QLEdit only, with no need to worrie about the 'functionallity' buttons created, only the value within the text field.  Constructor:  drawButtonAndField(MnsArgumentObj, layoutParent, alphaLimit = False) Return:  QLEdit Arguments:   <ul> <li>MnsArgumentObj</li> <li>layoutParent</li> <li>alphaLimit(bool) ; [default: False]</li> </ul> Keyword Arguments:   </p>"},{"location":"UIUtils/#drawbuttonandfieldunknown","title":"drawButtonAndFieldUnknown","text":"<p>  Main 'unknown' button and field UI draw.  In case the MnsArgument.type in question is an unknown type, draw a button and field style item for it.  Constructor:  drawButtonAndFieldUnknown(MnsArgumentObj, layoutParent) Return:  QLEdit Arguments:   <ul> <li>MnsArgumentObj</li> <li>layoutParent</li> </ul> Keyword Arguments:   </p>"},{"location":"UIUtils/#drawchannelcolumnandconnect","title":"drawChannelColumnAndConnect","text":"<p>  Draw channel column (part of channel control) into a DynUI.  Constructor:  drawChannelColumnAndConnect(MnsArgumentObj, channel, kwargs) Return:  QVBoxLayout (layout), list (drawen boxes) Arguments:   <ul> <li>MnsArgumentObj</li> <li>channel</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"UIUtils/#drawchannelcontrol","title":"drawChannelControl","text":"<p>  Draw the predefined channel-control slot into a DynUI.  Constructor:  drawChannelControl(MnsArgumentObj, layoutParent, kwargs) Return:  list (all channel cbxs) Arguments:   <ul> <li>MnsArgumentObj</li> <li>layoutParent</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"UIUtils/#drawcolorbox","title":"drawColorBox","text":"<p>  Main dynamic 'draw color box' creation function.  Will create a new QPushButton with its 'color picker' style display and inserts it into the given layoutParent.  An automatic connection to the 'getColor' function is made, as well as a 'default' button creation and connection is made.  Constructor:  drawColorBox(MnsArgumentObj, layoutParent) Return:  QPushButton Arguments:   <ul> <li>MnsArgumentObj</li> <li>layoutParent</li> </ul> Keyword Arguments:   </p>"},{"location":"UIUtils/#drawcolorbtnandconnect","title":"drawColorBtnAndConnect","text":"<p> Constructor:  drawColorBtnAndConnect(default, kwargs) Return:  QPushButton Arguments:   <ul> <li>default</li> <li>kwargs</li> </ul> Keyword Arguments:   <ul> <li>buttonSize(int) ; [default: 25]</li> <li>colOverrideCbx(str) ; [default: None]</li> </ul>"},{"location":"UIUtils/#drawcolorscheme","title":"drawColorScheme","text":"<p>  Main block 'draw color scheme box' creation function.  Will create a new QPushButton series with 'color picker's style display and inserts it into the given layoutParent.  An automatic connection to the 'getColor' function is made, as well as a 'default' button creation and connection is made.  Constructor:  drawColorScheme(MnsArgumentObj, layoutParent) Return:  list Arguments:   <ul> <li>MnsArgumentObj</li> <li>layoutParent</li> </ul> Keyword Arguments:   </p>"},{"location":"UIUtils/#drawcolorschemeoverride","title":"drawColorSchemeOverride","text":"<p>  Draw the predefined 'color scheme' slot into a dynUI.  Constructor:  drawColorSchemeOverride(MnsArgumentObj, layoutParent, kwargs) Return:  list Arguments:   <ul> <li>MnsArgumentObj</li> <li>layoutParent</li> <li>kwargs</li> </ul> Keyword Arguments:   <ul> <li>sideCB(str) ; [default: None]</li> <li>colOverride(bool)</li> <li>rigTop(str) ; [default: None]</li> </ul>"},{"location":"UIUtils/#drawcustomscriptsslot","title":"drawCustomScriptsSlot","text":"<p>  draw a \"custom scripts\" slot into dyn UI.  Constructor:  drawCustomScriptsSlot(MnsArgumentObj, layoutParent) Return:  QListWidget Arguments:   <ul> <li>MnsArgumentObj</li> <li>layoutParent</li> </ul> Keyword Arguments:   </p>"},{"location":"UIUtils/#drawextrachannelsbox","title":"drawExtraChannelsBox","text":"<p>  Main dynamic 'draw blend shape targets box' creation function.  Constructor:  drawExtraChannelsBox(MnsArgumentObj, layoutParent) Return:  QTreeWidget Arguments:   <ul> <li>MnsArgumentObj</li> <li>layoutParent</li> </ul> Keyword Arguments:   </p>"},{"location":"UIUtils/#drawfloatscroll","title":"drawFloatScroll","text":"<p>  Main dynamic \"Float spinner\" UI draw  Creates a Float QDoubleSpinBox widget, and a default button connected to it.  Constructor:  drawFloatScroll(MnsArgumentObj, layoutParent) Return:  QDoubleSpinBox Arguments:   <ul> <li>MnsArgumentObj</li> <li>layoutParent</li> </ul> Keyword Arguments:   </p>"},{"location":"UIUtils/#drawhorizontaldevider","title":"drawHorizontalDevider","text":"<p>  Draw a simple Horizontal devider into the dynUI.  Constructor:  drawHorizontalDevider(MnsArgumentObj, layoutParent) Return:  QFrame (Horizontal line devider) Arguments:   <ul> <li>MnsArgumentObj</li> <li>layoutParent</li> </ul> Keyword Arguments:   </p>"},{"location":"UIUtils/#drawintspinner","title":"drawIntSpinner","text":"<p>  Main dynamic 'int field' field and spinner UI draw.  Creates an int QSpinBox widget, and a default button connected to it.  Constructor:  drawIntSpinner(MnsArgumentObj, layoutParent) Return:  QSpinBox Arguments:   <ul> <li>MnsArgumentObj</li> <li>layoutParent</li> </ul> Keyword Arguments:   </p>"},{"location":"UIUtils/#drawjntstructmembercol","title":"drawJntStructMemberCol","text":"<p> Constructor:  drawJntStructMemberCol(layout = None, argument = None) Return:  None Arguments:   <ul> <li>layout(str) ; [default: None]</li> <li>argument(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"UIUtils/#drawmodulebutton","title":"drawModuleButton","text":"<p>  Main BLOCK dynamic build module buttom function draw.  Builds a new QPushButoon for a given module, return the QPushButton created after connecting it to the given 'connectFunction'.  The QPush buttom created will then to be inserted into a layout by the caller function.  Constructor:  drawModuleButton(MnsBuildModuleObj, connectFunction) Return:   QPushButton Arguments:   <ul> <li>MnsBuildModuleObj</li> <li>connectFunction</li> </ul> Keyword Arguments:   </p>"},{"location":"UIUtils/#drawoptionbox","title":"drawOptionBox","text":"<p>  Main dynamic 'option box' draw.  Drawing a new ob based on parameters within the MnsArgument object passed in.  The QComboBox is inserted into the parent layout passed in.  A default button and connection is made.  Constructor:  drawOptionBox(MnsArgumentObj, layoutParent) Return:  QComboBox Arguments:   <ul> <li>MnsArgumentObj</li> <li>layoutParent</li> </ul> Keyword Arguments:   </p>"},{"location":"UIUtils/#drawpathfield","title":"drawPathField","text":"<p>  Main Path row draw  Constructor:  drawPathField(MnsArgumentObj, layoutParent) Return:  QLEdit Arguments:   <ul> <li>MnsArgumentObj</li> <li>layoutParent</li> </ul> Keyword Arguments:   </p>"},{"location":"UIUtils/#drawprimarybutton","title":"drawPrimaryButton","text":"<p>  Picker method- draw a generic picker button.  Constructor:  drawPrimaryButton(plg, tabWidget, pickerBase, picker) Return:  None Arguments:   <ul> <li>plg</li> <li>tabWidget</li> <li>pickerBase</li> <li>picker</li> </ul> Keyword Arguments:   </p>"},{"location":"UIUtils/#drawspacesbox","title":"drawSpacesBox","text":"<p>  Main dynamic 'draw spaces box' creation function.  Constructor:  drawSpacesBox(MnsArgumentObj, layoutParent, kwargs) Return:  QListWidget Arguments:   <ul> <li>MnsArgumentObj</li> <li>layoutParent</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"UIUtils/#dynuiextrachannelsmenu","title":"dynUIExtraChannelsMenu","text":"<p> Constructor:  dynUIExtraChannelsMenu(treeWG, position) Return:  None Arguments:   <ul> <li>treeWG</li> <li>position</li> </ul> Keyword Arguments:   </p>"},{"location":"UIUtils/#extrachannelsadddivider","title":"extraChannelsAddDivider","text":"<p> Constructor:  extraChannelsAddDivider(treeWG, kwargs) Return:  None Arguments:   <ul> <li>treeWG</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"UIUtils/#extrachannelsaddrow","title":"extraChannelsAddRow","text":"<p> Constructor:  extraChannelsAddRow(treeWG, kwargs) Return:  None Arguments:   <ul> <li>treeWG</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"UIUtils/#extrachannelschangedirection","title":"extraChannelsChangeDirection","text":"<p> Constructor:  extraChannelsChangeDirection(treeWG, direction = 1) Return:  None Arguments:   <ul> <li>treeWG</li> <li>direction(int) ; [default: 1]</li> </ul> Keyword Arguments:   </p>"},{"location":"UIUtils/#extrachannelsduplicaterows","title":"extraChannelsDuplicateRows","text":"<p> Constructor:  extraChannelsDuplicateRows(treeWG, kwargs) Return:  None Arguments:   <ul> <li>treeWG</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"UIUtils/#extrachannelsedit","title":"extraChannelsEdit","text":"<p> Constructor:  extraChannelsEdit(item, col) Return:  None Arguments:   <ul> <li>item</li> <li>col</li> </ul> Keyword Arguments:   </p>"},{"location":"UIUtils/#extrachannelsloadcbsel","title":"extraChannelsLoadCBSel","text":"<p> Constructor:  extraChannelsLoadCBSel(treeWG) Return:  None Arguments:   <ul> <li>treeWG</li> </ul> Keyword Arguments:   </p>"},{"location":"UIUtils/#extrachannelsmoveitemsdown","title":"extraChannelsMoveItemsDown","text":"<p> Constructor:  extraChannelsMoveItemsDown(treeWG) Return:  None Arguments:   <ul> <li>treeWG</li> </ul> Keyword Arguments:   </p>"},{"location":"UIUtils/#extrachannelsmoveitemsup","title":"extraChannelsMoveItemsUp","text":"<p> Constructor:  extraChannelsMoveItemsUp(treeWG) Return:  None Arguments:   <ul> <li>treeWG</li> </ul> Keyword Arguments:   </p>"},{"location":"UIUtils/#extrachannelsremoveselected","title":"extraChannelsRemoveSelected","text":"<p> Constructor:  extraChannelsRemoveSelected(treeWG) Return:  None Arguments:   <ul> <li>treeWG</li> </ul> Keyword Arguments:   </p>"},{"location":"UIUtils/#extrachannelsvalidatecurrentdata","title":"extraChannelsValidateCurrentData","text":"<p> Constructor:  extraChannelsValidateCurrentData(treeWG) Return:  None Arguments:   <ul> <li>treeWG</li> </ul> Keyword Arguments:   </p>"},{"location":"UIUtils/#getcolor","title":"getColor","text":"<p>  Simple 'get color for a color PButton'.  Creates a new QColorDialog asking the user for a color choice.  When color selected sets the caller QPushButton color to the selected color  Constructor:  getColor(btn, kwargs) Return:  tuple[3] (color) Arguments:   <ul> <li>btn</li> <li>kwargs</li> </ul> Keyword Arguments:   <ul> <li>colOverrideCbx(str) ; [default: None]</li> </ul>"},{"location":"UIUtils/#getcolorarrayfromcolorscheme","title":"getColorArrayFromColorScheme","text":"<p>  Collect a normalized array of colors from a 'colorSceheme' enum attribute.  Constructor:  getColorArrayFromColorScheme(side, colorScheme) Return:  list (color sceheme) Arguments:   <ul> <li>side</li> <li>colorScheme</li> </ul> Keyword Arguments:   </p>"},{"location":"UIUtils/#geteulatext","title":"getEulaText","text":"<p>  get the most recent eula.  Constructor:  getEulaText() Return:  None Arguments:   Keyword Arguments:   </p>"},{"location":"UIUtils/#getobjectscreenspacebyfilmgate","title":"getObjectScreenSpaceByFilmGate","text":"<p>  This method is used to 'project' a plg into the projection camera's film gate.  Get the relative position of the plg to the camera film-gate's top left corener.  Constructor:  getObjectScreenSpaceByFilmGate(objectProj, cam) Return:  float, float (posX, posY) Arguments:   <ul> <li>objectProj</li> <li>cam</li> </ul> Keyword Arguments:   </p>"},{"location":"UIUtils/#getpathcommand","title":"getPathCommand","text":"<p>  Dyn UI path slot 'get path' command trigger.  Constructor:  getPathCommand(LEdit, mode = 0, fileTypes = []) Return:  None Arguments:   <ul> <li>LEdit</li> <li>mode(int) ; [default: 0]</li> <li>fileTypes(list) ; [default: []]</li> </ul> Keyword Arguments:   </p>"},{"location":"UIUtils/#getplgposition","title":"getPlgPosition","text":"<p>  Get the relative position of the requested plg, based on the 'Picker Layout Base' Guide top left corner.  Return the local bounding box size as well.  Constructor:  getPlgPosition(plg, pickerBase) Return:  float,float,float,float (posX,PosY,Width,Height) Arguments:   <ul> <li>plg</li> <li>pickerBase</li> </ul> Keyword Arguments:   </p>"},{"location":"UIUtils/#getwindow","title":"getWindow","text":"<p> Constructor:  getWindow(windowName = \"\") Return:  None Arguments:   <ul> <li>windowName(str) ; [default: \"\"]</li> </ul> Keyword Arguments:   </p>"},{"location":"UIUtils/#get_maya_window","title":"get_maya_window","text":"<p>  Main maya window get for a global UI parent  Constructor:  get_maya_window() Return:  qtWindow (main maya window as a qt window) Arguments:   Keyword Arguments:   </p>"},{"location":"UIUtils/#listloadcmd","title":"listLoadCmd","text":"<p>  Load to list command trigger (dynUI)  Constructor:  listLoadCmd(QListWidget) Return:  None Arguments:   <ul> <li>QListWidget</li> </ul> Keyword Arguments:   </p>"},{"location":"UIUtils/#listremovecommand","title":"listRemoveCommand","text":"<p>  Remove from list command trigger (dynUI)  Constructor:  listRemoveCommand(QListWidget) Return:  None Arguments:   <ul> <li>QListWidget</li> </ul> Keyword Arguments:   </p>"},{"location":"UIUtils/#loadcmd","title":"loadCmd","text":"<p>  Main text field 'load from scene' trigger command.  This command will update the given QLEdit with members of the maya scene when triggered.  Three main cases:  1. Nothing is selected - if the field is empty- do nothing, else clear the field.  2. objects are selected, without any CB selection - load the object names in, seperated by commas.  3. Objects are selected and there is a CB selection as well - load all objects and chnnels in a 'object.channel' format, seperated by commas.  Constructor:  loadCmd(LEdit) Return:  None Arguments:   <ul> <li>LEdit</li> </ul> Keyword Arguments:   </p>"},{"location":"UIUtils/#load_ui_type","title":"load_ui_type","text":"<p>  This function converts a '.ui' file into a '.py' file live.  This means that all UI's are derived from a QT designer ui files that are converted directly to form the UI.  This keeps a live connection between the '.ui' file and the actul UI in maya. Meaning that any edit or a change to the UI base needs to be done only from the QT designer, without any further action by the user.  It reruns a baseClass and a formClass to be used when creating any UI.  Constructor:  load_ui_type(ui_file) Return:  baseClass, formClass Arguments:   <ul> <li>ui_file</li> </ul> Keyword Arguments:   </p>"},{"location":"UIUtils/#optionboxtexttrigger","title":"optionBoxTextTrigger","text":"<p> Constructor:  optionBoxTextTrigger(comboBox = None, lineWditWidget = None, index = 0) Return:  None Arguments:   <ul> <li>comboBox(str) ; [default: None]</li> <li>lineWditWidget(str) ; [default: None]</li> <li>index(int) ; [default: 0]</li> </ul> Keyword Arguments:   </p>"},{"location":"UIUtils/#recdeletealllayoutitems","title":"recDeleteAllLayoutItems","text":"<p>  A method to delete all widgets/object from a given layout  Constructor:  recDeleteAllLayoutItems(layout, kwargs) Return:  None Arguments:   <ul> <li>layout</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"UIUtils/#relativepathcheck","title":"relativePathCheck","text":"<p>  A method for checking if any file path can be converted to a relative path.  If relative path is available, promt a message asking the user if he want to convert.  if so, convert and return.  Constructor:  relativePathCheck(filePath = \"\") Return:  string Arguments:   <ul> <li>filePath(str) ; [default: \"\"]</li> </ul> Keyword Arguments:   </p>"},{"location":"UIUtils/#reloadwindow","title":"reloadWindow","text":"<p> Constructor:  reloadWindow(windowName = \"\") Return:  None Arguments:   <ul> <li>windowName(str) ; [default: \"\"]</li> </ul> Keyword Arguments:   </p>"},{"location":"UIUtils/#setbooleandefaultcmd","title":"setBooleanDefaultCmd","text":"<p>  'Set default' trigger for a QCheckBox item.  Constructor:  setBooleanDefaultCmd(cbx,default) Return:  None Arguments:   <ul> <li>cbx</li> <li>default</li> </ul> Keyword Arguments:   </p>"},{"location":"UIUtils/#setchennelcontroldefaultcmd","title":"setChennelControlDefaultCmd","text":"<p>  DynUI chennel control slot default command trigger.  Constructor:  setChennelControlDefaultCmd(cbxList, MnsArgumentObj) Return:  None Arguments:   <ul> <li>cbxList</li> <li>MnsArgumentObj</li> </ul> Keyword Arguments:   </p>"},{"location":"UIUtils/#setcolordefaultcmd","title":"setColorDefaultCmd","text":"<p>  A 'set color back to default command.  A command to be triggered by an outside 'default' button, or when initializing to set the specified QPushButton color back to it's default value.  Constructor:  setColorDefaultCmd(btn, colorDef) Return:  None Arguments:   <ul> <li>btn</li> <li>colorDef</li> </ul> Keyword Arguments:   </p>"},{"location":"UIUtils/#setcolorschemedefaultcmd","title":"setColorSchemeDefaultCmd","text":"<p>  DynUI color-scheme default command trigger.  Constructor:  setColorSchemeDefaultCmd(btnList, default) Return:  None Arguments:   <ul> <li>btnList</li> <li>default</li> </ul> Keyword Arguments:   </p>"},{"location":"UIUtils/#setfloatdefaultcmd","title":"setFloatDefaultCmd","text":"<p>  'Set default' trigger for a QDoubleSpinBox item.  Constructor:  setFloatDefaultCmd(spinner,default) Return:  None Arguments:   <ul> <li>spinner</li> <li>default</li> </ul> Keyword Arguments:   </p>"},{"location":"UIUtils/#setintdefaultcmd","title":"setIntDefaultCmd","text":"<p>  'Set deafult' command trigget for an int QSpinBox.  Constructor:  setIntDefaultCmd(spinner,default) Return:  None Arguments:   <ul> <li>spinner</li> <li>default</li> </ul> Keyword Arguments:   </p>"},{"location":"UIUtils/#setintincrement","title":"setIntIncrement","text":"<p> Constructor:  setIntIncrement(spinner, increment, start) Return:  None Arguments:   <ul> <li>spinner</li> <li>increment</li> <li>start</li> </ul> Keyword Arguments:   </p>"},{"location":"UIUtils/#setlinktoqlabel","title":"setLinkToQLabel","text":"<p> Constructor:  setLinkToQLabel(labelObj = None, ahref = \"\") Return:  None Arguments:   <ul> <li>labelObj(str) ; [default: None]</li> <li>ahref(str) ; [default: \"\"]</li> </ul> Keyword Arguments:   </p>"},{"location":"UIUtils/#setlistwidgetdefaultcommand","title":"setListWidgetDefaultCommand","text":"<p>  'Default' command trigger for a 'list' type synamic row (dynUI)  Constructor:  setListWidgetDefaultCommand(QListWidget, default) Return:  None Arguments:   <ul> <li>QListWidget</li> <li>default</li> </ul> Keyword Arguments:   </p>"},{"location":"UIUtils/#setotionboxdefaultcmd","title":"setOtionBoxDefaultCmd","text":"<p>  A 'set default' command to be triggered for a combo box item.  Constructor:  setOtionBoxDefaultCmd(cbox, default) Return:  None Arguments:   <ul> <li>cbox</li> <li>default</li> </ul> Keyword Arguments:   </p>"},{"location":"UIUtils/#setspacedefault","title":"setSpaceDefault","text":"<p> Constructor:  setSpaceDefault(listWG, kwargs) Return:  None Arguments:   <ul> <li>listWG</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"UIUtils/#setstringdefaultcmd","title":"setStringDefaultCmd","text":"<p>  'Set default' command trigger from a text field  Constructor:  setStringDefaultCmd(LEdit,default) Return:  None Arguments:   <ul> <li>LEdit</li> <li>default</li> </ul> Keyword Arguments:   </p>"},{"location":"UIUtils/#sidecbchangedtriggercommand","title":"sideCBChangedTriggerCommand","text":"<p>  DynUI side combo box changed command trigger.  Constructor:  sideCBChangedTriggerCommand(colorOverrideCbx, sideCB, ovverideBtnList, rigTop, ignoreOvverideCheckbox = False) Return:  None Arguments:   <ul> <li>colorOverrideCbx</li> <li>sideCB</li> <li>ovverideBtnList</li> <li>rigTop</li> <li>ignoreOvverideCheckbox(bool) ; [default: False]</li> </ul> Keyword Arguments:   </p>"},{"location":"UIUtils/#tearoffwindow","title":"tearOffWindow","text":"<p>  Create a new maya 'tear-off' panel.  Constructor:  tearOffWindow(name, title, width, height, cameraToView) Return:  pymel.core.window (tear-off window) Arguments:   <ul> <li>name</li> <li>title</li> <li>width</li> <li>height</li> <li>cameraToView</li> </ul> Keyword Arguments:   </p>"},{"location":"UIUtils/#toqtobject","title":"toQtObject","text":"<p>  Convert a maya UI component into a QT object  Constructor:  toQtObject(mayaName, kwargs) Return:  None Arguments:   <ul> <li>mayaName</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"about/","title":"About","text":"<p>My name is Asaf Ben Zur and I'm a 3D Rigger &amp; Developer for 3D Animation.</p> <p>I know first hand how difficult it is to survive in the VFX &amp; Animation world, and i believe that the only ones who can change that are the artists. The fact that in-order to survive as an Animation or a VFX artist, you have to constantly strive for a higher position or a bigger studio- there you will be a part of a higher-budget projects, and higher-level tools as a result.</p> <p>As a Rigger, I know for a fact that any 3D animation is limited to the rig provided. And when the rig fails- the animator's vision fails with it- forcing them to compremise. I want to support creation by sharing some higher-end developments and tools- which are created mainly with animators in mind, to try and provide artists with a better envioroment to work in and tools that will allow better behavior, faster performance, and easier control.</p> <p>The videos I make are mainly technical currently (which will change soon), but I try and make it as clear as possible for artists to recognize the potential to produce some amazing results with minimum effort, while trying to ignore my terrible animation skills. The plugins I present are a part of a big modular rig builder I'm working on called BLOCK- which will use all of these plugins under the hood of the build-modules.</p> <p></p> <p></p> <p> </p>"},{"location":"arguments/","title":"Arguments","text":"<p>"},{"location":"arguments/#arguments","title":"arguments","text":"<p>  === Author: Assaf Ben Zur ===  MNS main arguments core functions and Classes.  This module holds the MnsArgument class as well as all argument handeling functions.  This module was designed to procedurally handle function arguments in order to manipulate them, generate dynamic UI's from them, and pass them along back to their creator function as an execute."},{"location":"arguments/#classes","title":"Classes","text":""},{"location":"arguments/#MnsArgument TARGET","title":"Arguments","text":""},{"location":"arguments/#mnsargument-class","title":"MnsArgument [Class]","text":"<p>  MnsArgument Convieniency Class.  A class instance holds all relevant information regarding an extracted single function argument.  These class members will dectate any behavior derived from an actual function object or a method object.  Constructor:  MnsArgument(**kwargs) Inherits from:  object Class Members:   <ul> <ul> <li>name</li> <li>type</li> <li>default</li> <li>min</li> <li>max</li> <li>comment</li> <li>ob</li> <li>side</li> <li>pathMode</li> <li>pathFileTypes</li> <li>intIncrement</li> <li>blockCreationOnly</li> <li>jntStructMember</li> <li>jntStructSoftMod</li> <li>lockOffAttributes</li> <li>simpleDivider</li> <li>meshComponents</li> <li>disabled</li> <li>multiRowList</li> <li>alphabeticalOnly</li> </ul> Methods:  <ul> <li>formatCommentToToolTip  [method]"},{"location":"arguments/#mnsargument-methods","title":"MnsArgument  methods","text":"<p>"},{"location":"arguments/#formatCommentToToolTipTARGET","title":"Arguments","text":"formatCommentToToolTip  [MnsArgument  class method]  Constructor:  formatCommentToToolTip(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"arguments/#defenitions","title":"Defenitions","text":""},{"location":"arguments/#convertchannelcontroldicttoattr","title":"convertChannelControlDictToAttr","text":"<p> Constructor:  convertChannelControlDictToAttr(channelControlDict = {}) Return:   list Arguments:   <ul> <li>channelControlDict(dict) ; [default: {}]</li> </ul> Keyword Arguments:   </p>"},{"location":"arguments/#extractargsfromdef","title":"extractArgsFromDef","text":"<p>  This function will extract all arguments and optional arguments from a given function object.  Returns two lists containing MnsArgument instances.  Constructor:  extractArgsFromDef(defenition) Return:  list (arguments MnsArgument list), list (optional arguments MnsArgument list) Arguments:   <ul> <li>defenition</li> </ul> Keyword Arguments:   </p>"},{"location":"arguments/#extractargsfromsource","title":"extractArgsFromSource","text":"<p>  This function will extract all arguments and optional arguments from a given function source.  Returns two lists containing MnsArgument instances.  Constructor:  extractArgsFromSource(src) Return:  list (arguments MnsArgument list), list (optional arguments MnsArgument list) Arguments:   <ul> <li>src</li> </ul> Keyword Arguments:   </p>"},{"location":"arguments/#extractchennelcontroldefaultfromline","title":"extractChennelControlDefaultFromLine","text":"<p> Constructor:  extractChennelControlDefaultFromLine(line = \"\", argAame = \"\") Return:   dict Arguments:   <ul> <li>line(str) ; [default: \"\"]</li> <li>argAame(str) ; [default: \"\"]</li> </ul> Keyword Arguments:   </p>"},{"location":"arguments/#extractcolorschemedefaultfromline","title":"extractColorSchemeDefaultFromLine","text":"<p> Constructor:  extractColorSchemeDefaultFromLine(line = \"\", argAame = \"\") Return:  None Arguments:   <ul> <li>line(str) ; [default: \"\"]</li> <li>argAame(str) ; [default: \"\"]</li> </ul> Keyword Arguments:   </p>"},{"location":"arguments/#formatargumetsasdict","title":"formatArgumetsAsDict","text":"<p>  Format given list of arguments into a predefined dictionary structure.  Constructor:  formatArgumetsAsDict(mnsArgsList = []) Return:  dict (Formated arguments) Arguments:   <ul> <li>mnsArgsList(list) ; [default: []]</li> </ul> Keyword Arguments:   </p>"},{"location":"arguments/#recompileargumetsasstring","title":"recompileArgumetsAsString","text":"<p>  A reverse function to the 'extractArgsFromDef'.  In order to pass any arguments back to it's creator, comes a need to re-compile an argument list into a single callable formatted string.  This function covers this need.  Constructor:  recompileArgumetsAsString(defenition, arguments, optArgs, values) Return:  string (re-compiled arguments as string) Arguments:   <ul> <li>defenition</li> <li>arguments</li> <li>optArgs</li> <li>values</li> </ul> Keyword Arguments:   </p>"},{"location":"arguments/#returnvalueandtypefromargstring","title":"returnValueAndTypeFromArgString","text":"<p>  This function will return a value (as its actual type) and a type (as a type object) from a given extracted argument string  Constructor:  returnValueAndTypeFromArgString(argString = \"\") Return:  value (Dynamic type), type (type object)      Arguments:   <ul> <li>argString(str) ; [default: \"\"]</li> </ul> Keyword Arguments:   </p>"},{"location":"arguments/#splitstringtoarg","title":"splitStringToArg","text":"<p>  This function return a MnsArgument object from a given argument string.  It will split the argument string into actual elemnts and values and directly ingest them into the class members.  Constructor:  splitStringToArg(argAsString) Return:  MnsArgument Arguments:   <ul> <li>argAsString</li> </ul> Keyword Arguments:   </p>"},{"location":"blockBuildUI/","title":"blockBuildUI","text":"<p>"},{"location":"blockBuildUI/#blockbuildui","title":"blockBuildUI","text":"<p>  === Author: Assaf Ben Zur ===  MANSUR - BLOCK  Main BLOCK UI.  This is the main UI for rig building (BLOCK). This is the essence of the entire library.  This tool gathers all user actions, and defines triggers for edditing rigs.  The main goal of this UI is to collect the available build-modules and draw creation buttons for them.  The core module library is defined as the block library, but additionals paths can be inserted into the collect loop.  Many UI triggers are available in this UI, but many are kept external to the UI class, to keep things as clean and independent as possible.  Most core functionalitites belong to the rig classes in 'buildModules'."},{"location":"blockBuildUI/#classes","title":"Classes","text":""},{"location":"blockBuildUI/#MnsBlockBuildUI TARGET","title":"blockBuildUI","text":""},{"location":"blockBuildUI/#mnsblockbuildui-class","title":"MnsBlockBuildUI [Class]","text":"<p>  BLOCK UI Class.  Constructor:  MnsBlockBuildUI(parent(str) ; [default: mnsUIUtils.get_maya_window()]) Inherits from:  form_class, base_class Class Members:   <ul> <ul> <li>iconsDir</li> <li>tabIndex</li> <li>buildModulesBtns</li> <li>sidePlaceHolder</li> <li>bmLib</li> <li>bmToolTips</li> <li>mayaSelectCallBack</li> </ul> Methods:  <ul> <li>bmCategoryChangedTrigger  [method] <li>copySkin  [method] <li>createAllModulesSection  [method] <li>getListWidgetFromSender  [method] <li>getPickerProjectionMode  [method] <li>getPoseMode  [method] <li>initializeGuidePresetCb  [method] <li>initializePrefDirs  [method] <li>plgMatch  [method] <li>promoteModule  [method] <li>resizeWindowBasedOnLog  [method] <li>sceneSelectFromWidgets  [method] <li>sortMeshLists  [method] <li>toggleProjPerpCam  [method] <li>updateMeshWidgetsDict  [method] <li>getPickerExportMode  [method] <li>loadMeshes  [method] <li>getToolTipForModule  [method] <li>refreshSelectionState  [method] <li>loadSelectionToLineEdit  [method] <li>addMeshes  [method] <li>removeMeshes  [method] <li>getCurrentMeshes  [method] <li>echoLog  [method] <li>meshListWidgetMenu  [method] <li>applyModulePathsChange  [method] <li>applyModulePresetPathsChange  [method] <li>moduleBuildGuide  [method] <li>addModulePath  [method] <li>addModulePresetPath  [method] <li>connectSignals  [method] <li>constructRigInit  [method] <li>deconstructRigInit  [method] <li>buildModulesDefine  [method] <li>defineBuildParentModules  [method] <li>extractControlShapes  [method] <li>getCorrespondingModuleButtonForModule  [method] <li>symmetrizeControlShapes  [method] <li>gatherAdditionalModulePaths  [method] <li>gatherAdditionalModulePresetPaths  [method] <li>getConstructMode  [method] <li>getModuleSettings  [method] <li>initializeAdditionalModulePaths  [method] <li>initializeAdditionalModulePresetsPaths  [method] <li>initView  [method] <li>loadModuleSettings  [method] <li>loadRigSettings  [method] <li>duplicateModule  [method] <li>pureDuplicate  [method] <li>eventFilter  [method] <li>removeModelPath  [method] <li>removeModulePresetPath  [method] <li>removeCustomShapes  [method] <li>poseSaveLoadTrigger  [method] <li>loadWindow  [method] <li>getDefaultsMode  [method] <li>symmetrizeModule  [method] <li>newRigTopTrig  [method] <li>orientGuides  [method] <li>updateSettings  [method]"},{"location":"blockBuildUI/#mnsblockbuildui-methods","title":"MnsBlockBuildUI  methods","text":"<p>"},{"location":"blockBuildUI/#bmCategoryChangedTriggerTARGET","title":"blockBuildUI","text":"bmCategoryChangedTrigger  [MnsBlockBuildUI  class method]  Constructor:  bmCategoryChangedTrigger(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"blockBuildUI/#copySkinTARGET","title":"blockBuildUI","text":"copySkin  [MnsBlockBuildUI  class method]  Constructor:  copySkin(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"blockBuildUI/#createAllModulesSectionTARGET","title":"blockBuildUI","text":"createAllModulesSection  [MnsBlockBuildUI  class method]  Constructor:  createAllModulesSection(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"blockBuildUI/#getListWidgetFromSenderTARGET","title":"blockBuildUI","text":"getListWidgetFromSender  [MnsBlockBuildUI  class method]  Constructor:  getListWidgetFromSender(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"blockBuildUI/#getPickerProjectionModeTARGET","title":"blockBuildUI","text":"getPickerProjectionMode  [MnsBlockBuildUI  class method]  Constructor:  getPickerProjectionMode(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"blockBuildUI/#getPoseModeTARGET","title":"blockBuildUI","text":"getPoseMode  [MnsBlockBuildUI  class method]  Constructor:  getPoseMode(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"blockBuildUI/#initializeGuidePresetCbTARGET","title":"blockBuildUI","text":"initializeGuidePresetCb  [MnsBlockBuildUI  class method]  Constructor:  initializeGuidePresetCb(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"blockBuildUI/#initializePrefDirsTARGET","title":"blockBuildUI","text":"initializePrefDirs  [MnsBlockBuildUI  class method]  Constructor:  initializePrefDirs(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"blockBuildUI/#plgMatchTARGET","title":"blockBuildUI","text":"plgMatch  [MnsBlockBuildUI  class method]  Constructor:  plgMatch(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"blockBuildUI/#promoteModuleTARGET","title":"blockBuildUI","text":"promoteModule  [MnsBlockBuildUI  class method]  Constructor:  promoteModule(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"blockBuildUI/#resizeWindowBasedOnLogTARGET","title":"blockBuildUI","text":"resizeWindowBasedOnLog  [MnsBlockBuildUI  class method]  Constructor:  resizeWindowBasedOnLog(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"blockBuildUI/#sceneSelectFromWidgetsTARGET","title":"blockBuildUI","text":"sceneSelectFromWidgets  [MnsBlockBuildUI  class method]  Constructor:  sceneSelectFromWidgets(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"blockBuildUI/#sortMeshListsTARGET","title":"blockBuildUI","text":"sortMeshLists  [MnsBlockBuildUI  class method]  Constructor:  sortMeshLists(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"blockBuildUI/#toggleProjPerpCamTARGET","title":"blockBuildUI","text":"toggleProjPerpCam  [MnsBlockBuildUI  class method]  Constructor:  toggleProjPerpCam(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"blockBuildUI/#updateMeshWidgetsDictTARGET","title":"blockBuildUI","text":"updateMeshWidgetsDict  [MnsBlockBuildUI  class method]  Constructor:  updateMeshWidgetsDict(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"blockBuildUI/#getPickerExportModeTARGET","title":"blockBuildUI","text":"getPickerExportMode  [MnsBlockBuildUI  class method]  Constructor:  getPickerExportMode(self) Return:   int Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"blockBuildUI/#loadMeshesTARGET","title":"blockBuildUI","text":"loadMeshes  [MnsBlockBuildUI  class method]  Constructor:  loadMeshes(self, kwargs) Return:  None Arguments:   <ul> <li>self</li> <li>kwargs</li> </ul> Optional Arguments:"},{"location":"blockBuildUI/#getToolTipForModuleTARGET","title":"blockBuildUI","text":"getToolTipForModule  [MnsBlockBuildUI  class method]  Constructor:  getToolTipForModule(self, buildModule) Return:  None Arguments:   <ul> <li>self</li> <li>buildModule</li> </ul> Optional Arguments:"},{"location":"blockBuildUI/#refreshSelectionStateTARGET","title":"blockBuildUI","text":"refreshSelectionState  [MnsBlockBuildUI  class method]  Constructor:  refreshSelectionState(self, dummy = None) Return:  None Arguments:   <ul> <li>self</li> <li>dummy(str) ; [default: None]</li> </ul> Optional Arguments:"},{"location":"blockBuildUI/#loadSelectionToLineEditTARGET","title":"blockBuildUI","text":"loadSelectionToLineEdit  [MnsBlockBuildUI  class method]  Constructor:  loadSelectionToLineEdit(self, lEditWidget = None) Return:  None Arguments:   <ul> <li>self</li> <li>lEditWidget(str) ; [default: None]</li> </ul> Optional Arguments:"},{"location":"blockBuildUI/#addMeshesTARGET","title":"blockBuildUI","text":"addMeshes  [MnsBlockBuildUI  class method]  Constructor:  addMeshes(self, listWidget) Return:  None Arguments:   <ul> <li>self</li> <li>listWidget</li> </ul> Optional Arguments:"},{"location":"blockBuildUI/#removeMeshesTARGET","title":"blockBuildUI","text":"removeMeshes  [MnsBlockBuildUI  class method]  Constructor:  removeMeshes(self, listWidget) Return:  None Arguments:   <ul> <li>self</li> <li>listWidget</li> </ul> Optional Arguments:"},{"location":"blockBuildUI/#getCurrentMeshesTARGET","title":"blockBuildUI","text":"getCurrentMeshes  [MnsBlockBuildUI  class method]  Constructor:  getCurrentMeshes(self, listWidget = None, kwargs) Return:  None Arguments:   <ul> <li>self</li> <li>listWidget(str) ; [default: None]</li> <li>kwargs</li> </ul> Optional Arguments:"},{"location":"blockBuildUI/#echoLogTARGET","title":"blockBuildUI","text":"echoLog  [MnsBlockBuildUI  class method]  Constructor:  echoLog(self, msg, svr) Return:  None Arguments:   <ul> <li>self</li> <li>msg</li> <li>svr</li> </ul> Optional Arguments:"},{"location":"blockBuildUI/#meshListWidgetMenuTARGET","title":"blockBuildUI","text":"meshListWidgetMenu  [MnsBlockBuildUI  class method]  Constructor:  meshListWidgetMenu(self, position) Return:  None Arguments:   <ul> <li>self</li> <li>position</li> </ul> Optional Arguments:"},{"location":"blockBuildUI/#applyModulePathsChangeTARGET","title":"blockBuildUI","text":"applyModulePathsChange  [MnsBlockBuildUI  class method]  'Apply' (in build tab, module paths) trigger. Write the additional paths entered within the UI in the stor json. Constructor:  applyModulePathsChange(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"blockBuildUI/#applyModulePresetPathsChangeTARGET","title":"blockBuildUI","text":"applyModulePresetPathsChange  [MnsBlockBuildUI  class method]  'Apply' (in build tab, module paths) trigger. Write the additional paths entered within the UI in the stor json. Constructor:  applyModulePresetPathsChange(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"blockBuildUI/#moduleBuildGuideTARGET","title":"blockBuildUI","text":"moduleBuildGuide  [MnsBlockBuildUI  class method]  Action trigger for any build-module button. This trigger action will be connected procedurally within the 'drawModuleButton' method in blockUtility. Constructor:  moduleBuildGuide(self, listWidgetItemName) Return:  None Arguments:   <ul> <li>self</li> <li>listWidgetItemName</li> </ul> Optional Arguments:"},{"location":"blockBuildUI/#addModulePathTARGET","title":"blockBuildUI","text":"addModulePath  [MnsBlockBuildUI  class method]  Add a module path line to the 'module paths' tree trigger. Constructor:  addModulePath(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"blockBuildUI/#addModulePresetPathTARGET","title":"blockBuildUI","text":"addModulePresetPath  [MnsBlockBuildUI  class method]  Add a module path line to the 'module paths' tree trigger. Constructor:  addModulePresetPath(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"blockBuildUI/#connectSignalsTARGET","title":"blockBuildUI","text":"connectSignals  [MnsBlockBuildUI  class method]  Connect all UI signals. Constructor:  connectSignals(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"blockBuildUI/#constructRigInitTARGET","title":"blockBuildUI","text":"constructRigInit  [MnsBlockBuildUI  class method]  Construct trigger. Constructor:  constructRigInit(self, kwargs) Return:  None Arguments:   <ul> <li>self</li> <li>kwargs</li> </ul> Optional Arguments:"},{"location":"blockBuildUI/#deconstructRigInitTARGET","title":"blockBuildUI","text":"deconstructRigInit  [MnsBlockBuildUI  class method]  Deconstruct trigger. Constructor:  deconstructRigInit(self, kwargs) Return:  None Arguments:   <ul> <li>self</li> <li>kwargs</li> </ul> Optional Arguments:"},{"location":"blockBuildUI/#buildModulesDefineTARGET","title":"blockBuildUI","text":"buildModulesDefine  [MnsBlockBuildUI  class method]  Define all existing build-modules within a built tab's directory. This mehthod will run for every valid build-module's directory folder, essentially building the actual build-module button in the UI. These will all be stored in the 'buildModulesBtns' attribute of this class. Constructor:  buildModulesDefine(self, modParentPath, listWidget) Return:  None Arguments:   <ul> <li>self</li> <li>modParentPath</li> <li>listWidget</li> </ul> Optional Arguments:"},{"location":"blockBuildUI/#defineBuildParentModulesTARGET","title":"blockBuildUI","text":"defineBuildParentModules  [MnsBlockBuildUI  class method]  Define build module tabs, based on the collected valid build-modules directories. If the directory in question is a valid directory for build modules: for every folder containing modules within it, a new tab will be inserted and named based on it. Constructor:  defineBuildParentModules(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"blockBuildUI/#extractControlShapesTARGET","title":"blockBuildUI","text":"extractControlShapes  [MnsBlockBuildUI  class method]  Extract all control shapes from the current constructed rig, and store them for future re-construction. Constructor:  extractControlShapes(self, kwargs) Return:  None Arguments:   <ul> <li>self</li> <li>kwargs</li> </ul> Optional Arguments:"},{"location":"blockBuildUI/#getCorrespondingModuleButtonForModuleTARGET","title":"blockBuildUI","text":"getCorrespondingModuleButtonForModule  [MnsBlockBuildUI  class method]  For the given rootGuide object, try to locate its corresponding UI button. Look within this class's 'buildModulesBtns' attribute. Constructor:  getCorrespondingModuleButtonForModule(self, rootGuide) Return:  MnsBuildModuleBtn Arguments:   <ul> <li>self</li> <li>rootGuide</li> </ul> Optional Arguments:"},{"location":"blockBuildUI/#symmetrizeControlShapesTARGET","title":"blockBuildUI","text":"symmetrizeControlShapes  [MnsBlockBuildUI  class method]  For the selected state, symmetrize all found control shapes. sym Mode: 0: Left to Right 1: Right to Left Constructor:  symmetrizeControlShapes(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"blockBuildUI/#gatherAdditionalModulePathsTARGET","title":"blockBuildUI","text":"gatherAdditionalModulePaths  [MnsBlockBuildUI  class method]  Gather all existing additional custom patns from the UI. Constructor:  gatherAdditionalModulePaths(self) Return:  list (Paths) Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"blockBuildUI/#gatherAdditionalModulePresetPathsTARGET","title":"blockBuildUI","text":"gatherAdditionalModulePresetPaths  [MnsBlockBuildUI  class method]  Gather all existing additional custom patns from the UI. Constructor:  gatherAdditionalModulePresetPaths(self) Return:  list (Paths) Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"blockBuildUI/#getConstructModeTARGET","title":"blockBuildUI","text":"getConstructMode  [MnsBlockBuildUI  class method]  Get current UI radio-buttons construction state (All/Branch/Module). Constructor:  getConstructMode(self) Return:  int (construction mode) Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"blockBuildUI/#getModuleSettingsTARGET","title":"blockBuildUI","text":"getModuleSettings  [MnsBlockBuildUI  class method]  Get passed in module settings. First get the default settings and values from the build-module directory, then compare against the rootGuide attributes, and return the filtered and altered settings. Constructor:  getModuleSettings(self, rootGuide, firstAttempt = True, kwargs) Return:   dict,int (optionalArguments, spilt index - for dynUI) Arguments:   <ul> <li>self</li> <li>rootGuide</li> <li>firstAttempt(bool) ; [default: True]</li> <li>kwargs</li> </ul> Optional Arguments:"},{"location":"blockBuildUI/#initializeAdditionalModulePathsTARGET","title":"blockBuildUI","text":"initializeAdditionalModulePaths  [MnsBlockBuildUI  class method]  Initialize any custom build-modules paths that already exist within the data collect json. (Read any paths that were added before, on UI draw). query flag will return the paths only without drawing the items into the UI. Constructor:  initializeAdditionalModulePaths(self, kwargs) Return:  list (Existing Paths) Arguments:   <ul> <li>self</li> <li>kwargs</li> </ul> Optional Arguments:"},{"location":"blockBuildUI/#initializeAdditionalModulePresetsPathsTARGET","title":"blockBuildUI","text":"initializeAdditionalModulePresetsPaths  [MnsBlockBuildUI  class method]  Initialize any custom build-modules paths that already exist within the data collect json. (Read any paths that were added before, on UI draw). query flag will return the paths only without drawing the items into the UI. Constructor:  initializeAdditionalModulePresetsPaths(self, kwargs) Return:  list (Existing Paths) Arguments:   <ul> <li>self</li> <li>kwargs</li> </ul> Optional Arguments:"},{"location":"blockBuildUI/#initViewTARGET","title":"blockBuildUI","text":"initView  [MnsBlockBuildUI  class method]  Initialize view: - Set icons - Set logger view - Set tab index to 1 - Set-Up CollapsibleWidget view Constructor:  initView(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"blockBuildUI/#loadModuleSettingsTARGET","title":"blockBuildUI","text":"loadModuleSettings  [MnsBlockBuildUI  class method]  Load selected module setting trigger. Constructor:  loadModuleSettings(self, firstAttempt = True) Return:  None Arguments:   <ul> <li>self</li> <li>firstAttempt(bool) ; [default: True]</li> </ul> Optional Arguments:"},{"location":"blockBuildUI/#loadRigSettingsTARGET","title":"blockBuildUI","text":"loadRigSettings  [MnsBlockBuildUI  class method]  Load selected rig settings trigger. Constructor:  loadRigSettings(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"blockBuildUI/#duplicateModuleTARGET","title":"blockBuildUI","text":"duplicateModule  [MnsBlockBuildUI  class method]  Module duplicate. Gather all of the requested module's settings, as well as compare against the module's default settings. Build a new module (same module) using the gathered data, then match all guide positions for the new module guide. Constructor:  duplicateModule(self, kwargs) Return:  None Arguments:   <ul> <li>self</li> <li>kwargs</li> </ul> Optional Arguments:"},{"location":"blockBuildUI/#pureDuplicateTARGET","title":"blockBuildUI","text":"pureDuplicate  [MnsBlockBuildUI  class method]  Module duplicate. Gather all of the requested module's settings, as well as compare against the module's default settings. Build a new module (same module) using the gathered data. Constructor:  pureDuplicate(self, modRoot, kwargs) Return:  MnsBuildModule (New Module) Arguments:   <ul> <li>self</li> <li>modRoot</li> <li>kwargs</li> </ul> Optional Arguments:"},{"location":"blockBuildUI/#eventFilterTARGET","title":"blockBuildUI","text":"eventFilter  [MnsBlockBuildUI  class method]  Override event filter to catch the tear off to override it's event. Constructor:  eventFilter(self, source, event) Return:  None Arguments:   <ul> <li>self</li> <li>source</li> <li>event</li> </ul> Optional Arguments:"},{"location":"blockBuildUI/#removeModelPathTARGET","title":"blockBuildUI","text":"removeModelPath  [MnsBlockBuildUI  class method]  Remove a module path line from the 'module paths' tree trigger. Constructor:  removeModelPath(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"blockBuildUI/#removeModulePresetPathTARGET","title":"blockBuildUI","text":"removeModulePresetPath  [MnsBlockBuildUI  class method]  Remove a module path line from the 'module paths' tree trigger. Constructor:  removeModulePresetPath(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"blockBuildUI/#removeCustomShapesTARGET","title":"blockBuildUI","text":"removeCustomShapes  [MnsBlockBuildUI  class method]  Remove all custom control shapes from the current rig. Constructor:  removeCustomShapes(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"blockBuildUI/#poseSaveLoadTriggerTARGET","title":"blockBuildUI","text":"poseSaveLoadTrigger  [MnsBlockBuildUI  class method]  Save/Load pose trigger. Simple method to gather pose data and store it, or apply it. Constructor:  poseSaveLoadTrigger(self, saveLoadMode = 0) Return:  None Arguments:   <ul> <li>self</li> <li>saveLoadMode(int) ; [default: 0]</li> </ul> Optional Arguments:"},{"location":"blockBuildUI/#loadWindowTARGET","title":"blockBuildUI","text":"loadWindow  [MnsBlockBuildUI  class method]  Show window method. Constructor:  loadWindow(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"blockBuildUI/#getDefaultsModeTARGET","title":"blockBuildUI","text":"getDefaultsMode  [MnsBlockBuildUI  class method]  Simple method to get the current UI 'defaults' mode. Constructor:  getDefaultsMode(self) Return:  int (defaults mode) Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"blockBuildUI/#symmetrizeModuleTARGET","title":"blockBuildUI","text":"symmetrizeModule  [MnsBlockBuildUI  class method]  Symmetrize module trigger. Exclusive class member process. This method will attempt to symmetrize the requested module guides. Constructor:  symmetrizeModule(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"blockBuildUI/#newRigTopTrigTARGET","title":"blockBuildUI","text":"newRigTopTrig  [MnsBlockBuildUI  class method]  Utils-&gt;'New RigTop' trigger. deselect, then initialize a MnsRig class. Constructor:  newRigTopTrig(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"blockBuildUI/#orientGuidesTARGET","title":"blockBuildUI","text":"orientGuides  [MnsBlockBuildUI  class method]  orient guides trigger mode 0 = All mode 1 = Branch mode 2 = Module mode 3 = Selection Constructor:  orientGuides(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"blockBuildUI/#updateSettingsTARGET","title":"blockBuildUI","text":"updateSettings  [MnsBlockBuildUI  class method]  update setting trigger. This method will apply when a user altered any data within a setting window and chose to apply the changes. The current settings will be validated against the default settings, and in case any data changed, all neccessary actions will be called to apply and store the changes. Constructor:  updateSettings(self, kwargs) Return:  None Arguments:   <ul> <li>self</li> <li>kwargs</li> </ul> Optional Arguments:"},{"location":"blockBuildUI/#defenitions","title":"Defenitions","text":""},{"location":"blockBuildUI/#loadblock","title":"loadBlock","text":"<p>  Load the BLOCK UI from globals, avoid UI duplication.  Constructor:  loadBlock() Return:  None Arguments:   Keyword Arguments:   </p>"},{"location":"blockBuildUI/#reloadblock","title":"reloadBlock","text":"<p> Constructor:  reloadBlock(previousBlockWindow) Return:  None Arguments:   <ul> <li>previousBlockWindow</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/","title":"blockUtility","text":"<p>"},{"location":"blockUtility/#blockutility","title":"blockUtility","text":"<p>  === Author: Assaf Ben Zur ===  BLOCK Core Utility Library.  This library contains all utility methods used primarily by BLOCK.  The objective of this library is mainting most Block-Core abilities external and independent."},{"location":"blockUtility/#classes","title":"Classes","text":""},{"location":"blockUtility/#MnsRigInfo TARGET","title":"blockUtility","text":""},{"location":"blockUtility/#mnsriginfo-class","title":"MnsRigInfo [Class]","text":"<p>  Mansur - About dialog  Constructor:  MnsRigInfo(parent(str) ; [default: mnsUIUtils.get_maya_window()],rigInfoData(dict) ; [default: {}]) Inherits from:  QtWidgets.QDialog Class Members:   <ul> <ul> <li>iconsDir</li> <li>close_btn</li> </ul>"},{"location":"blockUtility/#defenitions","title":"Defenitions","text":""},{"location":"blockUtility/#adddefaultattrstoplg","title":"addDefaultAttrsToPlg","text":"<p>  For a newly created plg, create all of it's default predefined attributes.  Constructor:  addDefaultAttrsToPlg(plg, kwargs) Return:  None Arguments:   <ul> <li>plg</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"blockUtility/#alignplguides","title":"alignPLGuides","text":"<p>  This is the main 'align' trigger to all 'align tools' in BLOCK.     This method will calidate and collect the current scene slection, then align the collected PLG's based on the mode passed in.  Constructor:  alignPLGuides(border = \"left\", mode = 0) Return:  None Arguments:   <ul> <li>border(str) ; [default: \"left\"]</li> <li>mode(int) ; [default: 0]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#attemptmodulepathfixforrootguide","title":"attemptModulePathFixForRootGuide","text":"<p> Constructor:  attemptModulePathFixForRootGuide(guideRoot, existingBtns) Return:  None Arguments:   <ul> <li>guideRoot</li> <li>existingBtns</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#attemptmodulepathfixfrorigtop","title":"attemptModulePathFixFroRigTop","text":"<p>  Run through all existing rig component (in rigTop) and validate the module directories against all existing module directories.  If a module path was found invalid, attempt to re-find it in the existing modules.  Constructor:  attemptModulePathFixFroRigTop(rigTop, existingBtns, kwargs) Return:  None Arguments:   <ul> <li>rigTop</li> <li>existingBtns</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"blockUtility/#bakeslavecontrols","title":"bakeSlaveControls","text":"<p> Constructor:  bakeSlaveControls(rigTop = None) Return:  None Arguments:   <ul> <li>rigTop(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#buildshapes","title":"buildShapes","text":"<p>  This method will be called from a rig construction.     This method will look for any contol shapes stored within the given rig (rigTop), and replace the default shapes with any corresponding control shape.     Shape replacement method will be done according to the 'mode' flag (relative/absulote).  Constructor:  buildShapes(ctrls = [], rigTop = None, kwargs) Return:  None Arguments:   <ul> <li>ctrls(list) ; [default: []]</li> <li>rigTop(str) ; [default: None]</li> <li>kwargs</li> </ul> Keyword Arguments:   <ul> <li>mode(int)</li> </ul>"},{"location":"blockUtility/#characterizehumanik","title":"characterizeHumanIK","text":"<p> Constructor:  characterizeHumanIK(charDefData = {}, mode = 0, kwargs) Return:  None Arguments:   <ul> <li>charDefData(dict) ; [default: {}]</li> <li>mode(int) ; [default: 0]</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"blockUtility/#collectctrlrelatives","title":"collectCtrlRelatives","text":"<p>  Collect ctrls based on given state:  0: All  1: Modules  2: Selected  Constructor:  collectCtrlRelatives(mode = 0, kwargs) Return:  list (controls) Arguments:   <ul> <li>mode(int) ; [default: 0]</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"blockUtility/#collectctrls","title":"collectCtrls","text":"<p>  Collect ALL related controls for th given rigTop.  Constructor:  collectCtrls(rigTop = None) Return:  list (controls) Arguments:   <ul> <li>rigTop(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#collectguides","title":"collectGuides","text":"<p>  Based on the oprional arguments passed in, collect all matching related guides to the input root list.  Constructor:  collectGuides(roots = pm.ls(sl = 1), kwargs) Return:  dict (Related guides), list (sparseGuides, guide without any relations) Arguments:   <ul> <li>roots(str) ; [default: selection]</li> <li>kwargs</li> </ul> Keyword Arguments:   <ul> <li>rigTop(str) ; [default: None]</li> <li>includeDecendents(bool)</li> <li>includeDecendentBranch(bool)</li> <li>getGuides(bool) ; [default: True]</li> <li>getCustomGuides(bool) ; [default: True]</li> <li>allAsSparse(bool)</li> </ul>"},{"location":"blockUtility/#collectmodulecontrols","title":"collectModuleControls","text":"<p>  Collect all related controls for the given module.  Constructor:  collectModuleControls(moduleTop, kwargs) Return:  list (controls) Arguments:   <ul> <li>moduleTop</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"blockUtility/#collectmodulerootsbasedonmode","title":"collectModuleRootsBasedOnMode","text":"<p>  0: All  1: Branch  2: Module  Constructor:  collectModuleRootsBasedOnMode(mode = 0) Return:   list (root guides (modules) to build) Arguments:   <ul> <li>mode(int) ; [default: 0]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#collectplguidestoalign","title":"collectPLGuidesToAlign","text":"<p>  This is the main collect wrapper for all 'align plg' tools in BLOCK.     This methods will validate and collect all PLG to align from the current scene selection  Constructor:  collectPLGuidesToAlign(mode = 0) Return:  dict (PLGs to align) Arguments:   <ul> <li>mode(int) ; [default: 0]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#collectpartialmodules","title":"collectPartialModules","text":"<p>  This method will collect module root objects based on the input data.  If you need to run MnsRig class internal methods, which can operate on partial modules as well as the entire rig, use this method to collect the partial data to be passed into MnsRig class methods.  In case fromNodes argument is Null, this method will return data based on the current scene selection.  Constructor:  collectPartialModules(fromNodes = [], mode = 0) Return:  None Arguments:   <ul> <li>fromNodes(list) ; [default: []]</li> <li>mode(int) ; [default: 0]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#collectpartialmodulesroots","title":"collectPartialModulesRoots","text":"<p>  This method will be called in case a partial build was requested.  Using methods within 'blockUtility', this method will collect the requested modules to build based on the UI state.  Constructor:  collectPartialModulesRoots(mode) Return:   list (root guides (modules) to build) Arguments:   <ul> <li>mode</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#collectpickerdataforrigtop","title":"collectPickerDataForRigTop","text":"<p>  mode 0 = All  mode 1 = Brnach  mode 2 = module  mode 3 = selected  Constructor:  collectPickerDataForRigTop(rigTop = None, mode = 0) Return:   dict (plgs data) Arguments:   <ul> <li>rigTop(str) ; [default: None]</li> <li>mode(int) ; [default: 0]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#collectplgsbasedonmode","title":"collectPlgsBasedOnMode","text":"<p>  mode 0 = All  mode 1 = Brnach  mode 2 = module  mode 3 = selected  Constructor:  collectPlgsBasedOnMode(rigTop = None, mode = 0, kwargs) Return:  None Arguments:   <ul> <li>rigTop(str) ; [default: None]</li> <li>mode(int) ; [default: 0]</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"blockUtility/#collectslavesfromndr","title":"collectSlavesFromNdr","text":"<p>  Collect all slaves related to the passed in 'mnsNodeRelationship' node.  Constructor:  collectSlavesFromNdr(ndrNode) Return:  list (slave nodes) Arguments:   <ul> <li>ndrNode</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#compilecnsctrlsattrstring","title":"compileCnsCtrlsAttrString","text":"<p> Constructor:  compileCnsCtrlsAttrString(exsitingCnsCtrlsDict = {}) Return:  None Arguments:   <ul> <li>exsitingCnsCtrlsDict(dict) ; [default: {}]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#connectifnotconnected","title":"connectIfNotConnected","text":"<p> Constructor:  connectIfNotConnected(attrA, attrB) Return:  None Arguments:   <ul> <li>attrA</li> <li>attrB</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#connectplgtovischannel","title":"connectPlgToVisChannel","text":"<p>  This method handles the vis channel connection of a plg to it's related layoutBase attributes based on it's type.  Constructor:  connectPlgToVisChannel(plg) Return:  None Arguments:   <ul> <li>plg</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#connectslavetodeletemaster","title":"connectSlaveToDeleteMaster","text":"<p>  Connect the passed in 'slave' node to the passed in 'master' node using 'mnsNodeRelationship'.  This method will be successfull only if the master already has a related 'mnsNodeRelationship' node.  Constructor:  connectSlaveToDeleteMaster(slave, master) Return:  None Arguments:   <ul> <li>slave</li> <li>master</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#connecttargetskeleton","title":"connectTargetSkeleton","text":"<p> Constructor:  connectTargetSkeleton(defenitionDict = {}, blockNameSpace = \"\", targetNameSpace = \"\") Return:  None Arguments:   <ul> <li>defenitionDict(dict) ; [default: {}]</li> <li>blockNameSpace(str) ; [default: \"\"]</li> <li>targetNameSpace(str) ; [default: \"\"]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#constrainobjectstosurface","title":"constrainObjectsToSurface","text":"<p> Constructor:  constrainObjectsToSurface(MnsBuildModule = None, ctrlMasters = [], jointsToAttach = [], surface = None) Return:   list (new ctrls) Arguments:   <ul> <li>MnsBuildModule(str) ; [default: None]</li> <li>ctrlMasters(list) ; [default: []]</li> <li>jointsToAttach(list) ; [default: []]</li> <li>surface(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#constructrig","title":"constructRig","text":"<p>  API style scripted construction method.   If you wish to construct a rig from an external command instead of Block's UI, use this method.  You can pass in a fromNodes argument to specify the rig you wish to construct.  In case the fromNodes argument isn't valid, the construction will be selection based.  Also, use the mode argument to specify which mode you wish to construct in:  mode 0 = ALL  mode 1 = Branch  mode 2 = Module  fromNodes is a list argument.   In case any input is passed, this method will attempt to aquire the modules to construct based on the mode selected.  You can pass in any Block-Node names into this method.  Constructor:  constructRig(fromNodes = [], mode = 0) Return:  None Arguments:   <ul> <li>fromNodes(list) ; [default: []]</li> <li>mode(int) ; [default: 0]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#convertinputobjtospace","title":"convertInputObjToSpace","text":"<p> Constructor:  convertInputObjToSpace(obj = None) Return:   PyNode (Space object if found) Arguments:   <ul> <li>obj(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#convertmoduleauthoritytosurface","title":"convertModuleAuthorityToSurface","text":"<p> Constructor:  convertModuleAuthorityToSurface(MnsBuildModule) Return:   list (new ctrls) Arguments:   <ul> <li>MnsBuildModule</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#copyshape","title":"copyShape","text":"<p>  copy shape utility.  This method is operation on selection.  Copy the control shape of the first selected component, to the rest of the selection.  Constructor:  copyShape(source = None, targets = [], reposition = True, kwargs) Return:  None Arguments:   <ul> <li>source(str) ; [default: None]</li> <li>targets(list) ; [default: []]</li> <li>reposition(bool) ; [default: True]</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"blockUtility/#createandconnectmodulevischannelstopuppetrootctrl","title":"createAndConnectModuleVisChannelsToPuppetRootCtrl","text":"<p>  This method will create and connect the pedefined visibility graph to a given 'Module Top Group'.  The driver attribute will be created within the puppet's 'world control', and the connection graph (using animCurvesUU node) will input into the group's visibility channels.  The channels are split (predefined) as follows:  0. None  1. primaries  2. Secondaries  3. Tertiaries  4. Secondaries Only  5. Tertiaries Only  6. No Primaries  Constructor:  createAndConnectModuleVisChannelsToPuppetRootCtrl(moduleTopNode = None) Return:  None Arguments:   <ul> <li>moduleTopNode(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#createcnsforctrls","title":"createCnsForCtrls","text":"<p>  This method is used to create CNS controls/sub-controls for existing puppet controls.  In case you need to add extra offset controls in order to constraint them to other components, you can use this method.  Pass in a list of controls you want to add sub-controls to, and run.  This method is also the one used by the CNS Tool.  Constructor:  createCnsForCtrls(ctrls = []) Return:   bool (success state) Arguments:   <ul> <li>ctrls(list) ; [default: []]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#createoffsetskeleton","title":"createOffsetSkeleton","text":"<p> Constructor:  createOffsetSkeleton(rigTop = None) Return:  None Arguments:   <ul> <li>rigTop(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#createpickerlayoutguide","title":"createPickerLayoutGuide","text":"<p>  The main creation method for PLG creation.     This method will create a new 'Pikcer Layout Guide' based on the passed in parameters.     1. get picker layout base.     2. collect projection position if requested.     3. create and set all attributes  Constructor:  createPickerLayoutGuide(ctrl, override, rigTop = None, kwargs) Return:  MnsNameStd (plg) Arguments:   <ul> <li>ctrl</li> <li>override</li> <li>rigTop(str) ; [default: None]</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"blockUtility/#createpickerlayoutguides","title":"createPickerLayoutGuides","text":"<p>  Warpper method that handles multiple PLGs creation.  Constructor:  createPickerLayoutGuides(ctrlsToProject, rigTop, msgPrompt = True, kwargs) Return:  None Arguments:   <ul> <li>ctrlsToProject</li> <li>rigTop</li> <li>msgPrompt(bool) ; [default: True]</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"blockUtility/#createplgbasevischannels","title":"createPlgBaseVisChannels","text":"<p> Constructor:  createPlgBaseVisChannels(baseLayoutGuide = None) Return:  None Arguments:   <ul> <li>baseLayoutGuide(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#createvisibilitybridgemdl","title":"createVisibilityBridgeMdl","text":"<p>  This method will check wether the 'target' has a visibility channel connection.     In the case the given 'target' has input visibility connection, a 'bridge' multiplyDoubleLinear node will be created.     The brigde node will accomidate both sources as an input, instead of replacing the original visibility by simple multiplication.     By creating the 'bridge', both old and new sources will be kept as drivers, setting the visibility to 'False' if ANY of the given sources is 'False'.     In case there is no connection input to the target's visibility channel, a simple connection will be made using the input source.  Constructor:  createVisibilityBridgeMdl(source = None, target = None) Return:  None Arguments:   <ul> <li>source(str) ; [default: None]</li> <li>target(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#createvolumejoint","title":"createVolumeJoint","text":"<p> Constructor:  createVolumeJoint(parentJoint = None, childJoint = None, kwargs) Return:   mnsNameStd (volumeJoint) Arguments:   <ul> <li>parentJoint(str) ; [default: None]</li> <li>childJoint(str) ; [default: None]</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"blockUtility/#createvolumejointforselection","title":"createVolumeJointForSelection","text":"<p> Constructor:  createVolumeJointForSelection() Return:   mnsNameStd (volumeJoint) Arguments:   Keyword Arguments:   </p>"},{"location":"blockUtility/#ctrlpickerguidetoggle","title":"ctrlPickerGuideToggle","text":"<p>  Atempt to toggle between a selection \"control\" and \"PLG\" if possible.  Constructor:  ctrlPickerGuideToggle(kwargs) Return:  None Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"blockUtility/#deconstructrig","title":"deconstructRig","text":"<p>  API style scripted deconstruction method.   If you wish to construct a rig from an external command instead of Bloxk's UI, use this method.  You can pass in a fromNodes argument to specify the rig you wish to construct.  In case the fromNodes argument isn't valid, the deconstruction will be selection based.  Also, use the mode argument to specify which mode you wish to construct in:  mode 0 = ALL  mode 1 = Branch  mode 2 = Module  fromNodes is a list argument.   In case any input is passed, this method will attempt to aquire the modules to construct based on the mode selected.  You can pass in any Block-Node names into this method.  Constructor:  deconstructRig(fromNodes = [], mode = 0) Return:  None Arguments:   <ul> <li>fromNodes(list) ; [default: []]</li> <li>mode(int) ; [default: 0]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#deletedefaultsforctrl","title":"deleteDefaultsForCtrl","text":"<p>  Delete all set custom attributes for the given ctrl.  Constructor:  deleteDefaultsForCtrl(ctrl, kwargs) Return:  None Arguments:   <ul> <li>ctrl</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"blockUtility/#deletefreejntgrpformodule","title":"deleteFreeJntGrpForModule","text":"<p> Constructor:  deleteFreeJntGrpForModule(guideRoot = None, kwargs) Return:  None Arguments:   <ul> <li>guideRoot(str) ; [default: None]</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"blockUtility/#deleteoffsetsekeleton","title":"deleteOffsetSekeleton","text":"<p> Constructor:  deleteOffsetSekeleton(rigTop = None) Return:  None Arguments:   <ul> <li>rigTop(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#deleteposeforguides","title":"deletePoseForGuides","text":"<p>  Block's delete pose wrapper.  Constructor:  deletePoseForGuides(guides = [], poseSet = \"T\", kwargs) Return:  None Arguments:   <ul> <li>guides(list) ; [default: []]</li> <li>poseSet(str) ; [default: \"T\"]</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"blockUtility/#deletepuppetname","title":"deletePuppetName","text":"<p>  This method will filter and delete the rigTops' puppet curves title.  Constructor:  deletePuppetName(rigTop, kwargs) Return:  None Arguments:   <ul> <li>rigTop</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"blockUtility/#deleterigdefaults","title":"deleteRigDefaults","text":"<p>  Load controls predefined and custom defaults:  0: All  1: Modules  2: Selected  Constructor:  deleteRigDefaults(mode = 0, kwargs) Return:  None Arguments:   <ul> <li>mode(int) ; [default: 0]</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"blockUtility/#detrminesymmetrydelta","title":"detrmineSymmetryDelta","text":"<p> Constructor:  detrmineSymmetryDelta(sourceA = None, sourceB = None, kwargs) Return:  None Arguments:   <ul> <li>sourceA(str) ; [default: None]</li> <li>sourceB(str) ; [default: None]</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"blockUtility/#disconnectslavefrommaster","title":"disconnectSlaveFromMaster","text":"<p>  Disconnect the slave passed in from it's master, if there is one.  Constructor:  disconnectSlaveFromMaster(slave) Return:  None Arguments:   <ul> <li>slave</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#disconnecttargetskeleton","title":"disconnectTargetSkeleton","text":"<p> Constructor:  disconnectTargetSkeleton(defenitionDict = {}, blockNameSpace = \"\", targetNameSpace = \"\", kwargs) Return:  None Arguments:   <ul> <li>defenitionDict(dict) ; [default: {}]</li> <li>blockNameSpace(str) ; [default: \"\"]</li> <li>targetNameSpace(str) ; [default: \"\"]</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"blockUtility/#duplicateplg","title":"duplicatePlg","text":"<p>  Block \"PLG duplicate\" trigger.     This method will handle PLG validation and duplication.  Constructor:  duplicatePlg(guide = None) Return:  None Arguments:   <ul> <li>guide(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#duplicateplgs","title":"duplicatePlgs","text":"<p>  A simple wrapper mwthod to handle multiple PLG duplication (Based on scene selection).  Constructor:  duplicatePlgs() Return:  None Arguments:   Keyword Arguments:   </p>"},{"location":"blockUtility/#executeactionscript","title":"executeActionScript","text":"<p> Constructor:  executeActionScript(plgNode) Return:  None Arguments:   <ul> <li>plgNode</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#exportctrlshapes","title":"exportCtrlShapes","text":"<p>  mode = 0 - All  mode = 1 - Branch  mode = 2 - module  Simple export method for control shapes.  The relevant control shapes are collected, duplicated and exported to MA.  Constructor:  exportCtrlShapes(mode = 0) Return:  None Arguments:   <ul> <li>mode(int) ; [default: 0]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#exportpickerdata","title":"exportPickerData","text":"<p>  mode 0 = All  mode 1 = Brnach  mode 2 = module  mode 3 = selected  Constructor:  exportPickerData(rigTop = None, mode = 0) Return:  None Arguments:   <ul> <li>rigTop(str) ; [default: None]</li> <li>mode(int) ; [default: 0]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#extractcontrolshapes","title":"extractControlShapes","text":"<p>  Trigger method for BLOCK - 'extract control shapes' method.     This method will extract and store the current state of control shapes within the given rig (rigTop).     The extracted shapes will be re-constructed once a rig-rebuild is initiated.     In case of any control shape already exists, it will be replaced by default.  Constructor:  extractControlShapes(ctrls = [], rigTop = None, kwargs) Return:  list (controls) Arguments:   <ul> <li>ctrls(list) ; [default: []]</li> <li>rigTop(str) ; [default: None]</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"blockUtility/#extractskeleton","title":"extractSkeleton","text":"<p> Constructor:  extractSkeleton(rigTop = None, mode = 0, bakeAnim = False, kwargs) Return:  None Arguments:   <ul> <li>rigTop(str) ; [default: None]</li> <li>mode(int) ; [default: 0]</li> <li>bakeAnim(bool) ; [default: False]</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"blockUtility/#extractskeleton2","title":"extractSkeleton2","text":"<p> Constructor:  extractSkeleton2(rigTop = None, mode = 0, kwargs) Return:  None Arguments:   <ul> <li>rigTop(str) ; [default: None]</li> <li>mode(int) ; [default: 0]</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"blockUtility/#filtercreationonlyfromargs","title":"filterCreationOnlyFromArgs","text":"<p>  A simple method to filter out the \"creationOnly\" flag for an argument.     This method is called on a dynamicUI creation call if it NOT a \"new creation\" mode in BLOCK.     In case any arguments within the list passed in is flagged as \"creationOnly\", it is removed from the list  Constructor:  filterCreationOnlyFromArgs(argsList) Return:  list (filtered arguments) Arguments:   <ul> <li>argsList</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#filtersettings","title":"filterSettings","text":"<p>  Filter all pre-defined settings to their corresponding gathering methods, and re-collect  Constructor:  filterSettings(fileSettings, node) Return:  list (settings), string (current side place holder) Arguments:   <ul> <li>fileSettings</li> <li>node</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#findnamingissuesinhierarchy","title":"findNamingIssuesInHierarchy","text":"<p> Constructor:  findNamingIssuesInHierarchy() Return:  None Arguments:   Keyword Arguments:   </p>"},{"location":"blockUtility/#gatherallcontrolscustomdefaults","title":"gatherAllControlsCustomDefaults","text":"<p>  Gather custom defaults for all ctrls within the given rig.  This method is used on rig deconstruction, to store all set default values, in order to restore them on construction.  Constructor:  gatherAllControlsCustomDefaults(rigTop) Return:  dict (All rig custom defaults) Arguments:   <ul> <li>rigTop</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#gathercustomdefaultdictforctrl","title":"gatherCustomDefaultDictForCtrl","text":"<p> Constructor:  gatherCustomDefaultDictForCtrl(ctrl) Return:  dict (Custom Defaults Dict) Arguments:   <ul> <li>ctrl</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#gathermnsrigobject","title":"gatherMnsRigObject","text":"<p>  This method will gather an MnsRig class object based on the passed in input, in order to use all of it's methods.  If you need to run any method from MnsRig class, use this method to gather the class object, the run any internal method within.  Constructor:  gatherMnsRigObject() Return:  None Arguments:   Keyword Arguments:   </p>"},{"location":"blockUtility/#gathermodulecustomdefaults","title":"gatherModuleCustomDefaults","text":"<p>  Gather custom defaults for all ctrls within the given module.  This method is used on rig deconstruction, to store all set default values, in order to restore them on construction.  Constructor:  gatherModuleCustomDefaults(moduleTop) Return:  dict (module custom defaults) Arguments:   <ul> <li>moduleTop</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#getallctrlsfromrigtop","title":"getAllCtrlsFromRigTop","text":"<p>  Get all controls for the given rig top.  Constructor:  getAllCtrlsFromRigTop(rigTop = None) Return:  None Arguments:   <ul> <li>rigTop(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#getallguiderootsforrigtop","title":"getAllGuideRootsForRigTop","text":"<p>  Gather all guide roots for the passed in rigTop node.  Constructor:  getAllGuideRootsForRigTop(rigTop) Return:  list (rootGuides) Arguments:   <ul> <li>rigTop</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#getallplgsforrigtop","title":"getAllPlgsForRigTop","text":"<p>  Collect all 'picker layout guides' from the rig passed in (as rigTop)  Constructor:  getAllPlgsForRigTop(rigTop) Return:  list (All PLGs) Arguments:   <ul> <li>rigTop</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#getallcolctrlforrigtop","title":"getAllcolCtrlforRigTop","text":"<p>  Collect all 'color associated' nodes within the passed in rigTop.     All returned nodes are considered 'color associated', meaning they are nodes that all of their shapes need to be directly colored.  Constructor:  getAllcolCtrlforRigTop(rigTop) Return:  list (colorControls) Arguments:   <ul> <li>rigTop</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#getchildmodules","title":"getChildModules","text":"<p>  Recusrsivly collect all child modules from the given rootGuide's decendents.  Constructor:  getChildModules(rootGuide) Return:  list (module decendents) Arguments:   <ul> <li>rootGuide</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#getcompundchildren","title":"getCompundChildren","text":"<p> Constructor:  getCompundChildren(rootGuide = None) Return:  None Arguments:   <ul> <li>rootGuide(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#getconstructionstate","title":"getConstructionState","text":"<p> Constructor:  getConstructionState(rigTop = None) Return:  None Arguments:   <ul> <li>rigTop(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#getcsgrpfromrigtop","title":"getCsGrpFromRigTop","text":"<p>  Attempt to collect the 'Control Shapes Group' from the passed in rigTop.  Constructor:  getCsGrpFromRigTop(rigTop = None) Return:  MnsNameStd (ctrlShapes group) Arguments:   <ul> <li>rigTop(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#getctrlauthfromrootguide","title":"getCtrlAuthFromRootGuide","text":"<p> Constructor:  getCtrlAuthFromRootGuide(rootGuide = None) Return:  None Arguments:   <ul> <li>rootGuide(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#getctrlauthfromrootguides","title":"getCtrlAuthFromRootGuides","text":"<p> Constructor:  getCtrlAuthFromRootGuides(rGuides = []) Return:  None Arguments:   <ul> <li>rGuides(list) ; [default: []]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#getctrlcol","title":"getCtrlCol","text":"<p>  Get the passed in node's color based on it's type, heirarchy and attributes.  Constructor:  getCtrlCol(ctrl, rigTop, kwargs) Return:  tuple[3] (color) Arguments:   <ul> <li>ctrl</li> <li>rigTop</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"blockUtility/#getctrlshapesformodueroot","title":"getCtrlShapesForModueRoot","text":"<p> Constructor:  getCtrlShapesForModueRoot(guideRoot) Return:  None Arguments:   <ul> <li>guideRoot</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#getctrlsfrommoduleroot","title":"getCtrlsFromModuleRoot","text":"<p> Constructor:  getCtrlsFromModuleRoot(guideRoot) Return:  None Arguments:   <ul> <li>guideRoot</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#getdeletemasterfromslave","title":"getDeleteMasterFromSlave","text":"<p>  Collect the delete master from a slave's related 'mnsNodeRelationship' node, if there is one.     This method will collect the master connected to the 'deleteMaster' attribute of the node.  Constructor:  getDeleteMasterFromSlave(slave) Return:  MnsNameStd (master) Arguments:   <ul> <li>slave</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#getexisingcnsctrlsforrigtop","title":"getExisingCnsCtrlsForRigTop","text":"<p> Constructor:  getExisingCnsCtrlsForRigTop(rigTop) Return:  None Arguments:   <ul> <li>rigTop</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#getexistingcpomnodefromsurface","title":"getExistingCpomNodeFromSurface","text":"<p> Constructor:  getExistingCpomNodeFromSurface(surface) Return:  None Arguments:   <ul> <li>surface</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#getexistingspaceconstraintforcontrol","title":"getExistingSpaceConstraintForControl","text":"<p>  Collect existing 'spaces' constraints for a passed in (built) control, in order to re-build them in turn, after correct filtering and validation (in case of a partial build for example).  Constructor:  getExistingSpaceConstraintForControl(ctrl = None) Return:  list (mnsMatrixConstraint nodes) Arguments:   <ul> <li>ctrl(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#getexistingspaceconstraintforcontrols","title":"getExistingSpaceConstraintForControls","text":"<p>  Wrapper mwthod to collect 'spaces' constraints for multiple controls.  Constructor:  getExistingSpaceConstraintForControls(controls = []) Return:  dict (constraintSpaces dictionary) Arguments:   <ul> <li>controls(list) ; [default: []]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#getexistingvolumejointnodeforjoint","title":"getExistingVolumeJointNodeForJoint","text":"<p> Constructor:  getExistingVolumeJointNodeForJoint(joint = None) Return:  None Arguments:   <ul> <li>joint(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#getexistingvolumejointnodeforvolumejoint","title":"getExistingVolumeJointNodeForVolumeJoint","text":"<p> Constructor:  getExistingVolumeJointNodeForVolumeJoint(joint = None) Return:  None Arguments:   <ul> <li>joint(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#getglobalscaleattrfromtransform","title":"getGlobalScaleAttrFromTransform","text":"<p>  This method is used to retreive any output decompose matrix node to be used as global scale input connection.  If this method fails to retreive such attribute, it creates one and returns it.  Constructor:  getGlobalScaleAttrFromTransform(transform = None) Return:   Attribute Arguments:   <ul> <li>transform(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#getguideparent","title":"getGuideParent","text":"<p>  Collect a ctrl type object's 'Guide Authority', or related guide object.  Constructor:  getGuideParent(objectSel = None) Return:   PyNode Arguments:   <ul> <li>objectSel(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#getjointstructgrpfromrigtop","title":"getJointStructGrpFromRigTop","text":"<p>  Attempt to collect the 'Picker Title Group' from the passed in rigTop.  Constructor:  getJointStructGrpFromRigTop(rigTop = None) Return:  MnsNameStd (Offset Skeleton Grp) Arguments:   <ul> <li>rigTop(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#getkeyboardmodifiersstate","title":"getKeyboardModifiersState","text":"<p> Constructor:  getKeyboardModifiersState() Return:  None Arguments:   Keyword Arguments:   </p>"},{"location":"blockUtility/#getlimbmodulecontrols","title":"getLimbModuleControls","text":"<p>  mode 0: fk controls and attrHost  mode 1: ik controls and attrHost  mode 2: both and attrHost  mode 3: attrHost only  Constructor:  getLimbModuleControls(limbCtrl, mode = 2) Return:  None Arguments:   <ul> <li>limbCtrl</li> <li>mode(int) ; [default: 2]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#getmoduleanimgrp","title":"getModuleAnimGrp","text":"<p> Constructor:  getModuleAnimGrp(obj = None) Return:  None Arguments:   <ul> <li>obj(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#getmoduledecendentswildcard","title":"getModuleDecendentsWildcard","text":"<p>  Collect all given module dendents using a 'wild-card' search method.     This will collect all relatives using a * search within the root decendents, and return all of the passed in node types.  Constructor:  getModuleDecendentsWildcard(guideRoot, kwargs) Return:  list (matching decendents) Arguments:   <ul> <li>guideRoot</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"blockUtility/#getmodulefromguide","title":"getModuleFromGuide","text":"<p>  This method will attempt to collect a related PyModule from the given guideRoot passed in.  This method will not return the module's methods, only the PyModule as an object.  This method also contains override optional arguments to specify a direct path or module name.  Constructor:  getModuleFromGuide(guideRoot, kwargs) Return:  PyModule (object) Arguments:   <ul> <li>guideRoot</li> <li>kwargs</li> </ul> Keyword Arguments:   <ul> <li>methodName(str) ; [default: jointStructure]</li> <li>modPath(str) ; [default: None]</li> <li>modName(str) ; [default: None]</li> </ul>"},{"location":"blockUtility/#getmoduleguidedecendents","title":"getModuleGuideDecendents","text":"<p>  Collect all of the root guide module relatives for the passed in moduleRoot (or rootGuide).  Constructor:  getModuleGuideDecendents(guideRoot) Return:  list (sorted by ID module decendents) Arguments:   <ul> <li>guideRoot</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#getmoduleinterpjoints","title":"getModuleInterpJoints","text":"<p>  Collect all the given moduleRoot's 'interpolationJoints' relatives.  Constructor:  getModuleInterpJoints(guideRoot, kwargs) Return:  list (matching interJoints) Arguments:   <ul> <li>guideRoot</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"blockUtility/#getmoduleroot","title":"getModuleRoot","text":"<p>  Attempt to collect the root guide relative from the given node.  Constructor:  getModuleRoot(objectA) Return:  PyNode (rootGuide) Arguments:   <ul> <li>objectA</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#getmodulerootctrl","title":"getModuleRootCtrl","text":"<p> Constructor:  getModuleRootCtrl(obj = None) Return:  None Arguments:   <ul> <li>obj(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#getmodulerootforsel","title":"getModuleRootForSel","text":"<p>  Attempt to collect a 'root guide' relative from the current selection  Constructor:  getModuleRootForSel() Return:  PyNode (moduleRoot) Arguments:   Keyword Arguments:   </p>"},{"location":"blockUtility/#getmodulescale","title":"getModuleScale","text":"<p> Constructor:  getModuleScale(MnsBuildModule) Return:  None Arguments:   <ul> <li>MnsBuildModule</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#getmodulesettings","title":"getModuleSettings","text":"<p>  Get passed in module settings.  First get the default settings and values from the build-module directory,  then compare against the rootGuide attributes, and return the filtered and altered settings.  Constructor:  getModuleSettings(rootGuide, firstAttempt = True, kwargs) Return:   dict,int (optionalArguments, spilt index - for dynUI) Arguments:   <ul> <li>rootGuide</li> <li>firstAttempt(bool) ; [default: True]</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"blockUtility/#getmoduletopforctrl","title":"getModuleTopForCtrl","text":"<p>  Collect the 'Module Top Group' related to the passed in control.  Constructor:  getModuleTopForCtrl(ctrl = None, nameMatch = None) Return:  MnsNameStd (Module Top Group) Arguments:   <ul> <li>ctrl(str) ; [default: None]</li> <li>nameMatch(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#getmoduletopfromrootguide","title":"getModuleTopFromRootGuide","text":"<p>  Attempt to collect 'Module Top Group' from a given root guide.  Constructor:  getModuleTopFromRootGuide(rootGuide = None) Return:  MnsNameStd (Module Top Group) Arguments:   <ul> <li>rootGuide(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#getnoderelationshipnodefromobject","title":"getNodeRelationshipNodeFromObject","text":"<p>  Collect the related 'mnsNodeRelationship' node from the given input node.  Constructor:  getNodeRelationshipNodeFromObject(node) Return:  PyNode Arguments:   <ul> <li>node</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#getoffsetgrpforctrl","title":"getOffsetGrpForCtrl","text":"<p>  Collect the offsetGroup related to the passed in control, if it exists.  Constructor:  getOffsetGrpForCtrl(ctrl, kwargs) Return:  MnsNameStd (offset group) Arguments:   <ul> <li>ctrl</li> <li>kwargs</li> </ul> Keyword Arguments:   <ul> <li>type(str) ; [default: offsetGrp]</li> </ul>"},{"location":"blockUtility/#getoffsetskeletongrpfromrigtop","title":"getOffsetSkeletonGrpFromRigTop","text":"<p>  Attempt to collect the 'Picker Title Group' from the passed in rigTop.  Constructor:  getOffsetSkeletonGrpFromRigTop(rigTop = None) Return:  MnsNameStd (Offset Skeleton Grp) Arguments:   <ul> <li>rigTop(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#getoppositesidecontrol","title":"getOppositeSideControl","text":"<p>  Attempt to collect the opposite related mns object if it exists.  Only non 'ceneter components' will be tested of course.  Constructor:  getOppositeSideControl(obj = None) Return:  MnsNameStd (Opposite object) Arguments:   <ul> <li>obj(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#getpickerguidesgrpfromrigtop","title":"getPickerGuidesGrpFromRigTop","text":"<p>  Attempt to collect the 'Picker Guide Group' from the passed in rigTop.  Constructor:  getPickerGuidesGrpFromRigTop(rigTop = None) Return:  MnsNameStd (Picker Guide Group) Arguments:   <ul> <li>rigTop(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#getpickerlayoutbasefromrigtop","title":"getPickerLayoutBaseFromRigTop","text":"<p>  Attempt to collect the 'Picker Layout Base guide' from the passed in rigTop.  Constructor:  getPickerLayoutBaseFromRigTop(rigTop = None) Return:  MnsNameStd (Picker Layout Base guide) Arguments:   <ul> <li>rigTop(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#getpickerlayoutcamfromrigtop","title":"getPickerLayoutCamFromRigTop","text":"<p>  Attempt to collect the 'Picker Layout Camera' from the passed in rigTop.  Constructor:  getPickerLayoutCamFromRigTop(rigTop = None) Return:  MnsNameStd (Picker Layout Base guide) Arguments:   <ul> <li>rigTop(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#getpickerprojectioncamfromrigtop","title":"getPickerProjectionCamFromRigTop","text":"<p>  Attempt to collect the 'Picker Projection Camera' from the passed in rigTop.  Constructor:  getPickerProjectionCamFromRigTop(rigTop = None) Return:  MnsNameStd (Picker Projection Camera) Arguments:   <ul> <li>rigTop(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#getpickertitlegrpfromrigtop","title":"getPickerTitleGrpFromRigTop","text":"<p>  Attempt to collect the 'Picker Title Group' from the passed in rigTop.  Constructor:  getPickerTitleGrpFromRigTop(rigTop = None) Return:  MnsNameStd (Picker Title Group)) Arguments:   <ul> <li>rigTop(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#getpuppetbasefromrigtop","title":"getPuppetBaseFromRigTop","text":"<p>  Attempt to collect the 'puppet group' from the passed in rigTop.  Constructor:  getPuppetBaseFromRigTop(rigTop = None) Return:  MnsNameStd (puppet base) Arguments:   <ul> <li>rigTop(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#getpuppetrootfromrigtop","title":"getPuppetRootFromRigTop","text":"<p>  Attempt to collect the 'Puppet World Control' from the passed in rigTop.  Constructor:  getPuppetRootFromRigTop(rigTop = None) Return:  MnsNameStd (Puppet world control) Arguments:   <ul> <li>rigTop(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#getpymodulefromguide","title":"getPyModuleFromGuide","text":"<p>  Attempt to collect a 'Python Module' (or package) related to the given guide node passed in.  If a related module was found, this method will return it as a PyModule object not as a directory.  This method will also return the module's methods in a dictionary in order to run directly from it.  Constructor:  getPyModuleFromGuide(guide) Return:  PyModule, dict (module methods as keys and method objects as entries) Arguments:   <ul> <li>guide</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#getrelatednodefromobject","title":"getRelatedNodeFromObject","text":"<p>  Collect a related node from the 'messageOut' attribute of the given node's 'mnsNodeRelationship' node.  Constructor:  getRelatedNodeFromObject(node) Return:  PyNode Arguments:   <ul> <li>node</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#getrelatedvoljntsourcesforselection","title":"getRelatedVolJntSourcesForSelection","text":"<p> Constructor:  getRelatedVolJntSourcesForSelection() Return:  None Arguments:   Keyword Arguments:   </p>"},{"location":"blockUtility/#getrelationmasterfromslave","title":"getRelationMasterFromSlave","text":"<p>  Collect the delete master from a slave's related 'mnsNodeRelationship' node, if there is one.     This method will collect the master connected to the 'masterIn' attribute of the node.  Constructor:  getRelationMasterFromSlave(slave) Return:  MnsNameStd (master) Arguments:   <ul> <li>slave</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#getrigtop","title":"getRigTop","text":"<p>  Attempt to get a rigTop node from the passed in node to check.  Constructor:  getRigTop(objectA) Return:  MnsNameStd (rigTop) Arguments:   <ul> <li>objectA</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#getrigtopassemblies","title":"getRigTopAssemblies","text":"<p> Constructor:  getRigTopAssemblies() Return:  None Arguments:   Keyword Arguments:   </p>"},{"location":"blockUtility/#getrigtopforsel","title":"getRigTopForSel","text":"<p>  Attempt to get a rigTop node from current selection  Constructor:  getRigTopForSel(kwargs) Return:  MnsNameStd (rigTop) Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"blockUtility/#getrootguidefromctrl","title":"getRootGuideFromCtrl","text":"<p>  Attempt to collect the related 'rootGuide' from the given control passed in.  Constructor:  getRootGuideFromCtrl(obj) Return:  MnsNameStd (rootGuide) Arguments:   <ul> <li>obj</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#getrootguidefromrigtop","title":"getRootGuideFromRigTop","text":"<p>  Attempt to collect the rig's root guide from the passed in rigTop node  Constructor:  getRootGuideFromRigTop(rigTop = None) Return:  MnsNameStd (rig root guide) Arguments:   <ul> <li>rigTop(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#getrootjointsfrommoduleroot","title":"getRootJointsFromModuleRoot","text":"<p> Constructor:  getRootJointsFromModuleRoot(guideRoot) Return:  None Arguments:   <ul> <li>guideRoot</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#getsettings","title":"getSettings","text":"<p>  Get setting for the requested setting path.     The settings are being filtered and set according to a node passed in.  Constructor:  getSettings(settingsPath, node, blkType) Return:  list (optionalArgumentsFromFile), string (current side place holder) Arguments:   <ul> <li>settingsPath</li> <li>node</li> <li>blkType</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#getsidemodulebranchroot","title":"getSideModuleBranchRoot","text":"<p>  For a non \"center\" component passed in, recursively attempt to collect the 'side-branch' root guide.  In essence look for the highest rootGuide in the selected 'side' heirarchy that has a 'center' component parent- meaning it's the top of the requested branch.  Constructor:  getSideModuleBranchRoot(guide = None) Return:  MnsNameStd (branch root) Arguments:   <ul> <li>guide(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#getsimplerivetsnodeformesh","title":"getSimpleRivetsNodeForMesh","text":"<p> Constructor:  getSimpleRivetsNodeForMesh(mesh = None) Return:   PyNode Arguments:   <ul> <li>mesh(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#getsymattrbasedonsymmapping","title":"getSymAttrBasedOnSymMapping","text":"<p> Constructor:  getSymAttrBasedOnSymMapping(attr = None, attrMapping = {}) Return:  None Arguments:   <ul> <li>attr(str) ; [default: None]</li> <li>attrMapping(dict) ; [default: {}]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#getsymmetricalvolumejoint","title":"getSymmetricalVolumeJoint","text":"<p> Constructor:  getSymmetricalVolumeJoint(vJnt = None, kwargs) Return:   mnsNameStd (symmetrical volume-joint) Arguments:   <ul> <li>vJnt(str) ; [default: None]</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"blockUtility/#getvjntsources","title":"getVJntSources","text":"<p> Constructor:  getVJntSources(vJnt = None) Return:  None Arguments:   <ul> <li>vJnt(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#getvjointdata","title":"getVJointData","text":"<p> Constructor:  getVJointData(vJnt) Return:  None Arguments:   <ul> <li>vJnt</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#handleinterplocsstructurereturn","title":"handleInterpLocsStructureReturn","text":"<p> Constructor:  handleInterpLocsStructureReturn(rigTop = None, interpLocs = [], guides = [], kwargs) Return:  None Arguments:   <ul> <li>rigTop(str) ; [default: None]</li> <li>interpLocs(list) ; [default: []]</li> <li>guides(list) ; [default: []]</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"blockUtility/#importctrlshapes","title":"importCtrlShapes","text":"<p>  Simple import method for control shapes.  Constructor:  importCtrlShapes() Return:  None Arguments:   Keyword Arguments:   </p>"},{"location":"blockUtility/#importguidepreset","title":"importGuidePreset","text":"<p> Constructor:  importGuidePreset(presetName = None) Return:  None Arguments:   <ul> <li>presetName(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#importpickerdata","title":"importPickerData","text":"<p> Constructor:  importPickerData(kwargs) Return:  None Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"blockUtility/#injectplgpropertiesfromdata","title":"injectPlgPropertiesFromData","text":"<p> Constructor:  injectPlgPropertiesFromData(plg = None, data = {}) Return:  None Arguments:   <ul> <li>plg(str) ; [default: None]</li> <li>data(dict) ; [default: {}]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#insertguides","title":"insertGuides","text":"<p>  This method is used primarily through Block UI, to insert guides above/below any guide selection.  This will handle all exceptions, as well as re-analyze and re-orgenize each module based on the action performed.  Constructor:  insertGuides(amount = 0, mode = \"above\", kwargs) Return:  None Arguments:   <ul> <li>amount(int) ; [default: 0]</li> <li>mode(str) ; [default: \"above\"]</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"blockUtility/#jointrotatetoorienttrigger","title":"jointRotateToOrientTrigger","text":"<p> Constructor:  jointRotateToOrientTrigger(rigTop = None) Return:  None Arguments:   <ul> <li>rigTop(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#limbmatchfkik","title":"limbMatchFkIK","text":"<p>  mode 0 - Match FK to IK  mode 1 - Match IK to FK  Constructor:  limbMatchFkIK(limbCtrl, mode = 0, kwargs) Return:  None Arguments:   <ul> <li>limbCtrl</li> <li>mode(int) ; [default: 0]</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"blockUtility/#loaddefaultsforctrl","title":"loadDefaultsForCtrl","text":"<p>  Load all default attributes for the given control, taking mnsDefaults (custom) into acount  Constructor:  loadDefaultsForCtrl(ctrl, kwargs) Return:  None Arguments:   <ul> <li>ctrl</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"blockUtility/#loadperspcam","title":"loadPerspCam","text":"<p>  Set Maya's main camera panel, to the default 'persp' camera.  Constructor:  loadPerspCam() Return:  None Arguments:   Keyword Arguments:   </p>"},{"location":"blockUtility/#loadpickerprojectioncam","title":"loadPickerProjectionCam","text":"<p>  Set the main maya camera view to the 'picker projection camera', based on the scene selection (or the related rigTop to selection).  Constructor:  loadPickerProjectionCam() Return:  None Arguments:   Keyword Arguments:   </p>"},{"location":"blockUtility/#loadposeforguides","title":"loadPoseForGuides","text":"<p>  Block's load pose wrapper.  Constructor:  loadPoseForGuides(guides = [], poseSet = \"T\", kwargs) Return:  None Arguments:   <ul> <li>guides(list) ; [default: []]</li> <li>poseSet(str) ; [default: \"T\"]</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"blockUtility/#loadresetvaluesforoffsetjoint","title":"loadResetValuesForOffsetJoint","text":"<p> Constructor:  loadResetValuesForOffsetJoint(offsetJnt = None) Return:  None Arguments:   <ul> <li>offsetJnt(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#loadrigdefaults","title":"loadRigDefaults","text":"<p>  Load controls predefined and custom defaults:  0: All  1: Modules  2: Selected  Constructor:  loadRigDefaults(mode = 0, kwargs) Return:  None Arguments:   <ul> <li>mode(int) ; [default: 0]</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"blockUtility/#loadriginfo","title":"loadRigInfo","text":"<p> Constructor:  loadRigInfo(puppetRoot = None) Return:  None Arguments:   <ul> <li>puppetRoot(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#locatecnsforctrl","title":"locateCnsForCtrl","text":"<p> Constructor:  locateCnsForCtrl(ctrl = None, kwargs) Return:  None Arguments:   <ul> <li>ctrl(str) ; [default: None]</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"blockUtility/#locateplgbasevismdnodes","title":"locatePLGBaseVisMdNodes","text":"<p> Constructor:  locatePLGBaseVisMdNodes(baseLayoutGuide = None) Return:   MnsNameStd (bodyMdNode), MnsNameStd (facialMDNode) Arguments:   <ul> <li>baseLayoutGuide(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#matchextractedskeletontobaseskeleton","title":"matchExtractedSkeletonToBaseSkeleton","text":"<p> Constructor:  matchExtractedSkeletonToBaseSkeleton() Return:  None Arguments:   Keyword Arguments:   </p>"},{"location":"blockUtility/#matchguidestotargetskeleton","title":"matchGuidesToTargetSkeleton","text":"<p> Constructor:  matchGuidesToTargetSkeleton(defenitionDict = {}, blockNameSpace = \"\", targetNameSpace = \"\") Return:  None Arguments:   <ul> <li>defenitionDict(dict) ; [default: {}]</li> <li>blockNameSpace(str) ; [default: \"\"]</li> <li>targetNameSpace(str) ; [default: \"\"]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#matchkeyableattributes","title":"matchKeyableAttributes","text":"<p> Constructor:  matchKeyableAttributes(source = None, target = None) Return:  None Arguments:   <ul> <li>source(str) ; [default: None]</li> <li>target(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#mirrorctrls","title":"mirrorCtrls","text":"<p> Constructor:  mirrorCtrls(ctrls = [], direction = 0, kwargs) Return:  None Arguments:   <ul> <li>ctrls(list) ; [default: []]</li> <li>direction(int) ; [default: 0]</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"blockUtility/#missingmoduleactiontrigger","title":"missingModuleActionTrigger","text":"<p>  Action trigger for an invalid module path fix attempt  Constructor:  missingModuleActionTrigger(rigTop, missingModuleName, existingBtns) Return:  None Arguments:   <ul> <li>rigTop</li> <li>missingModuleName</li> <li>existingBtns</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#mutelocaltransformations","title":"muteLocalTransformations","text":"<p> Constructor:  muteLocalTransformations(ctrl = None, kwargs) Return:  None Arguments:   <ul> <li>ctrl(str) ; [default: None]</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"blockUtility/#namepuppet","title":"namePuppet","text":"<p>  This method is used to create the rig's curves puppet title and connect it to to it's world control as additional shape nodes.  Constructor:  namePuppet(rigTop, kwargs) Return:  None Arguments:   <ul> <li>rigTop</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"blockUtility/#orientguides","title":"orientGuides","text":"<p> Constructor:  orientGuides(guides = [], kwargs) Return:  None Arguments:   <ul> <li>guides(list) ; [default: []]</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"blockUtility/#pickerbuttonclickaction","title":"pickerButtonClickAction","text":"<p>  The global action trigger for any picker UI button click trigger.     This method will trigger the \"controls selection\" and the \"action script\" for the passed in QPushButton passed in.  Constructor:  pickerButtonClickAction(btn, kwargs) Return:  None Arguments:   <ul> <li>btn</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"blockUtility/#pickerlayoutadjust","title":"pickerLayoutAdjust","text":"<p>  Load a new Maya panel, with the 'Picker Layout Camera' related to the scene selction.     This will also set the panel settings before loading it, based on the rigTop and 'layout base' attributes.  Constructor:  pickerLayoutAdjust() Return:  None Arguments:   Keyword Arguments:   </p>"},{"location":"blockUtility/#pickertitletoggle","title":"pickerTitleToggle","text":"<p>  Toggle between PLG 'control' view, to 'title' view.  Constructor:  pickerTitleToggle() Return:  None Arguments:   Keyword Arguments:   </p>"},{"location":"blockUtility/#prechecknameforui","title":"preCheckNameForUI","text":"<p>  A simple method to check for argument duplicates within an argument dict  Constructor:  preCheckNameForUI(arguments, suffix) Return:  dict (recompiled arguments) Arguments:   <ul> <li>arguments</li> <li>suffix</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#projectpickerlayout","title":"projectPickerLayout","text":"<p>  A wrapper method that handles plg projection from scene objects based on mode.  mode 0 = selected  mode 1 = module  mode 2 = branch  Constructor:  projectPickerLayout(mode = 0, msgPrompt = True) Return:  None Arguments:   <ul> <li>mode(int) ; [default: 0]</li> <li>msgPrompt(bool) ; [default: True]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#projectpickerlayoutpos","title":"projectPickerLayoutPos","text":"<p>  Get the passed in Ctrl PLG position, relative to the rig's 'layoutBase'.     This method 'projects' the ctrl position based on the rig's 'Projection Camera' into the layout base space, and returns it's processed position.  Constructor:  projectPickerLayoutPos(ctrl, cam, layoutBase) Return:  tuple[3] (posX), tuple[3] (posY) Arguments:   <ul> <li>ctrl</li> <li>cam</li> <li>layoutBase</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#projectselectedpickerlayout","title":"projectSelectedPickerLayout","text":"<p>  A wrapper method that handles plg projection from selected scene objects.  Constructor:  projectSelectedPickerLayout(msgPrompt = True) Return:  None Arguments:   <ul> <li>msgPrompt(bool) ; [default: True]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#rebuildjointstructure","title":"rebuildJointStructure","text":"<p>  modes:  0 = All  1 = Branch  2 = Module  Constructor:  rebuildJointStructure(mode = 0) Return:  None Arguments:   <ul> <li>mode(int) ; [default: 0]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#recgetmoduletopforctrl","title":"recGetModuleTopForCtrl","text":"<p>  Recursively attempt to collect the 'Module Top Group' related to the ctrl passed in within it's related parents.  Constructor:  recGetModuleTopForCtrl(ctrl = None) Return:  MnsNameStd (Module Top Group) Arguments:   <ul> <li>ctrl(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#recgetparentjoint","title":"recGetParentJoint","text":"<p>  Recursivly attempt to get a parent joint starting with a given root object, scaling up the heirarchy.  Constructor:  recGetParentJoint(rootObject = None) Return:  mnsNameStd Arguments:   <ul> <li>rootObject(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#recrenamelowerindex","title":"recRenameLowerIndex","text":"<p> Constructor:  recRenameLowerIndex(root = None, moduleGuides = [], moduleJoints = []) Return:  None Arguments:   <ul> <li>root(str) ; [default: None]</li> <li>moduleGuides(list) ; [default: []]</li> <li>moduleJoints(list) ; [default: []]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#recsearchforguiderootinparents","title":"recSearchForGuideRootInParents","text":"<p>  Recusrsivly look for a 'rootGuide' from the given node's parent relatives.  Constructor:  recSearchForGuideRootInParents(obj) Return:   PyNode (rootGuide) Arguments:   <ul> <li>obj</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#removealienmatchesfromlist","title":"removeAlienMatchesFromList","text":"<p> Constructor:  removeAlienMatchesFromList(guideRoot, currentMatches = []) Return:  None Arguments:   <ul> <li>guideRoot</li> <li>currentMatches(list) ; [default: []]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#removeallauthority","title":"removeAllAuthority","text":"<p>  This method is used to delete all 'Authority' from the passsed in slave, if there are any.  Constructor:  removeAllAuthority(slave = None, kwargs) Return:  MnsNameStd (oldAuthority) Arguments:   <ul> <li>slave(str) ; [default: None]</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"blockUtility/#removecnsfromctrls","title":"removeCnsFromCtrls","text":"<p>  This method is used to remove existing CNS controls/sub-controls for existing puppet controls.  If you have CNS controls you want to remove, use this method.  Pass in a list of controls you want to remove sub-controls from, and run.  This method is also the one used by the CNS Tool.  Constructor:  removeCnsFromCtrls(ctrls = []) Return:   bool (success state) Arguments:   <ul> <li>ctrls(list) ; [default: []]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#removeguides","title":"removeGuides","text":"<p> Constructor:  removeGuides(kwargs) Return:  None Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"blockUtility/#removemodulevisattrfrompuppettop","title":"removeModuleVisAttrFromPuppetTop","text":"<p>  This method will remove the corresponding \"module vis\" channel from the given puppet base control.     This method is used when a 'partial deconstruction' is initiated, keeping only relevant vis channels in place, removing the 'deconstructed' modules vis channels.  Constructor:  removeModuleVisAttrFromPuppetTop(moduleTopNode = None, puppetTop = None) Return:  None Arguments:   <ul> <li>moduleTopNode(str) ; [default: None]</li> <li>puppetTop(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#repositionshape","title":"repositionShape","text":"<p>  Simple method to re-center a control shape to its natural pivot  Constructor:  repositionShape(targets = []) Return:  None Arguments:   <ul> <li>targets(list) ; [default: []]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#resetallcontrolforrigtop","title":"resetAllControlForRigTop","text":"<p> Constructor:  resetAllControlForRigTop(rigTop = None, kwargs) Return:  None Arguments:   <ul> <li>rigTop(str) ; [default: None]</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"blockUtility/#resetcontrols","title":"resetControls","text":"<p>  reset all keyable attributes to default value.  Constructor:  resetControls(controls=[], kwargs) Return:  None Arguments:   <ul> <li>controls(list) ; [default: []]</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"blockUtility/#resetoffsetskeleton","title":"resetOffsetSkeleton","text":"<p> Constructor:  resetOffsetSkeleton(rigTop = None) Return:  None Arguments:   <ul> <li>rigTop(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#saveloaddagpose","title":"saveLoadDagPose","text":"<p>  mode 0 = Save  mode 1 = Load  mode 2 = Delete   poses: Bind, T, A  Constructor:  saveLoadDagPose(rootJoint = None, mode = 1, poseName = \"Bind\") Return:  None Arguments:   <ul> <li>rootJoint(str) ; [default: None]</li> <li>mode(int) ; [default: 1]</li> <li>poseName(str) ; [default: \"Bind\"]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#saveloadpose","title":"saveLoadPose","text":"<p>  This is the main wrapper for all pose 'save &amp; load' triggers of BLOCK.  Constructor:  saveLoadPose(guides = [], kwargs) Return:  None Arguments:   <ul> <li>guides(list) ; [default: []]</li> <li>kwargs</li> </ul> Keyword Arguments:   <ul> <li>rigTop(str) ; [default: None]</li> <li>mode(int)</li> <li>saveLoad(int)</li> <li>msgPrompt(bool)</li> <li>pose(str) ; [default: T]</li> </ul>"},{"location":"blockUtility/#saveposeforguides","title":"savePoseForGuides","text":"<p>  Block's save pose wrapper.  Constructor:  savePoseForGuides(guides = [], poseSet = \"T\", msgPrompt = False, kwargs) Return:  None Arguments:   <ul> <li>guides(list) ; [default: []]</li> <li>poseSet(str) ; [default: \"T\"]</li> <li>msgPrompt(bool) ; [default: False]</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"blockUtility/#searchforrootguideinrelatives","title":"searchForRootGuideInRelatives","text":"<p>  Search for a 'guide authority' or 'rootGuide' in the given node's decendents  Constructor:  searchForRootGuideInRelatives(obj) Return:  PyNode (rootGuide) Arguments:   <ul> <li>obj</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#selectallctrls","title":"selectAllCtrls","text":"<p>  Select all controls for the given rig top.  Constructor:  selectAllCtrls(rigTop = None, kwargs) Return:  None Arguments:   <ul> <li>rigTop(str) ; [default: None]</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"blockUtility/#selectrelatedcontrols","title":"selectRelatedControls","text":"<p> Constructor:  selectRelatedControls(controlsToSelect, mode = \"replace\") Return:  None Arguments:   <ul> <li>controlsToSelect</li> <li>mode(str) ; [default: \"replace\"]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#selectslavecontrols","title":"selectSlaveControls","text":"<p> Constructor:  selectSlaveControls(rigTop = None, kwargs) Return:  None Arguments:   <ul> <li>rigTop(str) ; [default: None]</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"blockUtility/#setctrlcol","title":"setCtrlCol","text":"<p>  Attempt to collect the passed in node's color (based on its type), and set it if seccessfull.  Constructor:  setCtrlCol(ctrl, rigTop, kwargs) Return:  MnsNameStd (ctrl) Arguments:   <ul> <li>ctrl</li> <li>rigTop</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"blockUtility/#setcurrentstateasdefaultforctrl","title":"setCurrentStateAsDefaultForCtrl","text":"<p>  Set custom defaults for keyable attributes for the given control, based on it's current state.  Constructor:  setCurrentStateAsDefaultForCtrl(ctrl, kwargs) Return:  None Arguments:   <ul> <li>ctrl</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"blockUtility/#setresetvaluesforoffsetjoint","title":"setResetValuesForOffsetJoint","text":"<p> Constructor:  setResetValuesForOffsetJoint(offsetJnt = None) Return:  None Arguments:   <ul> <li>offsetJnt(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#setrigdefaults","title":"setRigDefaults","text":"<p>  Set controls custom defaults based on given state:  0: All  1: Modules  2: Branches  Constructor:  setRigDefaults(mode = 0, kwargs) Return:  None Arguments:   <ul> <li>mode(int) ; [default: 0]</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"blockUtility/#setgctrlcolorformodule","title":"setgCtrlColorForModule","text":"<p>  For all relevant decendents of the passed in moduleRoot, get and set it's color.  Constructor:  setgCtrlColorForModule(rigTop, moduleRoot) Return:  None Arguments:   <ul> <li>rigTop</li> <li>moduleRoot</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#setgctrlcolorforrigtop","title":"setgCtrlColorForRigTop","text":"<p>  Set ALL relevnt controls within a rigTop, to their color based on their type.  Constructor:  setgCtrlColorForRigTop(rigTop) Return:  None Arguments:   <ul> <li>rigTop</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#symmetrizecgshape","title":"symmetrizeCGShape","text":"<p>  A simple method to symmetrize custom guides nurbs shapes when aplicable  Mode=  0: All  1: Modules  2: Branches  3: selection  Direction=  0: L -&gt; R  1: R -&gt; L  Constructor:  symmetrizeCGShape(mode = 0, direction = 0, cGuides = []) Return:  None Arguments:   <ul> <li>mode(int) ; [default: 0]</li> <li>direction(int) ; [default: 0]</li> <li>cGuides(list) ; [default: []]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#symmetrizeplg","title":"symmetrizePlg","text":"<p>  Block 'plg symmetrize' button trigger.     This method will handle validation and creation of PLG related symmetrical plg.  Constructor:  symmetrizePlg(guide = None) Return:  None Arguments:   <ul> <li>guide(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#symmetrizeplgs","title":"symmetrizePlgs","text":"<p>  A simple wrapper method to symmetrize multiple PLG's (based on scene selection).  Constructor:  symmetrizePlgs() Return:  None Arguments:   Keyword Arguments:   </p>"},{"location":"blockUtility/#symmetrizevj","title":"symmetrizeVJ","text":"<p> Constructor:  symmetrizeVJ(vJnt = None, kwargs) Return:  None Arguments:   <ul> <li>vJnt(str) ; [default: None]</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"blockUtility/#toggleguidectrl","title":"toggleGuideCtrl","text":"<p>  Atempt to toggle between a selection guide and main joint if possible.  Constructor:  toggleGuideCtrl(kwargs) Return:  None Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"blockUtility/#toggleguidejoint","title":"toggleGuideJoint","text":"<p>  Atempt to toggle between a selection guide and main joint if possible.  Constructor:  toggleGuideJoint(kwargs) Return:  None Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"blockUtility/#togglepickerctrlbodyfacial","title":"togglePickerCtrlBodyFacial","text":"<p> Constructor:  togglePickerCtrlBodyFacial() Return:  None Arguments:   Keyword Arguments:   </p>"},{"location":"blockUtility/#transferauthoritytoctrl","title":"transferAuthorityToCtrl","text":"<p>  This is a very important method used in BLOCK cosntruction.  This method will find the current 'guide control' from the given joint slave. and transfer it's authority to a newly created 'control authority'.  This method will be called on every module build and it is the main trigger to flag a module construction.  The 'authority' attribute for every guide or control is used to distiguish the module state, and jnt state.  When transfering an authority to a ctrl, a 'old authority' attr (of sort) is created, in order for the procedural 'deconstruct' to look for and tranfer the jnt authority back to it's orignal guide,   before deleting the constructed module.  See also parallel: 'transferAuthorityToGuide' Method.  Constructor:  transferAuthorityToCtrl(slave = None, ctrlMaster = None, kwargs)    Return:  None Arguments:   <ul> <li>slave(str) ; [default: None]</li> <li>ctrlMaster(str) ; [default: None]</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"blockUtility/#transferauthoritytoguide","title":"transferAuthorityToGuide","text":"<p>  This is a very important method used in BLOCK de-construction.  This method will find the current 'control' from the given joint slave. and transfer it's authority to a it's original 'guide' authority.  This method will be called procedurally on any module deconstruction, before deleting the constructed module.  See also parallel: 'transferAuthorityToCtrl' Method.  Constructor:  transferAuthorityToGuide(ctrl = None, kwargs)   Return:  None Arguments:   <ul> <li>ctrl(str) ; [default: None]</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"blockUtility/#transferauthoritytooffsetskeleton","title":"transferAuthorityToOffsetSkeleton","text":"<p> Constructor:  transferAuthorityToOffsetSkeleton(rigTop = None) Return:  None Arguments:   <ul> <li>rigTop(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#transferauthoritytopuppet","title":"transferAuthorityToPuppet","text":"<p> Constructor:  transferAuthorityToPuppet(rigTop = None) Return:  None Arguments:   <ul> <li>rigTop(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"blockUtility/#upparentallplgtrigger","title":"upParentAllPlgTrigger","text":"<p>  OBSELETE. PLG parenting is no longer in use.  Constructor:  upParentAllPlgTrigger() Return:  None Arguments:   Keyword Arguments:   </p>"},{"location":"blockUtility/#updaterigstructure","title":"updateRigStructure","text":"<p>  Rig structure update required trigger.  This method will be called in case any 'jntStructMember' attribute was altered, which means the internal joint structure of the module needs to be rebuilt.  This method will locate and filter the existing module related joint structure, destroy it, and re-build it using the updated settings.   Constructor:  updateRigStructure(softMod = False, kwargs) Return:  None Arguments:   <ul> <li>softMod(bool) ; [default: False]</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"blockUtility/#volumejointanglesymmetrymapping","title":"volumeJointAngleSymmetryMapping","text":"<p> Constructor:  volumeJointAngleSymmetryMapping(symmetryDelta = pm.datatypes.Vector(1.0, 1.0, 1.0)) Return:  None Arguments:   <ul> <li>symmetryDelta(str) ; [default: pm.datatypes.Vector(1.0]</li> <li>1.0</li> <li>1.0)</li> </ul> Keyword Arguments:   </p>"},{"location":"buildModules/","title":"buildModules","text":"<p>"},{"location":"buildModules/#buildmodules","title":"buildModules","text":"<p>  === Author: Assaf Ben Zur ===  This is the core BLOCK Build-Modules class library.  This package contains the three main classes for BLOCK:  - MnsBuildModuleBtn  - MnsRig  - MnsBuildModule  Most core function are defined within the classes, although any external functionality is maintained in 'blockUtility' py module.  The objective of these classes are mainly effeciant data gathering, constructing and deconstructing modules within a rig group."},{"location":"buildModules/#classes","title":"Classes","text":""},{"location":"buildModules/#MnsBuildModule TARGET","title":"buildModules","text":""},{"location":"buildModules/#mnsbuildmodule-class","title":"MnsBuildModule [Class]","text":"<p>  This class is the data store class for any mns 'build-module'.  This class contains the actual creation and deletion of the module, guides and controls.  This class will be initialized through the MnsRig class, althogh process functions regarding the modules are store in this class only.  This class is purely procedular, and so it should remain.  As the main goal of the rig is maintaining dynamic abilities, and easy creation of modules,  this class should remain completely independent of any specific build module.  Guides creation is partlly procedural, as any \"main-guides\" creation is fully automatic,   although custom-guides creation isn't- as it is module specific, hence it is store within the buildModule directory.  Interp Joint Structure creation is procedural, although its essence is also defined within each build-module directory, althogh it is not mandatory.  As the build modules are very specific and have to be created manually, guide creation is kept independent.  This for easily creating modules, not needing to worrie about the handeling of guides, consruction and deconstruction.  The actual flow of the build is independent of the modules setup internals.  Constructor:  MnsBuildModule(MnsBuildModuleButton,**kwargs) Inherits from:  MnsRig Class Members:   <ul> <ul> <li>MnsBuildModuleButton</li> <li>sidePlaceHolder</li> <li>builtGuides</li> <li>rigTop</li> <li>rootGuide</li> <li>isFacial</li> <li>rootCtrl</li> <li>guideControls</li> <li>cGuideControls</li> <li>pureParent</li> <li>attrHostCtrl</li> <li>extraChannelsHost</li> <li>compundModules</li> <li>moduleTop</li> <li>animGrp</li> <li>animStaticGrp</li> <li>rigComponentsGrp</li> <li>moduleSpaceAttrHost</li> <li>extraSpaces</li> <li>defaultSpace</li> <li>pureTops</li> <li>spaceSwitchCtrls</li> <li>internalSpaces</li> <li>controls</li> <li>allControls</li> <li>puppetTopCtrl</li> </ul> Methods:  <ul> <li>constructAttrHostCtrl  [method] <li>constructAttrHostSpace  [method] <li>createAttrHostCustomGuide  [method] <li>createExtraChannels  [method] <li>splitControlsBasedOnType  [method] <li>collecteModuleSettings  [method] <li>filterValidSpacs  [method] <li>buildGuideObjects  [method] <li>gatherAllDependecies  [method] <li>reCollectControlsFromLocals  [method] <li>construct  [method] <li>createGuides  [method] <li>deconstruct  [method] <li>buildGuides  [method] <li>constructSpaces  [method] <li>createModuleTopNode  [method] <li>storeCustomDefaults  [method] <li>updateCreationArgsToSymmetryMode  [method] <li>restoreCustomDefaults  [method] <li>gatherRelatedCtrls  [method] <li>connectVisChannels  [method] <li>gatherRelatedGuides  [method] <li>getRigTop  [method]"},{"location":"buildModules/#mnsbuildmodule-methods","title":"MnsBuildModule  methods","text":"<p>"},{"location":"buildModules/#constructAttrHostCtrlTARGET","title":"buildModules","text":"constructAttrHostCtrl  [MnsBuildModule  class method]  Constructor:  constructAttrHostCtrl(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"buildModules/#constructAttrHostSpaceTARGET","title":"buildModules","text":"constructAttrHostSpace  [MnsBuildModule  class method]  Constructor:  constructAttrHostSpace(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"buildModules/#createAttrHostCustomGuideTARGET","title":"buildModules","text":"createAttrHostCustomGuide  [MnsBuildModule  class method]  Constructor:  createAttrHostCustomGuide(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"buildModules/#createExtraChannelsTARGET","title":"buildModules","text":"createExtraChannels  [MnsBuildModule  class method]  Constructor:  createExtraChannels(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"buildModules/#splitControlsBasedOnTypeTARGET","title":"buildModules","text":"splitControlsBasedOnType  [MnsBuildModule  class method]  Constructor:  splitControlsBasedOnType(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"buildModules/#collecteModuleSettingsTARGET","title":"buildModules","text":"collecteModuleSettings  [MnsBuildModule  class method]  Constructor:  collecteModuleSettings(self, rootGuide = None) Return:  None Arguments:   <ul> <li>self</li> <li>rootGuide(str) ; [default: None]</li> </ul> Optional Arguments:"},{"location":"buildModules/#filterValidSpacsTARGET","title":"buildModules","text":"filterValidSpacs  [MnsBuildModule  class method]  Constructor:  filterValidSpacs(self, sourceSpaces = [], kwargs) Return:  None Arguments:   <ul> <li>self</li> <li>sourceSpaces(list) ; [default: []]</li> <li>kwargs</li> </ul> Optional Arguments:"},{"location":"buildModules/#buildGuideObjectsTARGET","title":"buildModules","text":"buildGuideObjects  [MnsBuildModule  class method]  A simple method to gather the amount of needed guides to create, and calling the creation accordingly. Constructor:  buildGuideObjects(self, kwargs) Return:  None Arguments:   <ul> <li>self</li> <li>kwargs</li> </ul> Optional Arguments:   <ul> <li>buildCompound(bool) ; [default: True]</li> </ul>"},{"location":"buildModules/#gatherAllDependeciesTARGET","title":"buildModules","text":"gatherAllDependecies  [MnsBuildModule  class method]  Gather all scene object dependecies for the buildModule. A simple wrapper containing 'gatherRelatedGuides' method &amp; gatherRelatedCtrls method. Constructor:  gatherAllDependecies(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"buildModules/#reCollectControlsFromLocalsTARGET","title":"buildModules","text":"reCollectControlsFromLocals  [MnsBuildModule  class method]  Re-initialize the 'allControls' attribute of this class, based on the current rig state. Constructor:  reCollectControlsFromLocals(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"buildModules/#constructTARGET","title":"buildModules","text":"construct  [MnsBuildModule  class method]  The main construct method. The actual 'Construct' method within the build module directory is being called here. Flow: - make sure the module isn't built - get the puppet root - try and find the related 'construct' method within the build module directory (or package). - construct the module, feeding the construct method with all of the requested module settings.   this will transfer the related joints to their new ctrl authority. - connect a vis channel to the new module group created. - re-collect relations for the module (post build). - Set colors for all built controls. - parent the new bm top group in the puppet group. - try restore defaults if there are any. Constructor:  construct(self) Return:  MnsBuildModule (self, this buildModule class) Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"buildModules/#createGuidesTARGET","title":"buildModules","text":"createGuides  [MnsBuildModule  class method]  This is the main guide creation method. This method contains all the steps needed to gather a module data, and create the guides for it. This method will return the built guides, as well as store it in this class 'builtGuides' attribute. Constructor:  createGuides(self, kwargs) Return:  list (bbuiltGuides) Arguments:   <ul> <li>self</li> <li>kwargs</li> </ul> Optional Arguments:   <ul> <li>buildCompound(bool) ; [default: True]</li> <li>blkSide(str) ; [default: center]</li> <li>body(str) ; [default: guideCtrl]</li> <li>alpha(str) ; [default: A]</li> <li>alongAxis(int) ; [default: 1]</li> <li>moduleScale(int) ; [default: 1]</li> <li>isFacial(bool)</li> </ul>"},{"location":"buildModules/#deconstructTARGET","title":"buildModules","text":"deconstruct  [MnsBuildModule  class method]  This is the main module deconstruction method. Flow: - Make sure the module is constructed - In case a deconstruvt method (non mandatory method) is found within the build-module's directory, run it. - Transfer all joint authoities back to the guides. - Remove the related vis channel from puppet root (Needed in case a partial deconstruction was called). - Delete the build module. - Set the construction state for the build module. Constructor:  deconstruct(self, mnsRig) Return:  MnsBuildModule (self, this buildModule class) Arguments:   <ul> <li>self</li> <li>mnsRig</li> </ul> Optional Arguments:"},{"location":"buildModules/#buildGuidesTARGET","title":"buildModules","text":"buildGuides  [MnsBuildModule  class method]  This method is the initialize method for new guides creation. This method will be called first (before 'createGuides') and will also load the modules creation settings window if neccessary. Constructor:  buildGuides(self, MnsBuildModuleButton, kwargs) Return:  None Arguments:   <ul> <li>self</li> <li>MnsBuildModuleButton</li> <li>kwargs</li> </ul> Optional Arguments:   <ul> <li>skipUI(bool)</li> <li>skipGuidesCreation(bool)</li> <li>buildCompound(bool) ; [default: True]</li> <li>settingsHolder(str) ; [default: None]</li> <li>preDefinedSettings(str) ; [default: {}]</li> <li>symmetrize(bool)</li> </ul>"},{"location":"buildModules/#constructSpacesTARGET","title":"buildModules","text":"constructSpaces  [MnsBuildModule  class method]  This method is the spaces construction processing. This method is seperated from the main construct method in order to run it after an entire construction. Because the spaces within the module are dependent of other modules, a first loop is run to construct the modules, after, another loop is running through the built modules, calling this method, trying to construct all of it's spaces. Constructor:  constructSpaces(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"buildModules/#createModuleTopNodeTARGET","title":"buildModules","text":"createModuleTopNode  [MnsBuildModule  class method]  This method is used to create the genric 'module top group' on module construction. Constructor:  createModuleTopNode(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"buildModules/#storeCustomDefaultsTARGET","title":"buildModules","text":"storeCustomDefaults  [MnsBuildModule  class method]  This method stores any custom 'defaults' set for the entire module. The collection is stored within the rootGuide node. This is important beacuse when the module is deconstructed, the ctrls containing the 'defaults' attribute are eventually deleted. So, in order to keep the information on deletion, this method runs thorugh the modules controls,  and storing the set 'defaults' attribute within the rootGuide, in order to restore them when a reconstruction is called. related method: restoreCustomDefaults Constructor:  storeCustomDefaults(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"buildModules/#updateCreationArgsToSymmetryModeTARGET","title":"buildModules","text":"updateCreationArgsToSymmetryMode  [MnsBuildModule  class method]  This method will alter the current setting to their symmetry mode, In case the 'symmetrize' flag was passed into the buildGuides method. Altered attributes: - side (or blkSide) - spaces- if a side related space was found, symmetrize the space as well. Constructor:  updateCreationArgsToSymmetryMode(self, optArgs) Return:  dict (optionalArguments) Arguments:   <ul> <li>self</li> <li>optArgs</li> </ul> Optional Arguments:"},{"location":"buildModules/#restoreCustomDefaultsTARGET","title":"buildModules","text":"restoreCustomDefaults  [MnsBuildModule  class method]  This method will attempt to restore any pre-stored 'defaults' set a newly created control. related method: storeCustomDefaults. Constructor:  restoreCustomDefaults(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"buildModules/#gatherRelatedCtrlsTARGET","title":"buildModules","text":"gatherRelatedCtrls  [MnsBuildModule  class method]  This method will collect and store the build-module related control objects from the rig. Constructor:  gatherRelatedCtrls(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"buildModules/#connectVisChannelsTARGET","title":"buildModules","text":"connectVisChannels  [MnsBuildModule  class method]  This method will connect this module into it's related vis channel in the puppet root control. Constructor:  connectVisChannels(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"buildModules/#gatherRelatedGuidesTARGET","title":"buildModules","text":"gatherRelatedGuides  [MnsBuildModule  class method]  This method will gather the buildModules related guides from the rig. collected objects: - rootGuide - guides - customGuides The data collected is stored in their related class attributes: - rootGuide - 'rootGuide' - guides - 'guideControls' - custom guides - 'cGuideControls' Constructor:  gatherRelatedGuides(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"buildModules/#getRigTopTARGET","title":"buildModules","text":"getRigTop  [MnsBuildModule  class method]  get the rigTop nameStd from current selection.  If it doesn't exist, initiate a new rig top creation. Constructor:  getRigTop(self) Return:  MnsNameStd (rigTop) Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"buildModules/#MnsBuildModuleBtn TARGET","title":"buildModules","text":""},{"location":"buildModules/#mnsbuildmodulebtn-class","title":"MnsBuildModuleBtn [Class]","text":"<p>  The procedural 'module' button class.  This class is being called and constructed procedurally from the file system based on folder contents.  The class itself isn't inhereting from QPushButton, as it only exists to contain build location information.  The class contains a constuctor only, which initializes the following information:  - The full-path to the buildModule   - The layout Parent of the button  - The group of the button, based on the folder structure of which the bm is located in.  - The 'settings' file-path.  - Short-Name  - The obselete - 'isMayaNative' attribute.  This information will be accessed once the related QPushButton will be triggered.  Constructor:  MnsBuildModuleBtn(path,**kwargs) Inherits from:  object Class Members:   <ul> <ul> <li>path</li> <li>moduleName</li> <li>groupType</li> </ul>"},{"location":"buildModules/#MnsRig TARGET","title":"buildModules","text":""},{"location":"buildModules/#mnsrig-class","title":"MnsRig [Class]","text":"<p>  This is the main 'RIG' data class.  This class's constructor will initialize and build all relevant information regarding the 'rig' top top group.  As The rig topGrp has pre-defined structure, and many dependencies, all basic information will be checked every time this class is constructed.  The essence of this class is first of all to build the predefined rigGroup,  then, to store and parse all relevant data from the scene, as well as validating it and rebuilding any sub-components if necessary.  The procedural settings UI build will be initiated if a rig top wasn't found in the current scene selection (or if there is no selection).  In case a rigTop already exists, it will first be validated, then it's setting will be read and parsed, initiating the the same UI draw, in \"edit\" mode.  Constructor:  MnsRig(callerSubClass(str) ; [default: None],**kwargs) Inherits from:  object Class Members:   <ul> <ul> <li>rigTop</li> <li>rootGuide</li> <li>callerSubClass</li> <li>modules</li> <li>buildModulesBtns</li> <li>puppetBase</li> <li>baseGuide</li> <li>rootJnt</li> <li>iconsDir</li> <li>buildTimer</li> <li>loadSettingsWindow</li> </ul> Methods:  <ul> <li>connectLODs  [method] <li>createPredefinedCnsControls  [method] <li>createRigInfo  [method] <li>failedConstructionCommand  [method] <li>setVisChannelsBasedOnCunstructMode  [method] <li>cunstructRigSpaces  [method] <li>collectBuildModules  [method] <li>createPickerLayoutBase  [method] <li>createRootGuide  [method] <li>createPickerTitleGrp  [method] <li>createPickerGuideGrp  [method] <li>createNewRigTop  [method] <li>createPickerProjectionCam  [method] <li>createSubGroupForRigTop  [method] <li>createPickerCam  [method] <li>createPuppetRootCtrl  [method] <li>createVisEnumAndConnect  [method] <li>getGlobalConstructionState  [method] <li>loadSettingsWindow  [method] <li>restorePuppetBaseDefaults  [method] <li>setConstructionMode  [method] <li>deconstructRig  [method] <li>constructRig  [method] <li>storePuppetBaseDefaults  [method] <li>destroyPuppetRootCtrl  [method] <li>createSubGrpsForRigTop  [method] <li>executeCustomScripts  [method]"},{"location":"buildModules/#mnsrig-methods","title":"MnsRig  methods","text":"<p>"},{"location":"buildModules/#connectLODsTARGET","title":"buildModules","text":"connectLODs  [MnsRig  class method]  Constructor:  connectLODs(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"buildModules/#createPredefinedCnsControlsTARGET","title":"buildModules","text":"createPredefinedCnsControls  [MnsRig  class method]  Constructor:  createPredefinedCnsControls(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"buildModules/#createRigInfoTARGET","title":"buildModules","text":"createRigInfo  [MnsRig  class method]  Constructor:  createRigInfo(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"buildModules/#failedConstructionCommandTARGET","title":"buildModules","text":"failedConstructionCommand  [MnsRig  class method]  A global method to display and return a message dialog whenever a build fails. This method displays 3 options and returns a paraller state: - 0: 'Continue' - 1: 'Abort' - 2: 'Revert-Construction' Constructor:  failedConstructionCommand(self, fileName = \"\") Return:  int (state/button clicked) Arguments:   <ul> <li>self</li> <li>fileName(str) ; [default: \"\"]</li> </ul> Optional Arguments:"},{"location":"buildModules/#setVisChannelsBasedOnCunstructModeTARGET","title":"buildModules","text":"setVisChannelsBasedOnCunstructMode  [MnsRig  class method]  A simple method to set the vis mode of the current rig based on it's construction state. The construction mode is read from the rigTop attribues. Construction modes: 0: Guides - guideGrpVis = True, puppetGrpVis = False 1: Intermediate (Partially built rig) - guideGrpVis = True, puppetGrpVis = True 2: Puppet - guideGrpVis = False, puppetGrpVis = True Constructor:  setVisChannelsBasedOnCunstructMode(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"buildModules/#cunstructRigSpacesTARGET","title":"buildModules","text":"cunstructRigSpaces  [MnsRig  class method]  Attempt to construct spaces for all 'modules' within the rig. Constructor:  cunstructRigSpaces(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"buildModules/#collectBuildModulesTARGET","title":"buildModules","text":"collectBuildModules  [MnsRig  class method]  Collect all build modules guide hierarchy into the 'modules' attribure of this class. This method will run through the rig, and attempt to collect it's guide heirarchy, validating the modules while collecting. Constructor:  collectBuildModules(self, kwargs) Return:  None Arguments:   <ul> <li>self</li> <li>kwargs</li> </ul> Optional Arguments:"},{"location":"buildModules/#createPickerLayoutBaseTARGET","title":"buildModules","text":"createPickerLayoutBase  [MnsRig  class method]  Create Picker Layout Base control, and construct all of it's predefined attributes. The predefined attributes for the PLG base is the following: - width - Will define the width of the rig's picker window - height- Will define the height of the rig's picker window - titleVis - vis attr for the title-group - titleSize - a global scalar for all mnsAnnotate PLG titles. This group also contains a few vis control channels to allow easier edit for the PLGs: - bodyPrimaries - bodySecondaries - bodyTertiaries - facialPrimaries - facialSecondaries - facialTertiaries These sub-vis channels will be controled by a global toggle attribute: - pickerMode This will dictate the picker's scene vis mode, the toggle is between 'body' and 'facial' modes. As the picker inhabits to tabs - body and facial, these attributes will allow better manipulation of PLG, grouping them according to the actual picker window tab grouping. Constructor:  createPickerLayoutBase(self, rigTop, kwargs) Return:  MnsNameStd (baseLayoutGuide) Arguments:   <ul> <li>self</li> <li>rigTop</li> <li>kwargs</li> </ul> Optional Arguments:"},{"location":"buildModules/#createRootGuideTARGET","title":"buildModules","text":"createRootGuide  [MnsRig  class method]  Create the \"world control guide\", or \"rigRootGuide\". This rootGuide will be locked completely and will define the predefined \"world\" control for the puppet. This entity is mandatory. Constructor:  createRootGuide(self, rigTopNameStd, kwargs) Return:  MnsNameStd (Root Guide) Arguments:   <ul> <li>self</li> <li>rigTopNameStd</li> <li>kwargs</li> </ul> Optional Arguments:"},{"location":"buildModules/#createPickerTitleGrpTARGET","title":"buildModules","text":"createPickerTitleGrp  [MnsRig  class method]  Create the Picker Layout 'titles' sub-component. This group contains the mnsAnnotate locators to toggle PLG view between it's shape and it's title. Constructor:  createPickerTitleGrp(self, rigTop, pickerLayoutBase,kwargs) Return:  MnsNameStd (titleGrp) Arguments:   <ul> <li>self</li> <li>rigTop</li> <li>pickerLayoutBase</li> <li>kwargs</li> </ul> Optional Arguments:"},{"location":"buildModules/#createPickerGuideGrpTARGET","title":"buildModules","text":"createPickerGuideGrp  [MnsRig  class method]  Create the main Picker-Layout-Guides sub-component. Constructor:  createPickerGuideGrp(self, rigTop, pickerLayoutBase, kwargs) Return:  MnsNameStd (guidesGrp) Arguments:   <ul> <li>self</li> <li>rigTop</li> <li>pickerLayoutBase</li> <li>kwargs</li> </ul> Optional Arguments:"},{"location":"buildModules/#createNewRigTopTARGET","title":"buildModules","text":"createNewRigTop  [MnsRig  class method]  Create the main rig group, with all of its sub-Components within. Constructor:  createNewRigTop(self, kwargs) Return:  None Arguments:   <ul> <li>self</li> <li>kwargs</li> </ul> Optional Arguments:"},{"location":"buildModules/#createPickerProjectionCamTARGET","title":"buildModules","text":"createPickerProjectionCam  [MnsRig  class method]  Create the predefined \"PLG Projection\" camera within the rig. A dedicated mns node is used here - 'mnsCamreGateRatio': This dedicated node was written in order to control the camera shape 'gateRatio' attribute. Because this attribute isn't connectable (internal callback within the camera shape),  mnsCameraGateRatio inserts a custom maya-callback into itself, in-order to refresh the camera-gate in a \"live\" fashion, This will allow the user to edit the width and height of the projection camera, seeing a live feed of it's gate in the view. As the projection is based on the camera gate, it is very important for the user to see the actual gate used, while projecting PLG's. Constructor:  createPickerProjectionCam(self, rigTop, pickerLayoutBase) Return:  MnsNameStd (Picker Projection Camera) Arguments:   <ul> <li>self</li> <li>rigTop</li> <li>pickerLayoutBase</li> </ul> Optional Arguments:"},{"location":"buildModules/#createSubGroupForRigTopTARGET","title":"buildModules","text":"createSubGroupForRigTop  [MnsRig  class method]  Create the predefined \"guideGrp\" or \"freeJointsGrp\" within the rig. Guides Group - Contains the module main guides. Free Joints Group - Contains the interpLocs intermediate matricies for the interJnts in the main jointStructure Constructor:  createSubGroupForRigTop(self, rigTopNameStd, kwargs) Return:  MnsNameStd (guideGrp/freeJointsGrp) Arguments:   <ul> <li>self</li> <li>rigTopNameStd</li> <li>kwargs</li> </ul> Optional Arguments:   <ul> <li>subGrpType(str)</li> <li>default(int) ; [default: 1]</li> </ul>"},{"location":"buildModules/#createPickerCamTARGET","title":"buildModules","text":"createPickerCam  [MnsRig  class method]  Create the predefined \"picker Layout View\" camera within the rig. This camera will be used as the view camera when an \"edit picker layout\" trigger was initiated from BlockUI. The camera is orthographic, and will be used in a seperate display (Maya-Panel). This to allow easy view of the picker layout, and easy manipulation of PLG shapes and controls. Constructor:  createPickerCam(self, rigTop, pickerLayoutBase, kwargs) Return:  MnsNameStd (Picker Layout Camera) Arguments:   <ul> <li>self</li> <li>rigTop</li> <li>pickerLayoutBase</li> <li>kwargs</li> </ul> Optional Arguments:"},{"location":"buildModules/#createPuppetRootCtrlTARGET","title":"buildModules","text":"createPuppetRootCtrl  [MnsRig  class method]  Create the rig's predefined \"puppetRoot\" or \"worldControl\". This depends on the rootGuide of course, and transfer the rigs \"Root-Joint\" Authority from the rootGuide, to the new puppetRoot control. This method will return the new control, as well as store it in the 'puppetTopCtrl' attribute of this class. Constructor:  createPuppetRootCtrl(self, rigTop, kwargs) Return:  MnsNameStd (Root Guide) Arguments:   <ul> <li>self</li> <li>rigTop</li> <li>kwargs</li> </ul> Optional Arguments:"},{"location":"buildModules/#createVisEnumAndConnectTARGET","title":"buildModules","text":"createVisEnumAndConnect  [MnsRig  class method]  For any given slave MnsNameStd group passed in, create a generic vis channel and connect it. The Enums of the generic vis channels are the following: - hidden - normal - template - reference Constructor:  createVisEnumAndConnect(self, masterStd, slaveStd, kwargs) Return:  PyAttribute (created attribute) Arguments:   <ul> <li>self</li> <li>masterStd</li> <li>slaveStd</li> <li>kwargs</li> </ul> Optional Arguments:   <ul> <li>default(int) ; [default: 1]</li> </ul>"},{"location":"buildModules/#getGlobalConstructionStateTARGET","title":"buildModules","text":"getGlobalConstructionState  [MnsRig  class method]  Gey the current rig construction state from rigTop attributes. Constructor:  getGlobalConstructionState(self) Return:  int (mode) Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"buildModules/#loadSettingsWindowTARGET","title":"buildModules","text":"loadSettingsWindow  [MnsRig  class method]  Load the dynamic \"setting window\" for the current rig. Constructor:  loadSettingsWindow(self, kwargs) Return:  None Arguments:   <ul> <li>self</li> <li>kwargs</li> </ul> Optional Arguments:"},{"location":"buildModules/#restorePuppetBaseDefaultsTARGET","title":"buildModules","text":"restorePuppetBaseDefaults  [MnsRig  class method]  On reconstruction, attempt to restore the 'defaults' attribute for the puppet root, if there are any. related method: storePuppetBaseDefaults Constructor:  restorePuppetBaseDefaults(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"buildModules/#setConstructionModeTARGET","title":"buildModules","text":"setConstructionMode  [MnsRig  class method]  Set the construction state attribute of the current rig. Constructor:  setConstructionMode(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"buildModules/#deconstructRigTARGET","title":"buildModules","text":"deconstructRig  [MnsRig  class method]  This is the main deconstruction method for the rig. Flow: - Log, and set Timer - Collect all relevant data from the rig - Collect modules to build - Loop through the 'modules' dict attribute of this class: - Initiate the 'Deconstruct' method for every buildModule class within the collection. Constructor:  deconstructRig(self, kwargs) Return:  None Arguments:   <ul> <li>self</li> <li>kwargs</li> </ul> Optional Arguments:"},{"location":"buildModules/#constructRigTARGET","title":"buildModules","text":"constructRig  [MnsRig  class method]  This method is the main 'Construction' call for a mnsRig. Flow: - Log, and set Timer - Collect all relevant data from the rig - Collect modules to build - Loop through the 'modules' dict attribute of this class: - Initiate the 'Construct' method for every buildModule class within the collection. Constructor:  constructRig(self, kwargs) Return:  None Arguments:   <ul> <li>self</li> <li>kwargs</li> </ul> Optional Arguments:"},{"location":"buildModules/#storePuppetBaseDefaultsTARGET","title":"buildModules","text":"storePuppetBaseDefaults  [MnsRig  class method]  This method is used to store the current 'Defaults' set for the puppet-root control on deconstruction. As deconstruction deletes all the controls, including the puppet-root, if any custom-defaults were set, its essential to store them, in order to re-create them on re-construction. This is a specific case for the root-control, as it isn't a 'build-module' hence, the generic defaults store for the build modules doesn't apply. related method: restorePuppetBaseDefaults Constructor:  storePuppetBaseDefaults(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"buildModules/#destroyPuppetRootCtrlTARGET","title":"buildModules","text":"destroyPuppetRootCtrl  [MnsRig  class method]  This method will destroy the rig's puppetRoot control, and transfer the rig's root-joint authority back to it's rootGuide. Constructor:  destroyPuppetRootCtrl(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"buildModules/#createSubGrpsForRigTopTARGET","title":"buildModules","text":"createSubGrpsForRigTop  [MnsRig  class method]  This wrapper creates all the sub-group components for a given main rigTop group. The sub-groups defenition is the following: - guideGrp - Guides group component - puppetGrp - The Puppet group. - jointStructGrp - Joint Structure group - pickerLayoutGrp - Picker Layout guiides group. - controlShapesGrp - Stored custom shapes group. - freeJointsGrp - \"Free joints\" group, containing interLocs as intermediate objects to the interJoints in the main joint structure. Constructor:  createSubGrpsForRigTop(self, rigTop = None) Return:  None Arguments:   <ul> <li>self</li> <li>rigTop(str) ; [default: None]</li> </ul> Optional Arguments:"},{"location":"buildModules/#executeCustomScriptsTARGET","title":"buildModules","text":"executeCustomScripts  [MnsRig  class method]  for the given 'customScripts' attribute: compile the run files, and execute (if set). Constructor:  executeCustomScripts(self, attrName = None) Return:   bool (Execution success) Arguments:   <ul> <li>self</li> <li>attrName(str) ; [default: None]</li> </ul> Optional Arguments:"},{"location":"buildModules/#defenitions","title":"Defenitions","text":""},{"location":"buildModules/#createmodulecompound","title":"createModuleCompound","text":"<p> Constructor:  createModuleCompound(compoundMaster, moduleName, bmButtonList, parent, settings) Return:  None Arguments:   <ul> <li>compoundMaster</li> <li>moduleName</li> <li>bmButtonList</li> <li>parent</li> <li>settings</li> </ul> Keyword Arguments:   </p>"},{"location":"buildModules/#updatemodules","title":"updateModules","text":"<p> Constructor:  updateModules(blkWin = None, rigTop = None, buildModulesBtns = [], kwargs) Return:  None Arguments:   <ul> <li>blkWin(str) ; [default: None]</li> <li>rigTop(str) ; [default: None]</li> <li>buildModulesBtns(list) ; [default: []]</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"buildModules/#updaterig","title":"updateRig","text":"<p> Constructor:  updateRig(blkWin = None, buildModulesBtns = [], kwargs) Return:  None Arguments:   <ul> <li>blkWin(str) ; [default: None]</li> <li>buildModulesBtns(list) ; [default: []]</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"buildModules/#updaterigtopattrs","title":"updateRigTopAttrs","text":"<p> Constructor:  updateRigTopAttrs(rigTop = None) Return:  None Arguments:   <ul> <li>rigTop(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"buildModules/#updaterigtopstruct","title":"updateRigTopStruct","text":"<p> Constructor:  updateRigTopStruct(rigTop = None, buildModulesBtns = []) Return:  None Arguments:   <ul> <li>rigTop(str) ; [default: None]</li> <li>buildModulesBtns(list) ; [default: []]</li> </ul> Keyword Arguments:   </p>"},{"location":"characterDefenitionUI/","title":"characterDefenitionUI","text":"<p>"},{"location":"characterDefenitionUI/#characterdefenitionui","title":"characterDefenitionUI","text":"<p>  === Author: Assaf Ben Zur ===  This tool was created to assist users in creating humanIK character definitions.  Also, in conjunction with Block, create an animation puppet for predifined skeleton templates.  Use pre-existing prests, as well as create your own presets, to characterize any skeleton in seconds.  Many workflows and scenrios are covered within this tool, please refer to Mansur-Rig's You-Tube channel for a full video guide demonstratig all of them."},{"location":"characterDefenitionUI/#classes","title":"Classes","text":""},{"location":"characterDefenitionUI/#MnsCharacterDefenitionUI TARGET","title":"characterDefenitionUI","text":""},{"location":"characterDefenitionUI/#mnscharacterdefenitionui-class","title":"MnsCharacterDefenitionUI [Class]","text":"<p>  Main UI Class  Constructor:  MnsCharacterDefenitionUI(parent(str) ; [default: mnsUIUtils.get_maya_window()]) Inherits from:  form_class, base_class Class Members:   <ul> <ul> <li>presetsDir</li> <li>charDefPresets</li> <li>charDefData</li> <li>blockNameSpace</li> <li>targetNameSpace</li> </ul> Methods:  <ul> <li>addRowToTable  [method] <li>clearCell  [method] <li>connectSignals  [method] <li>createHIKSlotsMenu  [method] <li>clearRow  [method] <li>drawData  [method] <li>exportPreset  [method] <li>gatherCharDefData  [method] <li>getNamespaceBasedOnMode  [method] <li>importFromFile  [method] <li>importPreset  [method] <li>initializeUI  [method] <li>initView  [method] <li>initPresets  [method] <li>loadSelectedToCell  [method] <li>loadHikSlotToSelectedCells  [method] <li>loadNameSpace  [method] <li>loadWindow  [method] <li>linkHikMenuAction  [method] <li>removeRowFromTable  [method] <li>resetUI  [method] <li>editMenu  [method] <li>filterView  [method] <li>valueEdit  [method] <li>updateNameSpaceVars  [method] <li>updateSceneSelectionBasedOnUIState  [method] <li>setNameBoxStateBasedOnMode  [method]"},{"location":"characterDefenitionUI/#mnscharacterdefenitionui-methods","title":"MnsCharacterDefenitionUI  methods","text":"<p>"},{"location":"characterDefenitionUI/#addRowToTableTARGET","title":"characterDefenitionUI","text":"addRowToTable  [MnsCharacterDefenitionUI  class method]  Add a new empty row trigger. Constructor:  addRowToTable(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"characterDefenitionUI/#clearCellTARGET","title":"characterDefenitionUI","text":"clearCell  [MnsCharacterDefenitionUI  class method]  Clear cell trigger. Constructor:  clearCell(self, position) Return:  None Arguments:   <ul> <li>self</li> <li>position</li> </ul> Optional Arguments:"},{"location":"characterDefenitionUI/#connectSignalsTARGET","title":"characterDefenitionUI","text":"connectSignals  [MnsCharacterDefenitionUI  class method]  Connect all UI signals Constructor:  connectSignals(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"characterDefenitionUI/#createHIKSlotsMenuTARGET","title":"characterDefenitionUI","text":"createHIKSlotsMenu  [MnsCharacterDefenitionUI  class method]  Create the predifined HIK context menu structure. Constructor:  createHIKSlotsMenu(self, rootMenuItem, position) Return:  None Arguments:   <ul> <li>self</li> <li>rootMenuItem</li> <li>position</li> </ul> Optional Arguments:"},{"location":"characterDefenitionUI/#clearRowTARGET","title":"characterDefenitionUI","text":"clearRow  [MnsCharacterDefenitionUI  class method]  Delete Row trigger. Constructor:  clearRow(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"characterDefenitionUI/#drawDataTARGET","title":"characterDefenitionUI","text":"drawData  [MnsCharacterDefenitionUI  class method]  Draw gathered data into the UI. Constructor:  drawData(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"characterDefenitionUI/#exportPresetTARGET","title":"characterDefenitionUI","text":"exportPreset  [MnsCharacterDefenitionUI  class method]  Export preset to file trigger. Constructor:  exportPreset(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"characterDefenitionUI/#gatherCharDefDataTARGET","title":"characterDefenitionUI","text":"gatherCharDefData  [MnsCharacterDefenitionUI  class method]  Gather character definition data from UI into a python dict. Constructor:  gatherCharDefData(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"characterDefenitionUI/#getNamespaceBasedOnModeTARGET","title":"characterDefenitionUI","text":"getNamespaceBasedOnMode  [MnsCharacterDefenitionUI  class method]  Get relevant namespace inpit based on mode. mode 0 = Block name-space mode 1 = Target name-space. Constructor:  getNamespaceBasedOnMode(self, mode = 0) Return:  None Arguments:   <ul> <li>self</li> <li>mode(int) ; [default: 0]</li> </ul> Optional Arguments:"},{"location":"characterDefenitionUI/#importFromFileTARGET","title":"characterDefenitionUI","text":"importFromFile  [MnsCharacterDefenitionUI  class method]  Import preset from file trigger. Constructor:  importFromFile(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"characterDefenitionUI/#importPresetTARGET","title":"characterDefenitionUI","text":"importPreset  [MnsCharacterDefenitionUI  class method]  Import preset trigger. Constructor:  importPreset(self, kwargs) Return:  None Arguments:   <ul> <li>self</li> <li>kwargs</li> </ul> Optional Arguments:"},{"location":"characterDefenitionUI/#initializeUITARGET","title":"characterDefenitionUI","text":"initializeUI  [MnsCharacterDefenitionUI  class method]  Initialize UI Data. Constructor:  initializeUI(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"characterDefenitionUI/#initViewTARGET","title":"characterDefenitionUI","text":"initView  [MnsCharacterDefenitionUI  class method]  Initialize UI default display state. Constructor:  initView(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"characterDefenitionUI/#initPresetsTARGET","title":"characterDefenitionUI","text":"initPresets  [MnsCharacterDefenitionUI  class method]  Initialize existing Mansur-Rig presets that are delivered with the product and update the UI list. Constructor:  initPresets(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"characterDefenitionUI/#loadSelectedToCellTARGET","title":"characterDefenitionUI","text":"loadSelectedToCell  [MnsCharacterDefenitionUI  class method]  Load scene selection to cell trigger. Constructor:  loadSelectedToCell(self, position) Return:  None Arguments:   <ul> <li>self</li> <li>position</li> </ul> Optional Arguments:"},{"location":"characterDefenitionUI/#loadHikSlotToSelectedCellsTARGET","title":"characterDefenitionUI","text":"loadHikSlotToSelectedCells  [MnsCharacterDefenitionUI  class method]  Load selected HIK slot into selected cell trigger. Constructor:  loadHikSlotToSelectedCells(self, text, position) Return:  None Arguments:   <ul> <li>self</li> <li>text</li> <li>position</li> </ul> Optional Arguments:"},{"location":"characterDefenitionUI/#loadNameSpaceTARGET","title":"characterDefenitionUI","text":"loadNameSpace  [MnsCharacterDefenitionUI  class method]  Load selected namespace trigger. Constructor:  loadNameSpace(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"characterDefenitionUI/#loadWindowTARGET","title":"characterDefenitionUI","text":"loadWindow  [MnsCharacterDefenitionUI  class method]  Main UI load Constructor:  loadWindow(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"characterDefenitionUI/#linkHikMenuActionTARGET","title":"characterDefenitionUI","text":"linkHikMenuAction  [MnsCharacterDefenitionUI  class method]  Procedural menu items action linking to action. Constructor:  linkHikMenuAction(self, menuItem, position) Return:  None Arguments:   <ul> <li>self</li> <li>menuItem</li> <li>position</li> </ul> Optional Arguments:"},{"location":"characterDefenitionUI/#removeRowFromTableTARGET","title":"characterDefenitionUI","text":"removeRowFromTable  [MnsCharacterDefenitionUI  class method]  Remove Row trigger. Constructor:  removeRowFromTable(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"characterDefenitionUI/#resetUITARGET","title":"characterDefenitionUI","text":"resetUI  [MnsCharacterDefenitionUI  class method]  Reset the UI to default state. Constructor:  resetUI(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"characterDefenitionUI/#editMenuTARGET","title":"characterDefenitionUI","text":"editMenu  [MnsCharacterDefenitionUI  class method]  Right-Click/Context Menu open trigger. Create a menu based on the right click position and column, and connect all actions to their related triggers. Constructor:  editMenu(self, position) Return:  None Arguments:   <ul> <li>self</li> <li>position</li> </ul> Optional Arguments:"},{"location":"characterDefenitionUI/#filterViewTARGET","title":"characterDefenitionUI","text":"filterView  [MnsCharacterDefenitionUI  class method]  Search trigger. Filter the main treeWidget list based on the input filter text. Constructor:  filterView(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"characterDefenitionUI/#valueEditTARGET","title":"characterDefenitionUI","text":"valueEdit  [MnsCharacterDefenitionUI  class method]  TreeWidget Edit trigger Constructor:  valueEdit(self, item, column) Return:  None Arguments:   <ul> <li>self</li> <li>item</li> <li>column</li> </ul> Optional Arguments:"},{"location":"characterDefenitionUI/#updateNameSpaceVarsTARGET","title":"characterDefenitionUI","text":"updateNameSpaceVars  [MnsCharacterDefenitionUI  class method]  Update the class member variables for both namespaces. Constructor:  updateNameSpaceVars(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"characterDefenitionUI/#updateSceneSelectionBasedOnUIStateTARGET","title":"characterDefenitionUI","text":"updateSceneSelectionBasedOnUIState  [MnsCharacterDefenitionUI  class method]  Update the current Maya scene selection based on the selected items in the UI. In case the \"update selection\" checkbox isn't checked, this will not execute and selection will not be updated. Constructor:  updateSceneSelectionBasedOnUIState(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"characterDefenitionUI/#setNameBoxStateBasedOnModeTARGET","title":"characterDefenitionUI","text":"setNameBoxStateBasedOnMode  [MnsCharacterDefenitionUI  class method]  set the character name line-edit state base on the current UI state. Constructor:  setNameBoxStateBasedOnMode(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"characterDefenitionUI/#defenitions","title":"Defenitions","text":""},{"location":"characterDefenitionUI/#loadcharacterdefenitionui","title":"loadCharacterDefenitionUI","text":"<p>  Load the Charecter Definition UI from globals, avoid UI duplication.  Constructor:  loadCharacterDefenitionUI() Return:  None Arguments:   Keyword Arguments:   </p>"},{"location":"chassis/","title":"Chassis","text":"<p>"},{"location":"chassis/#chassis","title":"chassis","text":"<p>  Author: Asaf Ben-Zur  Best used for: chassis  This module will yield four corner controls, which will be avaraged determine the main control's translation and orientation.   The aim of this module is creating an easy to use control for a chassis orientation on a vehicle.  Using the four corner controls, the main joint will be avaraged to detrmine the best orientation and translation for the module.  Best used alongside geometry constraints to follow a ground mesh for automatic orientation and translation of vehicles."},{"location":"chassis/#defenitions","title":"Defenitions","text":""},{"location":"chassis/#construct","title":"construct","text":"<p> Constructor:  construct(mansur, MnsBuildModule, kwargs) Return:   list (controls), dict (internalSpaces) Arguments:   <ul> <li>mansur</li> <li>MnsBuildModule</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"chassis/#customguides","title":"customGuides","text":"<p> Constructor:  customGuides(mansur, builtGuides) Return:  None Arguments:   <ul> <li>mansur</li> <li>builtGuides</li> </ul> Keyword Arguments:   </p>"},{"location":"chassis_settings/","title":"Chassis settings","text":"<p>"},{"location":"chassis_settings/#chassis-settings","title":"chassis Settings","text":"<p>  Author: Asaf Ben-Zur  Best used for: chassis  This module will yield four corner controls, which will be avaraged determine the main control's translation and orientation.   The aim of this module is creating an easy to use control for a chassis orientation on a vehicle.  Using the four corner controls, the main joint will be avaraged to detrmine the best orientation and translation for the module.  Best used alongside geometry constraints to follow a ground mesh for automatic orientation and translation of vehicles.    </p>"},{"location":"chassis_settings/#attributes","title":"Attributes","text":""},{"location":"chassis_settings/#globalsettings","title":"GlobalSettings","text":"<p>Attribute NameDefaultDescription forwardAxis 2 Forward direction of the vehicle. This will determine the up direction for the slave orientation. pivotsControlShape diamond Chasis pivots control shape slaveControlShape cube Main slave control shape"},{"location":"chassis_settings/#groundcontrols","title":"groundControls","text":"<p>Attribute NameDefaultDescription doGroundCtrls False Create ground controls groundControlShape arrow ground controls shape"},{"location":"cnsTool/","title":"cnsTool","text":"<p>"},{"location":"cnsTool/#cnstool","title":"cnsTool","text":"<p>  === Author: Assaf Ben Zur ==="},{"location":"cnsTool/#classes","title":"Classes","text":""},{"location":"cnsTool/#MnsCnsTool TARGET","title":"cnsTool","text":""},{"location":"cnsTool/#mnscnstool-class","title":"MnsCnsTool [Class]","text":"<p>  Main UI Class  Constructor:  MnsCnsTool(parent(str) ; [default: mnsUIUtils.get_maya_window()]) Inherits from:  form_class, base_class Class Members:   <ul> <ul> <li>rigTops</li> <li>existingCnsDict</li> </ul> Methods:  <ul> <li>createCnsForSelection  [method] <li>initializeUI  [method] <li>removeCnsFromSelection  [method] <li>selectCnsFromTree  [method] <li>connectSignals  [method] <li>loadWindow  [method]"},{"location":"cnsTool/#mnscnstool-methods","title":"MnsCnsTool  methods","text":"<p>"},{"location":"cnsTool/#createCnsForSelectionTARGET","title":"cnsTool","text":"createCnsForSelection  [MnsCnsTool  class method]  Constructor:  createCnsForSelection(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"cnsTool/#initializeUITARGET","title":"cnsTool","text":"initializeUI  [MnsCnsTool  class method]  Constructor:  initializeUI(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"cnsTool/#removeCnsFromSelectionTARGET","title":"cnsTool","text":"removeCnsFromSelection  [MnsCnsTool  class method]  Constructor:  removeCnsFromSelection(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"cnsTool/#selectCnsFromTreeTARGET","title":"cnsTool","text":"selectCnsFromTree  [MnsCnsTool  class method]  Constructor:  selectCnsFromTree(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"cnsTool/#connectSignalsTARGET","title":"cnsTool","text":"connectSignals  [MnsCnsTool  class method]  Connect all UI signals Constructor:  connectSignals(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"cnsTool/#loadWindowTARGET","title":"cnsTool","text":"loadWindow  [MnsCnsTool  class method]  Main UI load Constructor:  loadWindow(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"cnsTool/#defenitions","title":"Defenitions","text":""},{"location":"cnsTool/#loadcnstool","title":"loadCnsTool","text":"<p>  Load the cns tool UI from globals, avoid UI duplication.  Constructor:  loadCnsTool() Return:  None Arguments:   Keyword Arguments:   </p>"},{"location":"controlShapes/","title":"controlShapes","text":"<p>"},{"location":"controlShapes/#controlshapes","title":"controlShapes","text":"<p>  === Author: Assaf Ben Zur ===  Core control shapes creation function assembly.  A main CtrlCreate function calls a veriaty of pre-defined shape creation, then handles them"},{"location":"controlShapes/#defenitions","title":"Defenitions","text":""},{"location":"controlShapes/#arrowdodecagonshapecreate","title":"arrowDodecagonShapeCreate","text":"<p> Constructor:  arrowDodecagonShapeCreate(kwargs) Return:  None Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"controlShapes/#arrowshapecreate","title":"arrowShapeCreate","text":"<p> Constructor:  arrowShapeCreate(kwargs) Return:  None Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"controlShapes/#arrowsquareshapecreate","title":"arrowSquareShapeCreate","text":"<p> Constructor:  arrowSquareShapeCreate(kwargs) Return:  None Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"controlShapes/#batchcreateallcontrolshapes","title":"batchCreateAllControlShapes","text":"<p> Constructor:  batchCreateAllControlShapes(kwargs) Return:   list (MnsNameStd, created shapes) Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:   <ul> <li>side(str) ; [default: c]</li> <li>color(tuple) ; [default: (0.0, 1.0, 0.0)]</li> </ul>"},{"location":"controlShapes/#batchcreateallcontrolshapesicons","title":"batchCreateAllControlShapesIcons","text":"<p> Constructor:  batchCreateAllControlShapesIcons() Return:  None Arguments:   Keyword Arguments:   </p>"},{"location":"controlShapes/#bubblepinshapecreate","title":"bubblePinShapeCreate","text":"<p> Constructor:  bubblePinShapeCreate(kwargs) Return:  None Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"controlShapes/#circleshapecreate","title":"circleShapeCreate","text":"<p> Constructor:  circleShapeCreate(kwargs) Return:  None Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:   <ul> <li>sections(int) ; [default: 8]</li> </ul>"},{"location":"controlShapes/#coneshapecreate","title":"coneShapeCreate","text":"<p> Constructor:  coneShapeCreate(kwargs) Return:  None Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"controlShapes/#createmirrorgroup","title":"createMirrorGroup","text":"<p> Constructor:  createMirrorGroup(nameStd, symmetryType = 0) Return:  None Arguments:   <ul> <li>nameStd</li> <li>symmetryType(int) ; [default: 0]</li> </ul> Keyword Arguments:   </p>"},{"location":"controlShapes/#createoffsetrigmasterattrfortransform","title":"createOffsetRigMasterAttrForTransform","text":"<p> Constructor:  createOffsetRigMasterAttrForTransform(ctrl = None, kwargs) Return:  None Arguments:   <ul> <li>ctrl(str) ; [default: None]</li> <li>kwargs</li> </ul> Keyword Arguments:   <ul> <li>offsetRigMaster(str) ; [default: None] - If passed in, an attribute connecting the master joint to the control will be created.</li> </ul>"},{"location":"controlShapes/#createremotecontrolstylectrl","title":"createRemoteControlStyleCtrl","text":"<p>  creates a frames ui remote-control style ctrl based on the input params.  Constructor:  createRemoteControlStyleCtrl(kwargs) Return:   MnsNameStd (ctrl), MnsNameStd (uiOffsetGrp), MnsNameStd (Frame) Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:   <ul> <li>horizontalMin(float) ; [default: -1.0]</li> <li>horizontalMax(float) ; [default: 1.0]</li> <li>verticalMin(float) ; [default: -1.0]</li> <li>verticalMax(float) ; [default: 1.0]</li> <li>bodySuffix(str)</li> <li>uiScale(float) ; [default: 1.0]</li> </ul>"},{"location":"controlShapes/#crossshapecreate","title":"crossShapeCreate","text":"<p> Constructor:  crossShapeCreate(kwargs) Return:  None Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"controlShapes/#ctrlcreate","title":"ctrlCreate","text":"<p>  Main creation function.  This function takes user defined parameters and creates a ctrl transform node following the mns naming convention.  Based on the choice passed in, a shape node will be created with the shape selected, and will be parented under the transform ceated.  Then a color selected will be assigned to it.  The ctrl can be set to be created along all axes and in every color.  The default color is white when used as standalone, and based on the rig's global color coding defined- based on the side flag.  Constructor:  ctrlCreate(kwargs) Return:  MnsNameStd (MnsNameStd class instance containing all info for the new node created) Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:   <ul> <li>side(str) ; [default: side] - side flag</li> <li>body(str) ; [default: body] - Node's name body</li> <li>alpha(str) ; [default: alpha] - Node's Alpha id</li> <li>id(str) ; [default: id] - Node's id</li> <li>isFacial(bool)</li> <li>bodySuffix(str)</li> <li>incrementAlpha(bool) - In case of a 'free' creation, if True will name the node to the first possible name- searching for new Alpha instead of the ID</li> <li>ctrlType(str) ; [default: ctrl]</li> <li>createBlkClassID(bool) ; [default: True]</li> <li>createBlkCtrlTypeID(bool) ; [default: True]</li> <li>blkCtrlTypeID(int)</li> <li>customParentTransform(str)</li> <li>skipColor(bool)</li> <li>createOffsetGrp(bool)</li> <li>createSpaceSwitchGroup(bool)</li> <li>symmetryType(int)</li> <li>doMirror(bool)</li> <li>forceMirrorGrp(bool)</li> <li>parentNode(str) ; [default: None]</li> <li>chennelControl(str) ; [default: None]</li> <li>controlShape(str) ; [default: circle] - Control's NURBS shape</li> <li>scale(float) ; [default: 1.0] - Ctrl scale. Relative to global settings.</li> <li>color(tuple) ; [default: (1.0, 1.0, 1.0)] - Shape's color</li> <li>alongAxis(int) ; [default: 1] - Along which axis to create the shape</li> <li>matchTransform(str) - if not empty, look for a node within the scene matching the string specefied. If found, match it's transforms.</li> <li>freezeScale(bool)</li> <li>matchScale(bool)</li> <li>matchPosition(str) - if not empty, look for a node within the scene matching the string specefied. If found, match it's position.</li> <li>matchOrientation(str) - if not empty, look for a node within the scene matching the string specefied. If found, match it's Orientation.</li> <li>sections(int) ; [default: 1] - Aplicable only for circle creation</li> <li>offsetRigMaster(str) ; [default: None] - If passed in, an attribute connecting the master joint to the control will be created.</li> </ul>"},{"location":"controlShapes/#cubeshapecreate","title":"cubeShapeCreate","text":"<p> Constructor:  cubeShapeCreate(kwargs) Return:  None Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"controlShapes/#curvedfourarrowshapecreate","title":"curvedFourArrowShapeCreate","text":"<p> Constructor:  curvedFourArrowShapeCreate(kwargs) Return:  None Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"controlShapes/#cylindershapecreate","title":"cylinderShapeCreate","text":"<p> Constructor:  cylinderShapeCreate(kwargs) Return:  None Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"controlShapes/#dialroundshapecreate","title":"dialRoundShapeCreate","text":"<p> Constructor:  dialRoundShapeCreate(kwargs) Return:  None Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"controlShapes/#dialshapecreate","title":"dialShapeCreate","text":"<p> Constructor:  dialShapeCreate(kwargs) Return:  None Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"controlShapes/#dialsquareshapecreate","title":"dialSquareShapeCreate","text":"<p> Constructor:  dialSquareShapeCreate(kwargs) Return:  None Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"controlShapes/#diamondshapecreate","title":"diamondShapeCreate","text":"<p> Constructor:  diamondShapeCreate(kwargs) Return:  None Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"controlShapes/#directioncircle","title":"directionCircle","text":"<p> Constructor:  directionCircle(kwargs) Return:  None Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"controlShapes/#directioncubeshape","title":"directionCubeShape","text":"<p> Constructor:  directionCubeShape(kwargs) Return:  None Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"controlShapes/#directiondiamond","title":"directionDiamond","text":"<p> Constructor:  directionDiamond(kwargs) Return:  None Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"controlShapes/#directionsphereshape","title":"directionSphereShape","text":"<p> Constructor:  directionSphereShape(kwargs) Return:  None Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"controlShapes/#dodecagonshapecreate","title":"dodecagonShapeCreate","text":"<p> Constructor:  dodecagonShapeCreate(kwargs) Return:  None Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"controlShapes/#doublearrowshapecreate","title":"doubleArrowShapeCreate","text":"<p> Constructor:  doubleArrowShapeCreate(kwargs) Return:  None Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"controlShapes/#flatdiamondrootshapecreate","title":"flatDiamondRootShapeCreate","text":"<p> Constructor:  flatDiamondRootShapeCreate(kwargs) Return:  None Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"controlShapes/#flatdiamondshapecreate","title":"flatDiamondShapeCreate","text":"<p> Constructor:  flatDiamondShapeCreate(kwargs) Return:  None Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"controlShapes/#fourarrowshapecreate","title":"fourArrowShapeCreate","text":"<p> Constructor:  fourArrowShapeCreate(kwargs) Return:  None Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"controlShapes/#guidesrootshape","title":"guidesRootShape","text":"<p> Constructor:  guidesRootShape(kwargs) Return:  None Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"controlShapes/#hexagonshapecreate","title":"hexagonShapeCreate","text":"<p> Constructor:  hexagonShapeCreate(kwargs) Return:  None Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"controlShapes/#lightsphereshapecreate","title":"lightSphereShapeCreate","text":"<p> Constructor:  lightSphereShapeCreate(kwargs) Return:  None Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"controlShapes/#octagonshapecreate","title":"octagonShapeCreate","text":"<p> Constructor:  octagonShapeCreate(kwargs) Return:  None Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"controlShapes/#pickshapecreate","title":"pickShapeCreate","text":"<p> Constructor:  pickShapeCreate(kwargs) Return:  None Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"controlShapes/#pinshapecreate","title":"pinShapeCreate","text":"<p> Constructor:  pinShapeCreate(kwargs) Return:  None Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:   <ul> <li>light(bool) ; [default: True]</li> </ul>"},{"location":"controlShapes/#pinchedcircleshapecreate","title":"pinchedCircleShapeCreate","text":"<p> Constructor:  pinchedCircleShapeCreate(kwargs) Return:  None Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"controlShapes/#plusshapecreate","title":"plusShapeCreate","text":"<p> Constructor:  plusShapeCreate(kwargs) Return:  None Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"controlShapes/#pointarrowshapecreate","title":"pointArrowShapeCreate","text":"<p> Constructor:  pointArrowShapeCreate(kwargs) Return:  None Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"controlShapes/#puppetrootshapecreate","title":"puppetRootShapeCreate","text":"<p> Constructor:  puppetRootShapeCreate(kwargs) Return:  None Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"controlShapes/#pyramidshapecreate","title":"pyramidShapeCreate","text":"<p> Constructor:  pyramidShapeCreate(kwargs) Return:  None Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"controlShapes/#sphereshapecreate","title":"sphereShapeCreate","text":"<p> Constructor:  sphereShapeCreate(kwargs) Return:  None Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"controlShapes/#squareroundshapecreate","title":"squareRoundShapeCreate","text":"<p> Constructor:  squareRoundShapeCreate(kwargs) Return:  None Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"controlShapes/#squareshapecreate","title":"squareShapeCreate","text":"<p> Constructor:  squareShapeCreate(kwargs) Return:  None Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"controlShapes/#squarewithmiddividersshapecreate","title":"squareWithMidDividersShapeCreate","text":"<p> Constructor:  squareWithMidDividersShapeCreate(kwargs) Return:  None Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"controlShapes/#teardropshapecreate","title":"teardropShapeCreate","text":"<p> Constructor:  teardropShapeCreate(kwargs) Return:  None Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"controlShapes/#textshapecreate","title":"textShapeCreate","text":"<p> Constructor:  textShapeCreate(text = \"\") Return:  None Arguments:   <ul> <li>text(str) ; [default: \"\"]</li> </ul> Keyword Arguments:   </p>"},{"location":"controlShapes/#triangleshapecreate","title":"triangleShapeCreate","text":"<p> Constructor:  triangleShapeCreate(kwargs) Return:  None Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"controlShapes/#triplearrowshapecreate","title":"tripleArrowShapeCreate","text":"<p> Constructor:  tripleArrowShapeCreate(kwargs) Return:  None Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"curveAttachment/","title":"curveAttachment","text":"<p>"},{"location":"curveAttachment/#curveattachment","title":"curveAttachment","text":"<p>  Author: Asaf Ben-Zur  Best used for: Sliding doors, curtains  This is a simple module that allows a control attachment to a given curve.  The attachment can also be created with an offset to current position, as well as some attachment modes and up modes.  Use this module in case you need to attach a control or joint to a curve"},{"location":"curveAttachment/#defenitions","title":"Defenitions","text":""},{"location":"curveAttachment/#construct","title":"construct","text":"<p> Constructor:  construct(mansur, MnsBuildModule, kwargs) Return:   list (controls), dict (internalSpaces) Arguments:   <ul> <li>mansur</li> <li>MnsBuildModule</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"curveAttachment_settings/","title":"curveAttachment settings","text":"<p>"},{"location":"curveAttachment_settings/#curveattachment-settings","title":"curveAttachment Settings","text":"<p>  Author: Asaf Ben-Zur  Best used for: Sliding doors, curtains  This is a simple module that allows a control attachment to a given curve.  The attachment can also be created with an offset to current position, as well as some attachment modes and up modes.  Use this module in case you need to attach a control or joint to a curve  </p>"},{"location":"curveAttachment_settings/#attributes","title":"Attributes","text":"<p>symmetryType 0 Choose the mirror type for right side controls </p>"},{"location":"curveAttachment_settings/#globalsettings","title":"GlobalSettings","text":"<p>Attribute NameDefaultDescription controlShape arrow Control shape attachmentCurve Curve to attach to. attachmentUpCurve Up curve to use. This curve will be used to determine the up vector of the created ctrl. In case this isn't used, global module orient will be used. objectOrientUpAxis 0 In case no up curve is used, this global module rotation axis will be used attachmentMode 0 Curve sampling mode. Please refer to the documentation of mnsPointsOnCurve node to learn more about curve each mode maintainOffset True Whether to maintain control to curve offset of construction. In case this is True, the guide position will be maintained. In case this is False, the ctrl will be created at U0 position of the input attachment curve. channelControl T R S X v v v Y v v v Z v v v Control channel-box settings"},{"location":"curveZip/","title":"curveZip","text":"<p>"},{"location":"curveZip/#curvezip","title":"curveZip","text":"<p>  Author: Asaf Ben-Zur  Best used for:   This module is deprecated. Please use CurveZipB."},{"location":"curveZip/#defenitions","title":"Defenitions","text":""},{"location":"curveZip/#connectcustomguidestopoc","title":"connectCustomGuidesToPoc","text":"<p> Constructor:  connectCustomGuidesToPoc(mansur, guides, cGuides) Return:  None Arguments:   <ul> <li>mansur</li> <li>guides</li> <li>cGuides</li> </ul> Keyword Arguments:   </p>"},{"location":"curveZip/#construct","title":"construct","text":"<p> Constructor:  construct(mansur, MnsBuildModule, kwargs) Return:   list (controls), dict (internalSpaces) Arguments:   <ul> <li>mansur</li> <li>MnsBuildModule</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"curveZip/#createbindcurvesfrommodulesettings","title":"createBindCurvesFromModuleSettings","text":"<p> Constructor:  createBindCurvesFromModuleSettings(mansur, rootGuide = None) Return:  None Arguments:   <ul> <li>mansur</li> <li>rootGuide(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"curveZip/#createtangentsforctrl","title":"createTangentsForCtrl","text":"<p> Constructor:  createTangentsForCtrl(mansur, MnsBuildModule, ctrl, btcNode, cornerACtrl, cornerBCtrl, nameID, doCornerTangents, mainCtrl) Return:  None Arguments:   <ul> <li>mansur</li> <li>MnsBuildModule</li> <li>ctrl</li> <li>btcNode</li> <li>cornerACtrl</li> <li>cornerBCtrl</li> <li>nameID</li> <li>doCornerTangents</li> <li>mainCtrl</li> </ul> Keyword Arguments:   </p>"},{"location":"curveZip/#customguides","title":"customGuides","text":"<p> Constructor:  customGuides(mansur, builtGuides) Return:  None Arguments:   <ul> <li>mansur</li> <li>builtGuides</li> </ul> Keyword Arguments:   </p>"},{"location":"curveZip/#deconstruct","title":"deconstruct","text":"<p> Constructor:  deconstruct(mansur, MnsBuildModule, kwargs) Return:  None Arguments:   <ul> <li>mansur</li> <li>MnsBuildModule</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"curveZip/#getedgesfrommodulesettings","title":"getEdgesFromModuleSettings","text":"<p> Constructor:  getEdgesFromModuleSettings(mansur, rootGuide = None) Return:  None Arguments:   <ul> <li>mansur</li> <li>rootGuide(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"curveZip/#jointstructure","title":"jointStructure","text":"<p> Constructor:  jointStructure(mansur, guides, mnsBuildModule = None, kwargs) Return:  None Arguments:   <ul> <li>mansur</li> <li>guides</li> <li>mnsBuildModule(str) ; [default: None]</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"curveZipB/","title":"curveZipB","text":"<p>"},{"location":"curveZipB/#curvezipb","title":"curveZipB","text":"<p>  Author: Asaf Ben-Zur  Best used for: Eyelids, Eyelashes  This facial module was created to allow adavnced control over eyelids and eyelashes.  Based on settings, this module will create a very flexible control over eyelids, and if choosen (Attachment Curves) to eyelashes on top of the eyelids as well.  The main features of this modules are: Joint positions based on a center matrix (Around the eye), Blink controls, Blink height control, Eyelid tweak controls (dynamic), Zip controls, and much more.  The joint structure of this module will be dictated by input vertices on a given mesh.  Note: Please select upper and lower vertices along a single closed loop"},{"location":"curveZipB/#defenitions","title":"Defenitions","text":""},{"location":"curveZipB/#connectcustomguidestopoc","title":"connectCustomGuidesToPoc","text":"<p> Constructor:  connectCustomGuidesToPoc(mansur, guides, cGuides) Return:  None Arguments:   <ul> <li>mansur</li> <li>guides</li> <li>cGuides</li> </ul> Keyword Arguments:   </p>"},{"location":"curveZipB/#construct","title":"construct","text":"<p> Constructor:  construct(mansur, MnsBuildModule, kwargs) Return:   list (controls), dict (internalSpaces) Arguments:   <ul> <li>mansur</li> <li>MnsBuildModule</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"curveZipB/#createbindcurvesfrommodulesettings","title":"createBindCurvesFromModuleSettings","text":"<p> Constructor:  createBindCurvesFromModuleSettings(mansur, rootGuide = None) Return:  None Arguments:   <ul> <li>mansur</li> <li>rootGuide(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"curveZipB/#createtangentsforctrl","title":"createTangentsForCtrl","text":"<p> Constructor:  createTangentsForCtrl(mansur, MnsBuildModule, ctrl, btcNode, cornerACtrl, cornerBCtrl, nameID, doCornerTangents, mainCtrl) Return:  None Arguments:   <ul> <li>mansur</li> <li>MnsBuildModule</li> <li>ctrl</li> <li>btcNode</li> <li>cornerACtrl</li> <li>cornerBCtrl</li> <li>nameID</li> <li>doCornerTangents</li> <li>mainCtrl</li> </ul> Keyword Arguments:   </p>"},{"location":"curveZipB/#customguides","title":"customGuides","text":"<p> Constructor:  customGuides(mansur, builtGuides) Return:  None Arguments:   <ul> <li>mansur</li> <li>builtGuides</li> </ul> Keyword Arguments:   </p>"},{"location":"curveZipB/#deconstruct","title":"deconstruct","text":"<p> Constructor:  deconstruct(mansur, MnsBuildModule, kwargs) Return:  None Arguments:   <ul> <li>mansur</li> <li>MnsBuildModule</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"curveZipB/#getedgesfrommodulesettings","title":"getEdgesFromModuleSettings","text":"<p> Constructor:  getEdgesFromModuleSettings(mansur, rootGuide = None) Return:  None Arguments:   <ul> <li>mansur</li> <li>rootGuide(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"curveZipB/#jointstructure","title":"jointStructure","text":"<p> Constructor:  jointStructure(mansur, guides, mnsBuildModule = None, kwargs) Return:  None Arguments:   <ul> <li>mansur</li> <li>guides</li> <li>mnsBuildModule(str) ; [default: None]</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"curveZipB_settings/","title":"curveZipB settings","text":"<p>"},{"location":"curveZipB_settings/#curvezipb-settings","title":"curveZipB Settings","text":"<p>  Author: Asaf Ben-Zur  Best used for: Eyelids, Eyelashes  This facial module was created to allow adavnced control over eyelids and eyelashes.  Based on settings, this module will create a very flexible control over eyelids, and if choosen (Attachment Curves) to eyelashes on top of the eyelids as well.  The main features of this modules are: Joint positions based on a center matrix (Around the eye), Blink controls, Blink height control, Eyelid tweak controls (dynamic), Zip controls, and much more.  The joint structure of this module will be dictated by input vertices on a given mesh.  Note: Please select upper and lower vertices along a single closed loop, selecting each section from inner corener to outer corenr.  </p>"},{"location":"curveZipB_settings/#attributes","title":"Attributes","text":"<p>isFacial True Comment wasn't inserted </p>"},{"location":"curveZipB_settings/#globalsettings","title":"GlobalSettings","text":"<p>Attribute NameDefaultDescription upperEdgeVerts [' '] These verticies will be used to build the joint structure for the upper section. Please select a sequence of vertices along the same loop, starting from the inner corner. First and last vertices should match between the upper and lower section, representing a single closed loop. Corner vertices will be present twice- once on the upper section, once on the lower section lowerEdgeVerts [' '] These verticies will be used to build the joint structure for the lower section. Please select a sequence of vertices along the same loop, starting from the inner corner. First and last vertices should match between the upper and lower section, representing a single closed loop. Corner vertices will be present twice- once on the upper section, once on the lower section upCurveOffset 1.0 Offset value for the up curve generation doBindTweak False This is used to create editable curves at guides state, in order to change the bind position for eyelids. This was designed mainly for a closed eye scenario. If you need to tweak the bind position of your mesh pre-construction, check this attribute on. Pre-Construction, skin your mesh then save a bind pose for this module. Then, tweak the curves to their desired construction pose, and save it T pose for this module. You can move between the bind and t shapes by loading bind or t pose ofr this module. aroundCenter True Around center will normalize the result vectors around a given center matrix (module root in this case). This will provide a better range of motion, tranlating the joints around a sphere (assumed from the center matrix). Place your roog guide at the center of the eye (for example) for this to behave as expected curveResolution 24 Resample curve amount midCurveMode 1 Mid curve generation mode midCurveResolution 5 Mid curve generation sampling amount blinkHeight 0.5 Default value for the Blink height. This dictates the height of the Mid-Meet point between the upper and lower sections postSymmetryJntStruct True In case this setting is set to True, an exception will be triggered to re-build this modules joint structure once the module is symmetrized. Normally this shouldn't be changed by the user."},{"location":"curveZipB_settings/#eyelidscontrols","title":"EyelidsControls","text":"<p>Attribute NameDefaultDescription raiseRange 0.5 This value dictates the upper and lower controls opposite direction movement range. uiCtrlsScale 0.15 Scale multiplier for the remote control style controls for upper and lower lids uiCtrlsPositionOffset 1.0 Offset value (Pointing away from the root guide) to offset the remote control style controls doZipControls True Create the Zip controls feature"},{"location":"curveZipB_settings/#tweakccontrols","title":"TweakCcontrols","text":"<p>Attribute NameDefaultDescription doTweakControls True Build the tweak controls feature for this module numTweakControlsPerSection 3 The amount of tweak controls per section (lower and upper) cornersControlShape diamond Tweak corners controls shape tweakersControlShape lightSphere Tweak controls shape tweakCurvesInterpolation 1 Tweak controls interpolation type flipRightX False In some cases, based on the symmetry type set, this modules right side controls may behave abnormally on some axes. If this is your case, use this setting to un-flip the abnormally bahaving controls back to norm for the X axis flipRightY False In some cases, based on the symmetry type set, this modules right side controls may behave abnormally on some axes. If this is your case, use this setting to un-flip the abnormally bahaving controls back to norm for the Y axis flipRightZ False In some cases, based on the symmetry type set, this modules right side controls may behave abnormally on some axes. If this is your case, use this setting to un-flip the abnormally bahaving controls back to norm for the Z axis"},{"location":"curveZipB_settings/#followrotation","title":"FollowRotation","text":"<p>Attribute NameDefaultDescription doFollowRotation False This feture is mainly used for eye configurations. Follow rotation will create a new layer of orientation control, allowing the animator th choose the amount follow desired based on the given eye module input. This is commonly known as Fleshy-Eye jntToFollow The joint orientation to follow horizontalFollow 0.05 Horizontal follow default value verticalFollow 0.1 Vertical follow default value"},{"location":"curveZipB_settings/#upperattachmentcrv","title":"UpperAttachmentCrv","text":"<p>Attribute NameDefaultDescription doUpperAttachment False This feature is mainly used to create another layer of controls for eyelashes. Since eyelashes should always follow the eyelids outline shape, common tendency is to simply skin them to the eyelid joints. Although in some cases, eyelashes control is required or desired. This feature will create a slave curve based controls layer that will allow for eyelash control, on top of the master eyelid solve that drives the main animation upperJntCount 2 The amount of upper-attachment joints to create"},{"location":"curveZipB_settings/#lowerattachmentcrv","title":"LowerAttachmentCrv","text":"<p>Attribute NameDefaultDescription doLowerAttachment False This feature is mainly used to create another layer of controls for eyelashes. Since eyelashes should always follow the eyelids outline shape, common tendency is to simply skin them to the eyelid joints. Although in some cases, eyelashes control is required or desired. This feature will create a slave curve based controls layer that will allow for eyelash control, on top of the master eyelid solve that drives the main animation lowerJntCount 2 The amount of lower-attachment joints to create"},{"location":"curveZip_settings/","title":"curveZip settings","text":"<p>"},{"location":"curveZip_settings/#curvezip-settings","title":"curveZip Settings","text":"<p>  Author: Asaf Ben-Zur  Best used for:   This module is deprecated. Please use CurveZipB.  </p>"},{"location":"curveZip_settings/#attributes","title":"Attributes","text":"<p>isFacial True Comment wasn't inserted </p>"},{"location":"curveZip_settings/#globalsettings","title":"GlobalSettings","text":"<p>Attribute NameDefaultDescription upperEdgeVerts [' '] This module is depreciated, please use curveZipB lowerEdgeVerts [' '] This module is depreciated, please use curveZipB upCurveOffset 1.0 This module is depreciated, please use curveZipB reverseCorners False This module is depreciated, please use curveZipB aroundCenter True This module is depreciated, please use curveZipB curveResolution 24 This module is depreciated, please use curveZipB blinkHeight 0.5 This module is depreciated, please use curveZipB postSymmetryJntStruct True This module is depreciated, please use curveZipB"},{"location":"curveZip_settings/#zipcontrols","title":"ZipControls","text":"<p>Attribute NameDefaultDescription raiseRange 0.5 This module is depreciated, please use curveZipB uiCtrlsScale 0.15 This module is depreciated, please use curveZipB uiCtrlsPositionOffset 0.5 This module is depreciated, please use curveZipB"},{"location":"curveZip_settings/#tweakccontrols","title":"TweakCcontrols","text":"<p>Attribute NameDefaultDescription doTweakControls True This module is depreciated, please use curveZipB numTweakControlsPerSection 3 This module is depreciated, please use curveZipB cornersControlShape diamond This module is depreciated, please use curveZipB tweakersControlShape lightSphere This module is depreciated, please use curveZipB tweakCurvesInterpolation 1 This module is depreciated, please use curveZipB offsetX 20.0 This module is depreciated, please use curveZipB offsetZ 0.0 This module is depreciated, please use curveZipB doTweakTangents False This module is depreciated, please use curveZipB doCornerTangents False This module is depreciated, please use curveZipB"},{"location":"curveZip_settings/#blinktweak","title":"BlinkTweak","text":"<p>Attribute NameDefaultDescription doBlinkTweak True This module is depreciated, please use curveZipB blinkTweakControlShape diamond This module is depreciated, please use curveZipB"},{"location":"curveZip_settings/#followrotation","title":"FollowRotation","text":"<p>Attribute NameDefaultDescription doFollowRotation False This module is depreciated, please use curveZipB jntToFollow This module is depreciated, please use curveZipB horizontalFollow 0.05 This module is depreciated, please use curveZipB verticalFollow 0.1 This module is depreciated, please use curveZipB"},{"location":"curveZip_settings/#upperattachmentcrv","title":"UpperAttachmentCrv","text":"<p>Attribute NameDefaultDescription doUpperAttachment False This module is depreciated, please use curveZipB upperJntCount 2 This module is depreciated, please use curveZipB"},{"location":"curveZip_settings/#lowerattachmentcrv","title":"LowerAttachmentCrv","text":"<p>Attribute NameDefaultDescription doLowerAttachment False This module is depreciated, please use curveZipB lowerJntCount 2 This module is depreciated, please use curveZipB"},{"location":"defSearch/","title":"defSearch","text":"<p>"},{"location":"defSearch/#defsearch","title":"defSearch","text":"<p>  === Author: Assaf Ben Zur ===  Core MNS Utility UI  This UI will allow the user to search though all available function within a given library and build a dynamic UI for it, based on it's arguments and keyword arguments drawen as 'type' QObjects into a new UI window.  This UI class will search thorugh the default library (mns), although has functionallity to add any library into the search.  IMPORTANT: Any given custom library needs to follow the mns code structure convension in order to work and sraw properly. Please refer to some code examples.  The main process of this UI class is:  - Load the UI  - procedurally look through the given libraries and add any found python defenition into the UI list.  - Uppon a 'UI creation' call (via the button or souble-click):  \u00a0\u00a0\u00a0\u00a0- Deconstruct the selected defenition into mandatory arguments and keyword arguments  \u00a0\u00a0\u00a0\u00a0- Build a new UI based on the parameters got.  - Uppon a 'Run' call:  \u00a0\u00a0\u00a0\u00a0- Re-construct the function's argument based on the UI fields and recompile into a string  \u00a0\u00a0\u00a0\u00a0- Call the selected function using the complied arguent string  Features:  - Prefs tab to control the UI's behavior.  - Directory addition  - Indepentent custom '.py' files add  - Library reload  - 'Default Prefs restore'  - Settings export/import  - Function 'pinning' (Global, session independent)  - UI features - Search, Case-Sensative display, Pinned view only, clear all pinns  - 'dev mode':  \u00a0\u00a0\u00a0\u00a0- When set to False (default) the UI call will create a new UI only if it han't been created before-   \u00a0\u00a0\u00a0\u00a0meaning that the UI objects are kept within the UI class, and when closed will not lose their user-set values.   \u00a0\u00a0\u00a0\u00a0When called again, the UI will simply re-load- not re-create to keep previous set values. The function will not be read again to build.  \u00a0\u00a0\u00a0\u00a0When set to True, instead of re-loading of a previously created UI- it will be deleted- and recreated, READING THE FUNCTION AGAIN.  \u00a0\u00a0\u00a0\u00a0This allows the user to re-read a function every time the UI is called- that means that all previous value set will be lost- as the UI rebuilds it will set all items to default value.  \u00a0\u00a0\u00a0\u00a0This gives a very fast way of developing a function- not needing to re-load maya after edit-  \u00a0\u00a0\u00a0\u00a0The UI will rebuild based on any change made to the defenition code, adding any new items or running a different fuctionallity every run call.  \u00a0\u00a0\u00a0\u00a0Use this feature when writing or developing a new fuction."},{"location":"defSearch/#classes","title":"Classes","text":""},{"location":"defSearch/#MnsDefSearch TARGET","title":"defSearch","text":""},{"location":"defSearch/#mnsdefsearch-class","title":"MnsDefSearch [Class]","text":"<p>  Main UI Class  Constructor:  MnsDefSearch(parent(str) ; [default: mnsUIUtils.get_maya_window()]) Inherits from:  form_class, base_class Class Members:   <ul> <ul> <li>pinnedFilePath</li> </ul> Methods:  <ul> <li>initializePinnedDir  [method] <li>clearResults  [method] <li>clearPins  [method] <li>connectSignals  [method] <li>importModules  [method] <li>loadWindow  [method] <li>updateResults  [method] <li>createUI  [method] <li>loadList  [method] <li>addModuleToResults  [method] <li>addPackageToResults  [method] <li>pin  [method] <li>pinnedOnlyView  [method] <li>import_submodules  [method] <li>reloadResults  [method]"},{"location":"defSearch/#mnsdefsearch-methods","title":"MnsDefSearch  methods","text":"<p>"},{"location":"defSearch/#initializePinnedDirTARGET","title":"defSearch","text":"initializePinnedDir  [MnsDefSearch  class method]  Constructor:  initializePinnedDir(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"defSearch/#clearResultsTARGET","title":"defSearch","text":"clearResults  [MnsDefSearch  class method]  Clear Serach method trigger. Constructor:  clearResults(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"defSearch/#clearPinsTARGET","title":"defSearch","text":"clearPins  [MnsDefSearch  class method]  Clear all pinns method trigger. Constructor:  clearPins(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"defSearch/#connectSignalsTARGET","title":"defSearch","text":"connectSignals  [MnsDefSearch  class method]  Connect all UI signals Constructor:  connectSignals(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"defSearch/#importModulesTARGET","title":"defSearch","text":"importModules  [MnsDefSearch  class method]  Import modules wrapper. Constructor:  importModules(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"defSearch/#loadWindowTARGET","title":"defSearch","text":"loadWindow  [MnsDefSearch  class method]  Main UI load Constructor:  loadWindow(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"defSearch/#updateResultsTARGET","title":"defSearch","text":"updateResults  [MnsDefSearch  class method]  Main UI view update method trigger. The UI list will be updated from this method based on the current UI state and prefs Constructor:  updateResults(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"defSearch/#createUITARGET","title":"defSearch","text":"createUI  [MnsDefSearch  class method]  Main dynamic UI creation method trigger based on current selection. Constructor:  createUI(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"defSearch/#loadListTARGET","title":"defSearch","text":"loadList  [MnsDefSearch  class method]  Main list load method. A wrapper to filter all functions based on prefs selected and update the UI. Constructor:  loadList(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"defSearch/#addModuleToResultsTARGET","title":"defSearch","text":"addModuleToResults  [MnsDefSearch  class method]  Module add method trigger. Constructor:  addModuleToResults(self, module)  Return:  None Arguments:   <ul> <li>self</li> <li>module</li> </ul> Optional Arguments:"},{"location":"defSearch/#addPackageToResultsTARGET","title":"defSearch","text":"addPackageToResults  [MnsDefSearch  class method]  Package addition method trigger. Constructor:  addPackageToResults(self, package)    Return:  None Arguments:   <ul> <li>self</li> <li>package</li> </ul> Optional Arguments:"},{"location":"defSearch/#pinTARGET","title":"defSearch","text":"pin  [MnsDefSearch  class method]  Pin call method trigger based on current selection. Constructor:  pin(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"defSearch/#pinnedOnlyViewTARGET","title":"defSearch","text":"pinnedOnlyView  [MnsDefSearch  class method]  Pinned only view trigger method. Constructor:  pinnedOnlyView(self, state) Return:  None Arguments:   <ul> <li>self</li> <li>state</li> </ul> Optional Arguments:"},{"location":"defSearch/#import_submodulesTARGET","title":"defSearch","text":"import_submodules  [MnsDefSearch  class method]  Recursive method to walk thorugh a given package and sub-packages to store all sub-directories within. Constructor:  import_submodules(self, package, recursive=True) Return:  dict Arguments:   <ul> <li>self</li> <li>package</li> <li>recursive(bool) ; [default: True]</li> </ul> Optional Arguments:"},{"location":"defSearch/#reloadResultsTARGET","title":"defSearch","text":"reloadResults  [MnsDefSearch  class method]  Wrapper re-load method. Constructor:  reloadResults(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"defSearch/#defenitions","title":"Defenitions","text":""},{"location":"defSearch/#loaddefsearch","title":"loadDefSearch","text":"<p>  Load the Def Serach UI from globals, avoid UI duplication.  Constructor:  loadDefSearch() Return:  None Arguments:   Keyword Arguments:   </p>"},{"location":"docBuildMansur/","title":"docBuildMansur","text":"<p>"},{"location":"docBuildMansur/#docbuildmansur","title":"docBuildMansur","text":"<p>  === Author: Assaf Ben Zur ===  Core procedural documentation build  Process flow:  Read a given directory  Build a structure based on the os directory given and the folders to filter  Filter only .py files  For each py file:  \u00a0\u00a0\u00a0\u00a0Extract Header (such as this one)  \u00a0\u00a0\u00a0\u00a0Extract Defenition  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Extract Def name and constructor  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Extract Arguments, and Optional Arguments  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Extract return  \u00a0\u00a0\u00a0\u00a0Extract Classes  \u00a0\u00a0\u00a0\u00a0Extract Header  \u00a0\u00a0\u00a0\u00a0Extract Name and constructor  \u00a0\u00a0\u00a0\u00a0Extract inheritence  \u00a0\u00a0\u00a0\u00a0Extract Class members  \u00a0\u00a0\u00a0\u00a0Extract Methods  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Extract Header  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Extract Name and constructor  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Extract Arguments and Optional Arguments  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Extract return  rebuild the yml file given  write the files within the 'docs' directory  This procedural approach for a code documentation build ensures an up-to-date documentation based on code commenting.  No additional actions are neccessery.  This will yeild a readable commented code with will math the documentation 1-to-1.  Also, this will yeild a very \"easy to change\" approach for the documentation generator of choice as well as a 100% cohirent documentation throuout."},{"location":"docBuildMansur/#defenitions","title":"Defenitions","text":""},{"location":"docBuildMansur/#appendmayapluginstoyml","title":"appendMayaPluginsToYml","text":"<p>  Append the Maya-Plugins documentation page into the existing yml struct.  Constructor:  appendMayaPluginsToYml(ymlPath, parentPageName) Return:  None Arguments:   <ul> <li>ymlPath</li> <li>parentPageName</li> </ul> Keyword Arguments:   </p>"},{"location":"docBuildMansur/#builddocitems","title":"buildDocItems","text":"<p>  Main dir build recursive function.  The function builds only directory items, which in turn will be searched for '.py' files, and will be added to the structure only if in contains a direct '.py' within,   or if a directory within comatins one, recursively.  Depth independent.  Constructor:  buildDocItems(dir, rootDir, level, ymlPath, fileLines) Return:  list (yml new file lines)    Arguments:   <ul> <li>dir</li> <li>rootDir</li> <li>level</li> <li>ymlPath</li> <li>fileLines</li> </ul> Keyword Arguments:   </p>"},{"location":"docBuildMansur/#builddocsfordir","title":"buildDocsForDir","text":"<p>  Main build wrapper and the yml file writer wrapper function.  Calls 'buildDocItems' within which in turn build the actual html files within the 'docs' directory.  Finally re-writes the yml file using 'rebuildYmlFile' according to the file structure acquired  Constructor:  buildDocsForDir(mkDocksYmlPath, parentPageName, directory, folders, level = 0)  Return:  None Arguments:   <ul> <li>mkDocksYmlPath</li> <li>parentPageName</li> <li>directory</li> <li>folders</li> <li>level(int) ; [default: 0]</li> </ul> Keyword Arguments:   </p>"},{"location":"docBuildMansur/#buildfiledoc","title":"buildFileDoc","text":"<p>  Main file def.  This is a wrapped def as well as a function one.  Compiles all needed documentation from a given file path.  Will compile Classes, methods, defenitions (icluding all relevant information for each)  This is also the main WRITE defenition. After info assembly the info will be written as a new file, overriding existing ones, to create a new doc page.  Any file doc 'display' is contained within this def.  Constructor:  buildFileDoc(path, ymlPath) Return:  None Arguments:   <ul> <li>path</li> <li>ymlPath</li> </ul> Keyword Arguments:   </p>"},{"location":"docBuildMansur/#buildmansurdocs","title":"buildMansurDocs","text":"<p>  Main wrapper call for the MANSUR directory doc build.   Contains the requested folders within, hard-coded for safety.  Constructor:  buildMansurDocs()  Return:  None Arguments:   Keyword Arguments:   </p>"},{"location":"docBuildMansur/#buildmodsettingsfiledoc","title":"buildModSettingsFileDoc","text":"<p> Constructor:  buildModSettingsFileDoc(path, ymlPath) Return:  None Arguments:   <ul> <li>path</li> <li>ymlPath</li> </ul> Keyword Arguments:   </p>"},{"location":"docBuildMansur/#buildreleasenotespage","title":"buildReleaseNotesPage","text":"<p> Constructor:  buildReleaseNotesPage(mkDocksYmlPath) Return:  None Arguments:   <ul> <li>mkDocksYmlPath</li> </ul> Keyword Arguments:   </p>"},{"location":"docBuildMansur/#buildsubitemsdir","title":"buildSubItemsDir","text":"<p>  Last level recursive function.  This function will call the documentation file build as well as build the last meanu item within the structure.  The final pythonLib item is passed in, as well as the root directory and the current level and the yml path in order to write the new yml lines correctly, depending on the file's level position.  Constructor:  buildSubItemsDir(rootDir, pyLib, level, ymlPath, fileLines)   Return:  list (fileLines) Arguments:   <ul> <li>rootDir</li> <li>pyLib</li> <li>level</li> <li>ymlPath</li> <li>fileLines</li> </ul> Keyword Arguments:   </p>"},{"location":"docBuildMansur/#collectheaderfromcppfile","title":"collectHeaderFromCppFile","text":"<p>  For the given cpp file, extract the header comment.  Constructor:  collectHeaderFromCppFile(cppFullPath = None) Return:  None Arguments:   <ul> <li>cppFullPath(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"docBuildMansur/#commitanddeploydocumentation","title":"commitAndDeployDocumentation","text":"<p> Constructor:  commitAndDeployDocumentation(rootDrive = \"d\", relativeDirectory = \"mansurProject\\mansur-docs\", kwargs) Return:  None Arguments:   <ul> <li>rootDrive(str) ; [default: \"d\"]</li> <li>relativeDirectory(str) ; [default: \"mansurProject\\mansur-docs\"]</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"docBuildMansur/#createplugindocfile","title":"createPluginDocFile","text":"<p>  Create the Maya-Plugins attributes documentation page.  Constructor:  createPluginDocFile(rootBuildPath = \"D/mansurProject/mayaPlugins\", ymlPath = \"D/mansurProject/mansur-docs/mkdocs.yml\") Return:  None Arguments:   <ul> <li>rootBuildPath(str) ; [default: \"D:/mansurProject/mayaPlugins\"]</li> <li>ymlPath(str) ; [default: \"D:/mansurProject/mansur-docs/mkdocs.yml\"]</li> </ul> Keyword Arguments:   </p>"},{"location":"docBuildMansur/#extractattributedefenitionsfromcppfile","title":"extractAttributeDefenitionsFromCppFile","text":"<p>  From the given cpp path given, extract all attribute information.  Constructor:  extractAttributeDefenitionsFromCppFile(cppFullPath = None, buildName = None) Return:   list (inuput attributes), list (output attributes) Arguments:   <ul> <li>cppFullPath(str) ; [default: None]</li> <li>buildName(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"docBuildMansur/#extractclassmembersfrominitsrc","title":"extractClassMembersFromInitSrc","text":"<p>  Extracts class members from a Class' init method source as list  Constructor:  extractClassMembersFromInitSrc(src = []) Return:  list (class members names) Arguments:   <ul> <li>src(list) ; [default: []]</li> </ul> Keyword Arguments:   </p>"},{"location":"docBuildMansur/#extractconstructorvaluesforclass","title":"extractConstructorValuesForClass","text":"<p>  Extracts constructor related values from a class source as list.  Wrapper def.  Extracts both Arguments (flattened) and class members  Constructor:  extractConstructorValuesForClass(src = []) Return:  string (constructor), list (class members) Arguments:   <ul> <li>src(list) ; [default: []]</li> </ul> Keyword Arguments:   </p>"},{"location":"docBuildMansur/#extractdocsforclass","title":"extractDocsForClass","text":"<p>  Wrapped def.  Extracts full documentation from a given class source.  Constructor:  extractDocsForClass(classSrc = []) Return:  string (title), list (header), string (sontructor), string (inherit object), list (class members), string (return)  Arguments:   <ul> <li>classSrc(list) ; [default: []]</li> </ul> Keyword Arguments:   </p>"},{"location":"docBuildMansur/#extractdocsfordef","title":"extractDocsForDef","text":"<p>  Wrapper def for a full doc extraction for a given file souce as list.  extracts return statement, title, header, arguments and optionalArguments  Constructor:  extractDocsForDef(defSrc = []) Return:  string(title), list(header), list(arguments), list(optionalArguments, string(return statement) Arguments:   <ul> <li>defSrc(list) ; [default: []]</li> </ul> Keyword Arguments:   </p>"},{"location":"docBuildMansur/#extractheaderfromsrc","title":"extractHeaderFromSrc","text":"<p>  Extracts a header if exsits from a given elemnt src (Class/Def/Method) as list  Constructor:  extractHeaderFromSrc(src = [], kwargs) Return:  list (header lines) Arguments:   <ul> <li>src(list) ; [default: []]</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"docBuildMansur/#extractmethodsfromclasssrc","title":"extractMethodsfromClassSrc","text":"<p>  Splits a given class source to orginized dict containing it's methods sources  Constructor:  extractMethodsfromClassSrc(src = []) Return:  dict (methodName: methodSource) Arguments:   <ul> <li>src(list) ; [default: []]</li> </ul> Keyword Arguments:   </p>"},{"location":"docBuildMansur/#extractparametersfromdefsrc","title":"extractParametersFromDefSrc","text":"<p>  Extract parametrs from a given def source as list     Extracts arguments and optional arguments  Constructor:  extractParametersFromDefSrc(src = []) Return:  list (arguments) , list(optionalArguments) Arguments:   <ul> <li>src(list) ; [default: []]</li> </ul> Keyword Arguments:   </p>"},{"location":"docBuildMansur/#gatherplugindocumentation","title":"gatherPluginDocumentation","text":"<p>  From the build directory given, extract attributes data directly from the cpp files.  compile the data into input/uotput lists containing dict info for all attributes.  Constructor:  gatherPluginDocumentation(rootBuildPath = \"D/mansurProject/mayaPlugins\") Return:  list (build list containing extracted attributes data) Arguments:   <ul> <li>rootBuildPath(str) ; [default: \"D:/mansurProject/mayaPlugins\"]</li> </ul> Keyword Arguments:   </p>"},{"location":"docBuildMansur/#getparameterformnsarg","title":"getParameterForMnsArg","text":"<p>  Extracts arguments from a given def source lines as list  Constructor:  getParameterForMnsArg(arg) Return:  string (flattened combined arguments) Arguments:   <ul> <li>arg</li> </ul> Keyword Arguments:   </p>"},{"location":"docBuildMansur/#getpylibfordir","title":"getPyLibForDir","text":"<p>  This is a complex recursive function that will assemble a file structure from a given path directory.  The assembly will filter ONLY folders that contain at least one '.py' file, and ONLY '.py' files.  This function returns a dictionary containing the file and folder structure as keys \"dirs\" and \"files\" respectively.  As this is a recusrsive depth independent function, the return will be a complex compound dict, which contains instances of the same dict structure within.  This is dependent of depth obviously-   if a directory contains another directory within- which contains a '.py' the first item \"dirs\" key will contain another dictionary containing a \"dirs\" key and a \"files\" key.  Ultimatly, the first dict \"dirs\" key should contain a single complex dict element.  Constructor:  getPyLibForDir(root) Return:  dict (complex library dict) Arguments:   <ul> <li>root</li> </ul> Keyword Arguments:   </p>"},{"location":"docBuildMansur/#rebuildymlfile","title":"rebuildYmlFile","text":"<p>  yml writer function.  Writes the given yml file passed, with the new 'lines' passed.  The yml 'parentPageName' is passed as an argument - the new 'lines' build is constructed underneeth.  Existing required info is preserved by calculating the parent item indentation level, keeping every item with lower or matching level.  Every item under the parent item passed in a higher level is removed or reconstructed.  Constructor:  rebuildYmlFile(ymlPath, parentPageName, lines) Return:  None Arguments:   <ul> <li>ymlPath</li> <li>parentPageName</li> <li>lines</li> </ul> Keyword Arguments:   </p>"},{"location":"dynUI/","title":"dynUI","text":"<p>"},{"location":"dynUI/#dynui","title":"dynUI","text":"<p>  === Author: Assaf Ben Zur ===  Supporting module for the 'defSearch' UI Class.  This module build the base UI for any function UI build called from the defSerach UI.  The build is based on a .ui base file, constructing an empty UI that will accomedate the dynamic UI elemnts requested.  This module also holds the RunCmd. The run command will filter and get any elemnt value based on it's type and recompile an argument string to pass into the function requested.  A template icon is created as well as an empty 'title' item to be changed after creation base on the function name requested."},{"location":"dynUI/#classes","title":"Classes","text":""},{"location":"dynUI/#MnsDynamicDefUI TARGET","title":"dynUI","text":""},{"location":"dynUI/#mnsdynamicdefui-class","title":"MnsDynamicDefUI [Class]","text":"<p>  Main UI class  Constructor:  MnsDynamicDefUI(defenition,parent(str) ; [default: mnsUIUtils.get_maya_window()],**kwargs) Inherits from:  form_class, base_class Class Members:   <ul> <ul> <li>funObjectCreation</li> <li>closeOnApplyEnabled</li> <li>readOnly</li> <li>defenition</li> <li>arguments</li> <li>optArguments</li> <li>txtFields</li> <li>attrComponentPairing</li> <li>defenitionName</li> <li>title</li> <li>preDefinedArgs</li> <li>sideCB</li> <li>colOverride</li> <li>rigTop</li> <li>split</li> <li>multiTypeEdit</li> <li>batchEdit</li> <li>splitLayout</li> <li>dividerLayout</li> <li>allCollapsible</li> <li>widgetRelationships</li> <li>rootGuide</li> <li>modArgs</li> <li>mainVLayout</li> <li>customRunCommand</li> <li>fullList</li> </ul> Methods:  <ul> <li>destroyUI  [method] <li>resetToFactory  [method] <li>setCollapsibleWidgetsBehaviour  [method] <li>closeEvent  [method] <li>keyPressEvent  [method] <li>toggleAllCollapsed  [method] <li>assembleFeildValues  [method] <li>drawUI  [method] <li>loadUI  [method] <li>runCmd  [method] <li>drawTitle  [method]"},{"location":"dynUI/#mnsdynamicdefui-methods","title":"MnsDynamicDefUI  methods","text":"<p>"},{"location":"dynUI/#destroyUITARGET","title":"dynUI","text":"destroyUI  [MnsDynamicDefUI  class method]  Constructor:  destroyUI(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"dynUI/#resetToFactoryTARGET","title":"dynUI","text":"resetToFactory  [MnsDynamicDefUI  class method]  Constructor:  resetToFactory(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"dynUI/#setCollapsibleWidgetsBehaviourTARGET","title":"dynUI","text":"setCollapsibleWidgetsBehaviour  [MnsDynamicDefUI  class method]  Constructor:  setCollapsibleWidgetsBehaviour(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"dynUI/#closeEventTARGET","title":"dynUI","text":"closeEvent  [MnsDynamicDefUI  class method]  Constructor:  closeEvent(self, event) Return:  None Arguments:   <ul> <li>self</li> <li>event</li> </ul> Optional Arguments:"},{"location":"dynUI/#keyPressEventTARGET","title":"dynUI","text":"keyPressEvent  [MnsDynamicDefUI  class method]  Constructor:  keyPressEvent(self, event) Return:  None Arguments:   <ul> <li>self</li> <li>event</li> </ul> Optional Arguments:"},{"location":"dynUI/#toggleAllCollapsedTARGET","title":"dynUI","text":"toggleAllCollapsed  [MnsDynamicDefUI  class method]  Constructor:  toggleAllCollapsed(self, pressedColWid) Return:  None Arguments:   <ul> <li>self</li> <li>pressedColWid</li> </ul> Optional Arguments:"},{"location":"dynUI/#assembleFeildValuesTARGET","title":"dynUI","text":"assembleFeildValues  [MnsDynamicDefUI  class method]  Assemble all UI values into a list Constructor:  assembleFeildValues(self) Return:  list Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"dynUI/#drawUITARGET","title":"dynUI","text":"drawUI  [MnsDynamicDefUI  class method]  Main UI draw method. Constructor:  drawUI(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"dynUI/#loadUITARGET","title":"dynUI","text":"loadUI  [MnsDynamicDefUI  class method]  Main UI load. Constructor:  loadUI(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"dynUI/#runCmdTARGET","title":"dynUI","text":"runCmd  [MnsDynamicDefUI  class method]  Main method run command trigger. Constructor:  runCmd(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"dynUI/#drawTitleTARGET","title":"dynUI","text":"drawTitle  [MnsDynamicDefUI  class method]  Title set method. Constructor:  drawTitle(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"facialMocapUtils/","title":"facialMocapUtils","text":"<p>"},{"location":"facialMocapUtils/#facialmocaputils","title":"facialMocapUtils","text":"<p>  === Author: Assaf Ben Zur ==="},{"location":"facialMocapUtils/#classes","title":"Classes","text":""},{"location":"facialMocapUtils/#ImportPrefixesDialog TARGET","title":"facialMocapUtils","text":""},{"location":"facialMocapUtils/#importprefixesdialog-class","title":"ImportPrefixesDialog [Class]","text":"<p> Constructor:  ImportPrefixesDialog() Inherits from:  QtWidgets.QDialog, dialog_form_class Class Members:   <ul> Methods:  <ul> <li>getResults  [method]"},{"location":"facialMocapUtils/#importprefixesdialog-methods","title":"ImportPrefixesDialog  methods","text":"<p>"},{"location":"facialMocapUtils/#getResultsTARGET","title":"facialMocapUtils","text":"getResults  [ImportPrefixesDialog  class method]  Constructor:  getResults(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"facialMocapUtils/#defenitions","title":"Defenitions","text":""},{"location":"facialMocapUtils/#collectfmdatafromfile","title":"collectFMDataFromFile","text":"<p> Constructor:  collectFMDataFromFile(filePath = None) Return:  None Arguments:   <ul> <li>filePath(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"facialMocapUtils/#collectinputdatafrompbnode","title":"collectInputDataFromPbNode","text":"<p> Constructor:  collectInputDataFromPbNode(pbNode) Return:  None Arguments:   <ul> <li>pbNode</li> </ul> Keyword Arguments:   </p>"},{"location":"facialMocapUtils/#collecttargetdatafrompbnode","title":"collectTargetDataFromPbNode","text":"<p> Constructor:  collectTargetDataFromPbNode(pbNode) Return:  None Arguments:   <ul> <li>pbNode</li> </ul> Keyword Arguments:   </p>"},{"location":"facialMocapUtils/#connectouttarget","title":"connectOutTarget","text":"<p> Constructor:  connectOutTarget(sourceAttr, targetNode) Return:  None Arguments:   <ul> <li>sourceAttr</li> <li>targetNode</li> </ul> Keyword Arguments:   </p>"},{"location":"facialMocapUtils/#connectoutputs","title":"connectOutputs","text":"<p> Constructor:  connectOutputs(pbNode, kwargs) Return:  None Arguments:   <ul> <li>pbNode</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"facialMocapUtils/#connectsourceattrstopb","title":"connectSourceAttrsToPB","text":"<p> Constructor:  connectSourceAttrsToPB(pbNode, sourceAttrs, kwargs) Return:  None Arguments:   <ul> <li>pbNode</li> <li>sourceAttrs</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"facialMocapUtils/#connecttargettransformstopbnode","title":"connectTargetTransformsToPbNode","text":"<p> Constructor:  connectTargetTransformsToPbNode(pbNode, targetTransforms) Return:  None Arguments:   <ul> <li>pbNode</li> <li>targetTransforms</li> </ul> Keyword Arguments:   </p>"},{"location":"facialMocapUtils/#copypose","title":"copyPose","text":"<p> Constructor:  copyPose(pbNode, flip = False, kwargs) Return:  None Arguments:   <ul> <li>pbNode</li> <li>flip(bool) ; [default: False]</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"facialMocapUtils/#disconnectouttarget","title":"disconnectOutTarget","text":"<p> Constructor:  disconnectOutTarget(sourceAttr, targetNode) Return:  None Arguments:   <ul> <li>sourceAttr</li> <li>targetNode</li> </ul> Keyword Arguments:   </p>"},{"location":"facialMocapUtils/#exportpbdata","title":"exportPBData","text":"<p> Constructor:  exportPBData(pbNode) Return:  None Arguments:   <ul> <li>pbNode</li> </ul> Keyword Arguments:   </p>"},{"location":"facialMocapUtils/#getmirrortransform","title":"getMirrorTransform","text":"<p> Constructor:  getMirrorTransform(sourceTransformName, kwargs) Return:  None Arguments:   <ul> <li>sourceTransformName</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"facialMocapUtils/#gettransformcustomattrs","title":"getTransformCustomAttrs","text":"<p> Constructor:  getTransformCustomAttrs(targetNode) Return:  None Arguments:   <ul> <li>targetNode</li> </ul> Keyword Arguments:   </p>"},{"location":"facialMocapUtils/#importfmdatafromfile","title":"importFMDataFromFile","text":"<p> Constructor:  importFMDataFromFile() Return:  None Arguments:   Keyword Arguments:   </p>"},{"location":"facialMocapUtils/#istransformchanged","title":"isTransformChanged","text":"<p> Constructor:  isTransformChanged(targetTransform) Return:  None Arguments:   <ul> <li>targetTransform</li> </ul> Keyword Arguments:   </p>"},{"location":"facialMocapUtils/#loadpose","title":"loadPose","text":"<p> Constructor:  loadPose(pbNode, poseStorage) Return:  None Arguments:   <ul> <li>pbNode</li> <li>poseStorage</li> </ul> Keyword Arguments:   </p>"},{"location":"facialMocapUtils/#mirrorpose","title":"mirrorPose","text":"<p> Constructor:  mirrorPose(targetTransform, mirrorTransform) Return:  None Arguments:   <ul> <li>targetTransform</li> <li>mirrorTransform</li> </ul> Keyword Arguments:   </p>"},{"location":"facialMocapUtils/#mutesourceattrs","title":"muteSourceAttrs","text":"<p> Constructor:  muteSourceAttrs(pbNode, kwargs) Return:  None Arguments:   <ul> <li>pbNode</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"facialMocapUtils/#refreshpbnode","title":"refreshPbNode","text":"<p> Constructor:  refreshPbNode(pbNode) Return:  None Arguments:   <ul> <li>pbNode</li> </ul> Keyword Arguments:   </p>"},{"location":"facialMocapUtils/#removesourceattrsfrompbnode","title":"removeSourceAttrsFromPbNode","text":"<p> Constructor:  removeSourceAttrsFromPbNode(pbNode, sourceAttrNames = [], kwargs) Return:  None Arguments:   <ul> <li>pbNode</li> <li>sourceAttrNames(list) ; [default: []]</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"facialMocapUtils/#removetargettransformsfrompbnode","title":"removeTargetTransformsFromPbNode","text":"<p> Constructor:  removeTargetTransformsFromPbNode(pbNode, targetTransformsNames = [], kwargs) Return:  None Arguments:   <ul> <li>pbNode</li> <li>targetTransformsNames(list) ; [default: []]</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"facialMocapUtils/#resetpose","title":"resetPose","text":"<p> Constructor:  resetPose(pbNode) Return:  None Arguments:   <ul> <li>pbNode</li> </ul> Keyword Arguments:   </p>"},{"location":"facialMocapUtils/#storepose","title":"storePose","text":"<p> Constructor:  storePose(pbNode, poseName) Return:  None Arguments:   <ul> <li>pbNode</li> <li>poseName</li> </ul> Keyword Arguments:   </p>"},{"location":"foot/","title":"Foot","text":"<p>"},{"location":"foot/#foot","title":"foot","text":"<p>  Author: Asaf Ben-Zur  Best used for: Foot  This Module was created for a foot setup mainly.  Some of it's main features are FK controls, BK (backward kinematics) controls, Roll control, Bank Controls, Heel and Tip controls, Dynamic pivot control.  The best application for this module is placing it under a limb module, which will result in a connected (standard) behaviour."},{"location":"foot/#defenitions","title":"Defenitions","text":""},{"location":"foot/#construct","title":"construct","text":"<p> Constructor:  construct(mansur, MnsBuildModule, kwargs) Return:   list (controls), dict (internalSpaces), MnsNameStd (moduleSpaceAttrHost) Arguments:   <ul> <li>mansur</li> <li>MnsBuildModule</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"foot/#createikmuteforctrl","title":"createIKMuteForCtrl","text":"<p> Constructor:  createIKMuteForCtrl(mansur, ctrl, ikFkAttr, kwargs) Return:  None Arguments:   <ul> <li>mansur</li> <li>ctrl</li> <li>ikFkAttr</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"foot/#customguides","title":"customGuides","text":"<p> Constructor:  customGuides(mansur, builtGuides) Return:  None Arguments:   <ul> <li>mansur</li> <li>builtGuides</li> </ul> Keyword Arguments:   </p>"},{"location":"foot/#jointstructure","title":"jointStructure","text":"<p> Constructor:  jointStructure(mansur, guides, mnsBuildModule = None, kwargs) Return:  None Arguments:   <ul> <li>mansur</li> <li>guides</li> <li>mnsBuildModule(str) ; [default: None]</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"foot/#postconstruct","title":"postConstruct","text":"<p> Constructor:  postConstruct(mansur, MnsBuildModule, kwargs) Return:  None Arguments:   <ul> <li>mansur</li> <li>MnsBuildModule</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"foot_settings/","title":"Foot settings","text":"<p>"},{"location":"foot_settings/#foot-settings","title":"foot Settings","text":"<p>  Author: Asaf Ben-Zur  Best used for: Foot  This Module was created for a foot setup mainly.  Some of it's main features are FK controls, BK (backward kinematics) controls, Roll control, Bank Controls, Heel and Tip controls, Dynamic pivot control.  The best application for this module is placing it under a limb module, which will result in a connected (standard) behaviour.  </p>"},{"location":"foot_settings/#attributes","title":"Attributes","text":""},{"location":"foot_settings/#toesfk","title":"ToesFK","text":"<p>Attribute NameDefaultDescription FKControlShape cube Toes FK controls shape FKChannelControl T R S X v v v Y v v v Z v v v Toes FK controls channel-box settings"},{"location":"foot_settings/#toesbk","title":"ToesBK","text":"<p>Attribute NameDefaultDescription BKControlShape diamond BK (Backward Kinematics) controls shape BKChannelControl T R S X v Y v Z v BK controls channel-box settings"},{"location":"foot_settings/#bankcontrols","title":"BankControls","text":"<p>Attribute NameDefaultDescription bankControlShape lightSphere Bank controls shape bankChannelControl T R S X v Y v Z v bank controls channel-box settings"},{"location":"foot_settings/#rollcontrol","title":"RollControl","text":"<p>Attribute NameDefaultDescription doRollCtrl True If this is True, a foot Roll control will be created rollControlShape cylinder Roll control channel-box settings rollDefaultMaxAngle 60.0 Default Roll maximum limit angle. The roll control is used to roll the entire foot chain, and using an angle value to limit the roll of each section, before rolling the next section. This value will be used as default straightenDefaultAngle 130.0 Default straighten angle. The foot toes will straighten between the max angle above and this angle. As the angle passes the above angle, along the range up to this angle, the rool angle will decrease- strightening the foot on the up position."},{"location":"foot_settings/#dynamicpivotcontrol","title":"DynamicPivotControl","text":"<p>Attribute NameDefaultDescription doDynamicPivCtrl True This feature will create a control that will try to trace the desired foot shape with it's pivot when rotating it. When choosing to create this control, use the relevant guide's shape to trace the outline of your foot dynamicPivControlShape lightSphere Dynamic roll control shape mapRotXTo 2 as this feature uses local channels, it is essential to map input values correctly. Please map the correct axes based on the orientation of your guide mapRotYTo 3 as this feature uses local channels, it is essential to map input values correctly. Please map the correct axes based on the orientation of your guide mapRotZTo 6 as this feature uses local channels, it is essential to map input values correctly. Please map the correct axes based on the orientation of your guide distRateMultiplier 5.0 This feature will use the translation of a run-away transform to acquire the best pivot location along the given outline shape. This value will dictate the speed of translation dynamicPivChannelControl T R S X v Y v Z Roll control channel-box settings"},{"location":"freeControl/","title":"freeControl","text":"<p>"},{"location":"freeControl/#freecontrol","title":"freeControl","text":"<p>  Author: Asaf Ben-Zur  Best used for: Free objects, General Control, Mesh Tweaker, Mesh Local Tweaker  This Module is a general single control at it's base state.  It also contains a Mesh-Tweaker feature that will allow you to create a \"Double Directional\" tweaker- meaning that the control will follow the input Mesh's position (Rivet) and will also be able to affect it.  This effect is also commonly knowen as the \"Dorito-Effect\".  This feature also includes a \"local\" mode, to tunnel deformations from the control to a local skinCluster, then a blend-shape to the main Mesh, creating multi-layered skinned mesh.  All of these features will use the main joint as the effector.  Note: When using the \"Mesh-Tweaker\" feture, when needing to affect a mesh that will also be used as the rivet input- make sure \"sameMeshAffector\" is set to ON."},{"location":"freeControl/#defenitions","title":"Defenitions","text":""},{"location":"freeControl/#construct","title":"construct","text":"<p> Constructor:  construct(mansur, MnsBuildModule, kwargs) Return:   list (controls), dict (internalSpaces) Arguments:   <ul> <li>mansur</li> <li>MnsBuildModule</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"freeControl/#jointstructure","title":"jointStructure","text":"<p> Constructor:  jointStructure(mansur, guides, mnsBuildModule = None, kwargs) Return:  None Arguments:   <ul> <li>mansur</li> <li>guides</li> <li>mnsBuildModule(str) ; [default: None]</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"freeControl/#postconstruct","title":"postConstruct","text":"<p> Constructor:  postConstruct(mansur, MnsBuildModule, kwargs) Return:  None Arguments:   <ul> <li>mansur</li> <li>MnsBuildModule</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"freeControl_settings/","title":"freeControl settings","text":"<p>"},{"location":"freeControl_settings/#freecontrol-settings","title":"freeControl Settings","text":"<p>  Author: Asaf Ben-Zur  Best used for: Free objects, General Control, Mesh Tweaker, Mesh Local Tweaker  This Module is a general single control at it's base state.  It also contains a Mesh-Tweaker feature that will allow you to create a \"Double Directional\" tweaker- meaning that the control will follow the input Mesh's position (Rivet) and will also be able to affect it.  This effect is also commonly knowen as the \"Dorito-Effect\".  This feature also includes a \"local\" mode, to tunnel deformations from the control to a local skinCluster, then a blend-shape to the main Mesh, creating multi-layered skinned mesh.  All of these features will use the main joint as the effector.  Note: When using the \"Mesh-Tweaker\" feture, when needing to affect a mesh that will also be used as the rivet input- make sure \"sameMeshAffector\" is set to ON.  </p>"},{"location":"freeControl_settings/#attributes","title":"Attributes","text":"<p>symmetryType 0 Choose the mirror type for right side controls </p>"},{"location":"freeControl_settings/#globalsettings","title":"GlobalSettings","text":"<p>Attribute NameDefaultDescription controlShape circle Control shape channelControl T R S X v v v Y v v v Z v v v Control channel-box settings createJoint True Choose whether to create and attach a joint to this control asTweakerDivider MeshTweaker Comment wasn't inserted asMeshTweaker False This control can aslo act as a live mesh tweaker. This means that you can attach this control to a mesh, having it follow the deformed mesh. In case you want this control to be affected by the mesh (position of the control) and also affect the mesh (using a skinCluster for example), please make sure that you leave sameMeshEffector attribute ON. You do not need to use any other meshes or joints to implement this behaviour rivetToMesh The mesh you want to attach the control to positionMode 0 this will determine the output rivet position mode. doRotation False when off, the rivet will not inherit rotations from the mesh sameMeshAffector True If this is set to False, you will NOT be able to use this control's related joint within the deformation of the above mesh (this will result as a cycle). In case you want the control to follow the mesh as well as have it's related joint within the deformation of the mesh- please leave this ON. In case you want to attach this control to a mesh that will not be affected by the control's related joint, you can safely turn this attribute OFF. isLocal False In some cases, you may wish to use this control's related joint in a different skinCluster layer, channeled into the main mesh as a blendShape. If that is the case, you will need to set this attribute to ON. When set to ON, the related joint will be a part of the joint hierarchy, but will keep it's position at origin so you can you it in a local setup. In case the riveted mesh's deformation is affected by this module's related joint in any way, remember to keep sameMeshEffector ON, even if its not a part of the main skinCluster. This means that even if the joint is controlling a localized skin-cluter, and then channeled as a blend shape into the riveted mesh, sameMeshAffector should be left ON."},{"location":"freeControl_settings/#spring","title":"spring","text":"<p>Attribute NameDefaultDescription doSpring False This feature will create a spring node below the control master. This will result in a procedural simple spring action. In case meshTweaker feature was selected, the slave control will not be visible. This feature will NOT be created in case isLocal is set to ON. springX True Select whether the X axis should be affected by the spring or not springY True Select whether the Y axis should be affected by the spring or not springZ True Select whether the Z axis should be affected by the spring or not flipRightX False This will Flip all connections for the local X channel. flipRightY False This will Flip all connections for the local Y channel. flipRightZ False This will Flip all connections for the local Z channel. defaultStiffness 0.5 Spring stiffness default value defaultDamping 0.5 Spring damping default value springSlaveControlShape lightSphere Spring slave control shape"},{"location":"freeControl_settings/#interpolatedorientation","title":"InterpolatedOrientation","text":"<p>Attribute NameDefaultDescription doInterpOrient False This feature is used to create a weighten split orientation. When you need to create a weighted orientation for a control between two spaces, use this feature. spaceA The first space to be interpolated. This can be a guide, joint, or control. spaceB The second space to be interpolated. This can be a guide, joint, or control. spaceAWeight 0.5 The deafult weight for the first space. The second space weight will be the complimentary weight adding to 1 doAngleBasedScale False create an angle based scale driver, to scale the target slave joint when the angle changes between the two sources. Originally designed for double-chin setup scaleWhenAngle 0 This setting controls the trigger mode for action. Icreases- means that the trigger for action will occur when the intorpolated angle increases, and do nothing when it decreases. decreases- means that the trigger for action will occur when the intorpolated angle decreases, and do nothing when it increases maxScale 2.0 The actions maximum value clamp value angleMaxRange 180.0 The maximum angle clamp that the action should be targeted to connectToTargetAxis 1 This setting will set the target axis to act on. Please map the axis needed to be scaled based on the orientation of your guide"},{"location":"globals/","title":"Globals","text":"<p>"},{"location":"globals/#globals","title":"globals","text":"<p>  All top level global variable declaration.  Used thoughout the python structure to easily manipulate global settings."},{"location":"hindLimb/","title":"hindLimb","text":"<p>"},{"location":"hindLimb/#hindlimb","title":"hindLimb","text":"<p>  Author: Asaf Ben-Zur  Best used for: Hind-Legs  This module was designed to create a generic 4 joint limb control.  This module will create both the FK and IK controls, and the standard blend control.  On top of the standard behaviour, based on parameters, this module can also include bendy limb controls (as many as you want).  Note: When used as a leg, try using the foot module as a direct child of this module to automatically achive a connected behaviour."},{"location":"hindLimb/#defenitions","title":"Defenitions","text":""},{"location":"hindLimb/#construct","title":"construct","text":"<p> Constructor:  construct(mansur, MnsBuildModule, kwargs) Return:   list (controls), dict (internalSpaces), MnsNameStd (moduleSpaceAttrHost) Arguments:   <ul> <li>mansur</li> <li>MnsBuildModule</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"hindLimb/#customguides","title":"customGuides","text":"<p> Constructor:  customGuides(mansur, builtGuides) Return:  None Arguments:   <ul> <li>mansur</li> <li>builtGuides</li> </ul> Keyword Arguments:   </p>"},{"location":"hindLimb/#deconstruct","title":"deconstruct","text":"<p>  deconstruct method implementation.   Transfer interJoints control back to the main joints.  Constructor:  deconstruct(mansur, MnsBuildModule, kwargs) Return:  None Arguments:   <ul> <li>mansur</li> <li>MnsBuildModule</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"hindLimb/#jointstructure","title":"jointStructure","text":"<p> Constructor:  jointStructure(mansur, guides, mnsBuildModule = None, kwargs) Return:  None Arguments:   <ul> <li>mansur</li> <li>guides</li> <li>mnsBuildModule(str) ; [default: None]</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"hindLimb/#jointstructuresoftmod","title":"jointStructureSoftMod","text":"<p> Constructor:  jointStructureSoftMod(mansur, guides, mnsBuildModule = None, kwargs) Return:  None Arguments:   <ul> <li>mansur</li> <li>guides</li> <li>mnsBuildModule(str) ; [default: None]</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"hindLimb_settings/","title":"hindLimb settings","text":"<p>"},{"location":"hindLimb_settings/#hindlimb-settings","title":"hindLimb Settings","text":"<p>  Author: Asaf Ben-Zur  Best used for: Arms, Legs  This module was designed to create a generic 3 joint limb control.  This module will create both the FK and IK controls, and the standard blend control.  On top of the standard behaviour, based on parameters, this module can also include bendy limb controls (as many as you want), Arc layer and Sleeve layer.  Note: When used as a leg, try using the foot module as a direct child of this module to automatically achive a connected behaviour.  </p>"},{"location":"hindLimb_settings/#attributes","title":"Attributes","text":""},{"location":"hindLimb_settings/#globalsettings","title":"GlobalSettings","text":"<p>Attribute NameDefaultDescription interpolationJoints 4 Increments of 3, starting from 4. This setting controls the number of driven interpolation joints needed. This interpolation joint chain will behave according to the module's design, and will inherit transformations that are required by this module. Usually the driven interpolation joint-chain is the compenents result behaviour in animation. offsetX 20.0 Up curve X value offset for the interpolation joints offsetZ 0.0 Up curve Z value offset for the interpolation joints FKSymmetryType 0 FK controls symmetry type, in case it needs to differ from the main symmetry type scaleMode 2 Default scale mode. Please refer to the documentation of mnsPointsOnCurve node to learn more about each mode squashMode 0 Default squash mode. Please refer to the documentation of mnsPointsOnCurve node to learn more about each mode ikFkBlendDefault 0.0 Default value for the main IK-FK blend channel. 0 is IK, 1 is FK."},{"location":"hindLimb_settings/#ik","title":"IK","text":"<p>Attribute NameDefaultDescription stretchLimit 1.0 IK Handle stratch limit default value iKHandleMatchOrient Select a guide to match the IK-Handle's orientation. This will override the native orientation as well as all symmetry options."},{"location":"hindLimb_settings/#main-ctrl-shapes","title":"Main-Ctrl-Shapes","text":"<p>Attribute NameDefaultDescription rootControlShape lightSphere Module root control control shape ikHandleControlShape square IK Handle control shape poleVectorControlShape diamond Pole Vector control shape ankleBendControlShape squareRound IK Ankle Bend control shape fkControlShape hexagon FK controls shape tertiariesControlShape flatDiamond Tweak tertiary controls shape"},{"location":"hindLimb_settings/#tweakersbendy-limbs","title":"tweakers/bendy-Limbs","text":"<p>Attribute NameDefaultDescription doTweakers False This feature will create a secondary tweak layer below the main control chain. This is commonly known as Bendy-Limbs tweakersSymmetryType 3 Tweak controls symmetry type, in case it needs to differ from the main symmetry type tweakersPerSection 1 The amount of bendy controls per section. A value of one will create two controls in total - one for the upper section of the limb, on for the lower section createExtraAttributes True If this is set to True, some extra tertiary channel-box control attributes will be added to the attribute-host tweakControlShape dialSquare Tweak controls shape negateOffsetOnSymmetry False If this is set to True, the above offsetX and offsetZ value for the up curve will be negated tweakersChannelControl T R S X v v v Y v v v Z v v v Tweak controls channel-box settings"},{"location":"hydraulicPiston/","title":"hydraulicPiston","text":"<p>"},{"location":"hydraulicPiston/#hydraulicpiston","title":"hydraulicPiston","text":"<p>  Author: Asaf Ben-Zur  Best used for: Hydraulic Piston, Mechanical Springs  A simple module to create a piston style control.  Combining aim and translation constraints, this module will create a piston like behaviour, keeping the main orientation of the module towards the aim control, while stretching an inner piston along its axis regadless of the module orientation, keeping the piston within its outer tube."},{"location":"hydraulicPiston/#defenitions","title":"Defenitions","text":""},{"location":"hydraulicPiston/#construct","title":"construct","text":"<p> Constructor:  construct(mansur, MnsBuildModule, kwargs) Return:   list (controls), dict (internalSpaces), MnsNameStd (moduleSpaceAttrHost) Arguments:   <ul> <li>mansur</li> <li>MnsBuildModule</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"hydraulicPiston_settings/","title":"hydraulicPiston settings","text":"<p>"},{"location":"hydraulicPiston_settings/#hydraulicpiston-settings","title":"hydraulicPiston Settings","text":"<p>  Author: Asaf Ben-Zur  Best used for: Hydraulic Piston, Mechanical Springs  A simple module to create a piston style control.  Combining aim and translation constraints, this module will create a piston like behaviour, keeping the main orientation of the module towards the aim control, while stretching an inner piston along its axis regadless of the module orientation, keeping the piston within its outer tube.  </p>"},{"location":"hydraulicPiston_settings/#attributes","title":"Attributes","text":""},{"location":"hydraulicPiston_settings/#globalsettings","title":"GlobalSettings","text":"<p>Attribute NameDefaultDescription slaveControlShape lightSphere Origin slave control shape targetControlShape circle Main control shape upLocalDirection 1 Use this setting to choose which up-axis should the module use on calculation. This is based on the orientation of your guide. Choose the correct complimentary axis based on set aim guide channelControl T R S X v v v Y v v v Z v v v Main control channel-box settings"},{"location":"install/","title":"Install","text":"<p>"},{"location":"install/#install","title":"install","text":""},{"location":"install/#defenitions","title":"Defenitions","text":""},{"location":"install/#linux_mnsinstall","title":"linux_mnsInstall","text":"<p> Constructor:  linux_mnsInstall(varValue = \"\", mode = \"install\", varName = \"MAYA_MODULE_PATH\") Return:  None Arguments:   <ul> <li>varValue(str) ; [default: \"\"]</li> <li>mode(str) ; [default: \"install\"]</li> <li>varName(str) ; [default: \"MAYA_MODULE_PATH\"]</li> </ul> Keyword Arguments:   </p>"},{"location":"install/#mnsinstall","title":"mnsInstall","text":"<p> Constructor:  mnsInstall(requestPath = \"\", kwargs) Return:  None Arguments:   <ul> <li>requestPath(str) ; [default: \"\"]</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"install/#win_mnsinstall","title":"win_mnsInstall","text":"<p> Constructor:  win_mnsInstall(varValue = \"\", mode = \"install\", varName = \"MAYA_MODULE_PATH\") Return:  None Arguments:   <ul> <li>varValue(str) ; [default: \"\"]</li> <li>mode(str) ; [default: \"install\"]</li> <li>varName(str) ; [default: \"MAYA_MODULE_PATH\"]</li> </ul> Keyword Arguments:   </p>"},{"location":"limb/","title":"Limb","text":"<p>"},{"location":"limb/#limb","title":"limb","text":"<p>  Author: Asaf Ben-Zur  Best used for: Arms, Legs  This module was designed to create a generic 3 joint limb control.  This module will create both the FK and IK controls, and the standard blend control.  On top of the standard behaviour, based on parameters, this module can also include bendy limb controls (as many as you want), Arc layer and Sleeve layer.  Note: When used as a leg, try using the foot module as a direct child of this module to automatically achive a connected behaviour."},{"location":"limb/#defenitions","title":"Defenitions","text":""},{"location":"limb/#construct","title":"construct","text":"<p> Constructor:  construct(mansur, MnsBuildModule, kwargs) Return:   list (controls), dict (internalSpaces), MnsNameStd (moduleSpaceAttrHost) Arguments:   <ul> <li>mansur</li> <li>MnsBuildModule</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"limb/#customguides","title":"customGuides","text":"<p> Constructor:  customGuides(mansur, builtGuides) Return:  None Arguments:   <ul> <li>mansur</li> <li>builtGuides</li> </ul> Keyword Arguments:   </p>"},{"location":"limb/#deconstruct","title":"deconstruct","text":"<p>  deconstruct method implementation.   Transfer interJoints control back to the main joints.  Constructor:  deconstruct(mansur, MnsBuildModule, kwargs) Return:  None Arguments:   <ul> <li>mansur</li> <li>MnsBuildModule</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"limb/#jointstructure","title":"jointStructure","text":"<p> Constructor:  jointStructure(mansur, guides, mnsBuildModule = None, kwargs) Return:  None Arguments:   <ul> <li>mansur</li> <li>guides</li> <li>mnsBuildModule(str) ; [default: None]</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"limb/#jointstructuresoftmod","title":"jointStructureSoftMod","text":"<p> Constructor:  jointStructureSoftMod(mansur, guides, mnsBuildModule = None, kwargs) Return:  None Arguments:   <ul> <li>mansur</li> <li>guides</li> <li>mnsBuildModule(str) ; [default: None]</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"limb_settings/","title":"Limb settings","text":"<p>"},{"location":"limb_settings/#limb-settings","title":"limb Settings","text":"<p>  Author: Asaf Ben-Zur  Best used for: Arms, Legs  This module was designed to create a generic 3 joint limb control.  This module will create both the FK and IK controls, and the standard blend control.  On top of the standard behaviour, based on parameters, this module can also include bendy limb controls (as many as you want), Arc layer and Sleeve layer.  Note: When used as a leg, try using the foot module as a direct child of this module to automatically achive a connected behaviour.  </p>"},{"location":"limb_settings/#attributes","title":"Attributes","text":""},{"location":"limb_settings/#globalsettings","title":"GlobalSettings","text":"<p>Attribute NameDefaultDescription interpolationJoints 3 Increments of 2, starting from 3. This setting controls the number of driven interpolation joints needed. This interpolation joint chain will behave according to the module's design, and will inherit transformations that are required by this module. Usually the driven interpolation joint-chain is the compenents result behaviour in animation offsetX 20.0 Up curve X value offset for the interpolation joints offsetZ 0.0 Up curve Z value offset for the interpolation joints FKSymmetryType 0 FK controls symmetry type, in case it needs to differ from the main symmetry type scaleMode 2 Default scale mode. Please refer to the documentation of mnsPointsOnCurve node to learn more about each mode squashMode 0 Default squash mode. Please refer to the documentation of mnsPointsOnCurve node to learn more about each mode ikFkBlendDefault 0.0 Default value for the main IK-FK blend channel. 0 is IK, 1 is FK."},{"location":"limb_settings/#ik","title":"IK","text":"<p>Attribute NameDefaultDescription stretchLimit 1.0 IK Handle stratch limit default value softness 0.0 IK handle softness default value iKHandleMatchOrient Select a guide to match the IK-Handle's orientation. This will override the native orientation as well as all symmetry options."},{"location":"limb_settings/#main-ctrl-shapes","title":"Main-Ctrl-Shapes","text":"<p>Attribute NameDefaultDescription rootControlShape lightSphere Module root control control shape ikHandleControlShape square IK Handle control shape poleVectorControlShape diamond Pole Vector control shape fkControlShape hexagon FK controls shape tertiariesControlShape flatDiamond Tweak tertiary controls shape"},{"location":"limb_settings/#tweakersbendy-limbs","title":"tweakers/bendy-Limbs","text":"<p>Attribute NameDefaultDescription doTweakers False This feature will create a secondary tweak layer below the main control chain. This is commonly known as Bendy-Limbs tweakersSymmetryType 3 Tweak controls symmetry type, in case it needs to differ from the main symmetry type tweakersPerSection 1 The amount of bendy controls per section. A value of one will create two controls in total - one for the upper section of the limb, on for the lower section createExtraAttributes True If this is set to True, some extra tertiary channel-box control attributes will be added to the attribute-host tweakControlShape dialSquare Tweak controls shape negateOffsetOnSymmetry False If this is set to True, the above offsetX and offsetZ value for the up curve will be negated tweakersChannelControl T R S X v v v Y v v v Z v v v Tweak controls channel-box settings"},{"location":"limb_settings/#arc","title":"arc","text":"<p>Attribute NameDefaultDescription doArc False This feature will use mnsThreePointArc node to create an automatic arc layer on the final curve output arcDegree 3 Arc's curve degree. Refer to mnsThreePointArc node documentation to learn more about this attribute arcSections 8 The amount of samples used to create the arc. Since three samples will create no effect (the result arc needs more points in between to describe the shape), use a higher value to create an effect. The higher the sample amount, the more precise the arc will be resampleCurveSections 16 Post creation sample amount collinearAction 0 this attribute will be used to dictate what to do when the limb is straight (the collinear case). Input curve will match the input curve plugged into this node (recommended), re-sample will create a new curve based on the node's attributes conformToMidPoint True If this is set to True, the node will attempt to pin the middle origin sample in its place, resulting in a much stabler result. If this is set to False, the middle origin sample might shift while animating the arc value (not recommended) addSwipes True Add swipe channel-channel box attributes to the attribute host"},{"location":"limb_settings/#sleeve","title":"sleeve","text":"<p>Attribute NameDefaultDescription doSleeve False Do sleeve feature. This feature will create a curbe and controls along the result interpolation joints of this module. This will result in the ability to control a sleeve position along the limb as well as many other features numSleeveJoints 3 The amount of joints to sample along the sleeve curve sleeveControlShape octagon Sleeve control shape sleeveCurveDegree 3 Sleeve curve degree sleeveBuildMode 0 Sleeve curve generation mode"},{"location":"linkChain/","title":"linkChain","text":"<p>"},{"location":"linkChain/#linkchain","title":"linkChain","text":"<p>  Author: Asaf Ben-Zur  Best used for: Tank-Treads, Bike-Chains, Ferris-Wheel, Tire, Conveyor-Belt  This is a comprehensive module, to create a link-chain style behaviour.  Originally created for tank-treads, but can be used for a range of components.  On creation, based on the number on the numberOfLinks setting, joints will be created on a circle Nurbs curve with shapeSections setting amount.  After creation, the shape can be tweaked to fit any need.   IMPORTANT NOTE: This module requires a joint-struct-rebuild once the Nurbs shape has been tweaked.  Once the joint-struct is revuilt, the joints will be layed out uniformally along the given shape.  Upon construction, a main control will be created for controlling the entire position of the module.  Under, a chain-driver control will be created. Rotating it will drive the joint chain along the curve in both forwards and backwards directions.  Also, use the shape-tweak layer to create a tweak feature for the shape on construction. This will allow manipulation of the shape dynamically while the chain is driven.  Automatic drive based on position is also possible wihin this module using the AutoDrive layer."},{"location":"linkChain/#defenitions","title":"Defenitions","text":""},{"location":"linkChain/#construct","title":"construct","text":"<p> Constructor:  construct(mansur, MnsBuildModule, kwargs) Return:   list (controls), dict (internalSpaces) Arguments:   <ul> <li>mansur</li> <li>MnsBuildModule</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"linkChain/#createupcurvefromsamples","title":"createUpCurveFromSamples","text":"<p> Constructor:  createUpCurveFromSamples(mansur, rootGuide, samples, upCurveOffset) Return:  None Arguments:   <ul> <li>mansur</li> <li>rootGuide</li> <li>samples</li> <li>upCurveOffset</li> </ul> Keyword Arguments:   </p>"},{"location":"linkChain/#customguides","title":"customGuides","text":"<p> Constructor:  customGuides(mansur, builtGuides) Return:  None Arguments:   <ul> <li>mansur</li> <li>builtGuides</li> </ul> Keyword Arguments:   </p>"},{"location":"linkChain/#deconstruct","title":"deconstruct","text":"<p>  deconstruct method implementation for linkChain.  Constructor:  deconstruct(mansur, MnsBuildModule, kwargs) Return:  None Arguments:   <ul> <li>mansur</li> <li>MnsBuildModule</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"linkChain/#filtervalidshapetweakers","title":"filterValidShapeTweakers","text":"<p> Constructor:  filterValidShapeTweakers(tweakersList = [], mansur = None) Return:  None Arguments:   <ul> <li>tweakersList(list) ; [default: []]</li> <li>mansur(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"linkChain/#jointstructure","title":"jointStructure","text":"<p> Constructor:  jointStructure(mansur, guides, mnsBuildModule = None, kwargs) Return:  None Arguments:   <ul> <li>mansur</li> <li>guides</li> <li>mnsBuildModule(str) ; [default: None]</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"linkChain/#jointstructuresoftmod","title":"jointStructureSoftMod","text":"<p> Constructor:  jointStructureSoftMod(mansur, guides, mnsBuildModule = None, kwargs) Return:  None Arguments:   <ul> <li>mansur</li> <li>guides</li> <li>mnsBuildModule(str) ; [default: None]</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"linkChain_settings/","title":"linkChain settings","text":"<p>"},{"location":"linkChain_settings/#linkchain-settings","title":"linkChain Settings","text":"<p>  Author: Asaf Ben-Zur  Best used for: Tank-Treads, Bike-Chains, Ferris-Wheel, Tire, Conveyor-Belt  This is a comprehensive module, to create a link-chain style behaviour.  Originally created for tank-treads, but can be used for a range of components.  On creation, based on the number on the numberOfLinks setting, joints will be created on a circle Nurbs curve with shapeSections setting amount.  After creation, the shape can be tweaked to fit any need.   IMPORTANT NOTE: This module requires a joint-struct-rebuild once the Nurbs shape has been tweaked.  Once the joint-struct is revuilt, the joints will be layed out uniformally along the given shape.  Upon construction, a main control will be created for controlling the entire position of the module.  Under, a chain-driver control will be created. Rotating it will drive the joint chain along the curve in both forwards and backwards directions.  Also, use the shape-tweak layer to create a tweak feature for the shape on construction. This will allow manipulation of the shape dynamically while the chain is driven.  Automatic drive based on position is also possible wihin this module using the AutoDrive layer.  </p>"},{"location":"linkChain_settings/#attributes","title":"Attributes","text":"<p>splitOrientSpace True If this is set to True, all space switch attributes for this module will split into two spaces- Translate and Orient, for the animator to be able to set different space for tranlation and orientation </p>"},{"location":"linkChain_settings/#globalsettings","title":"GlobalSettings","text":"<p>Attribute NameDefaultDescription numberOfLinks 16 Amount of links in the chain. A joint will be created for every link reverseOffsetDirection False In case the the rotation post construction is reversed, set this attribute to ON upCurveOffset 5.0 The offset value to generate the up curve, based on a center matrix- the modules root joint controlShape circle Control shape slaveControlShape dodecagon Slave control shape wheelDiameter 20.0 The diameter of your wheel. This is very important to set correctly as the diameter of the wheel is one of the source attributes for the wheels rotation calculation mapRoatationToAxis 0 Map the rotation action you need to be acted on. This is based on the orientation of your guide rotationMode 0 In case your chain links are connected to one another- it is recommended to use lookAtNext. In case there isn't a connection between your links, curveTangent might be a better choice slaveChannelControl T R S X v Y v Z v Slave control channel-box settings"},{"location":"linkChain_settings/#shapetweak","title":"ShapeTweak","text":"<p>Attribute NameDefaultDescription doShapeTweakers False If this setting in set to True, the shape-tweak feature will be created. In case you want to tweak the shape of the closed-shaped link chain curve in animation, turn this feature on shapeTweakers [' '] Input guides/joints- In order. A closed nurbs-curve shape will be constructed from the inputs and will be used as a tweak to deform the main shape driving the chain. These MUST be Mansur-Rig objects, and a part of the same Block rig. tweakMethod 1 This attribute will determine the shape tweak method. In Direct-Skin mode, the link chain shape will be directly skinned to all input tweakers. In Build-Transforms-Curve mode a new curve will be constructed based on the curve mode selected and input tweakers, which will be used to deform the master shape indirectly. This mode will allow for a better control over the deformation, as it is based on curve re-generation instead of direct curve deformation. Build transforms curve mode will generate a new closed shape curve based on the input tweak transforms, hence it is order sensative. In case you wish to use this mode, make sure you input the tweakers in order which makes sense to generate a closed curve shape. Rebuild-Then-Skin mode will first rebuild the curve based on the input re-build number of spans attribute, then skin the curve and deform the master curve indirectly rebuildNumOfSpans 16 relevant only on rebuildThenSkin tweak method. This attribute dectates the amount of sections to rebuild the curve to before skinning tweakCurveInterpolaion 1 relevant only on mnsBuildTransformsCurve tweak method tweakCurveDegree 3 relevant only on mnsBuildTransformsCurve, and rebuild then skin tweak methods"},{"location":"linkChain_settings/#autodrive","title":"AutoDrive","text":"<p>Attribute NameDefaultDescription doAutoDrive False This feature will create an auto-drive mechanism, that will automatically drive the chain when it moves in space autoDriveWheelDiameter 20.0 The diameter of the driver wheel, whether it exists or not. This diameter is derived from the main gear driving this link-chain. This diameter will be used to calculate the drive of the chain gearRatio 1.0 In case your main driver is derived from another gear, you can set its ratio here to get accurate results reverseDirection False In some cases the direction of the drive is flipped. If this is your case, set this setting to True to correct this issue autoDriveDefault 1.0 Auto-Drive channel default state"},{"location":"lips/","title":"Lips","text":"<p>"},{"location":"lips/#lips","title":"lips","text":"<p>  Author: Asaf Ben-Zur  Best used for: Lips  This module has been depreciated, please use LipsB module."},{"location":"lips/#defenitions","title":"Defenitions","text":""},{"location":"lips/#construct","title":"construct","text":"<p> Constructor:  construct(mansur, MnsBuildModule, kwargs) Return:   list (controls), dict (internalSpaces) Arguments:   <ul> <li>mansur</li> <li>MnsBuildModule</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"lips/#createbindcurvesfrommodulesettings","title":"createBindCurvesFromModuleSettings","text":"<p> Constructor:  createBindCurvesFromModuleSettings(mansur, rootGuide = None) Return:  None Arguments:   <ul> <li>mansur</li> <li>rootGuide(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"lips/#customguides","title":"customGuides","text":"<p> Constructor:  customGuides(mansur, builtGuides) Return:  None Arguments:   <ul> <li>mansur</li> <li>builtGuides</li> </ul> Keyword Arguments:   </p>"},{"location":"lips/#deconstruct","title":"deconstruct","text":"<p> Constructor:  deconstruct(mansur, MnsBuildModule, kwargs) Return:  None Arguments:   <ul> <li>mansur</li> <li>MnsBuildModule</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"lips/#getedgesfrommodulesettings","title":"getEdgesFromModuleSettings","text":"<p> Constructor:  getEdgesFromModuleSettings(mansur, rootGuide = None) Return:  None Arguments:   <ul> <li>mansur</li> <li>rootGuide(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"lips/#jointstructure","title":"jointStructure","text":"<p> Constructor:  jointStructure(mansur, guides, mnsBuildModule = None, kwargs) Return:  None Arguments:   <ul> <li>mansur</li> <li>guides</li> <li>mnsBuildModule(str) ; [default: None]</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"lips/#postconstruct","title":"postConstruct","text":"<p> Constructor:  postConstruct(mansur, MnsBuildModule, kwargs) Return:  None Arguments:   <ul> <li>mansur</li> <li>MnsBuildModule</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"lipsB/","title":"lipsB","text":"<p>"},{"location":"lipsB/#lipsb","title":"lipsB","text":"<p>  Author: Asaf Ben-Zur  Best used for: Lips  This module was designed around lips behaviour.  This module has a few layers that will allow general as well as extremely fiddle control (based on parameters) over the lips deformation.  Some of the main features in this module include: Macro corner controls, Along Surface feature, Around Center Feature, Jaw connections, Global \"Full-Lips\" control, Zip Controls, Curve meet controls, Tweak controls, Cheek Raise connection,  and much more.  The joint structure of this module will be dictated by input vertices on a given mesh."},{"location":"lipsB/#defenitions","title":"Defenitions","text":""},{"location":"lipsB/#construct","title":"construct","text":"<p> Constructor:  construct(mansur, MnsBuildModule, kwargs) Return:   list (controls), dict (internalSpaces) Arguments:   <ul> <li>mansur</li> <li>MnsBuildModule</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"lipsB/#createbindcurvesfrommodulesettings","title":"createBindCurvesFromModuleSettings","text":"<p> Constructor:  createBindCurvesFromModuleSettings(mansur, rootGuide = None) Return:  None Arguments:   <ul> <li>mansur</li> <li>rootGuide(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"lipsB/#customguides","title":"customGuides","text":"<p> Constructor:  customGuides(mansur, builtGuides) Return:  None Arguments:   <ul> <li>mansur</li> <li>builtGuides</li> </ul> Keyword Arguments:   </p>"},{"location":"lipsB/#deconstruct","title":"deconstruct","text":"<p> Constructor:  deconstruct(mansur, MnsBuildModule, kwargs) Return:  None Arguments:   <ul> <li>mansur</li> <li>MnsBuildModule</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"lipsB/#getedgesfrommodulesettings","title":"getEdgesFromModuleSettings","text":"<p> Constructor:  getEdgesFromModuleSettings(mansur, rootGuide = None) Return:  None Arguments:   <ul> <li>mansur</li> <li>rootGuide(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"lipsB/#jointstructure","title":"jointStructure","text":"<p> Constructor:  jointStructure(mansur, guides, mnsBuildModule = None, kwargs) Return:  None Arguments:   <ul> <li>mansur</li> <li>guides</li> <li>mnsBuildModule(str) ; [default: None]</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"lipsB/#jointstructuresoftmod","title":"jointStructureSoftMod","text":"<p> Constructor:  jointStructureSoftMod(mansur, guides, mnsBuildModule = None, kwargs) Return:  None Arguments:   <ul> <li>mansur</li> <li>guides</li> <li>mnsBuildModule(str) ; [default: None]</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"lipsB/#postconstruct","title":"postConstruct","text":"<p> Constructor:  postConstruct(mansur, MnsBuildModule, kwargs) Return:  None Arguments:   <ul> <li>mansur</li> <li>MnsBuildModule</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"lipsB_settings/","title":"lipsB settings","text":"<p>"},{"location":"lipsB_settings/#lipsb-settings","title":"lipsB Settings","text":"<p>  Author: Asaf Ben-Zur  Best used for: Lips  This module was designed around lips behaviour.  This module has a few layers that will allow general as well as extremely fiddle control (based on parameters) over the lips deformation.  Some of the main features in this module include: Macro corner controls, Along Surface feature, Around Center Feature, Jaw connections, Global \"Full-Lips\" control, Zip Controls, Curve meet controls, Tweak controls, Cheek Raise connection,  and much more.  The joint structure of this module will be dictated by input vertices on a given mesh.  </p>"},{"location":"lipsB_settings/#attributes","title":"Attributes","text":"<p>isFacial True Comment wasn't inserted postSymmetryJntStruct True Comment wasn't inserted alongSurface Comment wasn't inserted symmetryType 1 Choose the mirror type for right side controls </p>"},{"location":"lipsB_settings/#globalsettings","title":"GlobalSettings","text":"<p>Attribute NameDefaultDescription upperEdgeVerts [' '] These verticies will be used to build the joint structure for the upper section. Please select a sequence of vertices along the same loop, starting from the inner corner. First and last vertices should match between the upper and lower section, representing a single closed loop. Corner vertices will be present twice- once on the upper section, once on the lower section lowerEdgeVerts [' '] These verticies will be used to build the joint structure for the lower section. Please select a sequence of vertices along the same loop, starting from the inner corner. First and last vertices should match between the upper and lower section, representing a single closed loop. Corner vertices will be present twice- once on the lower section, once on the lower section midsPosition 0 In case this setting is set to custom, once the settings are updated, 4 new locator guides will become visible- 2 for the upper lip, and 2 for the lower lip. These locators can be manually set to a custom mid-lip position. In some cases, based on the models geometry, the mid-lip automatic control position may not be calculated correctly. If this is your case, turn this setting on and set the guide locators to the required mid-lip position for both upper and lower lips"},{"location":"lipsB_settings/#ctrlshapes","title":"ctrlShapes","text":"<p>Attribute NameDefaultDescription cornerControlShape fourArrow Main corenr controls shape upperLowerControlShape squareRound Main upper and lower controls shape midsControlShape circle Main mid controls shape"},{"location":"lipsB_settings/#jawconnection","title":"JawConnection","text":"<p>Attribute NameDefaultDescription connectJaw True In case this attribute is off, the jaw connection will not be created. jawRootGuide In case this module is used for lips (main use), input the Jaw control root guide. This will implement the Jaw control within the setup and will result in a better behaving setup connectUpMotionRot True In case this attribute is ON, the up rotation of the jaw will affect the upper lip. upMotionRotAxis -x Rotation axis axis to connect the up motion to. This is based on the selected orientation for te jaw. connectUpMotionTran True In case this attribute is ON, the up translation of the jaw will affect the upper lip. upMotionTranAxis y Rotation axis axis to connect the up motion to. This is based on the selected orientation for te jaw."},{"location":"lipsB_settings/#layerbctrls","title":"LayerBCtrls","text":"<p>Attribute NameDefaultDescription doLayerBCtrls True Second layer tweakers numLayerBCtrlsPerSection 9 Number of tweak controls per section layerBSamplingMode 2 Second layer tweak sampling mode. layerBInterpolation 1 Second layer tweak interpolation type. layerBControlShape cube Second layer tweak controls shape"},{"location":"lipsB_settings/#cheekraise","title":"CheekRaise","text":"<p>Attribute NameDefaultDescription doCheekRaise False when dealing with joint based facial deformation, and using this module as a lips setup, it is sometimes desired to incorporate another control that represents the cheek to achive a more lively deformation. Use this feature to do just that. Plug in the rootGuide of the cheeck control you wish to drive, then control the raise and push values based on your preferences or requirements l_CheekRaiseRoot Left side cheeck Root Guide r_CheekRaiseRoot Right side cheeck Root Guide raiseValue 0.5 Raise default value connectRaiseToAxis y Raise channel connection axis pushValue 0.5 Push-Out default value connectPushToAxis z Raise channel connection axis"},{"location":"lips_settings/","title":"Lips settings","text":"<p>"},{"location":"lips_settings/#lips-settings","title":"lips Settings","text":"<p>  Author: Asaf Ben-Zur  Best used for: Lips  This module was designed around lips behaviour.  This module has a few layers that will allow general as well as extremely fiddle control (based on parameters) over the lips deformation.  Some of the main features in this module include: Macro corner controls, Along Surface feature, Around Center Feature, Jaw connections, Global \"Full-Lips\" control, Zip Controls, Curve meet controls, Tweak controls, Cheek Raise connection,  and much more.  The joint structure of this module will be dictated by input vertices on a given mesh.  </p>"},{"location":"lips_settings/#attributes","title":"Attributes","text":"<p>isFacial True Comment wasn't inserted postSymmetryJntStruct True Comment wasn't inserted alongSurface Comment wasn't inserted </p>"},{"location":"lips_settings/#globalsettings","title":"GlobalSettings","text":"<p>Attribute NameDefaultDescription upperEdgeVerts [' '] These verticies will be used to build the joint structure for the upper section. Please select a sequence of vertices along the same loop, starting from the inner corner. First and last vertices should match between the upper and lower section, representing a single closed loop. Corner vertices will be present twice- once on the upper section, once on the lower section lowerEdgeVerts [' '] These verticies will be used to build the joint structure for the lower section. Please select a sequence of vertices along the same loop, starting from the inner corner. First and last vertices should match between the upper and lower section, representing a single closed loop. Corner vertices will be present twice- once on the lower section, once on the lower section upCurveOffset 1.0 Comment wasn't inserted reverseCorners False Offset value for the up curve generation aroundCenter False Around center will normalize the result vectors around a given center matrix (module root in this case). This will provide a better range of motion, tranlating the joints around a sphere (assumed from the center matrix). This can be changed and animated post-construction curveResolution 24 Resample curve amount midCurveHeight 0.5 This dictates the height of the Mid-Meet point between the upper and lower sections jawRootGuide In case this module is used for lips (main use), input the Jaw control root guide. This will implement the Jaw control within the setup and will result in a better behaving setup"},{"location":"lips_settings/#alongsurface","title":"AlongSurface","text":"<p>Attribute NameDefaultDescription doAlongSurface False In case it is desired, an internal surface(Nurbs)-follow mechanism is built in this module. In some cases, it is desired to model a pre-existing NurbsSurface that describes the range or limits of the joints related to this module. If a valid input is insrted, the setup will be created automatically. Remember that the follow controls will be pinned to the given surface, so remember to skin the surface to parent module which will follow the world position of the guide surface. Freezing transformation on the given setup is essential for this feature to behave as expected inputSurface Input surface (Nurbs) to follow baseSurfaceJointFollow It is recommended to use this attribute in conjunction with the alongSurface module. The alongSurface feature is stabler when a baseSurface is present. In order to create that base surface automatically, Block needs a joint to flood a skin to, in order to follow the world space position of the character. For example, if your input surface is skinned to the head joint and the jaw joint, the recommended input in this attribute will be the head joint. When this attribute is empty or invalid a base surface will not be created."},{"location":"lips_settings/#cheekraise","title":"CheekRaise","text":"<p>Attribute NameDefaultDescription doCheekRaise False when dealing with joint based facial deformation, and using this module as a lips setup, it is sometimes desired to incorporate another control that represents the cheek to achive a more lively deformation. Use this feature to do just that. Plug in the rootGuide of the cheeck control you wish to drive, then control the raise and push values based on your preferences or requirements l_CheekRaiseRoot Left side cheeck Root Guide r_CheekRaiseRoot Right side cheeck Root Guide raiseValue 0.5 Raise default value connectRaiseToAxis y Raise channel connection axis pushValue 0.5 Push-Out default value connectPushToAxis z Raise channel connection axis"},{"location":"lips_settings/#tweakcontrols","title":"TweakControls","text":"<p>Attribute NameDefaultDescription doTweakControls True First layer tweakers numTweakControlsPerSection 5 Number of tweak controls per section cornersControlShape diamond Tweak coreners control shape tweakersControlShape lightSphere Tweak controls shape tweakCurvesInterpolation 4 First layer tweaks curve interpolation type"},{"location":"lips_settings/#layerbctrls","title":"LayerBCtrls","text":"<p>Attribute NameDefaultDescription doLayerBCtrls False Second layer tweakers numLayerBCtrlsPerSection 9 Number of tweak controls per section layerBControlShape cube Second layer tweak controls shape"},{"location":"localClump/","title":"localClump","text":"<p>"},{"location":"localClump/#localclump","title":"localClump","text":"<p>  Author: Asaf Ben-Zur  Best used for: Clumps of controls. i.e. the first layer of controls in a clump of 5 hair strands (FK chains).  This module was developed to allow a local control driver, over clumps of controls.  For example, a block rig contains 10 hair strands, controled by 10 FK-Shain modules, with 3 controls each.  In some cases it is easier to pose the hair treting it as a single unit instead of indevidual strands.  So, a clump-control can be created for each layer of controls (3, 1 for every unit in each chain).  The control will be created using local channels in order to not break the FK behaviour of the strands.  In case any other method was used (spaces, module parenting), each indevidual strand FK behaviour would have been broken.  The clump controls can also be parented under one another to create a layered-FK behaviour.  This will result in a main clump-fk chain, treating the hair as a single unit, and FK chains below to tread each strand indevidually.  In case you want to mimic a normal parenting behaviour, use the conformPivot attribute, which will conform all local driven controls to the pivot of this master clump control.  Leaving conformPivot OFF, will simply connect to the local channels of the slave, leaving its pivots intact. This will result in a slightly different behaviour.  You can also use connectToChannelControl attribute to decide which attributes you want to connect to, and the ones you want to leave out."},{"location":"localClump/#defenitions","title":"Defenitions","text":""},{"location":"localClump/#construct","title":"construct","text":"<p> Constructor:  construct(mansur, MnsBuildModule, kwargs) Return:   list (controls), dict (internalSpaces) Arguments:   <ul> <li>mansur</li> <li>MnsBuildModule</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"localClump/#filtervalidclumpslaves","title":"filterValidClumpSlaves","text":"<p> Constructor:  filterValidClumpSlaves(slavesList = [], mansur = None) Return:  None Arguments:   <ul> <li>slavesList(list) ; [default: []]</li> <li>mansur(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"localClump/#jointstructure","title":"jointStructure","text":"<p> Constructor:  jointStructure(mansur, guides, mnsBuildModule = None, kwargs) Return:  None Arguments:   <ul> <li>mansur</li> <li>guides</li> <li>mnsBuildModule(str) ; [default: None]</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"localClump/#postconstruct","title":"postConstruct","text":"<p> Constructor:  postConstruct(mansur, MnsBuildModule, kwargs) Return:  None Arguments:   <ul> <li>mansur</li> <li>MnsBuildModule</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"localClump_settings/","title":"localClump settings","text":"<p>"},{"location":"localClump_settings/#localclump-settings","title":"localClump Settings","text":"<p>  Author: Asaf Ben-Zur  Best used for: Clumps of controls. i.e. the first layer of controls in a clump of 5 hair strands (FK chains).  This module was developed to allow a local control driver, over clumps of controls.  For example, a block rig contains 10 hair strands, controled by 10 FK-Shain modules, with 3 controls each.  In some cases it is easier to pose the hair treting it as a single unit instead of indevidual strands.  So, a clump-control can be created for each layer of controls (3, 1 for every unit in each chain).  The control will be created using local channels in order to not break the FK behaviour of the strands.  In case any other method was used (spaces, module parenting), each indevidual strand FK behaviour would have been broken.  The clump controls can also be parented under one another to create a layered-FK behaviour.  This will result in a main clump-fk chain, treating the hair as a single unit, and FK chains below to tread each strand indevidually.   In case you want to mimic a normal parenting behaviour, use the conformPivot attribute, which will conform all local driven controls to the pivot of this master clump control.  Leaving conformPivot OFF, will simply connect to the local channels of the slave, leaving its pivots intact. This will result in a slightly different behaviour.  You can also use connectToChannelControl attribute to decide which attributes you want to connect to, and the ones you want to leave out.  </p>"},{"location":"localClump_settings/#attributes","title":"Attributes","text":""},{"location":"localClump_settings/#globalsettings","title":"GlobalSettings","text":"<p>Attribute NameDefaultDescription controlShape circle Control shape clumpSlaves [' '] All guides that will be locally controlled by this clump connectToChannelControl T R S X v v v Y v v v Z v v v This will determine which channels or axes will be connected to the slaves. flipRightX False This will Flip all connections for the local X channel. flipRightY False This will Flip all connections for the local Y channel. flipRightZ False This will Flip all connections for the local Z channel. conformPivot True When ON, the pivot of the target slaves will be conformed to the pivot of this master control. When OFF, the original pivots of the slaves will be preserved. createJoint False Choose whether to create and attach a joint to this control channelControl T R S X v v v Y v v v Z v v v Control channel-box settings"},{"location":"log/","title":"Log","text":"<p>"},{"location":"log/#log","title":"log","text":"<p>  === Author: Assaf Ben Zur ===  Core mns logger.  This module contains the mns logger which will construct a log based on given parametrs.  All logs are written to the defined log file dectated by the project globals.  In case a log doesn't exists it will be automatically created."},{"location":"log/#defenitions","title":"Defenitions","text":""},{"location":"log/#getcurrentfunctionname","title":"getCurrentFunctionName","text":"<p> Constructor:  getCurrentFunctionName() Return:  None Arguments:   Keyword Arguments:   </p>"},{"location":"log/#getpreviousfunctionname","title":"getPreviousFunctionName","text":"<p> Constructor:  getPreviousFunctionName() Return:  None Arguments:   Keyword Arguments:   </p>"},{"location":"log/#log_1","title":"log","text":"<p>  Core logger function.  Given a message line and a severity parameter, log the line into the log file.  In case the log file doesn't exist, create one.  In case the directory doesn't exist, create one.  An output message is printed into the consule based on the severity.  severities(svr):  0 = log  1 = msg  2 = warning  3 = error  4 = fatal  Constructor:  log(msg = \"\", kwargs) Return:  None Arguments:   <ul> <li>msg(str) ; [default: \"\"]</li> <li>kwargs</li> </ul> Keyword Arguments:   <ul> <li>svr(int) - set the sevarity of the log message</li> <li>currentContextRequested(bool) - in case a global context log was called</li> </ul>"},{"location":"log/#logcurrentframe","title":"logCurrentFrame","text":"<p>  Log the current requested frame.  The frame is collected procedurally from the dtack, without needing to pass any arguments into methed.  Constructor:  logCurrentFrame() Return:  None Arguments:   Keyword Arguments:   </p>"},{"location":"log/#validatelogrootdirectory","title":"validateLogRootDirectory","text":"<p>  Validate log directory existence within the current project folder.  Constructor:  validateLogRootDirectory() Return:  string (log directory path) Arguments:   Keyword Arguments:   </p>"},{"location":"lookAtControl/","title":"lookAtControl","text":"<p>"},{"location":"lookAtControl/#lookatcontrol","title":"lookAtControl","text":"<p>  Author: Asaf Ben-Zur  Best used for: Eyes, Generic Orientation based components  This module was written to function as an eye IK (look at setup), but can be used for many other generic components.  This module will create a slave control (at root position) which is aim-constraint to custom look-at guide.  The slave control will be the control authority for the joint, as the look-at control will control its orientation."},{"location":"lookAtControl/#defenitions","title":"Defenitions","text":""},{"location":"lookAtControl/#construct","title":"construct","text":"<p> Constructor:  construct(mansur, MnsBuildModule, kwargs) Return:   list (controls), dict (internalSpaces), MnsNameStd (moduleSpaceAttrHost) Arguments:   <ul> <li>mansur</li> <li>MnsBuildModule</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"lookAtControl/#customguides","title":"customGuides","text":"<p> Constructor:  customGuides(mansur, builtGuides) Return:  None Arguments:   <ul> <li>mansur</li> <li>builtGuides</li> </ul> Keyword Arguments:   </p>"},{"location":"lookAtControl/#postconstruct","title":"postConstruct","text":"<p> Constructor:  postConstruct(mansur, MnsBuildModule, kwargs) Return:  None Arguments:   <ul> <li>mansur</li> <li>MnsBuildModule</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"lookAtControl_settings/","title":"lookAtControl settings","text":"<p>"},{"location":"lookAtControl_settings/#lookatcontrol-settings","title":"lookAtControl Settings","text":"<p>  Author: Asaf Ben-Zur  Best used for: Eyes, Generic Orientation based components  This module was written to function as an eye IK (look at setup), but can be used for many other generic components.  This module will create a slave control (at root position) which is aim-constraint to custom look-at guide.  The slave control will be the control authority for the joint, as the look-at control will control its orientation.  </p>"},{"location":"lookAtControl_settings/#attributes","title":"Attributes","text":""},{"location":"lookAtControl_settings/#globalsettings","title":"GlobalSettings","text":"<p>Attribute NameDefaultDescription slaveControlShape lightSphere Origin slave control shape targetControlShape circle Main control shape upLocalDirection 0 Main control shape channelControl T R S X v v v Y v v v Z v v v Main control channel-box settings"},{"location":"lookAtControl_settings/#interpolatedorientation","title":"InterpolatedOrientation","text":"<p>Attribute NameDefaultDescription doInterpOrient False This feature is used to create a weighten split orientation. When you need to create a weighted orientation for a control between two spaces, use this feature spaceA The first space to be interpolated. This can be a guide, joint, or control. spaceB The second space to be interpolated. This can be a guide, joint, or control. spaceAWeight 0.5 The deafult weight for the first space. The second space weight will be the complimentary weight adding to 1 doAngleBasedScale False create an angle based scale driver, to scale the target slave joint when the angle changes between the two sources. Originally designed for double-chin setup scaleWhenAngle 0 This setting controls the trigger mode for action. Icreases- means that the trigger for action will occur when the intorpolated angle increases, and do nothing when it decreases. decreases- means that the trigger for action will occur when the intorpolated angle decreases, and do nothing when it increases maxScale 2.0 The actions maximum value clamp value angleMaxRange 180.0 The maximum angle clamp that the action should be targeted to connectToTargetAxis 1 This setting will set the target axis to act on. Please map the axis needed to be scaled based on the orientation of your guide"},{"location":"lookAtControl_settings/#spring","title":"spring","text":"<p>Attribute NameDefaultDescription doLookAtSpring False This feature will create a spring node blowe the look-at master. This will result in a rotation-based spring, mostly used for vehicle center suspension to achive secondary motion defaultStiffness 0.5 Spring default stiffness value defaultDamping 0.5 Spring default damping value"},{"location":"lookAtControl_settings/#aseyelook","title":"asEyeLook","text":"<p>Attribute NameDefaultDescription pupilDilateAttribute Input bland-shape attribute to connect pupil dialation control to pupilContractAttribute Input bland-shape attribute to connect pupil contaction control to irisDilateAttribute Input bland-shape attribute to connect iris dialation control to irisContractAttribute Input bland-shape attribute to connect iris contaction control to combinedAttributeHost If this is set to True, a global attribute for the above pupil and iris controls will be created on the specified attribute host. This feature is mainly to combine two different eye shapes controls into one single control, or moving the location of this attribute to a diffent module in case the eye meshs are combined"},{"location":"meshUtility/","title":"meshUtility","text":"<p>"},{"location":"meshUtility/#meshutility","title":"meshUtility","text":""},{"location":"meshUtility/#defenitions","title":"Defenitions","text":""},{"location":"meshUtility/#getshapefromtransform","title":"getShapeFromTransform","text":"<p> Constructor:  getShapeFromTransform(node, inter=False) Return:  None Arguments:   <ul> <li>node</li> <li>inter(bool) ; [default: False]</li> </ul> Keyword Arguments:   </p>"},{"location":"meshUtility/#getsymdictformesh","title":"getSymDictForMesh","text":"<p> Constructor:  getSymDictForMesh(meshName = \"\", tolerance = 0.02) Return:  None Arguments:   <ul> <li>meshName(str) ; [default: \"\"]</li> <li>tolerance(float) ; [default: 0.02]</li> </ul> Keyword Arguments:   </p>"},{"location":"meta/","title":"Meta","text":"<p>"},{"location":"meta/#meta","title":"meta","text":"<p>  Author: Asaf Ben-Zur  Best used for: Metacarpal (Fingers), Metatarsal (Toes)  This module will create a control for every root guide position, as well as a few global splay controls for the collection of controls based on settings.  The play controls will behave as a global tweaker for the control collection, allowing easier animation.  In order to implement \"splayB\" feature, simply parent a FK chain modules under each of the main meta guides.  This module construction will try to detect a FK module under each guide, and if any exist, will create the second layer splay control for these FK chains."},{"location":"meta/#defenitions","title":"Defenitions","text":""},{"location":"meta/#construct","title":"construct","text":"<p> Constructor:  construct(mansur, MnsBuildModule, kwargs) Return:   list (controls), dict (internalSpaces), MnsNameStd (moduleSpaceAttrHost) Arguments:   <ul> <li>mansur</li> <li>MnsBuildModule</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"meta/#postconstruct","title":"postConstruct","text":"<p> Constructor:  postConstruct(mansur, MnsBuildModule, kwargs) Return:  None Arguments:   <ul> <li>mansur</li> <li>MnsBuildModule</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"meta_settings/","title":"Meta settings","text":"<p>"},{"location":"meta_settings/#meta-settings","title":"meta Settings","text":"<p>  Author: Asaf Ben-Zur  Best used for: Metacarpal (Fingers), Metatarsal (Toes)  This module will create a control for every root guide position, as well as a few global splay controls for the collection of controls based on settings.  The play controls will behave as a global tweaker for the control collection, allowing easier animation.  In order to implement \"splayB\" feature, simply parent a FK chain modules under each of the main meta guides.  This module construction will try to detect a FK module under each guide, and if any exist, will create the second layer splay control for these FK chains.  </p>"},{"location":"meta_settings/#attributes","title":"Attributes","text":""},{"location":"meta_settings/#globalsettings","title":"GlobalSettings","text":"<p>Attribute NameDefaultDescription tweakersControlShape cone Meta main controls shape tweakerChannelControl T R S X v v v Y v v v Z v v v Meta control channel-box settings"},{"location":"meta_settings/#splaysettings","title":"SplaySettings","text":"<p>Attribute NameDefaultDescription doSplayA True Choose if you want to create Splay A control doSplayAMid True Choose if you want to create Splay A Mid control doSplayB True Choose if you want to create Splay B control doSplayBMid True Choose if you want to create Splay B Mid control splayControlShape diamond splay controls shape splayChannelControl T R S X v v Y v v Z v v Splay control channel-box settings"},{"location":"meta_settings/#curlsettings","title":"CurlSettings","text":"<p>Attribute NameDefaultDescription doCurls True If this setting is set to True, global curl channel-box chnnels will be created on the root guide"},{"location":"mnsAnimationExporter/","title":"mnsAnimationExporter","text":"<p>"},{"location":"mnsAnimationExporter/#mnsanimationexporter","title":"mnsAnimationExporter","text":"<p>  === Author: Assaf Ben Zur ===  This simple animation tool was created to allow animators to space switch and IK-&gt;FK switch easily.  This tool is selection based. Please select controls to enable relevant capabilities.  For spaces, simply select the controls you want to act upon, choose your target spaces, and press \"switch\". This will switch the space, while maintaining the controls's transforms, using keys created automatically.  For Limbs, simple select any control/s for the limbs that you wish to act upon, and press the relevant button- To-IK or To-FK.  This will switch the limb/controls to the selected state.   This tool also includes Auto-Key switches, as well as a sequence and bake modes."},{"location":"mnsAnimationExporter/#classes","title":"Classes","text":""},{"location":"mnsAnimationExporter/#ExtraAttributesListWidget TARGET","title":"mnsAnimationExporter","text":""},{"location":"mnsAnimationExporter/#extraattributeslistwidget-class","title":"ExtraAttributesListWidget [Class]","text":"<p>  A simple QPushButton re-implementation.  This reimplementation is used to control the button's mouse events, used in 'Edit' mode.  Constructor:  ExtraAttributesListWidget(parent(str) ; [default: None],default_extraAttrs(list) ; [default: []],**kwargs) Inherits from:  QtWidgets.QListWidget Class Members:   <ul> <ul> <li>parent</li> <li>acceptedAttributeTypes</li> </ul> Methods:  <ul> <li>copyList  [method] <li>getItems  [method] <li>removeSelectedItems  [method] <li>addAttributesToList  [method] <li>pasteList  [method] <li>validateAttribute  [method] <li>openExtraAttrsMenu  [method]"},{"location":"mnsAnimationExporter/#extraattributeslistwidget-methods","title":"ExtraAttributesListWidget  methods","text":"<p>"},{"location":"mnsAnimationExporter/#copyListTARGET","title":"mnsAnimationExporter","text":"copyList  [ExtraAttributesListWidget  class method]  Constructor:  copyList(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"mnsAnimationExporter/#getItemsTARGET","title":"mnsAnimationExporter","text":"getItems  [ExtraAttributesListWidget  class method]  Constructor:  getItems(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"mnsAnimationExporter/#removeSelectedItemsTARGET","title":"mnsAnimationExporter","text":"removeSelectedItems  [ExtraAttributesListWidget  class method]  Constructor:  removeSelectedItems(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"mnsAnimationExporter/#addAttributesToListTARGET","title":"mnsAnimationExporter","text":"addAttributesToList  [ExtraAttributesListWidget  class method]  Constructor:  addAttributesToList(self, kwargs) Return:  None Arguments:   <ul> <li>self</li> <li>kwargs</li> </ul> Optional Arguments:"},{"location":"mnsAnimationExporter/#pasteListTARGET","title":"mnsAnimationExporter","text":"pasteList  [ExtraAttributesListWidget  class method]  Constructor:  pasteList(self, kwargs) Return:  None Arguments:   <ul> <li>self</li> <li>kwargs</li> </ul> Optional Arguments:"},{"location":"mnsAnimationExporter/#validateAttributeTARGET","title":"mnsAnimationExporter","text":"validateAttribute  [ExtraAttributesListWidget  class method]  Constructor:  validateAttribute(self, node, attributeName) Return:  None Arguments:   <ul> <li>self</li> <li>node</li> <li>attributeName</li> </ul> Optional Arguments:"},{"location":"mnsAnimationExporter/#openExtraAttrsMenuTARGET","title":"mnsAnimationExporter","text":"openExtraAttrsMenu  [ExtraAttributesListWidget  class method]  Constructor:  openExtraAttrsMenu(self, position) Return:  None Arguments:   <ul> <li>self</li> <li>position</li> </ul> Optional Arguments:"},{"location":"mnsAnimationExporter/#MnsAnimationExporter TARGET","title":"mnsAnimationExporter","text":""},{"location":"mnsAnimationExporter/#mnsanimationexporter-class","title":"MnsAnimationExporter [Class]","text":"<p>  Spaces Tool UI Class.  Constructor:  MnsAnimationExporter(parent(str) ; [default: mnsUIUtils.get_maya_window()]) Inherits from:  form_class, base_class Class Members:   <ul> <ul> <li>infoNode</li> <li>ranges_vs</li> <li>extraAttrsClipboard</li> </ul> Methods:  <ul> <li>deleteRange  [method] <li>export  [method] <li>gatherData  [method] <li>initializeView  [method] <li>initializeWidgets  [method] <li>loadUIInfo  [method] <li>random_color  [method] <li>resetUI  [method] <li>validateUIInfoNode  [method] <li>addRange  [method] <li>loadWSAnimData  [method] <li>writeDefaultData  [method] <li>saveWSAnimData  [method] <li>getRangePath  [method] <li>getSkinnedMeshesFromJntHeirarchy  [method] <li>extractSkeletonFromRigTop  [method] <li>bakeExtraAttributes  [method] <li>getUnusedJoints  [method] <li>restructureJointHeirarchy  [method] <li>setRangeMode  [method] <li>connectSignals  [method] <li>loadWindow  [method]"},{"location":"mnsAnimationExporter/#mnsanimationexporter-methods","title":"MnsAnimationExporter  methods","text":"<p>"},{"location":"mnsAnimationExporter/#deleteRangeTARGET","title":"mnsAnimationExporter","text":"deleteRange  [MnsAnimationExporter  class method]  Constructor:  deleteRange(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"mnsAnimationExporter/#exportTARGET","title":"mnsAnimationExporter","text":"export  [MnsAnimationExporter  class method]  Constructor:  export(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"mnsAnimationExporter/#gatherDataTARGET","title":"mnsAnimationExporter","text":"gatherData  [MnsAnimationExporter  class method]  Constructor:  gatherData(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"mnsAnimationExporter/#initializeViewTARGET","title":"mnsAnimationExporter","text":"initializeView  [MnsAnimationExporter  class method]  Constructor:  initializeView(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"mnsAnimationExporter/#initializeWidgetsTARGET","title":"mnsAnimationExporter","text":"initializeWidgets  [MnsAnimationExporter  class method]  Constructor:  initializeWidgets(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"mnsAnimationExporter/#loadUIInfoTARGET","title":"mnsAnimationExporter","text":"loadUIInfo  [MnsAnimationExporter  class method]  Constructor:  loadUIInfo(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"mnsAnimationExporter/#random_colorTARGET","title":"mnsAnimationExporter","text":"random_color  [MnsAnimationExporter  class method]  Constructor:  random_color(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"mnsAnimationExporter/#resetUITARGET","title":"mnsAnimationExporter","text":"resetUI  [MnsAnimationExporter  class method]  Constructor:  resetUI(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"mnsAnimationExporter/#validateUIInfoNodeTARGET","title":"mnsAnimationExporter","text":"validateUIInfoNode  [MnsAnimationExporter  class method]  Constructor:  validateUIInfoNode(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"mnsAnimationExporter/#addRangeTARGET","title":"mnsAnimationExporter","text":"addRange  [MnsAnimationExporter  class method]  Constructor:  addRange(self, kwargs) Return:  None Arguments:   <ul> <li>self</li> <li>kwargs</li> </ul> Optional Arguments:"},{"location":"mnsAnimationExporter/#loadWSAnimDataTARGET","title":"mnsAnimationExporter","text":"loadWSAnimData  [MnsAnimationExporter  class method]  Constructor:  loadWSAnimData(self, animData) Return:  None Arguments:   <ul> <li>self</li> <li>animData</li> </ul> Optional Arguments:"},{"location":"mnsAnimationExporter/#writeDefaultDataTARGET","title":"mnsAnimationExporter","text":"writeDefaultData  [MnsAnimationExporter  class method]  Constructor:  writeDefaultData(self, exportRanges) Return:  None Arguments:   <ul> <li>self</li> <li>exportRanges</li> </ul> Optional Arguments:"},{"location":"mnsAnimationExporter/#saveWSAnimDataTARGET","title":"mnsAnimationExporter","text":"saveWSAnimData  [MnsAnimationExporter  class method]  Constructor:  saveWSAnimData(self, joints, rangeMin, rangeMax) Return:  None Arguments:   <ul> <li>self</li> <li>joints</li> <li>rangeMin</li> <li>rangeMax</li> </ul> Optional Arguments:"},{"location":"mnsAnimationExporter/#getRangePathTARGET","title":"mnsAnimationExporter","text":"getRangePath  [MnsAnimationExporter  class method]  Constructor:  getRangePath(self, lineEditWidget) Return:  None Arguments:   <ul> <li>self</li> <li>lineEditWidget</li> </ul> Optional Arguments:"},{"location":"mnsAnimationExporter/#getSkinnedMeshesFromJntHeirarchyTARGET","title":"mnsAnimationExporter","text":"getSkinnedMeshesFromJntHeirarchy  [MnsAnimationExporter  class method]  Constructor:  getSkinnedMeshesFromJntHeirarchy(self, origRootJnt) Return:  None Arguments:   <ul> <li>self</li> <li>origRootJnt</li> </ul> Optional Arguments:"},{"location":"mnsAnimationExporter/#extractSkeletonFromRigTopTARGET","title":"mnsAnimationExporter","text":"extractSkeletonFromRigTop  [MnsAnimationExporter  class method]  Constructor:  extractSkeletonFromRigTop(self, rigTop, extractMode, rotToJointOrient, includeMeshes, messageLog) Return:  None Arguments:   <ul> <li>self</li> <li>rigTop</li> <li>extractMode</li> <li>rotToJointOrient</li> <li>includeMeshes</li> <li>messageLog</li> </ul> Optional Arguments:"},{"location":"mnsAnimationExporter/#bakeExtraAttributesTARGET","title":"mnsAnimationExporter","text":"bakeExtraAttributes  [MnsAnimationExporter  class method]  Constructor:  bakeExtraAttributes(self, rng, host) Return:  None Arguments:   <ul> <li>self</li> <li>rng</li> <li>host</li> </ul> Optional Arguments:"},{"location":"mnsAnimationExporter/#getUnusedJointsTARGET","title":"mnsAnimationExporter","text":"getUnusedJoints  [MnsAnimationExporter  class method]  Constructor:  getUnusedJoints(self, rootJnt, skinData) Return:  None Arguments:   <ul> <li>self</li> <li>rootJnt</li> <li>skinData</li> </ul> Optional Arguments:"},{"location":"mnsAnimationExporter/#restructureJointHeirarchyTARGET","title":"mnsAnimationExporter","text":"restructureJointHeirarchy  [MnsAnimationExporter  class method]  Constructor:  restructureJointHeirarchy(self, rootJnt, unusedInfluences) Return:  None Arguments:   <ul> <li>self</li> <li>rootJnt</li> <li>unusedInfluences</li> </ul> Optional Arguments:"},{"location":"mnsAnimationExporter/#setRangeModeTARGET","title":"mnsAnimationExporter","text":"setRangeMode  [MnsAnimationExporter  class method]  Constructor:  setRangeMode(self, widgets, isAsset) Return:  None Arguments:   <ul> <li>self</li> <li>widgets</li> <li>isAsset</li> </ul> Optional Arguments:"},{"location":"mnsAnimationExporter/#connectSignalsTARGET","title":"mnsAnimationExporter","text":"connectSignals  [MnsAnimationExporter  class method]  Connect all UI Signals. Constructor:  connectSignals(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"mnsAnimationExporter/#loadWindowTARGET","title":"mnsAnimationExporter","text":"loadWindow  [MnsAnimationExporter  class method]  Show window method. Constructor:  loadWindow(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"mnsAnimationExporter/#defenitions","title":"Defenitions","text":""},{"location":"mnsAnimationExporter/#loadanimationexporter","title":"loadAnimationExporter","text":"<p>  Load the Def Serach UI from globals, avoid UI duplication.  Constructor:  loadAnimationExporter()  Return:  None Arguments:   Keyword Arguments:   </p>"},{"location":"mnsFacialMocapTool/","title":"mnsFacialMocapTool","text":"<p>"},{"location":"mnsFacialMocapTool/#mnsfacialmocaptool","title":"mnsFacialMocapTool","text":"<p>  === Author: Assaf Ben Zur ===  This simple animation tool was created to allow animators to space switch and IK-&gt;FK switch easily.  This tool is selection based. Please select controls to enable relevant capabilities.  For spaces, simply select the controls you want to act upon, choose your target spaces, and press \"switch\". This will switch the space, while maintaining the controls's transforms, using keys created automatically.  For Limbs, simple select any control/s for the limbs that you wish to act upon, and press the relevant button- To-IK or To-FK.  This will switch the limb/controls to the selected state.   This tool also includes Auto-Key switches, as well as a sequence and bake modes."},{"location":"mnsFacialMocapTool/#classes","title":"Classes","text":""},{"location":"mnsFacialMocapTool/#MnsFacialMocapTool TARGET","title":"mnsFacialMocapTool","text":""},{"location":"mnsFacialMocapTool/#mnsfacialmocaptool-class","title":"MnsFacialMocapTool [Class]","text":"<p>  Spaces Tool UI Class.  Constructor:  MnsFacialMocapTool(parent(str) ; [default: mnsUIUtils.get_maya_window()]) Inherits from:  form_class, base_class Class Members:   <ul> <ul> <li>pbNodes</li> <li>col_sourceAttr</li> <li>col_weight</li> <li>col_min</li> <li>col_max</li> <li>col_isStored</li> <li>col_sourceAttrName</li> <li>col_index</li> <li>poseStorage</li> <li>sbSliderPairing</li> <li>widgetAttrPairing</li> </ul> Methods:  <ul> <li>addSelectedTransformsToPB  [method] <li>clearPoseStorage  [method] <li>createNewDefinition  [method] <li>deletePbNode  [method] <li>getAllPoseBlendNodes  [method] <li>getAllTargetTransforms  [method] <li>getCurrentPbSelection  [method] <li>getSelectedPbNode  [method] <li>getSelectedSourceAttrs  [method] <li>getSelectedTargetTransforms  [method] <li>getSelectedTragetTransforms  [method] <li>importFMData  [method] <li>initCreateWidget  [method] <li>initializeSelectedPb  [method] <li>initializeWidgets  [method] <li>selectPbNode  [method] <li>selectTargetTransforms  [method] <li>setFlagsForPbNode  [method] <li>switchEditUIState  [method] <li>switchUIStates  [method] <li>toggleTrigger  [method] <li>addSelectedCBSourceAttrs  [method] <li>initializeView  [method] <li>removeSelectedSourceAttrs  [method] <li>removeSelectedTransformsFromPB  [method] <li>setFlagCbxStateNoSignal  [method] <li>setSourceValues  [method] <li>copyPose  [method] <li>editTargetTransforms  [method] <li>setCreateWidgetsMode  [method] <li>setSbSliderValue  [method] <li>createMenu  [method] <li>pbNodesMenu  [method] <li>sourceAttrsMenu  [method] <li>targetTransformsMenu  [method] <li>createSourceRow  [method] <li>toggleCbxFlagState  [method] <li>connectSignals  [method] <li>loadWindow  [method]"},{"location":"mnsFacialMocapTool/#mnsfacialmocaptool-methods","title":"MnsFacialMocapTool  methods","text":"<p>"},{"location":"mnsFacialMocapTool/#addSelectedTransformsToPBTARGET","title":"mnsFacialMocapTool","text":"addSelectedTransformsToPB  [MnsFacialMocapTool  class method]  Constructor:  addSelectedTransformsToPB(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"mnsFacialMocapTool/#clearPoseStorageTARGET","title":"mnsFacialMocapTool","text":"clearPoseStorage  [MnsFacialMocapTool  class method]  Constructor:  clearPoseStorage(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"mnsFacialMocapTool/#createNewDefinitionTARGET","title":"mnsFacialMocapTool","text":"createNewDefinition  [MnsFacialMocapTool  class method]  Constructor:  createNewDefinition(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"mnsFacialMocapTool/#deletePbNodeTARGET","title":"mnsFacialMocapTool","text":"deletePbNode  [MnsFacialMocapTool  class method]  Constructor:  deletePbNode(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"mnsFacialMocapTool/#getAllPoseBlendNodesTARGET","title":"mnsFacialMocapTool","text":"getAllPoseBlendNodes  [MnsFacialMocapTool  class method]  Constructor:  getAllPoseBlendNodes(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"mnsFacialMocapTool/#getAllTargetTransformsTARGET","title":"mnsFacialMocapTool","text":"getAllTargetTransforms  [MnsFacialMocapTool  class method]  Constructor:  getAllTargetTransforms(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"mnsFacialMocapTool/#getCurrentPbSelectionTARGET","title":"mnsFacialMocapTool","text":"getCurrentPbSelection  [MnsFacialMocapTool  class method]  Constructor:  getCurrentPbSelection(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"mnsFacialMocapTool/#getSelectedPbNodeTARGET","title":"mnsFacialMocapTool","text":"getSelectedPbNode  [MnsFacialMocapTool  class method]  Constructor:  getSelectedPbNode(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"mnsFacialMocapTool/#getSelectedSourceAttrsTARGET","title":"mnsFacialMocapTool","text":"getSelectedSourceAttrs  [MnsFacialMocapTool  class method]  Constructor:  getSelectedSourceAttrs(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"mnsFacialMocapTool/#getSelectedTargetTransformsTARGET","title":"mnsFacialMocapTool","text":"getSelectedTargetTransforms  [MnsFacialMocapTool  class method]  Constructor:  getSelectedTargetTransforms(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"mnsFacialMocapTool/#getSelectedTragetTransformsTARGET","title":"mnsFacialMocapTool","text":"getSelectedTragetTransforms  [MnsFacialMocapTool  class method]  Constructor:  getSelectedTragetTransforms(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"mnsFacialMocapTool/#importFMDataTARGET","title":"mnsFacialMocapTool","text":"importFMData  [MnsFacialMocapTool  class method]  Constructor:  importFMData(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"mnsFacialMocapTool/#initCreateWidgetTARGET","title":"mnsFacialMocapTool","text":"initCreateWidget  [MnsFacialMocapTool  class method]  Constructor:  initCreateWidget(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"mnsFacialMocapTool/#initializeSelectedPbTARGET","title":"mnsFacialMocapTool","text":"initializeSelectedPb  [MnsFacialMocapTool  class method]  Constructor:  initializeSelectedPb(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"mnsFacialMocapTool/#initializeWidgetsTARGET","title":"mnsFacialMocapTool","text":"initializeWidgets  [MnsFacialMocapTool  class method]  Constructor:  initializeWidgets(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"mnsFacialMocapTool/#selectPbNodeTARGET","title":"mnsFacialMocapTool","text":"selectPbNode  [MnsFacialMocapTool  class method]  Constructor:  selectPbNode(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"mnsFacialMocapTool/#selectTargetTransformsTARGET","title":"mnsFacialMocapTool","text":"selectTargetTransforms  [MnsFacialMocapTool  class method]  Constructor:  selectTargetTransforms(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"mnsFacialMocapTool/#setFlagsForPbNodeTARGET","title":"mnsFacialMocapTool","text":"setFlagsForPbNode  [MnsFacialMocapTool  class method]  Constructor:  setFlagsForPbNode(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"mnsFacialMocapTool/#switchEditUIStateTARGET","title":"mnsFacialMocapTool","text":"switchEditUIState  [MnsFacialMocapTool  class method]  Constructor:  switchEditUIState(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"mnsFacialMocapTool/#switchUIStatesTARGET","title":"mnsFacialMocapTool","text":"switchUIStates  [MnsFacialMocapTool  class method]  Constructor:  switchUIStates(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"mnsFacialMocapTool/#toggleTriggerTARGET","title":"mnsFacialMocapTool","text":"toggleTrigger  [MnsFacialMocapTool  class method]  Constructor:  toggleTrigger(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"mnsFacialMocapTool/#addSelectedCBSourceAttrsTARGET","title":"mnsFacialMocapTool","text":"addSelectedCBSourceAttrs  [MnsFacialMocapTool  class method]  Constructor:  addSelectedCBSourceAttrs(self, kwargs) Return:  None Arguments:   <ul> <li>self</li> <li>kwargs</li> </ul> Optional Arguments:"},{"location":"mnsFacialMocapTool/#initializeViewTARGET","title":"mnsFacialMocapTool","text":"initializeView  [MnsFacialMocapTool  class method]  Constructor:  initializeView(self, kwargs) Return:  None Arguments:   <ul> <li>self</li> <li>kwargs</li> </ul> Optional Arguments:"},{"location":"mnsFacialMocapTool/#removeSelectedSourceAttrsTARGET","title":"mnsFacialMocapTool","text":"removeSelectedSourceAttrs  [MnsFacialMocapTool  class method]  Constructor:  removeSelectedSourceAttrs(self, kwargs) Return:  None Arguments:   <ul> <li>self</li> <li>kwargs</li> </ul> Optional Arguments:"},{"location":"mnsFacialMocapTool/#removeSelectedTransformsFromPBTARGET","title":"mnsFacialMocapTool","text":"removeSelectedTransformsFromPB  [MnsFacialMocapTool  class method]  Constructor:  removeSelectedTransformsFromPB(self, kwargs) Return:  None Arguments:   <ul> <li>self</li> <li>kwargs</li> </ul> Optional Arguments:"},{"location":"mnsFacialMocapTool/#setFlagCbxStateNoSignalTARGET","title":"mnsFacialMocapTool","text":"setFlagCbxStateNoSignal  [MnsFacialMocapTool  class method]  Constructor:  setFlagCbxStateNoSignal(self, cbx, state) Return:  None Arguments:   <ul> <li>self</li> <li>cbx</li> <li>state</li> </ul> Optional Arguments:"},{"location":"mnsFacialMocapTool/#setSourceValuesTARGET","title":"mnsFacialMocapTool","text":"setSourceValues  [MnsFacialMocapTool  class method]  Constructor:  setSourceValues(self, currentItem, previousItem) Return:  None Arguments:   <ul> <li>self</li> <li>currentItem</li> <li>previousItem</li> </ul> Optional Arguments:"},{"location":"mnsFacialMocapTool/#copyPoseTARGET","title":"mnsFacialMocapTool","text":"copyPose  [MnsFacialMocapTool  class method]  Constructor:  copyPose(self, flip = False) Return:  None Arguments:   <ul> <li>self</li> <li>flip(bool) ; [default: False]</li> </ul> Optional Arguments:"},{"location":"mnsFacialMocapTool/#editTargetTransformsTARGET","title":"mnsFacialMocapTool","text":"editTargetTransforms  [MnsFacialMocapTool  class method]  Constructor:  editTargetTransforms(self, mode = 0) Return:  None Arguments:   <ul> <li>self</li> <li>mode(int) ; [default: 0]</li> </ul> Optional Arguments:"},{"location":"mnsFacialMocapTool/#setCreateWidgetsModeTARGET","title":"mnsFacialMocapTool","text":"setCreateWidgetsMode  [MnsFacialMocapTool  class method]  Constructor:  setCreateWidgetsMode(self, mode = 0) Return:  None Arguments:   <ul> <li>self</li> <li>mode(int) ; [default: 0]</li> </ul> Optional Arguments:"},{"location":"mnsFacialMocapTool/#setSbSliderValueTARGET","title":"mnsFacialMocapTool","text":"setSbSliderValue  [MnsFacialMocapTool  class method]  Constructor:  setSbSliderValue(self, newValue) Return:  None Arguments:   <ul> <li>self</li> <li>newValue</li> </ul> Optional Arguments:"},{"location":"mnsFacialMocapTool/#createMenuTARGET","title":"mnsFacialMocapTool","text":"createMenu  [MnsFacialMocapTool  class method]  Constructor:  createMenu(self, position) Return:  None Arguments:   <ul> <li>self</li> <li>position</li> </ul> Optional Arguments:"},{"location":"mnsFacialMocapTool/#pbNodesMenuTARGET","title":"mnsFacialMocapTool","text":"pbNodesMenu  [MnsFacialMocapTool  class method]  Constructor:  pbNodesMenu(self, position) Return:  None Arguments:   <ul> <li>self</li> <li>position</li> </ul> Optional Arguments:"},{"location":"mnsFacialMocapTool/#sourceAttrsMenuTARGET","title":"mnsFacialMocapTool","text":"sourceAttrsMenu  [MnsFacialMocapTool  class method]  Constructor:  sourceAttrsMenu(self, position) Return:  None Arguments:   <ul> <li>self</li> <li>position</li> </ul> Optional Arguments:"},{"location":"mnsFacialMocapTool/#targetTransformsMenuTARGET","title":"mnsFacialMocapTool","text":"targetTransformsMenu  [MnsFacialMocapTool  class method]  Constructor:  targetTransformsMenu(self, position) Return:  None Arguments:   <ul> <li>self</li> <li>position</li> </ul> Optional Arguments:"},{"location":"mnsFacialMocapTool/#createSourceRowTARGET","title":"mnsFacialMocapTool","text":"createSourceRow  [MnsFacialMocapTool  class method]  Constructor:  createSourceRow(self, sourceAttr) Return:  None Arguments:   <ul> <li>self</li> <li>sourceAttr</li> </ul> Optional Arguments:"},{"location":"mnsFacialMocapTool/#toggleCbxFlagStateTARGET","title":"mnsFacialMocapTool","text":"toggleCbxFlagState  [MnsFacialMocapTool  class method]  Constructor:  toggleCbxFlagState(self, state) Return:  None Arguments:   <ul> <li>self</li> <li>state</li> </ul> Optional Arguments:"},{"location":"mnsFacialMocapTool/#connectSignalsTARGET","title":"mnsFacialMocapTool","text":"connectSignals  [MnsFacialMocapTool  class method]  Connect all UI Signals. Constructor:  connectSignals(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"mnsFacialMocapTool/#loadWindowTARGET","title":"mnsFacialMocapTool","text":"loadWindow  [MnsFacialMocapTool  class method]  Show window method. Constructor:  loadWindow(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"mnsFacialMocapTool/#defenitions","title":"Defenitions","text":""},{"location":"mnsFacialMocapTool/#loadfacialmocaptool","title":"loadFacialMocapTool","text":"<p>  Load the Def Serach UI from globals, avoid UI duplication.  Constructor:  loadFacialMocapTool()  Return:  None Arguments:   Keyword Arguments:   </p>"},{"location":"mnsJointRadiusTool/","title":"mnsJointRadiusTool","text":"<p>"},{"location":"mnsJointRadiusTool/#mnsjointradiustool","title":"mnsJointRadiusTool","text":"<p>  === Author: Assaf Ben Zur ===  A simple tool to control the rig's joint heirarchy joint radius easily."},{"location":"mnsJointRadiusTool/#classes","title":"Classes","text":""},{"location":"mnsJointRadiusTool/#MnsJointRadiusTool TARGET","title":"mnsJointRadiusTool","text":""},{"location":"mnsJointRadiusTool/#mnsjointradiustool-class","title":"MnsJointRadiusTool [Class]","text":"<p>  Spaces Tool UI Class.  Constructor:  MnsJointRadiusTool(parent(str) ; [default: mnsUIUtils.get_maya_window()]) Inherits from:  form_class, base_class Class Members:   <ul> <ul> <li>allJnts</li> </ul> Methods:  <ul> <li>getCurrentRadius  [method] <li>initializeView  [method] <li>initializeWidgets  [method] <li>setValue  [method] <li>connectSignals  [method] <li>loadWindow  [method]"},{"location":"mnsJointRadiusTool/#mnsjointradiustool-methods","title":"MnsJointRadiusTool  methods","text":"<p>"},{"location":"mnsJointRadiusTool/#getCurrentRadiusTARGET","title":"mnsJointRadiusTool","text":"getCurrentRadius  [MnsJointRadiusTool  class method]  Constructor:  getCurrentRadius(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"mnsJointRadiusTool/#initializeViewTARGET","title":"mnsJointRadiusTool","text":"initializeView  [MnsJointRadiusTool  class method]  Constructor:  initializeView(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"mnsJointRadiusTool/#initializeWidgetsTARGET","title":"mnsJointRadiusTool","text":"initializeWidgets  [MnsJointRadiusTool  class method]  Constructor:  initializeWidgets(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"mnsJointRadiusTool/#setValueTARGET","title":"mnsJointRadiusTool","text":"setValue  [MnsJointRadiusTool  class method]  Constructor:  setValue(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"mnsJointRadiusTool/#connectSignalsTARGET","title":"mnsJointRadiusTool","text":"connectSignals  [MnsJointRadiusTool  class method]  Connect all UI Signals. Constructor:  connectSignals(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"mnsJointRadiusTool/#loadWindowTARGET","title":"mnsJointRadiusTool","text":"loadWindow  [MnsJointRadiusTool  class method]  Show window method. Constructor:  loadWindow(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"mnsJointRadiusTool/#defenitions","title":"Defenitions","text":""},{"location":"mnsJointRadiusTool/#loadjointradiustool","title":"loadJointRadiusTool","text":"<p>  Load the Def Serach UI from globals, avoid UI duplication.  Constructor:  loadJointRadiusTool()  Return:  None Arguments:   Keyword Arguments:   </p>"},{"location":"mnsSpacesTool/","title":"mnsSpacesTool","text":"<p>"},{"location":"mnsSpacesTool/#mnsspacestool","title":"mnsSpacesTool","text":"<p>  === Author: Assaf Ben Zur ===  This simple animation tool was created to allow animators to space switch and IK-&gt;FK switch easily.  This tool is selection based. Please select controls to enable relevant capabilities.  For spaces, simply select the controls you want to act upon, choose your target spaces, and press \"switch\". This will switch the space, while maintaining the controls's transforms, using keys created automatically.  For Limbs, simple select any control/s for the limbs that you wish to act upon, and press the relevant button- To-IK or To-FK.  This will switch the limb/controls to the selected state.   This tool also includes Auto-Key switches, as well as a sequence and bake modes."},{"location":"mnsSpacesTool/#classes","title":"Classes","text":""},{"location":"mnsSpacesTool/#MnsSpacesTool TARGET","title":"mnsSpacesTool","text":""},{"location":"mnsSpacesTool/#mnsspacestool-class","title":"MnsSpacesTool [Class]","text":"<p>  Spaces Tool UI Class.  Constructor:  MnsSpacesTool(parent(str) ; [default: mnsUIUtils.get_maya_window()]) Inherits from:  form_class, base_class Class Members:   <ul> <ul> <li>mayaSelectCallBack</li> <li>mayaTimeChangedCallBack</li> <li>limbs</li> <li>spaceCtrls</li> </ul> Methods:  <ul> <li>initializeView  [method] <li>insertCallbacks  [method] <li>removeCallbacks  [method] <li>selectIKFKHost  [method] <li>setAvailbleLimbs  [method] <li>setAvailbleSpaces  [method] <li>setIKFKView  [method] <li>setSequenceRange  [method] <li>setSpacesMode  [method] <li>setSpacesView  [method] <li>spaceSwitch  [method] <li>sceneSelectionChanged  [method] <li>getFramesListFromUIState  [method] <li>getSpaceEnumIndexByName  [method] <li>setAutoKeyMode  [method] <li>setSequenceMode  [method] <li>connectSignals  [method] <li>eventFilter  [method] <li>loadWindow  [method] <li>fkIKSwitch  [method]"},{"location":"mnsSpacesTool/#mnsspacestool-methods","title":"MnsSpacesTool  methods","text":"<p>"},{"location":"mnsSpacesTool/#initializeViewTARGET","title":"mnsSpacesTool","text":"initializeView  [MnsSpacesTool  class method]  Constructor:  initializeView(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"mnsSpacesTool/#insertCallbacksTARGET","title":"mnsSpacesTool","text":"insertCallbacks  [MnsSpacesTool  class method]  Constructor:  insertCallbacks(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"mnsSpacesTool/#removeCallbacksTARGET","title":"mnsSpacesTool","text":"removeCallbacks  [MnsSpacesTool  class method]  Constructor:  removeCallbacks(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"mnsSpacesTool/#selectIKFKHostTARGET","title":"mnsSpacesTool","text":"selectIKFKHost  [MnsSpacesTool  class method]  Constructor:  selectIKFKHost(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"mnsSpacesTool/#setAvailbleLimbsTARGET","title":"mnsSpacesTool","text":"setAvailbleLimbs  [MnsSpacesTool  class method]  Constructor:  setAvailbleLimbs(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"mnsSpacesTool/#setAvailbleSpacesTARGET","title":"mnsSpacesTool","text":"setAvailbleSpaces  [MnsSpacesTool  class method]  Constructor:  setAvailbleSpaces(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"mnsSpacesTool/#setIKFKViewTARGET","title":"mnsSpacesTool","text":"setIKFKView  [MnsSpacesTool  class method]  Constructor:  setIKFKView(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"mnsSpacesTool/#setSequenceRangeTARGET","title":"mnsSpacesTool","text":"setSequenceRange  [MnsSpacesTool  class method]  Constructor:  setSequenceRange(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"mnsSpacesTool/#setSpacesModeTARGET","title":"mnsSpacesTool","text":"setSpacesMode  [MnsSpacesTool  class method]  Constructor:  setSpacesMode(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"mnsSpacesTool/#setSpacesViewTARGET","title":"mnsSpacesTool","text":"setSpacesView  [MnsSpacesTool  class method]  Constructor:  setSpacesView(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"mnsSpacesTool/#spaceSwitchTARGET","title":"mnsSpacesTool","text":"spaceSwitch  [MnsSpacesTool  class method]  Constructor:  spaceSwitch(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"mnsSpacesTool/#sceneSelectionChangedTARGET","title":"mnsSpacesTool","text":"sceneSelectionChanged  [MnsSpacesTool  class method]  Constructor:  sceneSelectionChanged(self, dummy = None) Return:  None Arguments:   <ul> <li>self</li> <li>dummy(str) ; [default: None]</li> </ul> Optional Arguments:"},{"location":"mnsSpacesTool/#getFramesListFromUIStateTARGET","title":"mnsSpacesTool","text":"getFramesListFromUIState  [MnsSpacesTool  class method]  Constructor:  getFramesListFromUIState(self, hostCtrl = None, attrName = \"\") Return:  None Arguments:   <ul> <li>self</li> <li>hostCtrl(str) ; [default: None]</li> <li>attrName(str) ; [default: \"\"]</li> </ul> Optional Arguments:"},{"location":"mnsSpacesTool/#getSpaceEnumIndexByNameTARGET","title":"mnsSpacesTool","text":"getSpaceEnumIndexByName  [MnsSpacesTool  class method]  Constructor:  getSpaceEnumIndexByName(self, node, attr, targetSpaceName) Return:  None Arguments:   <ul> <li>self</li> <li>node</li> <li>attr</li> <li>targetSpaceName</li> </ul> Optional Arguments:"},{"location":"mnsSpacesTool/#setAutoKeyModeTARGET","title":"mnsSpacesTool","text":"setAutoKeyMode  [MnsSpacesTool  class method]  Constructor:  setAutoKeyMode(self, state) Return:  None Arguments:   <ul> <li>self</li> <li>state</li> </ul> Optional Arguments:"},{"location":"mnsSpacesTool/#setSequenceModeTARGET","title":"mnsSpacesTool","text":"setSequenceMode  [MnsSpacesTool  class method]  Constructor:  setSequenceMode(self, state) Return:  None Arguments:   <ul> <li>self</li> <li>state</li> </ul> Optional Arguments:"},{"location":"mnsSpacesTool/#connectSignalsTARGET","title":"mnsSpacesTool","text":"connectSignals  [MnsSpacesTool  class method]  Connect all UI Signals. Constructor:  connectSignals(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"mnsSpacesTool/#eventFilterTARGET","title":"mnsSpacesTool","text":"eventFilter  [MnsSpacesTool  class method]  Override event filter to catch the close trigger to delete the callback Constructor:  eventFilter(self, source, event) Return:  None Arguments:   <ul> <li>self</li> <li>source</li> <li>event</li> </ul> Optional Arguments:"},{"location":"mnsSpacesTool/#loadWindowTARGET","title":"mnsSpacesTool","text":"loadWindow  [MnsSpacesTool  class method]  Show window method. Constructor:  loadWindow(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"mnsSpacesTool/#fkIKSwitchTARGET","title":"mnsSpacesTool","text":"fkIKSwitch  [MnsSpacesTool  class method]  mode 0 - Match FK to IK mode 1 - Match IK to FK Constructor:  fkIKSwitch(self, mode = 0) Return:  None Arguments:   <ul> <li>self</li> <li>mode(int) ; [default: 0]</li> </ul> Optional Arguments:"},{"location":"mnsSpacesTool/#defenitions","title":"Defenitions","text":""},{"location":"mnsSpacesTool/#loadspacestool","title":"loadSpacesTool","text":"<p>  Load the Def Serach UI from globals, avoid UI duplication.  Constructor:  loadSpacesTool()  Return:  None Arguments:   Keyword Arguments:   </p>"},{"location":"mnsSpringTool/","title":"mnsSpringTool","text":"<p>"},{"location":"mnsSpringTool/#mnsspringtool","title":"mnsSpringTool","text":"<p>  === Author: Assaf Ben Zur ==="},{"location":"mnsSpringTool/#classes","title":"Classes","text":""},{"location":"mnsSpringTool/#MnsGradientWidget TARGET","title":"mnsSpringTool","text":""},{"location":"mnsSpringTool/#mnsgradientwidget-class","title":"MnsGradientWidget [Class]","text":"<p> Constructor:  MnsGradientWidget(parent(str) ; [default: None]) Inherits from:  QtWidgets.QWidget Class Members:   <ul> <ul> <li>initialized</li> <li>currentSpringNodes</li> <li>refSpringNode</li> <li>attrName</li> <li>origValues</li> </ul> Methods:  <ul> <li>gatherCurrentValues  [method] <li>paintEvent  [method]"},{"location":"mnsSpringTool/#mnsgradientwidget-methods","title":"MnsGradientWidget  methods","text":"<p>"},{"location":"mnsSpringTool/#gatherCurrentValuesTARGET","title":"mnsSpringTool","text":"gatherCurrentValues  [MnsGradientWidget  class method]  Constructor:  gatherCurrentValues(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"mnsSpringTool/#paintEventTARGET","title":"mnsSpringTool","text":"paintEvent  [MnsGradientWidget  class method]  Constructor:  paintEvent(self, event) Return:  None Arguments:   <ul> <li>self</li> <li>event</li> </ul> Optional Arguments:"},{"location":"mnsSpringTool/#MnsSpringTool TARGET","title":"mnsSpringTool","text":""},{"location":"mnsSpringTool/#mnsspringtool-class","title":"MnsSpringTool [Class]","text":"<p>  Spring Tool UI Class.  Constructor:  MnsSpringTool(parent(str) ; [default: mnsUIUtils.get_maya_window()]) Inherits from:  form_class, base_class Class Members:   <ul> <ul> <li>rigTops</li> <li>rigTop</li> <li>puppetRoot</li> <li>namespace</li> <li>springNodes</li> <li>springNodesByIndex</li> <li>currentSpringNodes</li> <li>drawType</li> <li>stifGradCtrl</li> <li>dampingGradCtrl</li> </ul> Methods:  <ul> <li>collectSpringNodes  [method] <li>drawCommonAttrsToUi  [method] <li>drawCurveSpringNodeToUI  [method] <li>drawTransformSpringNodeToUI  [method] <li>filterView  [method] <li>getCurrentSpringNodes  [method] <li>initializeData  [method] <li>initializeSprings  [method] <li>initializeView  [method] <li>setRigTop  [method] <li>setSpringNode  [method] <li>setValueTrigger  [method] <li>getGradientControl  [method] <li>connectSignals  [method] <li>loadWindow  [method]"},{"location":"mnsSpringTool/#mnsspringtool-methods","title":"MnsSpringTool  methods","text":"<p>"},{"location":"mnsSpringTool/#collectSpringNodesTARGET","title":"mnsSpringTool","text":"collectSpringNodes  [MnsSpringTool  class method]  Constructor:  collectSpringNodes(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"mnsSpringTool/#drawCommonAttrsToUiTARGET","title":"mnsSpringTool","text":"drawCommonAttrsToUi  [MnsSpringTool  class method]  Constructor:  drawCommonAttrsToUi(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"mnsSpringTool/#drawCurveSpringNodeToUITARGET","title":"mnsSpringTool","text":"drawCurveSpringNodeToUI  [MnsSpringTool  class method]  Constructor:  drawCurveSpringNodeToUI(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"mnsSpringTool/#drawTransformSpringNodeToUITARGET","title":"mnsSpringTool","text":"drawTransformSpringNodeToUI  [MnsSpringTool  class method]  Constructor:  drawTransformSpringNodeToUI(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"mnsSpringTool/#filterViewTARGET","title":"mnsSpringTool","text":"filterView  [MnsSpringTool  class method]  Constructor:  filterView(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"mnsSpringTool/#getCurrentSpringNodesTARGET","title":"mnsSpringTool","text":"getCurrentSpringNodes  [MnsSpringTool  class method]  Constructor:  getCurrentSpringNodes(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"mnsSpringTool/#initializeDataTARGET","title":"mnsSpringTool","text":"initializeData  [MnsSpringTool  class method]  Constructor:  initializeData(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"mnsSpringTool/#initializeSpringsTARGET","title":"mnsSpringTool","text":"initializeSprings  [MnsSpringTool  class method]  Constructor:  initializeSprings(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"mnsSpringTool/#initializeViewTARGET","title":"mnsSpringTool","text":"initializeView  [MnsSpringTool  class method]  Constructor:  initializeView(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"mnsSpringTool/#setRigTopTARGET","title":"mnsSpringTool","text":"setRigTop  [MnsSpringTool  class method]  Constructor:  setRigTop(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"mnsSpringTool/#setSpringNodeTARGET","title":"mnsSpringTool","text":"setSpringNode  [MnsSpringTool  class method]  Constructor:  setSpringNode(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"mnsSpringTool/#setValueTriggerTARGET","title":"mnsSpringTool","text":"setValueTrigger  [MnsSpringTool  class method]  Constructor:  setValueTrigger(self, attr, value) Return:  None Arguments:   <ul> <li>self</li> <li>attr</li> <li>value</li> </ul> Optional Arguments:"},{"location":"mnsSpringTool/#getGradientControlTARGET","title":"mnsSpringTool","text":"getGradientControl  [MnsSpringTool  class method]  Constructor:  getGradientControl(self, attr = None) Return:  None Arguments:   <ul> <li>self</li> <li>attr(str) ; [default: None]</li> </ul> Optional Arguments:"},{"location":"mnsSpringTool/#connectSignalsTARGET","title":"mnsSpringTool","text":"connectSignals  [MnsSpringTool  class method]  Connect all UI Signals. Constructor:  connectSignals(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"mnsSpringTool/#loadWindowTARGET","title":"mnsSpringTool","text":"loadWindow  [MnsSpringTool  class method]  Show window method. Constructor:  loadWindow(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"mnsSpringTool/#defenitions","title":"Defenitions","text":""},{"location":"mnsSpringTool/#loadspringtool","title":"loadSpringTool","text":"<p>  Load the Def Serach UI from globals, avoid UI duplication.  Constructor:  loadSpringTool()  Return:  None Arguments:   Keyword Arguments:   </p>"},{"location":"modulePresetEditor/","title":"modulePresetEditor","text":"<p>"},{"location":"modulePresetEditor/#modulepreseteditor","title":"modulePresetEditor","text":"<p>  === Author: Assaf Ben Zur ===  This tool was designed to manage module presets.  As Mansur-Rig modules comatin many attrbiutes, it is sometimes more convenient to use a predefined preset to speed up the wrokflow.  Mansur-Rig includes some module presets, although this was designed mainly to allow usesrs to create their own presets, essentially saving the module settings' state."},{"location":"modulePresetEditor/#classes","title":"Classes","text":""},{"location":"modulePresetEditor/#ExportPresetDialog TARGET","title":"modulePresetEditor","text":""},{"location":"modulePresetEditor/#exportpresetdialog-class","title":"ExportPresetDialog [Class]","text":"<p> Constructor:  ExportPresetDialog(parent(str) ; [default: None]) Inherits from:  QtWidgets.QDialog Class Members:   <ul> <ul> <li>buttonBox</li> <li>layout</li> <li>author_le</li> <li>description_te</li> </ul> Methods:  <ul> <li>getInfo  [method]"},{"location":"modulePresetEditor/#exportpresetdialog-methods","title":"ExportPresetDialog  methods","text":"<p>"},{"location":"modulePresetEditor/#getInfoTARGET","title":"modulePresetEditor","text":"getInfo  [ExportPresetDialog  class method]  Constructor:  getInfo(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"modulePresetEditor/#MnsModulePresetEditor TARGET","title":"modulePresetEditor","text":""},{"location":"modulePresetEditor/#mnsmodulepreseteditor-class","title":"MnsModulePresetEditor [Class]","text":"<p>  Module preset Tool UI Class.  Constructor:  MnsModulePresetEditor(parent(str) ; [default: mnsUIUtils.get_maya_window()]) Inherits from:  form_class, base_class Class Members:   <ul> <ul> <li>iconsDir</li> <li>rigTop</li> <li>mnsModulePresetsDir</li> <li>settingsWindowDynUI</li> <li>moduleType</li> <li>presetsDict</li> <li>currentPreset</li> </ul> Methods:  <ul> <li>loadPreset  [method] <li>connectSignals  [method] <li>exportPreset  [method] <li>readCurrentModuleValues  [method] <li>importPreset  [method] <li>gatherAdditionalModulePresetsPaths  [method] <li>initlizeUI  [method] <li>readPresetFile  [method] <li>readPreset  [method] <li>loadWindow  [method] <li>initializeView  [method]"},{"location":"modulePresetEditor/#mnsmodulepreseteditor-methods","title":"MnsModulePresetEditor  methods","text":"<p>"},{"location":"modulePresetEditor/#loadPresetTARGET","title":"modulePresetEditor","text":"loadPreset  [MnsModulePresetEditor  class method]  Apply the selected preset onto the settings window Constructor:  loadPreset(self, kwargs) Return:  None Arguments:   <ul> <li>self</li> <li>kwargs</li> </ul> Optional Arguments:"},{"location":"modulePresetEditor/#connectSignalsTARGET","title":"modulePresetEditor","text":"connectSignals  [MnsModulePresetEditor  class method]  Connect all UI Signals. Constructor:  connectSignals(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"modulePresetEditor/#exportPresetTARGET","title":"modulePresetEditor","text":"exportPreset  [MnsModulePresetEditor  class method]  Export current settings window state as a preset. Constructor:  exportPreset(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"modulePresetEditor/#readCurrentModuleValuesTARGET","title":"modulePresetEditor","text":"readCurrentModuleValues  [MnsModulePresetEditor  class method]  From the current preset, read the current UI state. This method will return a formatted data assembly of all values and fields within the module-settings tab Constructor:  readCurrentModuleValues(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"modulePresetEditor/#importPresetTARGET","title":"modulePresetEditor","text":"importPreset  [MnsModulePresetEditor  class method]  Import a preset from file Constructor:  importPreset(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"modulePresetEditor/#gatherAdditionalModulePresetsPathsTARGET","title":"modulePresetEditor","text":"gatherAdditionalModulePresetsPaths  [MnsModulePresetEditor  class method]  Initialize any custom module presets paths that already exist within the data collect json. Constructor:  gatherAdditionalModulePresetsPaths(self, kwargs) Return:  None Arguments:   <ul> <li>self</li> <li>kwargs</li> </ul> Optional Arguments:"},{"location":"modulePresetEditor/#initlizeUITARGET","title":"modulePresetEditor","text":"initlizeUI  [MnsModulePresetEditor  class method]  Initialize the UI display Constructor:  initlizeUI(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"modulePresetEditor/#readPresetFileTARGET","title":"modulePresetEditor","text":"readPresetFile  [MnsModulePresetEditor  class method]  Read a preset from the selected file input Constructor:  readPresetFile(self, filePath = \"\") Return:  None Arguments:   <ul> <li>self</li> <li>filePath(str) ; [default: \"\"]</li> </ul> Optional Arguments:"},{"location":"modulePresetEditor/#readPresetTARGET","title":"modulePresetEditor","text":"readPreset  [MnsModulePresetEditor  class method]  Read the curretly selected preset Constructor:  readPreset(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"modulePresetEditor/#loadWindowTARGET","title":"modulePresetEditor","text":"loadWindow  [MnsModulePresetEditor  class method]  Show window method. Constructor:  loadWindow(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"modulePresetEditor/#initializeViewTARGET","title":"modulePresetEditor","text":"initializeView  [MnsModulePresetEditor  class method]  initialize data into the UI Constructor:  initializeView(self, selection = None) Return:  None Arguments:   <ul> <li>self</li> <li>selection(str) ; [default: None]</li> </ul> Optional Arguments:"},{"location":"modulePresetEditor/#defenitions","title":"Defenitions","text":""},{"location":"modulePresetEditor/#loadmodulepreseteditor","title":"loadModulePresetEditor","text":"<p>  Load the module preset window, avoid UI duplication.  Constructor:  loadModulePresetEditor(parent=mnsUIUtils.get_maya_window())  Return:  None Arguments:   <ul> <li>parent(str) ; [default: mnsUIUtils.get_maya_window()]</li> </ul> Keyword Arguments:   </p>"},{"location":"moduleVisUI/","title":"moduleVisUI","text":"<p>"},{"location":"moduleVisUI/#modulevisui","title":"moduleVisUI","text":"<p>  === Author: Assaf Ben Zur ===  mnsModuleVisUI  A simple UI to control puppet's module animation controls visibility."},{"location":"moduleVisUI/#classes","title":"Classes","text":""},{"location":"moduleVisUI/#MnsModuleVisUI TARGET","title":"moduleVisUI","text":""},{"location":"moduleVisUI/#mnsmodulevisui-class","title":"MnsModuleVisUI [Class]","text":"<p>  Main UI Class  Constructor:  MnsModuleVisUI(parent(str) ; [default: mnsUIUtils.get_maya_window()]) Inherits from:  form_class, base_class Class Members:   <ul> <ul> <li>iconDir</li> <li>bodyLOHolder</li> <li>facialLOHolder</li> <li>layoutHolders</li> <li>puppetRootVisChaneCallbackID</li> <li>rigTopSubGrpVisCallbackID</li> <li>puppetRoot</li> <li>rigTop</li> <li>rigTops</li> <li>moduleAttrs</li> <li>btnDict</li> <li>allBtnDict</li> <li>layoutByAttrs</li> </ul> Methods:  <ul> <li>clearLocalVars  [method] <li>destroyRigTopTab  [method] <li>destroyUI  [method] <li>drawUI  [method] <li>filterRows  [method] <li>getAttrsFromPuppetRoot  [method] <li>getUITabState  [method] <li>initializeRigTopTab  [method] <li>initializeUI  [method] <li>refresh  [method] <li>setGlobAllTrigger  [method] <li>setGlobPrimariesTrigger  [method] <li>setGlobSecondariesTrigger  [method] <li>setGlobTertiariesTrigger  [method] <li>setRowsVisBasedOnState  [method] <li>updateRigTopUIState  [method] <li>detarmineAttrType  [method] <li>drawRigTopBoolRow  [method] <li>drawRigTopEnumRow  [method] <li>toggleAllStateForRow  [method] <li>changeModuleVisState  [method] <li>drawModuleRow  [method] <li>setRowVisBasedOnState  [method] <li>setRigTopBoolAttrState  [method] <li>setRigTopBtnState  [method] <li>connectSignals  [method] <li>loadWindow  [method] <li>eventFilter  [method]"},{"location":"moduleVisUI/#mnsmodulevisui-methods","title":"MnsModuleVisUI  methods","text":"<p>"},{"location":"moduleVisUI/#clearLocalVarsTARGET","title":"moduleVisUI","text":"clearLocalVars  [MnsModuleVisUI  class method]  Constructor:  clearLocalVars(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"moduleVisUI/#destroyRigTopTabTARGET","title":"moduleVisUI","text":"destroyRigTopTab  [MnsModuleVisUI  class method]  Constructor:  destroyRigTopTab(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"moduleVisUI/#destroyUITARGET","title":"moduleVisUI","text":"destroyUI  [MnsModuleVisUI  class method]  Constructor:  destroyUI(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"moduleVisUI/#drawUITARGET","title":"moduleVisUI","text":"drawUI  [MnsModuleVisUI  class method]  Constructor:  drawUI(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"moduleVisUI/#filterRowsTARGET","title":"moduleVisUI","text":"filterRows  [MnsModuleVisUI  class method]  Constructor:  filterRows(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"moduleVisUI/#getAttrsFromPuppetRootTARGET","title":"moduleVisUI","text":"getAttrsFromPuppetRoot  [MnsModuleVisUI  class method]  Constructor:  getAttrsFromPuppetRoot(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"moduleVisUI/#getUITabStateTARGET","title":"moduleVisUI","text":"getUITabState  [MnsModuleVisUI  class method]  Constructor:  getUITabState(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"moduleVisUI/#initializeRigTopTabTARGET","title":"moduleVisUI","text":"initializeRigTopTab  [MnsModuleVisUI  class method]  Constructor:  initializeRigTopTab(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"moduleVisUI/#initializeUITARGET","title":"moduleVisUI","text":"initializeUI  [MnsModuleVisUI  class method]  Constructor:  initializeUI(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"moduleVisUI/#refreshTARGET","title":"moduleVisUI","text":"refresh  [MnsModuleVisUI  class method]  Constructor:  refresh(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"moduleVisUI/#setGlobAllTriggerTARGET","title":"moduleVisUI","text":"setGlobAllTrigger  [MnsModuleVisUI  class method]  Constructor:  setGlobAllTrigger(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"moduleVisUI/#setGlobPrimariesTriggerTARGET","title":"moduleVisUI","text":"setGlobPrimariesTrigger  [MnsModuleVisUI  class method]  Constructor:  setGlobPrimariesTrigger(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"moduleVisUI/#setGlobSecondariesTriggerTARGET","title":"moduleVisUI","text":"setGlobSecondariesTrigger  [MnsModuleVisUI  class method]  Constructor:  setGlobSecondariesTrigger(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"moduleVisUI/#setGlobTertiariesTriggerTARGET","title":"moduleVisUI","text":"setGlobTertiariesTrigger  [MnsModuleVisUI  class method]  Constructor:  setGlobTertiariesTrigger(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"moduleVisUI/#setRowsVisBasedOnStateTARGET","title":"moduleVisUI","text":"setRowsVisBasedOnState  [MnsModuleVisUI  class method]  Constructor:  setRowsVisBasedOnState(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"moduleVisUI/#updateRigTopUIStateTARGET","title":"moduleVisUI","text":"updateRigTopUIState  [MnsModuleVisUI  class method]  Constructor:  updateRigTopUIState(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"moduleVisUI/#detarmineAttrTypeTARGET","title":"moduleVisUI","text":"detarmineAttrType  [MnsModuleVisUI  class method]  Constructor:  detarmineAttrType(self, attr) Return:  None Arguments:   <ul> <li>self</li> <li>attr</li> </ul> Optional Arguments:"},{"location":"moduleVisUI/#drawRigTopBoolRowTARGET","title":"moduleVisUI","text":"drawRigTopBoolRow  [MnsModuleVisUI  class method]  Constructor:  drawRigTopBoolRow(self, attr) Return:  None Arguments:   <ul> <li>self</li> <li>attr</li> </ul> Optional Arguments:"},{"location":"moduleVisUI/#drawRigTopEnumRowTARGET","title":"moduleVisUI","text":"drawRigTopEnumRow  [MnsModuleVisUI  class method]  Constructor:  drawRigTopEnumRow(self, attr) Return:  None Arguments:   <ul> <li>self</li> <li>attr</li> </ul> Optional Arguments:"},{"location":"moduleVisUI/#toggleAllStateForRowTARGET","title":"moduleVisUI","text":"toggleAllStateForRow  [MnsModuleVisUI  class method]  Constructor:  toggleAllStateForRow(self, attr) Return:  None Arguments:   <ul> <li>self</li> <li>attr</li> </ul> Optional Arguments:"},{"location":"moduleVisUI/#changeModuleVisStateTARGET","title":"moduleVisUI","text":"changeModuleVisState  [MnsModuleVisUI  class method]  Constructor:  changeModuleVisState(self, attr, dummy) Return:  None Arguments:   <ul> <li>self</li> <li>attr</li> <li>dummy</li> </ul> Optional Arguments:"},{"location":"moduleVisUI/#drawModuleRowTARGET","title":"moduleVisUI","text":"drawModuleRow  [MnsModuleVisUI  class method]  Constructor:  drawModuleRow(self, attr = None, layoutParent = None) Return:  None Arguments:   <ul> <li>self</li> <li>attr(str) ; [default: None]</li> <li>layoutParent(str) ; [default: None]</li> </ul> Optional Arguments:"},{"location":"moduleVisUI/#setRowVisBasedOnStateTARGET","title":"moduleVisUI","text":"setRowVisBasedOnState  [MnsModuleVisUI  class method]  Constructor:  setRowVisBasedOnState(self, attrKey) Return:  None Arguments:   <ul> <li>self</li> <li>attrKey</li> </ul> Optional Arguments:"},{"location":"moduleVisUI/#setRigTopBoolAttrStateTARGET","title":"moduleVisUI","text":"setRigTopBoolAttrState  [MnsModuleVisUI  class method]  Constructor:  setRigTopBoolAttrState(self, btn, attr, setCurrentState = False) Return:  None Arguments:   <ul> <li>self</li> <li>btn</li> <li>attr</li> <li>setCurrentState(bool) ; [default: False]</li> </ul> Optional Arguments:"},{"location":"moduleVisUI/#setRigTopBtnStateTARGET","title":"moduleVisUI","text":"setRigTopBtnState  [MnsModuleVisUI  class method]  Constructor:  setRigTopBtnState(self, visBtn, typeBtn, attr, btnType = 0, setCurrentState = False) Return:  None Arguments:   <ul> <li>self</li> <li>visBtn</li> <li>typeBtn</li> <li>attr</li> <li>btnType(int) ; [default: 0]</li> <li>setCurrentState(bool) ; [default: False]</li> </ul> Optional Arguments:"},{"location":"moduleVisUI/#connectSignalsTARGET","title":"moduleVisUI","text":"connectSignals  [MnsModuleVisUI  class method]  Connect all UI signals Constructor:  connectSignals(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"moduleVisUI/#loadWindowTARGET","title":"moduleVisUI","text":"loadWindow  [MnsModuleVisUI  class method]  Main UI load Constructor:  loadWindow(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"moduleVisUI/#eventFilterTARGET","title":"moduleVisUI","text":"eventFilter  [MnsModuleVisUI  class method]  Override event filter to catch the close trigger to delete the callback Constructor:  eventFilter(self, source, event) Return:  None Arguments:   <ul> <li>self</li> <li>source</li> <li>event</li> </ul> Optional Arguments:"},{"location":"moduleVisUI/#defenitions","title":"Defenitions","text":""},{"location":"moduleVisUI/#loadmodulevisui","title":"loadModuleVisUI","text":"<p>  Load the Def Serach UI from globals, avoid UI duplication.  Constructor:  loadModuleVisUI()  Return:  None Arguments:   Keyword Arguments:   </p>"},{"location":"moduleVisUI/#puppetrootvischangedcb","title":"puppetRootVisChangedCB","text":"<p> Constructor:  puppetRootVisChangedCB(msg, plug, otherPlug, clientData, kwargs) Return:  None Arguments:   <ul> <li>msg</li> <li>plug</li> <li>otherPlug</li> <li>clientData</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"moduleVisUI/#rigtopsubgrpenumchangedcb","title":"rigTopSubGrpEnumChangedCB","text":"<p> Constructor:  rigTopSubGrpEnumChangedCB(msg, plug, otherPlug, clientData, kwargs) Return:  None Arguments:   <ul> <li>msg</li> <li>plug</li> <li>otherPlug</li> <li>clientData</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"nodes/","title":"Nodes","text":"<p>"},{"location":"nodes/#nodes","title":"nodes","text":"<p>  === Author: Assaf Ben Zur ===  Mns nodes utility module.  All node creation functions are covered by this module"},{"location":"nodes/#defenitions","title":"Defenitions","text":""},{"location":"nodes/#addativeconnectionbridge","title":"addativeConnectionBridge","text":"<p> Constructor:  addativeConnectionBridge(attrA, attrB) Return:  None Arguments:   <ul> <li>attrA</li> <li>attrB</li> </ul> Keyword Arguments:   </p>"},{"location":"nodes/#adlnode","title":"adlNode","text":"<p>  Create a new addDoubleLinear node using the given inputs.  Constructor:  adlNode(input1 = None, input2 = None, output = None, kwargs) Return:  MnsNameStd (addDoubleLinear node) Arguments:   <ul> <li>input1(str) ; [default: None]</li> <li>input2(str) ; [default: None]</li> <li>output(str) ; [default: None]</li> <li>kwargs</li> </ul> Keyword Arguments:   <ul> <li>side(str) ; [default: center] - side flag</li> <li>body(str) ; [default: addDoubleLinear] - Node's name body.</li> <li>alpha(str) ; [default: A] - Node's Alpha id</li> <li>id(int) ; [default: 1] - Node's ID</li> <li>incrementAlpha(bool) - Search new node name incrementing Alpha instead of the id if True</li> </ul>"},{"location":"nodes/#anglebetweennode","title":"angleBetweenNode","text":"<p>  Creates an angleBetween node based on specified parameters and outputs.  Constructor:  angleBetweenNode(kwargs) Return:  None Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:   <ul> <li>side(str) ; [default: center] - side flag</li> <li>body(str) ; [default: angleBetween] - Node's name body.</li> <li>alpha(str) ; [default: A] - Node's Alpha id</li> <li>id(int) ; [default: 1] - Node's ID</li> <li>incrementAlpha(bool) - Search new node name incrementing Alpha instead of the id if True</li> <li>vector1(str) ; [default: None]</li> <li>vector2(str) ; [default: None]</li> <li>angle(str) ; [default: None]</li> </ul>"},{"location":"nodes/#blendcolorsnode","title":"blendColorsNode","text":"<p>  Create a new multiply devide node using the given inputs.  Constructor:  blendColorsNode(color1 = None, color2 = None, blender = None, output = None, kwargs) Return:  MnsNameStd (MultiplyDevide node) Arguments:   <ul> <li>color1(str) ; [default: None]</li> <li>color2(str) ; [default: None]</li> <li>blender(str) ; [default: None]</li> <li>output(str) ; [default: None]</li> <li>kwargs</li> </ul> Keyword Arguments:   <ul> <li>side(str) ; [default: center] - side flag</li> <li>body(str) ; [default: multDev] - Node's name body.</li> <li>alpha(str) ; [default: A] - Node's Alpha id</li> <li>id(int) ; [default: 1] - Node's ID</li> <li>operation(int) ; [default: 1]</li> <li>incrementAlpha(bool) - Search new node name incrementing Alpha instead of the id if True</li> </ul>"},{"location":"nodes/#buildgeoaxisvis","title":"buildGeoAxisVis","text":"<p>  Utility aid function:  Creates a Axis-Vis geometry object based on parameters  Constructor:  buildGeoAxisVis(kwargs) Return:  MnsNameStd (created vis-geo object) Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:   <ul> <li>side(str) ; [default: center] - side flag</li> <li>body(str) ; [default: pointsOnCurve] - Node's name body.</li> <li>alpha(str) ; [default: A] - Node's Alpha id</li> <li>id(int) ; [default: 1] - Node's ID</li> <li>incrementAlpha(bool) - Search new node name incrementing Alpha instead of the id if True</li> <li>scale(int) ; [default: 1] - Relative to parent</li> <li>axisSubdevision(int) ; [default: 16] - Geometry cylinder axis subdevision</li> <li>cylinderWidth(float) ; [default: 0.015]</li> <li>deleteAll(bool) - If true, do not attempt to create any objects- instead look for any existing objects and delete them</li> </ul>"},{"location":"nodes/#buildgeoaxisvisforparents","title":"buildGeoAxisVisForParents","text":"<p>  Utility aid function.  Created an Axis-Vis geometry object from each object within the list passed in.  Constructor:  buildGeoAxisVisForParents(kwargs) Return:  dict ('visGeoObjs': visGeoMnsNameStdArray, 'visGeoObjsNodes': visGeoNodeArray) Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:   <ul> <li>parentObjs(list) ; [default: [' ']] - If parent is empty, visGeo will not build</li> <li>parentMethod(int)</li> <li>scale(int) ; [default: 1] - Relative to parent</li> <li>axisSubdevision(int) ; [default: 16] - Geometry cylinder axis subdevision</li> <li>cylinderWidth(float) ; [default: 0.015]</li> <li>createNodeRelationship(bool) ; [default: True]</li> </ul>"},{"location":"nodes/#buildviscubesforpsocnode","title":"buildVisCubesForPSOCNode","text":"<p>  Single use function.  From a given MnsPointsOnCurve node, create output 'visCubes'.  Constructor:  buildVisCubesForPSOCNode(node = \"\", kwargs) Return:  dict ('visCubesStds': output MnsNameStd list, 'nodes': output node list ) Arguments:   <ul> <li>node(str) ; [default: \"\"]</li> <li>kwargs</li> </ul> Keyword Arguments:   <ul> <li>gapWidth(float) ; [default: 0.1]</li> </ul>"},{"location":"nodes/#choicenode","title":"choiceNode","text":"<p>  Create a new choice node using the given inputs.  Constructor:  choiceNode(inputs = [], output = None, kwargs) Return:  MnsNameStd (choice node) Arguments:   <ul> <li>inputs(list) ; [default: []]</li> <li>output(str) ; [default: None]</li> <li>kwargs</li> </ul> Keyword Arguments:   <ul> <li>side(str) ; [default: center] - side flag</li> <li>body(str) ; [default: choice] - Node's name body.</li> <li>alpha(str) ; [default: A] - Node's Alpha id</li> <li>id(int) ; [default: 1] - Node's ID</li> <li>incrementAlpha(bool) - Search new node name incrementing Alpha instead of the id if True</li> </ul>"},{"location":"nodes/#clampnode","title":"clampNode","text":"<p>  Create a new clamp node using the given inputs.  Constructor:  clampNode(inputA = [], maxA = [], minA = [], output = [], kwargs) Return:  MnsNameStd (reverse node) Arguments:   <ul> <li>inputA(list) ; [default: []]</li> <li>maxA(list) ; [default: []]</li> <li>minA(list) ; [default: []]</li> <li>output(list) ; [default: []]</li> <li>kwargs</li> </ul> Keyword Arguments:   <ul> <li>side(str) ; [default: center] - side flag</li> <li>body(str) ; [default: clamp] - Node's name body.</li> <li>alpha(str) ; [default: A] - Node's Alpha id</li> <li>id(int) ; [default: 1] - Node's ID</li> <li>incrementAlpha(bool) - Search new node name incrementing Alpha instead of the id if True</li> </ul>"},{"location":"nodes/#conditionnode","title":"conditionNode","text":"<p>  Create a new condition node using the given inputs.  Constructor:  conditionNode(firstTerm = None, secondTerm = None, colorIfTrue = None, colorIfFalse = None, outColor = None, kwargs) Return:  MnsNameStd (condition node) Arguments:   <ul> <li>firstTerm(str) ; [default: None]</li> <li>secondTerm(str) ; [default: None]</li> <li>colorIfTrue(str) ; [default: None]</li> <li>colorIfFalse(str) ; [default: None]</li> <li>outColor(str) ; [default: None]</li> <li>kwargs</li> </ul> Keyword Arguments:   <ul> <li>side(str) ; [default: center] - side flag</li> <li>body(str) ; [default: condition] - Node's name body.</li> <li>alpha(str) ; [default: A] - Node's Alpha id</li> <li>id(int) ; [default: 1] - Node's ID</li> <li>operation(int)</li> <li>incrementAlpha(bool) - Search new node name incrementing Alpha instead of the id if True</li> </ul>"},{"location":"nodes/#connectattrattempt","title":"connectAttrAttempt","text":"<p>  Attempt to connect the sourceAttr given to the target attribute passed in.  Constructor:  connectAttrAttempt(attrA, nodeAttr) Return:  bool (sucess status) Arguments:   <ul> <li>attrA</li> <li>nodeAttr</li> </ul> Keyword Arguments:   </p>"},{"location":"nodes/#connectsetattempt","title":"connectSetAttempt","text":"<p>  Attemp to connect the values passed in.  If a failue status was return, attempt a 'setAttr' next.  Constructor:  connectSetAttempt(attrA, nodeAttr, valType) Return:  bool (sucess status) Arguments:   <ul> <li>attrA</li> <li>nodeAttr</li> <li>valType</li> </ul> Keyword Arguments:   </p>"},{"location":"nodes/#decomposematrixnode","title":"decomposeMatrixNode","text":"<p>  Create a new multiplyDoubleLinear node using the given inputs.  Constructor:  decomposeMatrixNode(inputMatrix = None, outputTranslate = None, outputRotate = None, outputScale = None, kwargs) Return:  MnsNameStd (multiplyDoubleLinear node) Arguments:   <ul> <li>inputMatrix(str) ; [default: None]</li> <li>outputTranslate(str) ; [default: None]</li> <li>outputRotate(str) ; [default: None]</li> <li>outputScale(str) ; [default: None]</li> <li>kwargs</li> </ul> Keyword Arguments:   <ul> <li>side(str) ; [default: center] - side flag</li> <li>body(str) ; [default: decomposeMatrix] - Node's name body.</li> <li>alpha(str) ; [default: A] - Node's Alpha id</li> <li>id(int) ; [default: 1] - Node's ID</li> <li>incrementAlpha(bool) - Search new node name incrementing Alpha instead of the id if True</li> </ul>"},{"location":"nodes/#distbetweennode","title":"distBetweenNode","text":"<p>  Create a new distanceBetween node using the given inputs.  Constructor:  distBetweenNode(inMatrix1 = None, inMatrix2 = None, distance = None, kwargs) Return:  MnsNameStd (distance between node) Arguments:   <ul> <li>inMatrix1(str) ; [default: None]</li> <li>inMatrix2(str) ; [default: None]</li> <li>distance(str) ; [default: None]</li> <li>kwargs</li> </ul> Keyword Arguments:   <ul> <li>side(str) ; [default: center] - side flag</li> <li>body(str) ; [default: distBetween] - Node's name body.</li> <li>alpha(str) ; [default: A] - Node's Alpha id</li> <li>id(int) ; [default: 1] - Node's ID</li> <li>operation(int)</li> <li>incrementAlpha(bool) - Search new node name incrementing Alpha instead of the id if True</li> </ul>"},{"location":"nodes/#imageplanenode","title":"imagePlaneNode","text":"<p>  Create a new imagePlane node using the given inputs.  Constructor:  imagePlaneNode(camera = None, kwargs) Return:  MnsNameStd (imagePlane node) Arguments:   <ul> <li>camera(str) ; [default: None]</li> <li>kwargs</li> </ul> Keyword Arguments:   <ul> <li>side(str) ; [default: center] - side flag</li> <li>body(str) ; [default: imagePlane] - Node's name body.</li> <li>alpha(str) ; [default: A] - Node's Alpha id</li> <li>id(int) ; [default: 1] - Node's ID</li> <li>incrementAlpha(bool) - Search new node name incrementing Alpha instead of the id if True</li> </ul>"},{"location":"nodes/#inversematrixnode","title":"inverseMatrixNode","text":"<p>  Create a new inverseMatrix node using the given inputs.  Constructor:  inverseMatrixNode(inputMatrix = None, outputMatrix = None, kwargs) Return:  MnsNameStd (inverseMatrix node) Arguments:   <ul> <li>inputMatrix(str) ; [default: None]</li> <li>outputMatrix(str) ; [default: None]</li> <li>kwargs</li> </ul> Keyword Arguments:   <ul> <li>side(str) ; [default: center] - side flag</li> <li>body(str) ; [default: choice] - Node's name body.</li> <li>alpha(str) ; [default: A] - Node's Alpha id</li> <li>id(int) ; [default: 1] - Node's ID</li> <li>incrementAlpha(bool) - Search new node name incrementing Alpha instead of the id if True</li> </ul>"},{"location":"nodes/#mayaconstraint","title":"mayaConstraint","text":"<p>  Create a new constraint node using the given inputs.  Constructor:  mayaConstraint(sources = [], target = None, kwargs) Return:  MnsNameStd (constraint node) Arguments:   <ul> <li>sources(list) ; [default: []]</li> <li>target(str) ; [default: None]</li> <li>kwargs</li> </ul> Keyword Arguments:   <ul> <li>type(str) ; [default: parent] - side flag</li> <li>side(str) ; [default: center] - side flag</li> <li>body(str) ; [default: cnsType+Constraint] - Node's name body.</li> <li>alpha(str) ; [default: A] - Node's Alpha id</li> <li>id(int) ; [default: 1] - Node's ID</li> <li>incrementAlpha(bool) - Search new node name incrementing Alpha instead of the id if True</li> <li>maintainOffset(bool) - Node's maintainOffset attribute</li> <li>aimVector(list) ; [default: [' [0.0', '1.0', '0.0']]</li> <li>upVector(list) ; [default: [' [1.0', '0.0', '0.0']]</li> <li>worldUpType(str) ; [default: object]</li> <li>worldUpObject(str) ; [default: None]</li> </ul>"},{"location":"nodes/#mdnode","title":"mdNode","text":"<p>  Create a new multiply devide node using the given inputs.  Constructor:  mdNode(input1 = None, input2 = None, output = None, kwargs) Return:  MnsNameStd (MultiplyDevide node) Arguments:   <ul> <li>input1(str) ; [default: None]</li> <li>input2(str) ; [default: None]</li> <li>output(str) ; [default: None]</li> <li>kwargs</li> </ul> Keyword Arguments:   <ul> <li>side(str) ; [default: center] - side flag</li> <li>body(str) ; [default: multDev] - Node's name body.</li> <li>alpha(str) ; [default: A] - Node's Alpha id</li> <li>id(int) ; [default: 1] - Node's ID</li> <li>operation(int) ; [default: 1]</li> <li>incrementAlpha(bool) - Search new node name incrementing Alpha instead of the id if True</li> </ul>"},{"location":"nodes/#mdlnode","title":"mdlNode","text":"<p>  Create a new multiplyDoubleLinear node using the given inputs.  Constructor:  mdlNode(input1 = None, input2 = None, output = None, kwargs) Return:  MnsNameStd (multiplyDoubleLinear node) Arguments:   <ul> <li>input1(str) ; [default: None]</li> <li>input2(str) ; [default: None]</li> <li>output(str) ; [default: None]</li> <li>kwargs</li> </ul> Keyword Arguments:   <ul> <li>side(str) ; [default: center] - side flag</li> <li>body(str) ; [default: multDoubleLinear] - Node's name body.</li> <li>alpha(str) ; [default: A] - Node's Alpha id</li> <li>id(int) ; [default: 1] - Node's ID</li> <li>incrementAlpha(bool) - Search new node name incrementing Alpha instead of the id if True</li> </ul>"},{"location":"nodes/#mnsannotatenode","title":"mnsAnnotateNode","text":"<p>  Creates an mnsAnnotateNode node based on specified parameters and outputs.  Input as a node.channel list.  Constructor:  mnsAnnotateNode(kwargs) Return:   dict ('node': MnsNameStd) Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:   <ul> <li>side(str) ; [default: center] - side flag</li> <li>body(str) ; [default: annotate] - Node's name body.</li> <li>alpha(str) ; [default: A] - Node's Alpha id</li> <li>id(int) ; [default: 1] - Node's ID</li> <li>incrementAlpha(bool) - Search new node name incrementing Alpha instead of the id if True</li> <li>attributes(list) ; [default: [' ']]</li> <li>nameOnlyMode(bool)</li> </ul>"},{"location":"nodes/#mnsautowheeldrivenode","title":"mnsAutoWheelDriveNode","text":"<p>  Creates an mnsAutoWheelDrive node based on specified parameters and outputs.  Constructor:  mnsAutoWheelDriveNode(kwargs) Return:  None Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:   <ul> <li>side(str) ; [default: center] - side flag</li> <li>body(str) ; [default: autoWheelDrive] - Node's name body.</li> <li>alpha(str) ; [default: A] - Node's Alpha id</li> <li>id(int) ; [default: 1] - Node's ID</li> <li>incrementAlpha(bool) - Search new node name incrementing Alpha instead of the id if True</li> <li>wheelDiameter(float) ; [default: 10.0]</li> <li>speedMultiplier(float) ; [default: 1.0]</li> <li>outRotation(str) ; [default: None]</li> <li>connectTime(bool) ; [default: True]</li> </ul>"},{"location":"nodes/#mnsbuildtransformscurvenode","title":"mnsBuildTransformsCurveNode","text":"<p>  Creates an mnsBuildTransformsCurveNode node based on specified parameters and outputs.  Constructor:  mnsBuildTransformsCurveNode(kwargs) Return:  dict ('transforms': input transforms list, 'outCurve': built output curve MnsNameStd, 'outOffsetCurve': built output up-curve MnsNameStd, 'node': Created node MnsNameStd) Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:   <ul> <li>side(str) ; [default: center] - side flag</li> <li>body(str) ; [default: buildTransformsCurveCurve] - Node's name body.</li> <li>alpha(str) ; [default: A] - Node's Alpha id</li> <li>id(int) ; [default: 1] - Node's ID</li> <li>incrementAlpha(bool) - Search new node name incrementing Alpha instead of the id if True</li> <li>transforms(list) ; [default: [' ']] - transforms to build the curve from</li> <li>buildOffsetCurve(bool) - Node's 'buildOffsetCurve' attribute</li> <li>offsetCurveSuffix(str) ; [default: Up] - Up curve creation name body suffix</li> <li>buildMode(int) - Node's buildMode attribute</li> <li>tangentDirection(int) ; [default: 1] - Node's tangentDirection attribute</li> <li>tangentLength(float) ; [default: 1.0] - Node's tangentLength attribute</li> <li>hermiteSteps(int) ; [default: 5] - Node's hermiteSteps attribute</li> <li>degree(int) ; [default: 3] - Node's degree attribute</li> <li>form(int) - curve form attribute. Periodic will result in a closed shape.</li> <li>offsetType(int) - Node's offsetType attribute</li> <li>offsetX(float) - Node's offsetX attribute</li> <li>offsetY(float) - Node's offsetY attribute</li> <li>offsetZ(float) - Node's offsetZ attribute</li> <li>reverse(bool) - Node's reverse attribute</li> </ul>"},{"location":"nodes/#mnscameragaterationode","title":"mnsCameraGateRatioNode","text":"<p>  Create a new mnsCameraGateRatio node using the given inputs.  Constructor:  mnsCameraGateRatioNode(kwargs) Return:  MnsNameStd (mnsCameraGateRatio node) Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:   <ul> <li>side(str) ; [default: center] - side flag</li> <li>body(str) ; [default: cameraGateRatio] - Node's name body.</li> <li>alpha(str) ; [default: A] - Node's Alpha id</li> <li>id(int) ; [default: 1] - Node's ID</li> <li>incrementAlpha(bool) - Search new node name incrementing Alpha instead of the id if True</li> <li>camera(str)</li> <li>widthInput(str)</li> <li>heightInput(str)</li> </ul>"},{"location":"nodes/#mnsclosestpointsonmeshnode","title":"mnsClosestPointsOnMeshNode","text":"<p>  Creates an mnsClosestPointsOnMesh node based on specified parameters and outputs.  Constructor:  mnsClosestPointsOnMeshNode(kwargs) Return:  dict ('node': Created node MnsNameStd) Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:   <ul> <li>side(str) ; [default: center] - side flag</li> <li>body(str) ; [default: closestPointsOnMesh] - Node's name body.</li> <li>alpha(str) ; [default: A] - Node's Alpha id</li> <li>id(int) ; [default: 1] - Node's ID</li> <li>incrementAlpha(bool) - Search new node name incrementing Alpha instead of the id if True</li> <li>inputMesh(str) ; [default: None]</li> <li>inputTransforms(list) ; [default: [' ']]</li> <li>outputTransforms(list) ; [default: [' ']]</li> </ul>"},{"location":"nodes/#mnscurvetweaknode","title":"mnsCurveTweakNode","text":"<p>  Creates an mnsLipZip node based on specified parameters and outputs.  A 'buildOutputs' parameter is defaulted to True to build output (of a choice of any mnsType).  Constructor:  mnsCurveTweakNode(kwargs) Return:  None Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:   <ul> <li>side(str) ; [default: center] - side flag</li> <li>body(str) ; [default: curveTweak] - Node's name body.</li> <li>alpha(str) ; [default: A] - Node's Alpha id</li> <li>id(int) ; [default: 1] - Node's ID</li> <li>incrementAlpha(bool) - Search new node name incrementing Alpha instead of the id if True</li> <li>buildOffsetCurve(bool)</li> <li>tweakOffset(bool)</li> <li>offset(float)</li> <li>offsetBaseMatrix(str) ; [default: None]</li> </ul>"},{"location":"nodes/#mnscurvevariablenode","title":"mnsCurveVariableNode","text":"<p>  Creates an mnsCurveVariable node based on specified parameters and outputs.  Constructor:  mnsCurveVariableNode(kwargs) Return:  dict ('node': MnsNameStd) Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:   <ul> <li>side(str) ; [default: center] - side flag</li> <li>body(str) ; [default: curveVariable] - Node's name body.</li> <li>alpha(str) ; [default: A] - Node's Alpha id</li> <li>id(int) ; [default: 1] - Node's ID</li> <li>incrementAlpha(bool) - Search new node name incrementing Alpha instead of the id if True</li> <li>inputCurve(str) - name of the curve object to connect as input curve into the node. Setting as nothing or an invalid name will result in nothing connected</li> <li>inputUpCurve(str) - name of the up-curve object to connect as input up-curve into the node. Setting as nothing or an invalid name will result in nothing connected</li> <li>offsetCurveSuffix(str) ; [default: Up] - Up curve creation name body suffix</li> <li>inTransforms(list) ; [default: [' ']] - array of object to plug into the input array plug</li> <li>outOffsetTransforms(list) ; [default: [' ']]</li> <li>upMode(int) ; [default: 1] - Node's 'upMode' attribute</li> <li>aimAxis(int) - Node's 'aimAxis' attribute</li> <li>upAxis(int) ; [default: 1] - Node's 'upAxis' attribute</li> <li>connectTranslate(bool) ; [default: True] - Translate connect to the outputs if True</li> <li>connectRotate(bool) ; [default: True] - Rotate connect to the outputs if True</li> <li>offsetX(float) ; [default: 10.0] - Node's offsetX attribute</li> <li>offsetY(float) - Node's offsetY attribute</li> <li>offsetZ(float) - Node's offsetZ attribute</li> <li>substeps(int) ; [default: 20]</li> <li>degree(int) ; [default: 3]</li> <li>buildMode(int) ; [default: 1]</li> <li>translateMode(int)</li> <li>defaultFalloff(float) ; [default: 0.5]</li> <li>defaultStregth(float) ; [default: 1.0]</li> <li>offsetType(int)</li> </ul>"},{"location":"nodes/#mnscurvezipnode","title":"mnsCurveZipNode","text":"<p>  Creates an mnsPointOnCurve node based on specified parameters and outputs.  A 'buildOutputs' parameter is defaulted to True to build output (of a choice of any mnsType).  Constructor:  mnsCurveZipNode(kwargs) Return:  None Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:   <ul> <li>type(str) ; [default: mnsCurveZip]</li> <li>side(str) ; [default: center] - side flag</li> <li>body(str) ; [default: pointsOnCurve] - Node's name body.</li> <li>alpha(str) ; [default: A] - Node's Alpha id</li> <li>id(int) ; [default: 1] - Node's ID</li> <li>incrementAlpha(bool) - Search new node name incrementing Alpha instead of the id if True</li> <li>substeps(int) ; [default: 30]</li> <li>sampleMode(int)</li> <li>buildMode(int)</li> <li>degree(int) ; [default: 3]</li> <li>upCurveOffset(float) ; [default: 1.0] - Node's offsetX attribute</li> <li>aroundCenter(bool) ; [default: True]</li> <li>conformToMeetPoint(bool) ; [default: True]</li> <li>curveToConform(int)</li> <li>conformDistancethreshold(float) ; [default: 0.2]</li> <li>midGenerateFrom(int)</li> </ul>"},{"location":"nodes/#mnsdynamicpivotnode","title":"mnsDynamicPivotNode","text":"<p> Constructor:  mnsDynamicPivotNode(kwargs) Return:  MnsNameStd (MnsDynamicPivot node) Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:   <ul> <li>side(str) ; [default: center] - side flag</li> <li>body(str) ; [default: springCurve] - Node's name body.</li> <li>alpha(str) ; [default: A] - Node's Alpha id</li> <li>id(int) ; [default: 1] - Node's ID</li> <li>incrementAlpha(bool) - Search new node name incrementing Alpha instead of the id if True</li> <li>distRateMultiplier(float) ; [default: 1.0]</li> <li>mapRotXTo(int) ; [default: 2]</li> <li>mapRotYTo(int) ; [default: 6]</li> <li>mapRotZTo(int) ; [default: 3]</li> <li>originWorldMatrix(str) ; [default: None]</li> <li>targetParentInverseMatrix(str) ; [default: None]</li> <li>inputCurve(str) - name of the curve object to connect as input curve into the node. Setting as nothing or an invalid name will result in nothing connected</li> <li>rotate(str) ; [default: None]</li> <li>rotatePivot(str) ; [default: None]</li> </ul>"},{"location":"nodes/#mnsiksolver","title":"mnsIKSolver","text":"<p>  Create a new mnsIkSolver node using the given inputs.  Constructor:  mnsIKSolver(kwargs) Return:  MnsNameStd (mnsIkSolver node) Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:   <ul> <li>side(str) ; [default: center] - side flag</li> <li>body(str) ; [default: ikSolver] - Node's name body.</li> <li>alpha(str) ; [default: A] - Node's Alpha id</li> <li>id(int) ; [default: 1] - Node's ID</li> <li>incrementAlpha(bool) - Search new node name incrementing Alpha instead of the id if True</li> <li>blend(float)</li> <li>roll(float)</li> <li>slide(float)</li> <li>softness(float)</li> <li>stretchLimit(float) ; [default: 1.0]</li> <li>aimAxis(int) ; [default: 1] - Node's 'aimAxis' attribute</li> <li>upAxis(int) ; [default: 2] - Node's 'upAxis' attribute</li> <li>boneLengthA(float) ; [default: 1.0]</li> <li>boneLengthB(float) ; [default: 1.0]</li> <li>restHandleLength(float) ; [default: 1.0]</li> <li>rootPos(str)</li> <li>midPos(str)</li> <li>endPos(str)</li> <li>limbRoot(str)</li> <li>ikHandle(str)</li> <li>poleVector(str)</li> <li>fkRoot(str)</li> <li>fkMid(str)</li> <li>fkEnd(str)</li> <li>outputRoot(str)</li> <li>outputMid(str)</li> <li>outputEnd(str)</li> </ul>"},{"location":"nodes/#mnslipzipnode","title":"mnsLipZipNode","text":"<p>  Creates an mnsLipZip node based on specified parameters and outputs.  A 'buildOutputs' parameter is defaulted to True to build output (of a choice of any mnsType).  Constructor:  mnsLipZipNode(kwargs) Return:  None Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:   <ul> <li>side(str) ; [default: center] - side flag</li> <li>body(str) ; [default: pointsOnCurve] - Node's name body.</li> <li>alpha(str) ; [default: A] - Node's Alpha id</li> <li>id(int) ; [default: 1] - Node's ID</li> <li>incrementAlpha(bool) - Search new node name incrementing Alpha instead of the id if True</li> <li>substeps(int) ; [default: 30]</li> <li>sampleMode(int)</li> <li>buildMode(int)</li> <li>degree(int) ; [default: 3]</li> <li>upCurveOffset(float) ; [default: 1.0] - Node's offsetX attribute</li> <li>aroundCenter(bool)</li> <li>conformToMeetPoint(bool)</li> <li>curveToConform(int)</li> <li>conformDistancethreshold(float) ; [default: 0.2]</li> <li>midGenerateFrom(int)</li> </ul>"},{"location":"nodes/#mnsmatrixconstraintnode","title":"mnsMatrixConstraintNode","text":"<p>  Creates an mnsMatrixConstraintNode node based on specified parameters and outputs.  Constructor:  mnsMatrixConstraintNode(kwargs) Return:  dict ('nameStds': Created MnsNameStd list) Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:   <ul> <li>side(str) ; [default: center] - side flag</li> <li>body(str) ; [default: matrixConstraint] - Node's name body.</li> <li>alpha(str) ; [default: A] - Node's Alpha id</li> <li>id(int) ; [default: 1] - Node's ID</li> <li>incrementAlpha(bool) - Search new node name incrementing Alpha instead of the id if True</li> <li>targets(list) ; [default: [' ']] - Tragets to constrain</li> <li>sources(list) ; [default: [' ']] - Sources to constrain the targets to</li> <li>maintainOffset(bool) - Node's maintainOffset attribute</li> <li>connectTranslate(bool) ; [default: True] - Connect Translate if True</li> <li>connectRotate(bool) ; [default: True] - Connect Rotate if True</li> <li>connectScale(bool) ; [default: True] - Connect Scale if True</li> <li>connectShear(str) ; [default: connectScale] - Connect shear if True</li> </ul>"},{"location":"nodes/#mnsnoderelationshipnode","title":"mnsNodeRelationshipNode","text":"<p>  Create a new mnsNodeRelationship node using the given inputs.  Constructor:  mnsNodeRelationshipNode(kwargs) Return:  MnsNameStd (mnsNodeRelationship node) Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:   <ul> <li>side(str) ; [default: center] - side flag</li> <li>body(str) ; [default: nodeRelationship] - Node's name body.</li> <li>alpha(str) ; [default: A] - Node's Alpha id</li> <li>id(int) ; [default: 1] - Node's ID</li> <li>connectDeleteSlavesOnly(bool)</li> <li>incrementAlpha(bool) - Search new node name incrementing Alpha instead of the id if True</li> <li>master(str) ; [default: None]</li> <li>slaves(list) ; [default: [' ']]</li> </ul>"},{"location":"nodes/#mnspointsoncurvenode","title":"mnsPointsOnCurveNode","text":"<p>  Creates an mnsPointOnCurve node based on specified parameters and outputs.  A 'buildOutputs' parameter is defaulted to True to build output (of a choice of any mnsType).  Constructor:  mnsPointsOnCurveNode(kwargs) Return:  dict ('node': MnsNameStd, 'samplesSTDs': output MnsNameStd list, 'samples': output node list) Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:   <ul> <li>side(str) ; [default: center] - side flag</li> <li>body(str) ; [default: pointsOnCurve] - Node's name body.</li> <li>alpha(str) ; [default: A] - Node's Alpha id</li> <li>id(int) ; [default: 1] - Node's ID</li> <li>incrementAlpha(bool) - Search new node name incrementing Alpha instead of the id if True</li> <li>inputCurve(str) - name of the curve object to connect as input curve into the node. Setting as nothing or an invalid name will result in nothing connected</li> <li>inputUpCurve(str) - name of the up-curve object to connect as input up-curve into the node. Setting as nothing or an invalid name will result in nothing connected</li> <li>transforms(list) ; [default: [' ']] - array of object to output to</li> <li>buildMode(int) - Node's build mode attribute</li> <li>numOutputs(int) ; [default: 10] - set the number of outputs or samples to be outputed from the node</li> <li>doRotate(bool) ; [default: True] - Node's 'doRotate' attribute</li> <li>rotateMode(int) - Node's 'rotateMode' attribute</li> <li>upMode(int) ; [default: 1] - Node's 'upMode' attribute</li> <li>aimAxis(int) - Node's 'aimAxis' attribute</li> <li>upAxis(int) ; [default: 1] - Node's 'upAxis' attribute</li> <li>doScale(bool) ; [default: True] - Node's 'doScale' attribute</li> <li>doSpring(bool) - Node's 'doSpring' attribute</li> <li>connectTranslate(bool) ; [default: True] - Translate connect to the outputs if True</li> <li>connectRotate(bool) ; [default: True] - Rotate connect to the outputs if True</li> <li>connectChildrenRotate(bool) - In case this attribute is set to True, along side connectRotate attribute, the indevidual rotation child attributes will be connected instead of the main compound rotate attribute</li> <li>connectScale(bool) ; [default: True] - Scale connect to the outputs if True</li> <li>buildOutputs(bool) ; [default: True] - in case output array is empty or invalid, build outpus as outputbuildType and outputBuildName</li> <li>outputBuildSuffix(str) ; [default: OutSample] - suffix fom built outputs, if chosen to build</li> <li>buildType(int) - if buildOutputs is executing, build based on this type.</li> <li>buildVisGeo(bool) - build axisVisGeo for the samples (debug mode)</li> <li>buildVisCubes(bool) - build axisVisGeo for the samples (debug mode)</li> <li>customPointsUpMode(int) ; [default: 1]</li> <li>isolatePolesTranlation(bool)</li> <li>isolatePolesRotation(bool)</li> <li>isolatePolesScale(bool)</li> <li>baseAlternateWorldMatrix(str) ; [default: None]</li> <li>tipAlternateWorldMatrix(str) ; [default: None]</li> </ul>"},{"location":"nodes/#mnsposeblendnode","title":"mnsPoseBlendNode","text":"<p> Constructor:  mnsPoseBlendNode(kwargs) Return:  MnsNameStd (quatBlend node) Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:   <ul> <li>side(str) ; [default: center] - side flag</li> <li>body(str) ; [default: poseBlend] - Node's name body.</li> <li>alpha(str) ; [default: A] - Node's Alpha id</li> <li>id(int) ; [default: 1] - Node's ID</li> <li>incrementAlpha(bool) - Search new node name incrementing Alpha instead of the id if True</li> </ul>"},{"location":"nodes/#mnsquatblendnode","title":"mnsQuatBlendNode","text":"<p> Constructor:  mnsQuatBlendNode(kwargs) Return:  MnsNameStd (quatBlend node) Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:   <ul> <li>side(str) ; [default: center] - side flag</li> <li>body(str) ; [default: quaternionBlend] - Node's name body.</li> <li>alpha(str) ; [default: A] - Node's Alpha id</li> <li>id(int) ; [default: 1] - Node's ID</li> <li>incrementAlpha(bool) - Search new node name incrementing Alpha instead of the id if True</li> </ul>"},{"location":"nodes/#mnsremapfloatarraynode","title":"mnsRemapFloatArrayNode","text":"<p>  Create a new mnsRemapFlatArray node using the given inputs.  Constructor:  mnsRemapFloatArrayNode(kwargs) Return:  MnsNameStd (mnsRemapFloatArray node) Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:   <ul> <li>side(str) ; [default: center] - side flag</li> <li>body(str) ; [default: remapFloatArray] - Node's name body.</li> <li>alpha(str) ; [default: A] - Node's Alpha id</li> <li>id(int) ; [default: 1] - Node's ID</li> <li>operation(int)</li> <li>incrementAlpha(bool) - Search new node name incrementing Alpha instead of the id if True</li> <li>value(str)</li> <li>outputCount(int) ; [default: 1]</li> <li>angleOutputAsDegrees(bool)</li> <li>remapToRnage(bool)</li> <li>min(float)</li> <li>max(float) ; [default: 1.0]</li> <li>oldMin(float)</li> <li>oldMax(float) ; [default: 1.0]</li> <li>outValues(list) ; [default: [' ']]</li> </ul>"},{"location":"nodes/#mnsresamplecurvenode","title":"mnsResampleCurveNode","text":"<p>  Creates an mnsReampleCurve node based on specified parameters and outputs.  Constructor:  mnsResampleCurveNode(kwargs) Return:  dict ('node': Created node MnsNameStd) Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:   <ul> <li>side(str) ; [default: center] - side flag</li> <li>body(str) ; [default: resampleCurve] - Node's name body.</li> <li>alpha(str) ; [default: A] - Node's Alpha id</li> <li>id(int) ; [default: 1] - Node's ID</li> <li>incrementAlpha(bool) - Search new node name incrementing Alpha instead of the id if True</li> <li>resampleMode(int) - Node's sample Mode</li> <li>degree(int) ; [default: 3] - Output curve degree</li> <li>sections(int) ; [default: 8] - Output curve number of sections</li> <li>inputCurve(str) - name of the curve object to connect as input curve into the node. Setting as nothing or an invalid name will result in nothing connected</li> </ul>"},{"location":"nodes/#mnssimplerivetsnode","title":"mnsSimpleRivetsNode","text":"<p>  Creates an mnsClosestPointsOnMesh node based on specified parameters and outputs.  Constructor:  mnsSimpleRivetsNode(kwargs) Return:  MnsNameStd Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:   <ul> <li>side(str) ; [default: center] - side flag</li> <li>body(str) ; [default: simpleRivets] - Node's name body.</li> <li>alpha(str) ; [default: A] - Node's Alpha id</li> <li>id(int) ; [default: 1] - Node's ID</li> <li>incrementAlpha(bool) - Search new node name incrementing Alpha instead of the id if True</li> <li>inputMesh(str) ; [default: None]</li> </ul>"},{"location":"nodes/#mnssimplesquashnode","title":"mnsSimpleSquashNode","text":"<p> Constructor:  mnsSimpleSquashNode(kwargs) Return:  MnsNameStd (MnsDynamicPivot node) Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:   <ul> <li>side(str) ; [default: center] - side flag</li> <li>body(str) ; [default: springCurve] - Node's name body.</li> <li>alpha(str) ; [default: A] - Node's Alpha id</li> <li>id(int) ; [default: 1] - Node's ID</li> <li>incrementAlpha(bool) - Search new node name incrementing Alpha instead of the id if True</li> <li>globalScale(float) ; [default: 1.0]</li> <li>squashFactor(float) ; [default: 1.0]</li> <li>squashMin(float) ; [default: 0.001]</li> <li>squashMax(float) ; [default: 10.0]</li> <li>stretchFactor(float) ; [default: 1.0]</li> <li>stretchMin(float) ; [default: 0.001]</li> <li>stretchMax(float) ; [default: 10.0]</li> <li>squashRootWorldMatrix(str) ; [default: None]</li> <li>handleWorldMatrix(str) ; [default: None]</li> <li>scale(str) ; [default: None]</li> </ul>"},{"location":"nodes/#mnssphererollnode","title":"mnsSphereRollNode","text":"<p>  Creates an mnsSphereRoll node based on specified parameters and outputs.  Constructor:  mnsSphereRollNode(kwargs) Return:  None Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:   <ul> <li>side(str) ; [default: center] - side flag</li> <li>body(str) ; [default: sphereRoll] - Node's name body.</li> <li>alpha(str) ; [default: A] - Node's Alpha id</li> <li>id(int) ; [default: 1] - Node's ID</li> <li>incrementAlpha(bool) - Search new node name incrementing Alpha instead of the id if True</li> <li>sphereRadius(float) ; [default: 10.0]</li> <li>speedMultiplier(float) ; [default: 1.0]</li> <li>outRotation(str) ; [default: None]</li> <li>connectTime(bool) ; [default: True]</li> </ul>"},{"location":"nodes/#mnsspherevectorpushnode","title":"mnsSphereVectorPushNode","text":"<p>  Creates an mnsSphereVectorPush node based on specified parameters and outputs.  Constructor:  mnsSphereVectorPushNode(kwargs) Return:  MnsNameStd Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:   <ul> <li>side(str) ; [default: center] - side flag</li> <li>body(str) ; [default: sphereVectorPush] - Node's name body.</li> <li>alpha(str) ; [default: A] - Node's Alpha id</li> <li>id(int) ; [default: 1] - Node's ID</li> <li>incrementAlpha(bool) - Search new node name incrementing Alpha instead of the id if True</li> <li>inputMesh(str) ; [default: None]</li> <li>colliderTransform(str) ; [default: None]</li> <li>collideRadius(float) ; [default: 1.0]</li> <li>collideMethod(int) ; [default: 1]</li> <li>thicknessCollide(bool)</li> <li>thicknessThreshold(float)</li> <li>attrHost(str) ; [default: None]</li> </ul>"},{"location":"nodes/#mnsspringcurvenode","title":"mnsSpringCurveNode","text":"<p>  Creates an mnsSpringCurve node based on specified parameters and outputs.  Constructor:  mnsSpringCurveNode(kwargs) Return:  dict ('node': MnsNameStd) Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:   <ul> <li>side(str) ; [default: center] - side flag</li> <li>body(str) ; [default: springCurve] - Node's name body.</li> <li>alpha(str) ; [default: A] - Node's Alpha id</li> <li>id(int) ; [default: 1] - Node's ID</li> <li>incrementAlpha(bool) - Search new node name incrementing Alpha instead of the id if True</li> <li>inputCurve(str) - name of the curve object to connect as input curve into the node. Setting as nothing or an invalid name will result in nothing connected</li> <li>inputUpCurve(str) - name of the up-curve object to connect as input up-curve into the node. Setting as nothing or an invalid name will result in nothing connected</li> <li>connectTime(bool) ; [default: True]</li> <li>startFrame(int) ; [default: 1]</li> <li>startFrameFromRange(bool) ; [default: True]</li> <li>strength(float) ; [default: 1.0]</li> <li>preventStretching(bool) ; [default: True]</li> <li>deleteCurveObjects(bool)</li> <li>offsetCurveSuffix(str) ; [default: Up]</li> <li>attributeHost(str) ; [default: None]</li> <li>strengthDefault(float) ; [default: 1.0]</li> </ul>"},{"location":"nodes/#mnsthreepointarcnode","title":"mnsThreePointArcNode","text":"<p>  Creates an mnsReampleCurve node based on specified parameters and outputs.  Constructor:  mnsThreePointArcNode(kwargs) Return:  dict ('node': Created node MnsNameStd) Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:   <ul> <li>side(str) ; [default: center] - side flag</li> <li>body(str) ; [default: threePointArc] - Node's name body.</li> <li>alpha(str) ; [default: A] - Node's Alpha id</li> <li>id(int) ; [default: 1] - Node's ID</li> <li>incrementAlpha(bool) - Search new node name incrementing Alpha instead of the id if True</li> <li>resampleMode(int) - Node's sample Mode</li> <li>degree(int) ; [default: 3] - Output curve degree</li> <li>sections(int) ; [default: 8] - Output curve number of sections</li> <li>conformMidPoint(bool) ; [default: True] - conform to mid point flag</li> <li>collinearAction(int)</li> <li>blend(float)</li> <li>inputCurve(str) - name of the curve object to connect as input curve into the node. Setting as nothing or an invalid name will result in nothing connected</li> <li>inputUpCurve(str) - name of the curve object to connect as input offset curve into the node. Setting as nothing or an invalid name will result in nothing connected</li> </ul>"},{"location":"nodes/#mnstransformspringnode","title":"mnsTransformSpringNode","text":"<p>  Creates an mnsAutoWheelDrive node based on specified parameters and outputs.  Constructor:  mnsTransformSpringNode(kwargs) Return:  None Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:   <ul> <li>side(str) ; [default: center] - side flag</li> <li>body(str) ; [default: transformSpring] - Node's name body.</li> <li>alpha(str) ; [default: A] - Node's Alpha id</li> <li>id(int) ; [default: 1] - Node's ID</li> <li>incrementAlpha(bool) - Search new node name incrementing Alpha instead of the id if True</li> <li>strength(float) ; [default: 1.0]</li> <li>damping(float) ; [default: 0.5]</li> <li>stiffness(float) ; [default: 0.5]</li> <li>outTranslate(str) ; [default: None]</li> <li>connectTime(bool) ; [default: True]</li> </ul>"},{"location":"nodes/#mnsvolumejointnode","title":"mnsVolumeJointNode","text":"<p>  Creates an mnsClosestPointsOnMesh node based on specified parameters and outputs.  Constructor:  mnsVolumeJointNode(kwargs) Return:  MnsNameStd Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:   <ul> <li>side(str) ; [default: center] - side flag</li> <li>body(str) ; [default: volumeJoint] - Node's name body.</li> <li>alpha(str) ; [default: A] - Node's Alpha id</li> <li>id(int) ; [default: 1] - Node's ID</li> <li>incrementAlpha(bool) - Search new node name incrementing Alpha instead of the id if True</li> <li>parentJoint(str) ; [default: None]</li> <li>childJoint(str) ; [default: None]</li> </ul>"},{"location":"nodes/#multmatrixnode","title":"multMatrixNode","text":"<p>  Create a new inverseMatrix node using the given inputs.  Constructor:  multMatrixNode(inputMatricies = [], outputMatrix = None, kwargs) Return:  MnsNameStd (multMatrix node) Arguments:   <ul> <li>inputMatricies(list) ; [default: []]</li> <li>outputMatrix(str) ; [default: None]</li> <li>kwargs</li> </ul> Keyword Arguments:   <ul> <li>side(str) ; [default: center] - side flag</li> <li>body(str) ; [default: multiplyMatrix] - Node's name body.</li> <li>alpha(str) ; [default: A] - Node's Alpha id</li> <li>id(int) ; [default: 1] - Node's ID</li> <li>incrementAlpha(bool) - Search new node name incrementing Alpha instead of the id if True</li> </ul>"},{"location":"nodes/#pmanode","title":"pmaNode","text":"<p>  Create a new inverseMatrix node using the given inputs.  Constructor:  pmaNode(input1Ds = [], input2Ds = [], input3Ds = [], output1D = None, output2D = None, output3D = None, kwargs) Return:  MnsNameStd (plusMinusAverage node) Arguments:   <ul> <li>input1Ds(list) ; [default: []]</li> <li>input2Ds(list) ; [default: []]</li> <li>input3Ds(list) ; [default: []]</li> <li>output1D(str) ; [default: None]</li> <li>output2D(str) ; [default: None]</li> <li>output3D(str) ; [default: None]</li> <li>kwargs</li> </ul> Keyword Arguments:   <ul> <li>side(str) ; [default: center] - side flag</li> <li>body(str) ; [default: pma] - Node's name body.</li> <li>alpha(str) ; [default: A] - Node's Alpha id</li> <li>id(int) ; [default: 1] - Node's ID</li> <li>incrementAlpha(bool) - Search new node name incrementing Alpha instead of the id if True</li> <li>operation(int) ; [default: 1]</li> </ul>"},{"location":"nodes/#quatslerpnode","title":"quatSlerpNode","text":"<p>  Create a new quatSlerp node using the given inputs.  Constructor:  quatSlerpNode(inputQuatA = None, inputQuatB = None, outputQuat = None, kwargs) Return:  MnsNameStd (quatSlerp node) Arguments:   <ul> <li>inputQuatA(str) ; [default: None]</li> <li>inputQuatB(str) ; [default: None]</li> <li>outputQuat(str) ; [default: None]</li> <li>kwargs</li> </ul> Keyword Arguments:   <ul> <li>side(str) ; [default: center] - side flag</li> <li>body(str) ; [default: quatSlerp] - Node's name body.</li> <li>alpha(str) ; [default: A] - Node's Alpha id</li> <li>id(int) ; [default: 1] - Node's ID</li> <li>incrementAlpha(bool) - Search new node name incrementing Alpha instead of the id if True</li> </ul>"},{"location":"nodes/#quattoeulernode","title":"quatToEulerNode","text":"<p>  Create a new quatToEuler node using the given inputs.  Constructor:  quatToEulerNode(inputQuat = None, outputRotate = None, kwargs) Return:  MnsNameStd (quatSlerp node) Arguments:   <ul> <li>inputQuat(str) ; [default: None]</li> <li>outputRotate(str) ; [default: None]</li> <li>kwargs</li> </ul> Keyword Arguments:   <ul> <li>side(str) ; [default: center] - side flag</li> <li>body(str) ; [default: quatToEuler] - Node's name body.</li> <li>alpha(str) ; [default: A] - Node's Alpha id</li> <li>id(int) ; [default: 1] - Node's ID</li> <li>incrementAlpha(bool) - Search new node name incrementing Alpha instead of the id if True</li> </ul>"},{"location":"nodes/#reversecurvenode","title":"reverseCurveNode","text":"<p> Constructor:  reverseCurveNode(inputCurve = None, outputCurve = None, kwargs) Return:  None Arguments:   <ul> <li>inputCurve(str) ; [default: None]</li> <li>outputCurve(str) ; [default: None]</li> <li>kwargs</li> </ul> Keyword Arguments:   <ul> <li>side(str) ; [default: center] - side flag</li> <li>body(str) ; [default: reverseCurve] - Node's name body.</li> <li>alpha(str) ; [default: A] - Node's Alpha id</li> <li>id(int) ; [default: 1] - Node's ID</li> <li>incrementAlpha(bool) - Search new node name incrementing Alpha instead of the id if True</li> </ul>"},{"location":"nodes/#reversenode","title":"reverseNode","text":"<p>  Create a new reverse node using the given inputs.  Constructor:  reverseNode(inputA = None, output = None, kwargs) Return:  MnsNameStd (reverse node) Arguments:   <ul> <li>inputA(str) ; [default: None]</li> <li>output(str) ; [default: None]</li> <li>kwargs</li> </ul> Keyword Arguments:   <ul> <li>side(str) ; [default: center] - side flag</li> <li>body(str) ; [default: reverse] - Node's name body.</li> <li>alpha(str) ; [default: A] - Node's Alpha id</li> <li>id(int) ; [default: 1] - Node's ID</li> <li>incrementAlpha(bool) - Search new node name incrementing Alpha instead of the id if True</li> </ul>"},{"location":"nodes/#setattrattempt","title":"setAttrAttempt","text":"<p>  Attempt to set the passed in value into the attribute passed in.  Constructor:  setAttrAttempt(nodeAttr, value, valType) Return:  bool (sucess status) Arguments:   <ul> <li>nodeAttr</li> <li>value</li> <li>valType</li> </ul> Keyword Arguments:   </p>"},{"location":"nodes/#setrangenode","title":"setRangeNode","text":"<p>  Create a new setRange node using the given inputs.  Constructor:  setRangeNode(maxIn = [], minIn = [], oldMax = [], oldMin = [], value = [], outValue = [], kwargs) Return:  MnsNameStd (setRange node) Arguments:   <ul> <li>maxIn(list) ; [default: []]</li> <li>minIn(list) ; [default: []]</li> <li>oldMax(list) ; [default: []]</li> <li>oldMin(list) ; [default: []]</li> <li>value(list) ; [default: []]</li> <li>outValue(list) ; [default: []]</li> <li>kwargs</li> </ul> Keyword Arguments:   <ul> <li>side(str) ; [default: center] - side flag</li> <li>body(str) ; [default: setRange] - Node's name body.</li> <li>alpha(str) ; [default: A] - Node's Alpha id</li> <li>id(int) ; [default: 1] - Node's ID</li> <li>incrementAlpha(bool) - Search new node name incrementing Alpha instead of the id if True</li> </ul>"},{"location":"picker2/","title":"Picker2","text":"<p>"},{"location":"picker2/#picker2","title":"picker2","text":"<p>  === Author: Assaf Ben Zur ===  mnsPicker UI Class  This is the UI defenition for the dynamic picker UI build.  The picker is essentially defined by the user using scene guides and attributes,   this class handles the dynamic drawing of the picker into an actual live UI.  - The global width and height attributes of the window is read from the \"Picker Layout Base\"  - The picker buttons positions are read and interperted from the rig's 'Picker Layout Guides'  - The buttons display settings and actions are drawen from each PLG attributes, which can be editted using the PLG Setting tool."},{"location":"picker2/#classes","title":"Classes","text":""},{"location":"picker2/#MnsPicker2 TARGET","title":"Picker2","text":""},{"location":"picker2/#mnspicker2-class","title":"MnsPicker2 [Class]","text":"<p>  Picker UI Class.  Constructor:  MnsPicker2(parent(str) ; [default: mnsUIUtils.get_maya_window()]) Inherits from:  form_class, base_class Class Members:   <ul> <ul> <li>iconsDir</li> <li>currentAttrChangedCallbackID</li> <li>visUpdateInProgress</li> <li>puppetPickersDict</li> <li>currentTabWidget</li> <li>bodyQGV</li> <li>faceQGV</li> <li>pickerWidth</li> <li>pickerHeight</li> <li>rigTops</li> <li>rigTop</li> <li>puppetRoot</li> <li>pickerBase</li> <li>namespace</li> <li>tnPath</li> <li>ctrlCBsToDelete</li> <li>mayaSelectCallBack</li> </ul> Methods:  <ul> <li>displayHowToUseGuide  [method] <li>getControllersInView  [method] <li>gridToggleTrigger  [method] <li>initializeUI  [method] <li>refreshButtonVisibility  [method] <li>setLocalVarsBasedOnCurrentRigTop  [method] <li>setRigTop  [method] <li>setThumbnail  [method] <li>setWindowSize  [method] <li>refreshBtnState  [method] <li>attemptToGetImages  [method] <li>connectSignals  [method] <li>initializePuppetPicker  [method] <li>getPlgPositionandSize  [method] <li>eventFilter  [method] <li>setBGImages  [method] <li>loadWindow  [method] <li>drawPlgButton  [method]"},{"location":"picker2/#mnspicker2-methods","title":"MnsPicker2  methods","text":"<p>"},{"location":"picker2/#displayHowToUseGuideTARGET","title":"Picker2","text":"displayHowToUseGuide  [MnsPicker2  class method]  Constructor:  displayHowToUseGuide(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"picker2/#getControllersInViewTARGET","title":"Picker2","text":"getControllersInView  [MnsPicker2  class method]  Constructor:  getControllersInView(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"picker2/#gridToggleTriggerTARGET","title":"Picker2","text":"gridToggleTrigger  [MnsPicker2  class method]  Constructor:  gridToggleTrigger(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"picker2/#initializeUITARGET","title":"Picker2","text":"initializeUI  [MnsPicker2  class method]  Constructor:  initializeUI(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"picker2/#refreshButtonVisibilityTARGET","title":"Picker2","text":"refreshButtonVisibility  [MnsPicker2  class method]  Constructor:  refreshButtonVisibility(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"picker2/#setLocalVarsBasedOnCurrentRigTopTARGET","title":"Picker2","text":"setLocalVarsBasedOnCurrentRigTop  [MnsPicker2  class method]  Constructor:  setLocalVarsBasedOnCurrentRigTop(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"picker2/#setRigTopTARGET","title":"Picker2","text":"setRigTop  [MnsPicker2  class method]  Constructor:  setRigTop(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"picker2/#setThumbnailTARGET","title":"Picker2","text":"setThumbnail  [MnsPicker2  class method]  Constructor:  setThumbnail(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"picker2/#setWindowSizeTARGET","title":"Picker2","text":"setWindowSize  [MnsPicker2  class method]  Constructor:  setWindowSize(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"picker2/#refreshBtnStateTARGET","title":"Picker2","text":"refreshBtnState  [MnsPicker2  class method]  Constructor:  refreshBtnState(self, dummy = None) Return:  None Arguments:   <ul> <li>self</li> <li>dummy(str) ; [default: None]</li> </ul> Optional Arguments:"},{"location":"picker2/#attemptToGetImagesTARGET","title":"Picker2","text":"attemptToGetImages  [MnsPicker2  class method]  Constructor:  attemptToGetImages(self, originPath, bodyBgImage, faceBgImage, tn, kwargs) Return:  None Arguments:   <ul> <li>self</li> <li>originPath</li> <li>bodyBgImage</li> <li>faceBgImage</li> <li>tn</li> <li>kwargs</li> </ul> Optional Arguments:"},{"location":"picker2/#connectSignalsTARGET","title":"Picker2","text":"connectSignals  [MnsPicker2  class method]  Connect all UI Signals. Constructor:  connectSignals(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"picker2/#initializePuppetPickerTARGET","title":"Picker2","text":"initializePuppetPicker  [MnsPicker2  class method]  Main method for the global UI draw. The UI is initialy destroyed, then re-drawen. Constructor:  initializePuppetPicker(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"picker2/#getPlgPositionandSizeTARGET","title":"Picker2","text":"getPlgPositionandSize  [MnsPicker2  class method]  Maps a PLG scene position to the UI's local layout position. Since the positions of the PLG within the scene doesn't match the settings of QT, this method maps the passed in plg position, in relation to the main 'Picker Layout Base', and returns the new relative position to the UI layout. This method also retunes the bounding box size of the given plg. Constructor:  getPlgPositionandSize(self, plg) Return:   list, list (plgPosition(x,y), plgSize (width, height)) Arguments:   <ul> <li>self</li> <li>plg</li> </ul> Optional Arguments:"},{"location":"picker2/#eventFilterTARGET","title":"Picker2","text":"eventFilter  [MnsPicker2  class method]  Override event filter to catch the close trigger to delete the callback Constructor:  eventFilter(self, source, event) Return:  None Arguments:   <ul> <li>self</li> <li>source</li> <li>event</li> </ul> Optional Arguments:"},{"location":"picker2/#setBGImagesTARGET","title":"Picker2","text":"setBGImages  [MnsPicker2  class method]  Sets the bg image for the UI, in case there is one within the rig-top's attributes. The bg cannot be set to multiple layouts, hence, a 'tab changed' trigger is connected to this method, in order to toggle between the body and facial background images. Constructor:  setBGImages(self, bodyQGV = None, faceQGV = None) Return:  None Arguments:   <ul> <li>self</li> <li>bodyQGV(str) ; [default: None]</li> <li>faceQGV(str) ; [default: None]</li> </ul> Optional Arguments:"},{"location":"picker2/#loadWindowTARGET","title":"Picker2","text":"loadWindow  [MnsPicker2  class method]  Show window method. Constructor:  loadWindow(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"picker2/#drawPlgButtonTARGET","title":"Picker2","text":"drawPlgButton  [MnsPicker2  class method]  This is the main dynamic button draw method. Flow: - Acquire PLG - calculate local space position - gather all relevant settings - draw the button based on the gathered settings and position, and connect it's click signal. Constructor:  drawPlgButton(self, plg, bodyQGV, faceQGV) Return:  None Arguments:   <ul> <li>self</li> <li>plg</li> <li>bodyQGV</li> <li>faceQGV</li> </ul> Optional Arguments:"},{"location":"picker2/#MnsPickerGraphicViewWidget TARGET","title":"Picker2","text":""},{"location":"picker2/#mnspickergraphicviewwidget-class","title":"MnsPickerGraphicViewWidget [Class]","text":"<p> Constructor:  MnsPickerGraphicViewWidget(parent(str) ; [default: mnsUIUtils.get_maya_window()]) Inherits from:  QtWidgets.QGraphicsView Class Members:   <ul> <ul> <li>iconsDir</li> <li>bgImage</li> <li>graphicsPixmapItem</li> <li>pickerWindowObj</li> <li>sceneWidth</li> <li>sceneHeight</li> <li>mousePosition</li> <li>isPanActive</li> <li>isZoomActive</li> <li>isRubberBandActive</li> <li>topLeftPosition</li> <li>zoomDelta</li> <li>rubberBandGeometry</li> <li>currentContentRect</li> <li>tabWidget</li> <li>tnPath</li> </ul> Methods:  <ul> <li>determaineSelection  [method] <li>getControllersInView  [method] <li>getSceneCenterPosition  [method] <li>getSelectedItems  [method] <li>initializeGraphicsView  [method] <li>setBGImage  [method] <li>setCurrentStateRect  [method] <li>keyPressEvent  [method] <li>mouseMoveEvent  [method] <li>mousePressEvent  [method] <li>mouseReleaseEvent  [method] <li>resizeEvent  [method] <li>wheelEvent  [method] <li>fitContent  [method] <li>getContentBoundingRect  [method] <li>drawForeground  [method] <li>drawConstantFG  [method] <li>connectSignals  [method]"},{"location":"picker2/#mnspickergraphicviewwidget-methods","title":"MnsPickerGraphicViewWidget  methods","text":"<p>"},{"location":"picker2/#determaineSelectionTARGET","title":"Picker2","text":"determaineSelection  [MnsPickerGraphicViewWidget  class method]  Constructor:  determaineSelection(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"picker2/#getControllersInViewTARGET","title":"Picker2","text":"getControllersInView  [MnsPickerGraphicViewWidget  class method]  Constructor:  getControllersInView(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"picker2/#getSceneCenterPositionTARGET","title":"Picker2","text":"getSceneCenterPosition  [MnsPickerGraphicViewWidget  class method]  Constructor:  getSceneCenterPosition(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"picker2/#getSelectedItemsTARGET","title":"Picker2","text":"getSelectedItems  [MnsPickerGraphicViewWidget  class method]  Constructor:  getSelectedItems(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"picker2/#initializeGraphicsViewTARGET","title":"Picker2","text":"initializeGraphicsView  [MnsPickerGraphicViewWidget  class method]  Constructor:  initializeGraphicsView(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"picker2/#setBGImageTARGET","title":"Picker2","text":"setBGImage  [MnsPickerGraphicViewWidget  class method]  Constructor:  setBGImage(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"picker2/#setCurrentStateRectTARGET","title":"Picker2","text":"setCurrentStateRect  [MnsPickerGraphicViewWidget  class method]  Constructor:  setCurrentStateRect(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"picker2/#keyPressEventTARGET","title":"Picker2","text":"keyPressEvent  [MnsPickerGraphicViewWidget  class method]  Constructor:  keyPressEvent(self, event) Return:  None Arguments:   <ul> <li>self</li> <li>event</li> </ul> Optional Arguments:"},{"location":"picker2/#mouseMoveEventTARGET","title":"Picker2","text":"mouseMoveEvent  [MnsPickerGraphicViewWidget  class method]  Constructor:  mouseMoveEvent(self, event) Return:  None Arguments:   <ul> <li>self</li> <li>event</li> </ul> Optional Arguments:"},{"location":"picker2/#mousePressEventTARGET","title":"Picker2","text":"mousePressEvent  [MnsPickerGraphicViewWidget  class method]  Constructor:  mousePressEvent(self, event) Return:  None Arguments:   <ul> <li>self</li> <li>event</li> </ul> Optional Arguments:"},{"location":"picker2/#mouseReleaseEventTARGET","title":"Picker2","text":"mouseReleaseEvent  [MnsPickerGraphicViewWidget  class method]  Constructor:  mouseReleaseEvent(self, event) Return:  None Arguments:   <ul> <li>self</li> <li>event</li> </ul> Optional Arguments:"},{"location":"picker2/#resizeEventTARGET","title":"Picker2","text":"resizeEvent  [MnsPickerGraphicViewWidget  class method]  Constructor:  resizeEvent(self, event)  Return:  None Arguments:   <ul> <li>self</li> <li>event</li> </ul> Optional Arguments:"},{"location":"picker2/#wheelEventTARGET","title":"Picker2","text":"wheelEvent  [MnsPickerGraphicViewWidget  class method]  Constructor:  wheelEvent(self, event) Return:  None Arguments:   <ul> <li>self</li> <li>event</li> </ul> Optional Arguments:"},{"location":"picker2/#fitContentTARGET","title":"Picker2","text":"fitContent  [MnsPickerGraphicViewWidget  class method]  Constructor:  fitContent(self, fromSel = False) Return:  None Arguments:   <ul> <li>self</li> <li>fromSel(bool) ; [default: False]</li> </ul> Optional Arguments:"},{"location":"picker2/#getContentBoundingRectTARGET","title":"Picker2","text":"getContentBoundingRect  [MnsPickerGraphicViewWidget  class method]  Constructor:  getContentBoundingRect(self, fromSel = False) Return:  None Arguments:   <ul> <li>self</li> <li>fromSel(bool) ; [default: False]</li> </ul> Optional Arguments:"},{"location":"picker2/#drawForegroundTARGET","title":"Picker2","text":"drawForeground  [MnsPickerGraphicViewWidget  class method]  Constructor:  drawForeground(self, painter, rect) Return:  None Arguments:   <ul> <li>self</li> <li>painter</li> <li>rect</li> </ul> Optional Arguments:"},{"location":"picker2/#drawConstantFGTARGET","title":"Picker2","text":"drawConstantFG  [MnsPickerGraphicViewWidget  class method]  Constructor:  drawConstantFG(self, painter, rect, kwargs) Return:  None Arguments:   <ul> <li>self</li> <li>painter</li> <li>rect</li> <li>kwargs</li> </ul> Optional Arguments:"},{"location":"picker2/#connectSignalsTARGET","title":"Picker2","text":"connectSignals  [MnsPickerGraphicViewWidget  class method]  Connect all UI Signals. Constructor:  connectSignals(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"picker2/#MnsPickerGraphicsScene TARGET","title":"Picker2","text":""},{"location":"picker2/#mnspickergraphicsscene-class","title":"MnsPickerGraphicsScene [Class]","text":"<p> Constructor:  MnsPickerGraphicsScene(parent(str) ; [default: mnsUIUtils.get_maya_window()],**kwargs) Inherits from:  QtWidgets.QGraphicsScene Class Members:   <ul> <ul> <li>sceneWidth</li> <li>sceneHeight</li> </ul>"},{"location":"picker2/#picker2QPushButton TARGET","title":"Picker2","text":""},{"location":"picker2/#picker2qpushbutton-class","title":"picker2QPushButton [Class]","text":"<p>  A simple QPushButton re-implementation.  This reimplementation is used to control the button's mouse events, used in 'Edit' mode.  Constructor:  picker2QPushButton(parent(str) ; [default: None],plgNode(str) ; [default: None],**kwargs) Inherits from:  QtWidgets.QPushButton Class Members:   <ul> <ul> <li>pickerWin</li> <li>plgNode</li> <li>connectedControls</li> <li>directConnectedCtrl</li> <li>isFacial</li> <li>last</li> <li>plgColor</li> <li>textColor</li> <li>text</li> <li>isBold</li> <li>isItalic</li> <li>isUnderline</li> <li>fontSize</li> <li>positionH</li> <li>positionV</li> <li>scaleH</li> <li>scaleV</li> <li>visChangedCB</li> </ul> Methods:  <ul> <li>connectSignals  [method] <li>filterConnectedControls  [method] <li>rightClickedTrigger  [method] <li>setButtonStyle  [method] <li>setButtonVis  [method] <li>setPositionAndScale  [method] <li>mouseDoubleClickEvent  [method] <li>pickerButtonClickAction  [method] <li>btnDoubleClickedTrigger  [method]"},{"location":"picker2/#picker2qpushbutton-methods","title":"picker2QPushButton  methods","text":"<p>"},{"location":"picker2/#connectSignalsTARGET","title":"Picker2","text":"connectSignals  [picker2QPushButton  class method]  Constructor:  connectSignals(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"picker2/#filterConnectedControlsTARGET","title":"Picker2","text":"filterConnectedControls  [picker2QPushButton  class method]  Constructor:  filterConnectedControls(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"picker2/#rightClickedTriggerTARGET","title":"Picker2","text":"rightClickedTrigger  [picker2QPushButton  class method]  Constructor:  rightClickedTrigger(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"picker2/#setButtonStyleTARGET","title":"Picker2","text":"setButtonStyle  [picker2QPushButton  class method]  Constructor:  setButtonStyle(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"picker2/#setButtonVisTARGET","title":"Picker2","text":"setButtonVis  [picker2QPushButton  class method]  Constructor:  setButtonVis(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"picker2/#setPositionAndScaleTARGET","title":"Picker2","text":"setPositionAndScale  [picker2QPushButton  class method]  Constructor:  setPositionAndScale(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"picker2/#mouseDoubleClickEventTARGET","title":"Picker2","text":"mouseDoubleClickEvent  [picker2QPushButton  class method]  Constructor:  mouseDoubleClickEvent(self, QMouseEvent) Return:  None Arguments:   <ul> <li>self</li> <li>QMouseEvent</li> </ul> Optional Arguments:"},{"location":"picker2/#pickerButtonClickActionTARGET","title":"Picker2","text":"pickerButtonClickAction  [picker2QPushButton  class method]  The global action trigger for any picker UI button click trigger.    This method will trigger the \"controls selection\" and the \"action script\" for the passed in QPushButton passed in. Constructor:  pickerButtonClickAction(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"picker2/#btnDoubleClickedTriggerTARGET","title":"Picker2","text":"btnDoubleClickedTrigger  [picker2QPushButton  class method]  The global action trigger for any picker UI button double click trigger.    This method will trigger the \"hierarchy selection\" and the \"action script\" for the passed in QPushButton passed in. Constructor:  btnDoubleClickedTrigger(self, clickMode = \"select\") Return:  None Arguments:   <ul> <li>self</li> <li>clickMode(str) ; [default: \"select\"]</li> </ul> Optional Arguments:"},{"location":"picker2/#defenitions","title":"Defenitions","text":""},{"location":"picker2/#btnvischangedcb","title":"btnVisChangedCB","text":"<p> Constructor:  btnVisChangedCB(msg, plug, otherPlug, clientData, kwargs) Return:  None Arguments:   <ul> <li>msg</li> <li>plug</li> <li>otherPlug</li> <li>clientData</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"picker2/#loadpicker","title":"loadPicker","text":"<p>  Load the Def Serach UI from globals, avoid UI duplication.  Constructor:  loadPicker()  Return:  None Arguments:   Keyword Arguments:   </p>"},{"location":"picker2/#visibilitychangedcb","title":"visibilityChangedCB","text":"<p> Constructor:  visibilityChangedCB(msg, plug, otherPlug, clientData, kwargs) Return:  None Arguments:   <ul> <li>msg</li> <li>plug</li> <li>otherPlug</li> <li>clientData</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"plgSettings/","title":"plgSettings","text":"<p>"},{"location":"plgSettings/#plgsettings","title":"plgSettings","text":"<p>  === Author: Assaf Ben Zur ===  mnsPickerSettings UI Class  This is simple UI class built to handle user manipulation to PLG settings easily.  The settings window (at freest state) handles:  - Color  - Side  - Control goruping (body/facial)  - scaleX, scaleY  - Button text  - font size, color  - font bold, italic, underline  - controls select   - Action script (pre/post)"},{"location":"plgSettings/#classes","title":"Classes","text":""},{"location":"plgSettings/#MnsPLGSettingsUI TARGET","title":"plgSettings","text":""},{"location":"plgSettings/#mnsplgsettingsui-class","title":"MnsPLGSettingsUI [Class]","text":"<p>  mnsPickerSettings UI Class.  Constructor:  MnsPLGSettingsUI(parent(str) ; [default: mnsUIUtils.get_maya_window()]) Inherits from:  form_class, base_class Class Members:   <ul> <ul> <li>iconsDir</li> <li>pickerWin</li> <li>relatedButton</li> <li>currentPlgNode</li> </ul> Methods:  <ul> <li>clearScript  [method] <li>clearControls  [method] <li>createAndLoadPlg  [method] <li>runScript  [method] <li>acquirePickerWin  [method] <li>acquireRelatedButtonForPlg  [method] <li>addSceneSelectedControls  [method] <li>updateControlsSelect  [method] <li>updateActionScript  [method] <li>updateButtonColor  [method] <li>updateCtrlGroup  [method] <li>updatePre  [method] <li>updateScale  [method] <li>updateSide  [method] <li>updateButtonText  [method] <li>updateButtonTextColor  [method] <li>updateButtonFont  [method] <li>updateButtonFontSize  [method] <li>connectSignals  [method] <li>refreshPickerWindow  [method] <li>initView  [method] <li>loadSelection  [method] <li>removeSceneSelectedControls  [method] <li>replaceControls  [method] <li>selectControls  [method] <li>loadWindow  [method] <li>clearView  [method]"},{"location":"plgSettings/#mnsplgsettingsui-methods","title":"MnsPLGSettingsUI  methods","text":"<p>"},{"location":"plgSettings/#clearScriptTARGET","title":"plgSettings","text":"clearScript  [MnsPLGSettingsUI  class method]  'Clear' (ActionScript) button trigger. Constructor:  clearScript(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"plgSettings/#clearControlsTARGET","title":"plgSettings","text":"clearControls  [MnsPLGSettingsUI  class method]  'Clear' (Controls Select) button trigger. Constructor:  clearControls(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"plgSettings/#createAndLoadPlgTARGET","title":"plgSettings","text":"createAndLoadPlg  [MnsPLGSettingsUI  class method]  'Create PLG' button trigger. A simple wrapper to create a new free plg, then selecting it and loading it into the UI. Constructor:  createAndLoadPlg(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"plgSettings/#runScriptTARGET","title":"plgSettings","text":"runScript  [MnsPLGSettingsUI  class method]  'Run Script' button trigger. Constructor:  runScript(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"plgSettings/#acquirePickerWinTARGET","title":"plgSettings","text":"acquirePickerWin  [MnsPLGSettingsUI  class method]  A simple method to acquire a 'Picker' UI from global if exists. This is done to manipultae a live picker in turn, instead of needing to refresh the picker. Constructor:  acquirePickerWin(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"plgSettings/#acquireRelatedButtonForPlgTARGET","title":"plgSettings","text":"acquireRelatedButtonForPlg  [MnsPLGSettingsUI  class method]  Acquire the related button to plg from a picker UI, if it exists. Constructor:  acquireRelatedButtonForPlg(self, plg) Return:  None Arguments:   <ul> <li>self</li> <li>plg</li> </ul> Optional Arguments:"},{"location":"plgSettings/#addSceneSelectedControlsTARGET","title":"plgSettings","text":"addSceneSelectedControls  [MnsPLGSettingsUI  class method]  Add current scene selection into the controls to select list. Constructor:  addSceneSelectedControls(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"plgSettings/#updateControlsSelectTARGET","title":"plgSettings","text":"updateControlsSelect  [MnsPLGSettingsUI  class method]  Button 'controls select' update requested trigger. Constructor:  updateControlsSelect(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"plgSettings/#updateActionScriptTARGET","title":"plgSettings","text":"updateActionScript  [MnsPLGSettingsUI  class method]  Button Action-script update requested trigger. Constructor:  updateActionScript(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"plgSettings/#updateButtonColorTARGET","title":"plgSettings","text":"updateButtonColor  [MnsPLGSettingsUI  class method]  Button color update requested trigger. Constructor:  updateButtonColor(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"plgSettings/#updateCtrlGroupTARGET","title":"plgSettings","text":"updateCtrlGroup  [MnsPLGSettingsUI  class method]  Button group update requested trigger. Constructor:  updateCtrlGroup(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"plgSettings/#updatePreTARGET","title":"plgSettings","text":"updatePre  [MnsPLGSettingsUI  class method]  Button pre checkbox update requested trigger. Constructor:  updatePre(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"plgSettings/#updateScaleTARGET","title":"plgSettings","text":"updateScale  [MnsPLGSettingsUI  class method]  Button scale update requested trigger. Constructor:  updateScale(self, size, kwargs) Return:  None Arguments:   <ul> <li>self</li> <li>size</li> <li>kwargs</li> </ul> Optional Arguments:"},{"location":"plgSettings/#updateSideTARGET","title":"plgSettings","text":"updateSide  [MnsPLGSettingsUI  class method]  Button side update requested trigger. Constructor:  updateSide(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"plgSettings/#updateButtonTextTARGET","title":"plgSettings","text":"updateButtonText  [MnsPLGSettingsUI  class method]  Button text update requested trigger. Constructor:  updateButtonText(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"plgSettings/#updateButtonTextColorTARGET","title":"plgSettings","text":"updateButtonTextColor  [MnsPLGSettingsUI  class method]  Button text-color update requested trigger. Constructor:  updateButtonTextColor(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"plgSettings/#updateButtonFontTARGET","title":"plgSettings","text":"updateButtonFont  [MnsPLGSettingsUI  class method]  Button text-font update requested trigger. Constructor:  updateButtonFont(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"plgSettings/#updateButtonFontSizeTARGET","title":"plgSettings","text":"updateButtonFontSize  [MnsPLGSettingsUI  class method]  Button text-size update requested trigger. Constructor:  updateButtonFontSize(self, size) Return:  None Arguments:   <ul> <li>self</li> <li>size</li> </ul> Optional Arguments:"},{"location":"plgSettings/#connectSignalsTARGET","title":"plgSettings","text":"connectSignals  [MnsPLGSettingsUI  class method]  Connect all UI signals. Constructor:  connectSignals(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"plgSettings/#refreshPickerWindowTARGET","title":"plgSettings","text":"refreshPickerWindow  [MnsPLGSettingsUI  class method]  In case a picker window is aquired, call it's 'refresh' method. Constructor:  refreshPickerWindow(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"plgSettings/#initViewTARGET","title":"plgSettings","text":"initView  [MnsPLGSettingsUI  class method]  Initialize view: - Set title - Set Icons - Initialize sides comboBox Constructor:  initView(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"plgSettings/#loadSelectionTARGET","title":"plgSettings","text":"loadSelection  [MnsPLGSettingsUI  class method]  Main UI method- load current selection into the UI. This method will handle reading, and acquiring all settings into the UI from the selected PLG (only it is a plg type). Constructor:  loadSelection(self, kwargs) Return:  None Arguments:   <ul> <li>self</li> <li>kwargs</li> </ul> Optional Arguments:"},{"location":"plgSettings/#removeSceneSelectedControlsTARGET","title":"plgSettings","text":"removeSceneSelectedControls  [MnsPLGSettingsUI  class method]  Remove current selection from the controls list. Constructor:  removeSceneSelectedControls(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"plgSettings/#replaceControlsTARGET","title":"plgSettings","text":"replaceControls  [MnsPLGSettingsUI  class method]  Replace current 'controls list' with the current scene selection. Constructor:  replaceControls(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"plgSettings/#selectControlsTARGET","title":"plgSettings","text":"selectControls  [MnsPLGSettingsUI  class method]  Select current controls list btn trigger. Constructor:  selectControls(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"plgSettings/#loadWindowTARGET","title":"plgSettings","text":"loadWindow  [MnsPLGSettingsUI  class method]  Show windoe method. Constructor:  loadWindow(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"plgSettings/#clearViewTARGET","title":"plgSettings","text":"clearView  [MnsPLGSettingsUI  class method]  This method clears all setting from the UI, and restores 'empty' state. Constructor:  clearView(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"plgSettings/#defenitions","title":"Defenitions","text":""},{"location":"plgSettings/#loadplgsettings","title":"loadPlgSettings","text":"<p>  Load the PLG Settings UI from globals, avoid UI duplication.  Constructor:  loadPlgSettings() Return:  None Arguments:   Keyword Arguments:   </p>"},{"location":"pluginRelease/","title":"pluginRelease","text":"<p>"},{"location":"pluginRelease/#pluginrelease","title":"pluginRelease","text":"<p>  PluginRelease UI Class.  === Author: Assaf Ben Zur ===  This admin util is used to procedurally release the mnsPlugins library and version control it.  The UI will find c++ projects based on a directory (which can be changed), and will allow the user (admin) to add it to the next build.  On top of that, the UI will find the latest released version and extract the existing library within it, and update the release colums accordingly.  In case a plugin build exists in the latest version, but it's build project isn't available, the plugin will add to the release option with a flag \"[version]\"-  This means that the plugin can only be copied from the version selected to the next release- it cannot bild.  Of course this behaviour means that the internal version of the plugin will not change (expected behaviour) to inform the user of the ACTUAL plugin version.  This Tool is meant to BUILD the project on each release as opposed to getting a copy of n .mll file.  This means that the VS project will have to be maintained (expected) in order to be released- hence keeping up to date with maya's releases.  The tool contains a version release choice between patch/minor/major and none.  All mnsReleases, including this tool will mark a version with a suffix of the path version . a dateTime stamp.  This tool also includes a maya version choice for release which will access a different build configuration within the VS project.  The tool accesses the version parameter using a custom macro inserted into the VS project- which will be written with the user version choice- in order for the user to see the correct version when using the plugin-manager \"info\"."},{"location":"pluginRelease/#classes","title":"Classes","text":""},{"location":"pluginRelease/#MnsPluginBuild TARGET","title":"pluginRelease","text":""},{"location":"pluginRelease/#mnspluginbuild-class","title":"MnsPluginBuild [Class]","text":"<p>  MnsPluginBuild Class. A conviniency class.  This class will contain eixsting plugin builds.  Should contain a plugin name, directory, buildAvailable (bool), and a prevVerDirectory if a build is not available\"  Used to access information in a clean manner.  Constructor:  MnsPluginBuild(name(str) ; [default: \"\"],direct(str) ; [default: \"\"],buildAvailable(bool) ; [default: False],prevVerDirectory(str) ; [default: \"\"]) Inherits from:  object Class Members:   <ul> <ul> <li>pluginName</li> <li>pluginDirectory</li> <li>buildAvailable</li> <li>prevVerDirectory</li> </ul>"},{"location":"pluginRelease/#MnsPluginRelease TARGET","title":"pluginRelease","text":""},{"location":"pluginRelease/#mnspluginrelease-class","title":"MnsPluginRelease [Class]","text":"<p>  pluginRelease UI class  Constructor:  MnsPluginRelease(parent(str) ; [default: mnsUIUtils.get_maya_window()]) Inherits from:  form_class, base_class Class Members:   <ul> <ul> <li>pluginBuilds</li> <li>existingPluginNames</li> <li>existingVersionsFoundNames</li> <li>latestVersionPath</li> </ul> Methods:  <ul> <li>getCMakeBaseDir  [method] <li>buildPlugin  [method] <li>linux_mnsLicDigest_2024_addExtraCMakeLines  [method] <li>linux_mnsLicDigest_addExtraCMakeLines  [method] <li>selectDevDir  [method] <li>selectRelDir  [method] <li>connectSignals  [method] <li>getNewVerString  [method] <li>getVersionsForBuild  [method] <li>getLastestReleaseVer  [method] <li>initExistingDirs  [method] <li>releasePluginVer  [method] <li>releasePluginVer_legacy  [method] <li>loadWindow  [method] <li>sortLists  [method] <li>dirChanged  [method] <li>splitVerStringToList  [method]"},{"location":"pluginRelease/#mnspluginrelease-methods","title":"MnsPluginRelease  methods","text":"<p>"},{"location":"pluginRelease/#getCMakeBaseDirTARGET","title":"pluginRelease","text":"getCMakeBaseDir  [MnsPluginRelease  class method]  Constructor:  getCMakeBaseDir(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"pluginRelease/#buildPluginTARGET","title":"pluginRelease","text":"buildPlugin  [MnsPluginRelease  class method]  Constructor:  buildPlugin(self, MnsPluginBuild = None, cMakeDir = None, newVersionRootDir = None, plat = \"win\", versionString = None) Return:  None Arguments:   <ul> <li>self</li> <li>MnsPluginBuild(str) ; [default: None]</li> <li>cMakeDir(str) ; [default: None]</li> <li>newVersionRootDir(str) ; [default: None]</li> <li>plat(str) ; [default: \"win\"]</li> <li>versionString(str) ; [default: None]</li> </ul> Optional Arguments:"},{"location":"pluginRelease/#linux_mnsLicDigest_2024_addExtraCMakeLinesTARGET","title":"pluginRelease","text":"linux_mnsLicDigest_2024_addExtraCMakeLines  [MnsPluginRelease  class method]  Constructor:  linux_mnsLicDigest_2024_addExtraCMakeLines(self, cmakeListsFile = None) Return:  None Arguments:   <ul> <li>self</li> <li>cmakeListsFile(str) ; [default: None]</li> </ul> Optional Arguments:"},{"location":"pluginRelease/#linux_mnsLicDigest_addExtraCMakeLinesTARGET","title":"pluginRelease","text":"linux_mnsLicDigest_addExtraCMakeLines  [MnsPluginRelease  class method]  Constructor:  linux_mnsLicDigest_addExtraCMakeLines(self, cmakeListsFile = None) Return:  None Arguments:   <ul> <li>self</li> <li>cmakeListsFile(str) ; [default: None]</li> </ul> Optional Arguments:"},{"location":"pluginRelease/#selectDevDirTARGET","title":"pluginRelease","text":"selectDevDir  [MnsPluginRelease  class method]  Change dev directory trigger action. Prompts a directory-select dialog for the user to change the dev directory. A directory change will trigger a 'text-changed' signal emit. Constructor:  selectDevDir(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"pluginRelease/#selectRelDirTARGET","title":"pluginRelease","text":"selectRelDir  [MnsPluginRelease  class method]  Change release directory trigger action. Prompts a directory-select dialog for the user to change the release directory. A directory change will trigger a 'text-changed' signal emit. Constructor:  selectRelDir(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"pluginRelease/#connectSignalsTARGET","title":"pluginRelease","text":"connectSignals  [MnsPluginRelease  class method]  Connect all the UI signals Constructor:  connectSignals(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"pluginRelease/#getNewVerStringTARGET","title":"pluginRelease","text":"getNewVerString  [MnsPluginRelease  class method]  Get a new vesrtion string based on user version element upgrade. Return as a string. Constructor:  getNewVerString(self) Return:   string (new version id as string) Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"pluginRelease/#getVersionsForBuildTARGET","title":"pluginRelease","text":"getVersionsForBuild  [MnsPluginRelease  class method]  Get all valid maya versions for the plugin build directory passed. Constructor:  getVersionsForBuild(self, buildDir) Return:  list (compatibleVersions) Arguments:   <ul> <li>self</li> <li>buildDir</li> </ul> Optional Arguments:"},{"location":"pluginRelease/#getLastestReleaseVerTARGET","title":"pluginRelease","text":"getLastestReleaseVer  [MnsPluginRelease  class method]  Get the latest version for the build directory Constructor:  getLastestReleaseVer(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"pluginRelease/#initExistingDirsTARGET","title":"pluginRelease","text":"initExistingDirs  [MnsPluginRelease  class method]  Initialize existing directory. Find all available builds for the selected directory. Constructor:  initExistingDirs(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"pluginRelease/#releasePluginVerTARGET","title":"pluginRelease","text":"releasePluginVer  [MnsPluginRelease  class method]  Main version release button trigger. Compiles all needed information based on user UI slections, and triggers a new version build. Constructor:  releasePluginVer(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"pluginRelease/#releasePluginVer_legacyTARGET","title":"pluginRelease","text":"releasePluginVer_legacy  [MnsPluginRelease  class method]  Main version release button trigger. Compiles all needed information based on user UI slections, and triggers a new version build. Constructor:  releasePluginVer_legacy(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"pluginRelease/#loadWindowTARGET","title":"pluginRelease","text":"loadWindow  [MnsPluginRelease  class method]  Main window load Constructor:  loadWindow(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"pluginRelease/#sortListsTARGET","title":"pluginRelease","text":"sortLists  [MnsPluginRelease  class method]  Simple function to re-sort both culomn items. Used Throughout to simply update the display Constructor:  sortLists(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"pluginRelease/#dirChangedTARGET","title":"pluginRelease","text":"dirChanged  [MnsPluginRelease  class method]  User directory changed trigger action Constructor:  dirChanged(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"pluginRelease/#splitVerStringToListTARGET","title":"pluginRelease","text":"splitVerStringToList  [MnsPluginRelease  class method]  split version string to a path/minor/major/timestamp elements Constructor:  splitVerStringToList(self, versionString) Return:  list (versionString) Arguments:   <ul> <li>self</li> <li>versionString</li> </ul> Optional Arguments:"},{"location":"pluginRelease/#defenitions","title":"Defenitions","text":""},{"location":"pluginRelease/#loadpluginrelease","title":"loadPluginRelease","text":"<p>  Load the plugin Release UI from globals, avoid UI duplication.  Constructor:  loadPluginRelease() Return:  None Arguments:   Keyword Arguments:   </p>"},{"location":"prefixSuffix/","title":"prefixSuffix","text":"<p>"},{"location":"prefixSuffix/#prefixsuffix","title":"prefixSuffix","text":"<p>  === Author: Assaf Ben Zur ===  All global prefix and suffix declerations.  All global Mns pre-defined dictionaries creation (i.e.  mnsTypeDict/mnsSidesDict/mnsBuildObjectTypes)  This module also holds the MnsTypeStd class and the MnsNameStd class.  This module holds any global dict creation defenitions used in MNS."},{"location":"prefixSuffix/#classes","title":"Classes","text":""},{"location":"prefixSuffix/#MnsNameStd TARGET","title":"prefixSuffix","text":""},{"location":"prefixSuffix/#mnsnamestd-class","title":"MnsNameStd [Class]","text":"<p>  This class holds simple attributes to extend pythos's 'node' object in order to preserve additional information regarding a node.  Any name related methods are held by this class.  Constructor:  MnsNameStd(**kwargs) Inherits from:  object Class Members:   <ul> <ul> <li>node</li> <li>side</li> <li>body</li> <li>type</li> <li>id</li> <li>alpha</li> <li>suffix</li> <li>name</li> <li>namespace</li> <li>comment</li> </ul> Methods:  <ul> <li>setNodeName  [method] <li>buildName  [method] <li>findNextAlphaIncrement  [method] <li>findNextIncrement  [method] <li>splitName  [method] <li>splitDefinedName  [method]"},{"location":"prefixSuffix/#mnsnamestd-methods","title":"MnsNameStd  methods","text":"<p>"},{"location":"prefixSuffix/#setNodeNameTARGET","title":"prefixSuffix","text":"setNodeName  [MnsNameStd  class method]  Constructor:  setNodeName(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"prefixSuffix/#buildNameTARGET","title":"prefixSuffix","text":"buildName  [MnsNameStd  class method]  Build the instance's name based on the current class members defenitions. Constructor:  buildName(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"prefixSuffix/#findNextAlphaIncrementTARGET","title":"prefixSuffix","text":"findNextAlphaIncrement  [MnsNameStd  class method]  Recursive. Find next available Alpha id increment Constructor:  findNextAlphaIncrement(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"prefixSuffix/#findNextIncrementTARGET","title":"prefixSuffix","text":"findNextIncrement  [MnsNameStd  class method]  Recursive. Find next available id increment Constructor:  findNextIncrement(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"prefixSuffix/#splitNameTARGET","title":"prefixSuffix","text":"splitName  [MnsNameStd  class method]  This function splits a given node name as string into an MnsNameStd object Constructor:  splitName(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"prefixSuffix/#splitDefinedNameTARGET","title":"prefixSuffix","text":"splitDefinedName  [MnsNameStd  class method]  This function splits a given object name as string into an MnsNameStd object Constructor:  splitDefinedName(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"prefixSuffix/#MnsTypeStd TARGET","title":"prefixSuffix","text":""},{"location":"prefixSuffix/#mnstypestd-class","title":"MnsTypeStd [Class]","text":"<p>  This class holds simple attributes to extend pythos's 'type' object in order to preserve additional information regarding a node's type.  Constructor:  MnsTypeStd(**kwargs) Inherits from:  object Class Members:   <ul> <ul> <li>name</li> <li>suffix</li> <li>createName</li> <li>comment</li> </ul>"},{"location":"prefixSuffix/#defenitions","title":"Defenitions","text":""},{"location":"prefixSuffix/#buildmultkeysdict","title":"buildMultKeysDict","text":"<p>  Build a multy key dict for the given item list  Constructor:  buildMultKeysDict(items = []) Return:  dict Arguments:   <ul> <li>items(list) ; [default: []]</li> </ul> Keyword Arguments:   </p>"},{"location":"prefixSuffix/#buildoptionarrayfromdict","title":"buildOptionArrayFromDict","text":"<p>  Construct an option list from the given dictionary  Constructor:  buildOptionArrayFromDict(dict = {}, kwargs) Return:   list Arguments:   <ul> <li>dict(dict) ; [default: {}]</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"prefixSuffix/#buildtypedict","title":"buildTypeDict","text":"<p>  Build a dictionary for a given list, adding index (int) key and an index (string) key for each item  Constructor:  buildTypeDict(namesArray = []) Return:  dict Arguments:   <ul> <li>namesArray(list) ; [default: []]</li> </ul> Keyword Arguments:   </p>"},{"location":"productRelease/","title":"productRelease","text":"<p>"},{"location":"productRelease/#productrelease","title":"productRelease","text":"<p>  === Author: Assaf Ben Zur ==="},{"location":"productRelease/#classes","title":"Classes","text":""},{"location":"productRelease/#MnsProductRelease TARGET","title":"productRelease","text":""},{"location":"productRelease/#mnsproductrelease-class","title":"MnsProductRelease [Class]","text":"<p>  Main UI class  Constructor:  MnsProductRelease(parent(str) ; [default: mnsUIUtils.get_maya_window()]) Inherits from:  form_class, base_class Class Members:   <ul> <ul> <li>iconsDir</li> <li>pluginReleaseDir</li> <li>existingPluginVerLib</li> <li>releaseRootDir</li> <li>existingProductVerLib</li> <li>latestVerList</li> <li>releaseExclustions</li> </ul> Methods:  <ul> <li>gatherExistingPluginVersions  [method] <li>gatherExistingProductVersions  [method] <li>getNextReleaseVersion  [method] <li>releaseVersion  [method] <li>createCopyrightHeaderInPythonFile  [method] <li>loadWindow  [method] <li>connectSignals  [method]"},{"location":"productRelease/#mnsproductrelease-methods","title":"MnsProductRelease  methods","text":"<p>"},{"location":"productRelease/#gatherExistingPluginVersionsTARGET","title":"productRelease","text":"gatherExistingPluginVersions  [MnsProductRelease  class method]  Constructor:  gatherExistingPluginVersions(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"productRelease/#gatherExistingProductVersionsTARGET","title":"productRelease","text":"gatherExistingProductVersions  [MnsProductRelease  class method]  Constructor:  gatherExistingProductVersions(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"productRelease/#getNextReleaseVersionTARGET","title":"productRelease","text":"getNextReleaseVersion  [MnsProductRelease  class method]  Constructor:  getNextReleaseVersion(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"productRelease/#releaseVersionTARGET","title":"productRelease","text":"releaseVersion  [MnsProductRelease  class method]  Constructor:  releaseVersion(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"productRelease/#createCopyrightHeaderInPythonFileTARGET","title":"productRelease","text":"createCopyrightHeaderInPythonFile  [MnsProductRelease  class method]  Constructor:  createCopyrightHeaderInPythonFile(self, filePath = None) Return:  None Arguments:   <ul> <li>self</li> <li>filePath(str) ; [default: None]</li> </ul> Optional Arguments:"},{"location":"productRelease/#loadWindowTARGET","title":"productRelease","text":"loadWindow  [MnsProductRelease  class method]   Main window load. Constructor:  loadWindow(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"productRelease/#connectSignalsTARGET","title":"productRelease","text":"connectSignals  [MnsProductRelease  class method]  Connect all the UI signals Constructor:  connectSignals(self)  Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"productRelease/#defenitions","title":"Defenitions","text":""},{"location":"productRelease/#loadproductrelease","title":"loadProductRelease","text":"<p>  Load the Log Viewer UI from globals, avoid UI duplication.  Constructor:  loadProductRelease() Return:  None Arguments:   Keyword Arguments:   </p>"},{"location":"simpleSquash/","title":"simpleSquash","text":"<p>"},{"location":"simpleSquash/#simplesquash","title":"simpleSquash","text":"<p>  Author: Asaf Ben-Zur  Best used for: Head Squash, Nose, any general squash behaviour  This module will create a squash behaviour to it's slave joint.  Any child modules under this module will inherit the squash behaviour.  The squash behaviour can be set by the module's settings, and can also be adjusted and keyed post construction."},{"location":"simpleSquash/#defenitions","title":"Defenitions","text":""},{"location":"simpleSquash/#construct","title":"construct","text":"<p> Constructor:  construct(mansur, MnsBuildModule, kwargs) Return:   list (controls), dict (internalSpaces), MnsNameStd (moduleSpaceAttrHost) Arguments:   <ul> <li>mansur</li> <li>MnsBuildModule</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"simpleSquash/#customguides","title":"customGuides","text":"<p> Constructor:  customGuides(mansur, builtGuides) Return:  None Arguments:   <ul> <li>mansur</li> <li>builtGuides</li> </ul> Keyword Arguments:   </p>"},{"location":"simpleSquash_settings/","title":"simpleSquash settings","text":"<p>"},{"location":"simpleSquash_settings/#simplesquash-settings","title":"simpleSquash Settings","text":"<p>  Author: Asaf Ben-Zur  Best used for: Head Squash, Nose, any general squash behaviour  This module will create a squash behaviour to it's slave joint.  Any child modules under this module will inherit the squash behaviour.  The squash behaviour can be set by the module's settings, and can also be adjusted and keyed post construction.   </p>"},{"location":"simpleSquash_settings/#attributes","title":"Attributes","text":""},{"location":"simpleSquash_settings/#globalsettings","title":"GlobalSettings","text":"<p>Attribute NameDefaultDescription controlShape arrow Main control shape upLocalDirection 0 Use this setting to choose which up-axis should the module use on calculation. This is based on the orientation of your guide. Choose the correct complimentary axis based on set aim guide"},{"location":"simpleSquash_settings/#squash","title":"Squash","text":"<p>Attribute NameDefaultDescription squashFactor 0.5 Squash Factor default value squashMin 0.8 Squash Minimum scale value squashMax 1.2 Squash Maximum scale value"},{"location":"simpleSquash_settings/#stretch","title":"Stretch","text":"<p>Attribute NameDefaultDescription stretchFactor 0.5 Stretch Factor default value stretchMin 0.8 Stretch Minimum scale value stretchMax 1.2 Stretch Maximum scale value"},{"location":"simpleSquash_settings/#chancontrol","title":"ChanControl","text":"<p>Attribute NameDefaultDescription channelControl T R S X v Y v Z v Squash control channel-box settings"},{"location":"simpleSquash_settings/#slavecontrol","title":"SlaveControl","text":"<p>Attribute NameDefaultDescription slaveControlShape lightSphere Slave control shape slaveChannelControl T R S X v v v Y v v v Z v v v Squash slave control channel-box settings"},{"location":"skinUtility/","title":"skinUtility","text":"<p>"},{"location":"skinUtility/#skinutility","title":"skinUtility","text":"<p>  === Author: Assaf Ben Zur ==="},{"location":"skinUtility/#defenitions","title":"Defenitions","text":""},{"location":"skinUtility/#copyskin","title":"copySkin","text":"<p> Constructor:  copySkin(sourceMeshes = [], targetMeshes = [], kwargs) Return:  None Arguments:   <ul> <li>sourceMeshes(list) ; [default: []]</li> <li>targetMeshes(list) ; [default: []]</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"skinUtility/#createcombinedskinproxyfrommeshes","title":"createCombinedSkinProxyFromMeshes","text":"<p> Constructor:  createCombinedSkinProxyFromMeshes(sourceMeshes = []) Return:  None Arguments:   <ul> <li>sourceMeshes(list) ; [default: []]</li> </ul> Keyword Arguments:   </p>"},{"location":"skinUtility/#exportskin","title":"exportSkin","text":"<p> Constructor:  exportSkin(nodes = [], kwargs) Return:  None Arguments:   <ul> <li>nodes(list) ; [default: []]</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"skinUtility/#filtervalidmeshesfromlist","title":"filterValidMeshesFromList","text":"<p> Constructor:  filterValidMeshesFromList(meshTransforms = [], skinnedOnly = False, notSkinnedOnly = False) Return:  None Arguments:   <ul> <li>meshTransforms(list) ; [default: []]</li> <li>skinnedOnly(bool) ; [default: False]</li> <li>notSkinnedOnly(bool) ; [default: False]</li> </ul> Keyword Arguments:   </p>"},{"location":"skinUtility/#gatherblendweights","title":"gatherBlendWeights","text":"<p> Constructor:  gatherBlendWeights(dagPath, components, skinClusterFn) Return:  None Arguments:   <ul> <li>dagPath</li> <li>components</li> <li>skinClusterFn</li> </ul> Keyword Arguments:   </p>"},{"location":"skinUtility/#gatherdatafromskincluster","title":"gatherDataFromSkinCluster","text":"<p> Constructor:  gatherDataFromSkinCluster(skinClusterNode = None) Return:  None Arguments:   <ul> <li>skinClusterNode(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"skinUtility/#gatherinfluencejointsfrommesh","title":"gatherInfluenceJointsFromMesh","text":"<p> Constructor:  gatherInfluenceJointsFromMesh(skinnedMesh = None) Return:  None Arguments:   <ul> <li>skinnedMesh(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"skinUtility/#gatherinfluencejointsfrommeshes","title":"gatherInfluenceJointsFromMeshes","text":"<p> Constructor:  gatherInfluenceJointsFromMeshes(sourceMeshes = None) Return:  None Arguments:   <ul> <li>sourceMeshes(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"skinUtility/#gatherinfluenceweights","title":"gatherInfluenceWeights","text":"<p> Constructor:  gatherInfluenceWeights(dagPath, components, skinClusterFn) Return:  None Arguments:   <ul> <li>dagPath</li> <li>components</li> <li>skinClusterFn</li> </ul> Keyword Arguments:   </p>"},{"location":"skinUtility/#gatherskindata","title":"gatherSkinData","text":"<p> Constructor:  gatherSkinData(nodes = []) Return:  None Arguments:   <ul> <li>nodes(list) ; [default: []]</li> </ul> Keyword Arguments:   </p>"},{"location":"skinUtility/#gatherskindatafromfile","title":"gatherSkinDataFromFile","text":"<p> Constructor:  gatherSkinDataFromFile(filePath = None) Return:  None Arguments:   <ul> <li>filePath(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"skinUtility/#getallskinclustersfromjointstructure","title":"getAllSkinClustersFromJointStructure","text":"<p> Constructor:  getAllSkinClustersFromJointStructure(rigTop = None) Return:  None Arguments:   <ul> <li>rigTop(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"skinUtility/#getcurrentweights","title":"getCurrentWeights","text":"<p> Constructor:  getCurrentWeights(dagPath, components, skinClusterFn) Return:  None Arguments:   <ul> <li>dagPath</li> <li>components</li> <li>skinClusterFn</li> </ul> Keyword Arguments:   </p>"},{"location":"skinUtility/#getgeometrycomponents","title":"getGeometryComponents","text":"<p> Constructor:  getGeometryComponents(skinClusterFn = None, skinClusterNode = None) Return:  None Arguments:   <ul> <li>skinClusterFn(str) ; [default: None]</li> <li>skinClusterNode(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"skinUtility/#getgeometrycomponentsfromtagexpression","title":"getGeometryComponentsFromTagExpression","text":"<p> Constructor:  getGeometryComponentsFromTagExpression(skinCls, tag=\"\") Return:  None Arguments:   <ul> <li>skinCls</li> <li>tag(str) ; [default: \"\"]</li> </ul> Keyword Arguments:"},{"location":"skinUtility/#getmeshesfromdata","title":"getMeshesFromData","text":"<p> Constructor:  getMeshesFromData(skinsData = None) Return:  None Arguments:   <ul> <li>skinsData(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"skinUtility/#getskinclusterfrommeshtransform","title":"getSkinClusterFromMeshTransform","text":"<p> Constructor:  getSkinClusterFromMeshTransform(meshTransform = None) Return:  None Arguments:   <ul> <li>meshTransform(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"skinUtility/#getskinclustersfromjoints","title":"getSkinClustersFromJoints","text":"<p> Constructor:  getSkinClustersFromJoints(sourceJoints = []) Return:  None Arguments:   <ul> <li>sourceJoints(list) ; [default: []]</li> </ul> Keyword Arguments:   </p>"},{"location":"skinUtility/#getskinningjointsfromselection","title":"getSkinningJointsFromSelection","text":"<p> Constructor:  getSkinningJointsFromSelection(mode = 1, kwargs) Return:   list Arguments:   <ul> <li>mode(int) ; [default: 1]</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"skinUtility/#importskin","title":"importSkin","text":"<p> Constructor:  importSkin(filePath = None, kwargs) Return:  None Arguments:   <ul> <li>filePath(str) ; [default: None]</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"skinUtility/#injectskinclusternodetomfn","title":"injectSkinClusterNodeToMfn","text":"<p> Constructor:  injectSkinClusterNodeToMfn(skinClusterNode = None) Return:  None Arguments:   <ul> <li>skinClusterNode(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"skinUtility/#mirrorskintodetachedcomponent","title":"mirrorSkinToDetachedComponent","text":"<p> Constructor:  mirrorSkinToDetachedComponent(source = None, target = None) Return:  None Arguments:   <ul> <li>source(str) ; [default: None]</li> <li>target(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"skinUtility/#rebind","title":"rebind","text":"<p> Constructor:  rebind(sourceMeshes = []) Return:  None Arguments:   <ul> <li>sourceMeshes(list) ; [default: []]</li> </ul> Keyword Arguments:   </p>"},{"location":"skinUtility/#setblendweights","title":"setBlendWeights","text":"<p> Constructor:  setBlendWeights(dagPath, components, scFn, skinData) Return:  None Arguments:   <ul> <li>dagPath</li> <li>components</li> <li>scFn</li> <li>skinData</li> </ul> Keyword Arguments:   </p>"},{"location":"skinUtility/#setinfluenceweights","title":"setInfluenceWeights","text":"<p> Constructor:  setInfluenceWeights(dagPath, components, scFn, skinData) Return:  None Arguments:   <ul> <li>dagPath</li> <li>components</li> <li>scFn</li> <li>skinData</li> </ul> Keyword Arguments:   </p>"},{"location":"skinUtility/#setskindata","title":"setSkinData","text":"<p> Constructor:  setSkinData(skinClusterNode = None, skinData = None) Return:  None Arguments:   <ul> <li>skinClusterNode(str) ; [default: None]</li> <li>skinData(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"skinUtility/#unbind","title":"unbind","text":"<p> Constructor:  unbind(sourceMeshes = []) Return:  None Arguments:   <ul> <li>sourceMeshes(list) ; [default: []]</li> </ul> Keyword Arguments:   </p>"},{"location":"sphereRoll/","title":"sphereRoll","text":"<p>"},{"location":"sphereRoll/#sphereroll","title":"sphereRoll","text":"<p>  Author: Asaf Ben-Zur  Best used for: Balls, BB-8-Style  A simple module to drive a sphere roll based on position.  Upon contruction, based on the given settings, the main joint orientation will be driven by the module's position.  This module will calculate the roll of the sphere needed to reach the target position, without slipping, in any direction.  This behaviour is not confined to a single control being moved, but rather calculated based on the module's world-position."},{"location":"sphereRoll/#defenitions","title":"Defenitions","text":""},{"location":"sphereRoll/#construct","title":"construct","text":"<p> Constructor:  construct(mansur, MnsBuildModule, kwargs) Return:   list (controls), dict (internalSpaces) Arguments:   <ul> <li>mansur</li> <li>MnsBuildModule</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"sphereRoll/#customguides","title":"customGuides","text":"<p> Constructor:  customGuides(mansur, builtGuides) Return:  None Arguments:   <ul> <li>mansur</li> <li>builtGuides</li> </ul> Keyword Arguments:   </p>"},{"location":"sphereRoll_settings/","title":"sphereRoll settings","text":"<p>"},{"location":"sphereRoll_settings/#sphereroll-settings","title":"sphereRoll Settings","text":"<p>  Author: Asaf Ben-Zur  Best used for: Balls, BB-8-Style  A simple module to drive a sphere roll based on position.  Upon contruction, based on the given settings, the main joint orientation will be driven by the module's position.  This module will calculate the roll of the sphere needed to reach the target position, without slipping, in any direction.  This behaviour is not confined to a single control being moved, but rather calculated based on the module's world-position.  </p>"},{"location":"sphereRoll_settings/#attributes","title":"Attributes","text":"<p>splitOrientSpace True Comment wasn't inserted </p>"},{"location":"sphereRoll_settings/#globalsettings","title":"GlobalSettings","text":"<p>Attribute NameDefaultDescription controlShape lightSphere Control shape channelControl T R S X v v v Y v v v Z v v v Control channel-box settings sphereRadius 20.0 The controled sphere radius. This is the source of the calculation and needs to be set accurately autoRollDefault 1.0 Auto-Roll channel default state"},{"location":"string/","title":"String","text":"<p>"},{"location":"string/#string","title":"string","text":"<p>  === Author: Assaf Ben Zur ===  This module covers all custom string operations used in MNS"},{"location":"string/#defenitions","title":"Defenitions","text":""},{"location":"string/#camelcasesplit","title":"camelCaseSplit","text":"<p>  Split input string into array based on the 'camel-casing' rule.  Constructor:  camelCaseSplit(ccString) Return:  list (splitted string) Arguments:   <ul> <li>ccString</li> </ul> Keyword Arguments:   </p>"},{"location":"string/#combinestringlist","title":"combineStringList","text":"<p>  Combine the given string array, into a single string, using the 'separatorS' string input as a seperator.  Constructor:  combineStringList(stringList = [], separatorS = \" \") Return:  string (combined string) Arguments:   <ul> <li>stringList(list) ; [default: []]</li> <li>separatorS(str) ; [default: \"\"]</li> </ul> Keyword Arguments:   </p>"},{"location":"string/#extractheaderfrompythonfile","title":"extractHeaderFromPythonFile","text":"<p>  For the given python file, extract the header comment.  Constructor:  extractHeaderFromPythonFile(filePath = None) Return:  list (file header) Arguments:   <ul> <li>filePath(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"string/#flattenarray","title":"flattenArray","text":"<p>  Flatten a given list into a single string, seperated by commas  Constructor:  flattenArray(array = []) Return:  string  Arguments:   <ul> <li>array(list) ; [default: []]</li> </ul> Keyword Arguments:   </p>"},{"location":"string/#flattenarraycolon","title":"flattenArrayColon","text":"<p>  Flatten a given list into a single string, seperated by colons  Constructor:  flattenArrayColon(array = []) Return:  string  Arguments:   <ul> <li>array(list) ; [default: []]</li> </ul> Keyword Arguments:   </p>"},{"location":"string/#flattenarraykeepbracets","title":"flattenArrayKeepBracets","text":"<p>  Flatten a given list into a single string, seperated by commas, adding the open and close square brackets as string.  Constructor:  flattenArrayKeepBracets(array = []) Return:  string  Arguments:   <ul> <li>array(list) ; [default: []]</li> </ul> Keyword Arguments:   </p>"},{"location":"string/#flattenarraykeepbracetsandstrings","title":"flattenArrayKeepBracetsAndStrings","text":"<p>  Flatten a given list into a single string, seperated by commas, adding the open and close square brackets as string as well as add the \" into the actual string elements.  Constructor:  flattenArrayKeepBracetsAndStrings(array = []) Return:  string  Arguments:   <ul> <li>array(list) ; [default: []]</li> </ul> Keyword Arguments:   </p>"},{"location":"string/#flattenarrayspace","title":"flattenArraySpace","text":"<p>  Flatten a given list into a single string, seperated by spaces  Constructor:  flattenArraySpace(array = []) Return:  string  Arguments:   <ul> <li>array(list) ; [default: []]</li> </ul> Keyword Arguments:   </p>"},{"location":"string/#splitstringtoarray","title":"splitStringToArray","text":"<p>  Split the given string into a formatted array, using a \",\" split.  Constructor:  splitStringToArray(stringSplit = \"\") Return:  list (splitted string) Arguments:   <ul> <li>stringSplit(str) ; [default: \"\"]</li> </ul> Keyword Arguments:   </p>"},{"location":"string/#stringconverttostring","title":"stringConvertToString","text":"<p>  convert the input provided to a string, regardless of its type.  Constructor:  stringConvertToString(var) Return:  None Arguments:   <ul> <li>var</li> </ul> Keyword Arguments:   </p>"},{"location":"string/#stringmultireplacebysingle","title":"stringMultiReplaceBySingle","text":"<p>  Replace all given string characters by the 'replaceBy' string given.  Constructor:  stringMultiReplaceBySingle(element = \"\", replaceStrings = [], replaceBy = \"\") Return:  string  Arguments:   <ul> <li>element(str) ; [default: \"\"]</li> <li>replaceStrings(list) ; [default: []]</li> <li>replaceBy(str) ; [default: \"\"]</li> </ul> Keyword Arguments:   </p>"},{"location":"utility/","title":"Utility","text":"<p>"},{"location":"utility/#utility","title":"utility","text":"<p>  === Author: Assaf Ben Zur ===  Global Core MNS utility module.  This module holds any 'global' function used within MNS.  A 'misc' style module."},{"location":"utility/#defenitions","title":"Defenitions","text":""},{"location":"utility/#addattrtoobj","title":"addAttrToObj","text":"<p>  A global conditioned wrapper for adding attributes to object/objects   Exceptions:  1. Object to add attr to was found non-existing or invalid. Abort.  2. The 'replace' flag wasn't set, and the attribute already exists. Abort.  3. Attr name wasn't passed in. Abort.  4. The attribute type passed doesn't match the attribute value passed. Abort.  5. min/max values were passed in, although the attr type is not an Int or a Float. Skip min/max values.  6. min/max values were passed, and the attr type is Int or Float, although the min/max values passed arn't matching the data type. Skip min/max.  7. The replace flag was set to True, but the attribute doesn't exist. Ignore replace flag.  Constructor:  addAttrToObj(objects = [], kwargs) Return:   list (added attributes 'attr' objects list) Arguments:   <ul> <li>objects(list) ; [default: []]</li> <li>kwargs</li> </ul> Keyword Arguments:   <ul> <li>name(str) - Added attribute name</li> <li>replace(bool) - If attr exists and this flag is set to True- delete the existing attribute then recreate according to parameters</li> <li>type(str) ; [default: string] - Added attribute type</li> <li>value(str) ; [default: None] - Added attribute value</li> <li>max(str) ; [default: None] - Added attribute max (only if float or int)</li> <li>min(str) ; [default: None] - Added attribute min (only if float or int)</li> <li>locked(bool) - Added attribute lock state</li> <li>cb(bool) ; [default: True] - Added attribute channelBox/Displayed state</li> <li>keyable(bool) ; [default: True] - Added attribute keyable state</li> <li>enumDefault(int) - If added attr is enum, set its default to this value</li> </ul>"},{"location":"utility/#addblockclasidtoobj","title":"addBlockClasIDToObj","text":"<p>  Add a 'blkClassId' Attribute to the given input.  Constructor:  addBlockClasIDToObj(objectA, kwargs) Return:  PyAttribute ('blkClassID') Arguments:   <ul> <li>objectA</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"utility/#applychennelcontrolattributestotransform","title":"applyChennelControlAttributesToTransform","text":"<p>  This method applies a 'channelControl' dict attributes into the given transform.  Constructor:  applyChennelControlAttributesToTransform(transform = None, ccDict = {}) Return:  None Arguments:   <ul> <li>transform(str) ; [default: None]</li> <li>ccDict(dict) ; [default: {}]</li> </ul> Keyword Arguments:   </p>"},{"location":"utility/#autoloadmnsplugins","title":"autoLoadMnsPlugins","text":"<p> Constructor:  autoLoadMnsPlugins() Return:  None Arguments:   Keyword Arguments:   </p>"},{"location":"utility/#checkforinternetconnection","title":"checkForInternetConnection","text":"<p>  check for a valid internet connection.  Constructor:  checkForInternetConnection(host=\"8.8.8.8\", port=53, timeout=3) Return:  bool Arguments:   <ul> <li>host(str) ; [default: \"8.8.8.8\"]</li> <li>port(int) ; [default: 53]</li> <li>timeout(int) ; [default: 3]</li> </ul> Keyword Arguments:   </p>"},{"location":"utility/#checkforversionupdates","title":"checkForVersionUpdates","text":"<p>  This method will compare the current mns version against the latest available.  Return False if the current version is the latest version  Return True if the current version isn't the latest version  Constructor:  checkForVersionUpdates() Return:   bool (isNewVesrionAvailable) Arguments:   Keyword Arguments:   </p>"},{"location":"utility/#checkfunctionredundencyforpackage","title":"checkFunctionRedundencyForPackage","text":"<p> Constructor:  checkFunctionRedundencyForPackage(package, printRedundentOnly = True) Return:  None Arguments:   <ul> <li>package</li> <li>printRedundentOnly(bool) ; [default: True]</li> </ul> Keyword Arguments:   </p>"},{"location":"utility/#checkifobjexistsandset","title":"checkIfObjExistsAndSet","text":"<p>  For the object passed in-  three main cases:  1. If it is a 'PyNode' object, set it as the object to check.  2. If it is an MnsNameStd object,set it's .node property as the object to check.  3. If it is a string, assign it into a 'PyNode' obhect and set it as the object to check.  Check whether the object exists in the current scene and valid.  If so, return it. Else return None.  Constructor:  checkIfObjExistsAndSet(objB = None, kwargs) Return:  PyNode if valid, None if not.  Arguments:   <ul> <li>objB(str) ; [default: None]</li> <li>kwargs</li> </ul> Keyword Arguments:   <ul> <li>obj(str) ; [default: objB] - object to act on and return</li> <li>namespace(str)</li> </ul>"},{"location":"utility/#checklocalaxispairing","title":"checkLocalAxisPairing","text":"<p>  This method will check and return local axis pairing.  Main use is for pre-connection check for pocNode and curveVarNode tweakers (inputs),  in order to link local axes correctly, avoiding the need to check aim and up axes, as well as the offset axes.  Constructor:  checkLocalAxisPairing(origin = None, target = None) Return:   dict (pairingDict - {\"x\", \"y\",\"z\"}) Arguments:   <ul> <li>origin(str) ; [default: None]</li> <li>target(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"utility/#connectshapecolorrgb","title":"connectShapeColorRGB","text":"<p> Constructor:  connectShapeColorRGB(source = None, target = None) Return:  None Arguments:   <ul> <li>source(str) ; [default: None]</li> <li>target(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"utility/#convertalphatoint","title":"convertAlphaToInt","text":"<p>  Recursive. Convert an Alpha input into an Int ID. Infinite.  Constructor:  convertAlphaToInt(alpha = \"A\") Return:  int Arguments:   <ul> <li>alpha(str) ; [default: \"A\"]</li> </ul> Keyword Arguments:   </p>"},{"location":"utility/#convertinttoalpha","title":"convertIntToAlpha","text":"<p>  Recursive. Convert an Int input into an Alpha ID. Infinite.  Constructor:  convertIntToAlpha(intA = 0) Return:  string Arguments:   <ul> <li>intA(int) ; [default: 0]</li> </ul> Keyword Arguments:   </p>"},{"location":"utility/#convertnodetonamestd","title":"convertNodeToNameStd","text":"<p>  Attempt to convert a given node into a MnsNameStd object.  Constructor:  convertNodeToNameStd(node) Return:  None Arguments:   <ul> <li>node</li> </ul> Keyword Arguments:   </p>"},{"location":"utility/#createaxislamberts","title":"createAxisLamberts","text":"<p>  An axes colored lambert shaders creation function.  Constructor:  createAxisLamberts(kwargs) Return:  dict ('X': xAxisLambert, 'Y': yAixsLambert, 'Z': zAxisLambert) Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:   <ul> <li>doX(bool) ; [default: True]</li> <li>doY(bool) ; [default: True]</li> <li>doZ(bool) ; [default: True]</li> <li>deleteAll(bool) - If true, do not attempt to create any objects- instead look for any existing objects and delete them</li> </ul>"},{"location":"utility/#createfreeoffsetgroup","title":"createFreeOffsetGroup","text":"<p>  For the given transform, create a free offset group transform parent.  Constructor:  createFreeOffsetGroup(transformObject) Return:  MnsNameStd (offsetGrp) Arguments:   <ul> <li>transformObject</li> </ul> Keyword Arguments:   </p>"},{"location":"utility/#createmnsdefaultprefs","title":"createMnsDefaultPrefs","text":"<p>  This method is called whenever a pref read is being called.  In case this method fails to locate local prefs for the current user, it creates it from the defualt prefs file.  Also, this method contains the \"restore\" flag, which will create a new prefs local file from the default file regardless of any other choice.  This is used as a \"restore factory defaults\" option.  Constructor:  createMnsDefaultPrefs(kwargs) Return:   string (prefs file path) Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"utility/#createnodereturnnamestd","title":"createNodeReturnNameStd","text":"<p>  A core major MNS function.  This function creates a new node, based on it's type passed in, and it's name parameters passed in, and returns it as a MnsNameStd object.  This function also contains the 'search for next valid name' functionallity:  In case the given parameter set returns an object name that already exists within the current scene a 'Handle' functionallity will be triggered:  - In case the 'IncrementAlpha' argument is Flase, recursivly increment the ID value until a new name slot is available within the scene.  - In case it's Flase, do the same while incrementing the Alpha value instead.  Unlike Maya's core behavior- This function tests whether an object name exists whithin the entire scene- not only whether it exists whithin the current hirarchy level.  In a sequence manner creation- the Alpha/ID should be incremented within the caller function loop- meaning while bulding an item sequence the 'search' functionallity should not be used.  Another funtionallity of this function is the 'Fix Shape Name' functionallity:  A simple shpe children name test of an object (after creation) and a renaming them.  Constructor:  createNodeReturnNameStd(kwargs) Return:  MnsNameStd Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:   <ul> <li>side(str) ; [default: center] - side flag</li> <li>body(str) ; [default: pointsOnCurve] - Node's name body.</li> <li>alpha(str) ; [default: A] - Node's Alpha id</li> <li>id(int) ; [default: 1] - Node's ID</li> <li>incrementAlpha(bool) - Search new node name incrementing Alpha instead of the id if True</li> <li>buildType(int)</li> <li>createBlkClassID(bool)</li> <li>createBlkCtrlTypeID(bool)</li> <li>blkCtrlTypeID(int)</li> <li>parentNode(str) ; [default: None]</li> <li>segmentScaleCompensate(bool)</li> </ul>"},{"location":"utility/#createoffsetgroup","title":"createOffsetGroup","text":"<p>  For the given transform, create a predefined offset group transform parent.  Constructor:  createOffsetGroup(transformObject, kwargs) Return:  MnsNameStd (offsetGrp) Arguments:   <ul> <li>transformObject</li> <li>kwargs</li> </ul> Keyword Arguments:   <ul> <li>type(str) ; [default: offsetGrp]</li> <li>bodySuffix(str)</li> </ul>"},{"location":"utility/#deletefile","title":"deleteFile","text":"<p>  A delete file global function that includes a pre-defined log write.  Constructor:  deleteFile(file) Return:  None Arguments:   <ul> <li>file</li> </ul> Keyword Arguments:   </p>"},{"location":"utility/#deleteunusedshapenodes","title":"deleteUnusedShapeNodes","text":"<p> Constructor:  deleteUnusedShapeNodes(obj = None) Return:  None Arguments:   <ul> <li>obj(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"utility/#distbetween","title":"distBetween","text":"<p>  Measure the distance between to maya transforms.  Constructor:  distBetween(transformA = None, transformB = None) Return:  float (distance) Arguments:   <ul> <li>transformA(str) ; [default: None]</li> <li>transformB(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"utility/#duplicatenamestd","title":"duplicateNameStd","text":"<p>  Simple method to duplicate a node embedded within a NameStd object.  This method will duuplicate the node, and rename it by the nameStd rules.  Constructor:  duplicateNameStd(nameStd = None, kwargs) Return:  None Arguments:   <ul> <li>nameStd(str) ; [default: None]</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"utility/#extractheaderfrompath","title":"extractHeaderFromPath","text":"<p> Constructor:  extractHeaderFromPath(fullPath) Return:  None Arguments:   <ul> <li>fullPath</li> </ul> Keyword Arguments:   </p>"},{"location":"utility/#findandreplaceinfile","title":"findAndReplaceInFile","text":"<p>  This is a simple method to replace the pattern given with a substitute string within a file,  Then overriting the original file with new lines.  Constructor:  findAndReplaceInFile(file_path, pattern, subst) Return:  None Arguments:   <ul> <li>file_path</li> <li>pattern</li> <li>subst</li> </ul> Keyword Arguments:   </p>"},{"location":"utility/#fixshapesname","title":"fixShapesName","text":"<p>  Simple shape name fix function based on parent's name.  Constructor:  fixShapesName(objects = []) Return:  None Arguments:   <ul> <li>objects(list) ; [default: []]</li> </ul> Keyword Arguments:   </p>"},{"location":"utility/#getcurrentversion","title":"getCurrentVersion","text":"<p>  Get the current mansur product version based on this file directory  Constructor:  getCurrentVersion() Return:  string (version) Arguments:   Keyword Arguments:   </p>"},{"location":"utility/#getfirstlevelparentforobject","title":"getFirstLevelParentForObject","text":"<p>  Get the top level parent for a given object.  Constructor:  getFirstLevelParentForObject(obj) Return:  pyNode (top level parent) Arguments:   <ul> <li>obj</li> </ul> Keyword Arguments:   </p>"},{"location":"utility/#getmobjectfromnode","title":"getMObjectFromNode","text":"<p> Constructor:  getMObjectFromNode(node) Return:  None Arguments:   <ul> <li>node</li> </ul> Keyword Arguments:   </p>"},{"location":"utility/#getmobjectfromobjname","title":"getMObjectFromObjName","text":"<p> Constructor:  getMObjectFromObjName(name) Return:  None Arguments:   <ul> <li>name</li> </ul> Keyword Arguments:   </p>"},{"location":"utility/#getmansurprefs","title":"getMansurPrefs","text":"<p>  This method retrives the prefs static dict from globals  Constructor:  getMansurPrefs() Return:   dict (prefrences) Arguments:   Keyword Arguments:   </p>"},{"location":"utility/#getmansurprefsdefaults","title":"getMansurPrefsDefaults","text":"<p> Constructor:  getMansurPrefsDefaults(kwargs) Return:  None Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"utility/#getmansurprefsfromfile","title":"getMansurPrefsFromFile","text":"<p>  This method retrives all of the current prefrences.  In case the 'returnFileDirectory' flag is set to true, this will return the path of the prefs file, instead of the preferences as a dict.  Constructor:  getMansurPrefsFromFile(kwargs) Return:   dict (prefrences) Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"utility/#getnumlinesfordir","title":"getNumLinesForDir","text":"<p> Constructor:  getNumLinesForDir(directory = \"D/mansurProject/mansurRig/scripts/mansur\") Return:  None Arguments:   <ul> <li>directory(str) ; [default: \"D:/mansurProject/mansurRig/scripts/mansur\"]</li> </ul> Keyword Arguments:   </p>"},{"location":"utility/#getsidefromnode","title":"getSideFromNode","text":"<p>  Attempt to collect the given input's side.  Constructor:  getSideFromNode(node) Return:  string (side) Arguments:   <ul> <li>node</li> </ul> Keyword Arguments:   </p>"},{"location":"utility/#gettopparentforobj","title":"getTopParentForObj","text":"<p>  Recursively attempt to fet the top node of the maya heirarchy, from the given input upwards.  Constructor:  getTopParentForObj(obj) Return:  MnsNameStd (Top Parent) Arguments:   <ul> <li>obj</li> </ul> Keyword Arguments:   </p>"},{"location":"utility/#gettopparentforsel","title":"getTopParentForSel","text":"<p>  get the top node of the current selected object's maya heirarchy.  Constructor:  getTopParentForSel() Return:  MnsNameStd (Top Parent) Arguments:   Keyword Arguments:   </p>"},{"location":"utility/#importmodulefrompath","title":"importModuleFromPath","text":"<p>  Attempt to import the given path as a python package into the global scope.  Constructor:  importModuleFromPath(path) Return:  pythonPkg Arguments:   <ul> <li>path</li> </ul> Keyword Arguments:   </p>"},{"location":"utility/#ispluginloaded","title":"isPluginLoaded","text":"<p> Constructor:  isPluginLoaded(pluginName = None) Return:  None Arguments:   <ul> <li>pluginName(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"utility/#jointorienttorotation","title":"jointOrientToRotation","text":"<p>  Transfer all jointOrient attributes for the jnt hirerchy to rotations.  Essentially bake the joint orient attributes for the joints.  Constructor:  jointOrientToRotation(topNode = None) Return:  None Arguments:   <ul> <li>topNode(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"utility/#jointrotationtoorient","title":"jointRotationToOrient","text":"<p>  Transfer all jointOrient attributes for the jnt hirerchy to rotations.  Essentially bake the joint orient attributes for the joints.  Constructor:  jointRotationToOrient(topNode = None) Return:  None Arguments:   <ul> <li>topNode(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"utility/#locatepreferencesdirectory","title":"locatePreferencesDirectory","text":"<p>  This method is used across to locate the prefs directory for the current user.  Constructor:  locatePreferencesDirectory() Return:   string (preferences directory path) Arguments:   Keyword Arguments:   </p>"},{"location":"utility/#lockandhidealltransforms","title":"lockAndHideAllTransforms","text":"<p>  Lock and hide all of the given node's attributes.  Override flags can be inserted to skip requested channels.  Constructor:  lockAndHideAllTransforms(node = None, kwargs) Return:  bool Arguments:   <ul> <li>node(str) ; [default: None]</li> <li>kwargs</li> </ul> Keyword Arguments:   <ul> <li>lock(bool)</li> <li>keyable(bool)</li> <li>cb(bool)</li> <li>t(bool) ; [default: True]</li> <li>r(bool) ; [default: True]</li> <li>s(bool) ; [default: True]</li> <li>x(bool) ; [default: True]</li> <li>y(bool) ; [default: True]</li> <li>z(bool) ; [default: True]</li> </ul>"},{"location":"utility/#lockandhidetransforms","title":"lockAndHideTransforms","text":"<p>  Based on the given flags, lock/unlock, hide/unhide attributes for the given node.  Constructor:  lockAndHideTransforms(node = None, kwargs) Return:  bool Arguments:   <ul> <li>node(str) ; [default: None]</li> <li>kwargs</li> </ul> Keyword Arguments:   <ul> <li>lock(bool)</li> <li>keyable(bool)</li> <li>cb(bool)</li> <li>negateOperation(bool)</li> <li>t(bool) ; [default: True]</li> <li>tx(str) ; [default: t]</li> <li>ty(str) ; [default: t]</li> <li>tz(str) ; [default: t]</li> <li>r(bool) ; [default: True]</li> <li>rx(str) ; [default: r]</li> <li>ry(str) ; [default: r]</li> <li>rz(str) ; [default: r]</li> <li>s(bool) ; [default: True]</li> <li>sx(str) ; [default: s]</li> <li>sy(str) ; [default: s]</li> <li>sz(str) ; [default: s]</li> </ul>"},{"location":"utility/#mirrorpose","title":"mirrorPose","text":"<p> Constructor:  mirrorPose(targetTransform, mirrorTransform) Return:  None Arguments:   <ul> <li>targetTransform</li> <li>mirrorTransform</li> </ul> Keyword Arguments:   </p>"},{"location":"utility/#mirrorpose2","title":"mirrorPose2","text":"<p> Constructor:  mirrorPose2(targetTransform, mirrorTransform, kwargs) Return:  None Arguments:   <ul> <li>targetTransform</li> <li>mirrorTransform</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"utility/#mnslicstatuscheck","title":"mnsLicStatusCheck","text":"<p>  modes:  0 = Available for all  1 = Available for edit only  Constructor:  mnsLicStatusCheck(mode = 0) Return:  None Arguments:   <ul> <li>mode(int) ; [default: 0]</li> </ul> Keyword Arguments:   </p>"},{"location":"utility/#objectarrayvalidexistscheckreturn","title":"objectArrayValidExistsCheckReturn","text":"<p>  MNS core object array validity check.  Two main Cases for the mode parameter:  1. trueOnlyIfAllValid - Run through the objects and only if ALL of them are found existing and valid, return the array back to the caller. If a single item failed- Return None.  2. trueIfSomeValid - Check all the objects and return any or all of them based on validity.  Constructor:  objectArrayValidExistsCheckReturn(kwargs) Return:  List (Valid object list), None (If found invalid) Arguments:   <ul> <li>kwargs</li> </ul> Keyword Arguments:   <ul> <li>objectArray(list) ; [default: [' ']] - Objects input list</li> <li>mode(int) - Validity return mode</li> </ul>"},{"location":"utility/#readjson","title":"readJson","text":"<p>  Read the input json path into formatted python variables.  Constructor:  readJson(fullPath) Return:  FormattedPythonJson Arguments:   <ul> <li>fullPath</li> </ul> Keyword Arguments:   </p>"},{"location":"utility/#readsetteingfromfile","title":"readSetteingFromFile","text":"<p>  Read mns setting from a given file and collect into a dict.  Constructor:  readSetteingFromFile(settingsPath) Return:  dict (arguments) Arguments:   <ul> <li>settingsPath</li> </ul> Keyword Arguments:   </p>"},{"location":"utility/#reloadlib","title":"reloadLib","text":"<p> Constructor:  reloadLib() Return:  None Arguments:   Keyword Arguments:   </p>"},{"location":"utility/#removenamespacefromstring","title":"removeNamespaceFromString","text":"<p> Constructor:  removeNamespaceFromString(value) Return:  None Arguments:   <ul> <li>value</li> </ul> Keyword Arguments:   </p>"},{"location":"utility/#resetmeshhistory","title":"resetMeshHistory","text":"<p> Constructor:  resetMeshHistory(mesh, mode = 0) Return:  None Arguments:   <ul> <li>mesh</li> <li>mode(int) ; [default: 0]</li> </ul> Keyword Arguments:   </p>"},{"location":"utility/#returnindexfromsidedict","title":"returnIndexFromSideDict","text":"<p>  Return the corresponding index from the pre-defined input dictionary, for the given input elenment.  Constructor:  returnIndexFromSideDict(dict, searchElement) Return:  int (index) Arguments:   <ul> <li>dict</li> <li>searchElement</li> </ul> Keyword Arguments:   </p>"},{"location":"utility/#returnkeyfromelementtypedict","title":"returnKeyFromElementTypeDict","text":"<p> Constructor:  returnKeyFromElementTypeDict(dict, searchElement) Return:  None Arguments:   <ul> <li>dict</li> <li>searchElement</li> </ul> Keyword Arguments:   </p>"},{"location":"utility/#returnnamestdchangeelement","title":"returnNameStdChangeElement","text":"<p>  global MnsNameStd utility-  Use this function to change any elemnt within a given MnsNameStd object based on keyword args given  Constructor:  returnNameStdChangeElement(nameStd = None, kwargs) Return:  MnsNameStd Arguments:   <ul> <li>nameStd(str) ; [default: None]</li> <li>kwargs</li> </ul> Keyword Arguments:   <ul> <li>autoRename(bool) ; [default: True]</li> <li>bodyPattern(str) ; [default: None]</li> <li>node(str) ; [default: nameStd.node] - change node parameter</li> <li>side(str) ; [default: nameStd.side] - change side parameter</li> <li>body(str) ; [default: nameStd.body] - change body parameter</li> <li>type(str) ; [default: nameStd.type] - change type parameter</li> <li>id(str) ; [default: nameStd.id] - change id parameter</li> <li>alpha(str) ; [default: nameStd.alpha] - change alpha parameter</li> <li>suffix(str) ; [default: nameStd.suffix] - change suffix</li> <li>comment(str) ; [default: nameStd.comment] - change comment parameter</li> </ul>"},{"location":"utility/#setattr","title":"setAttr","text":"<p>  mns set attr.  Simple method to set attributes.   two cases:  1. attribute isn't locked - set the value  2. attribute is locked - unlock the attribute, set it's value, and re-lock the attribute.  Constructor:  setAttr(attr, value) Return:  None Arguments:   <ul> <li>attr</li> <li>value</li> </ul> Keyword Arguments:   </p>"},{"location":"utility/#setctrlcoloridx","title":"setCtrlColorIdx","text":"<p>  Global utility function:  Change the shape color override to index type, and set to the input value index  Constructor:  setCtrlColorIdx(objects = [], colorIdx = 0) Return:  None Arguments:   <ul> <li>objects(list) ; [default: []]</li> <li>colorIdx(int) ; [default: 0]</li> </ul> Keyword Arguments:   </p>"},{"location":"utility/#setctrlcolorrgb","title":"setCtrlColorRGB","text":"<p>  Global utility function:  Change the shape color override to RGB type, and set to the input value RGB  Constructor:  setCtrlColorRGB(objects = [], color = (1,1,1)) Return:  None Arguments:   <ul> <li>objects(list) ; [default: []]</li> <li>color(str) ; [default: (1]</li> <li>1</li> <li>1)</li> </ul> Keyword Arguments:   </p>"},{"location":"utility/#sortnamestdarraybyid","title":"sortNameStdArrayByID","text":"<p>  Attempt to sort the given array based on it's content ID's.  Constructor:  sortNameStdArrayByID(nameStdArray) Return:  list (sorted list) Arguments:   <ul> <li>nameStdArray</li> </ul> Keyword Arguments:   </p>"},{"location":"utility/#sorted_alphanumeric","title":"sorted_alphanumeric","text":"<p>  returns an alphanumeric ordered data from input given  Constructor:  sorted_alphanumeric(data) Return:   list (sorted data) Arguments:   <ul> <li>data</li> </ul> Keyword Arguments:   </p>"},{"location":"utility/#splitdatetimestringtolist","title":"splitDateTimeStringToList","text":"<p>  Split a 'dateTime' string to a major/minor/patch/timestemp list  Constructor:  splitDateTimeStringToList(dateTime = \"\") Return:  list Arguments:   <ul> <li>dateTime(str) ; [default: \"\"]</li> </ul> Keyword Arguments:   </p>"},{"location":"utility/#splitenumattrtochannelcontrollist","title":"splitEnumAttrToChannelControlList","text":"<p>  Split a pre-defined 'channel-control' enum attribute into a formatted python dict.  Constructor:  splitEnumAttrToChannelControlList(enumAttrName, node, kwargs) Return:  dict (formatted dictionary) Arguments:   <ul> <li>enumAttrName</li> <li>node</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"utility/#splitenumattrtocolorschemefloattuplelist","title":"splitEnumAttrToColorSchemeFloatTupleList","text":"<p> Constructor:  splitEnumAttrToColorSchemeFloatTupleList(enumAttrName, node) Return:  list (formatted list of tuples) Arguments:   <ul> <li>enumAttrName</li> <li>node</li> </ul> Keyword Arguments:   </p>"},{"location":"utility/#splitenumtostringlist","title":"splitEnumToStringList","text":"<p>  Split the given enum attribute is a formated python list.  Constructor:  splitEnumToStringList(enumAttrName, node) Return:  list (formated list) Arguments:   <ul> <li>enumAttrName</li> <li>node</li> </ul> Keyword Arguments:   </p>"},{"location":"utility/#splitnamestringtonamestd","title":"splitNameStringToNameStd","text":"<p>  Split a given string object and return a MnsNameStd based on it's structure.  Constructor:  splitNameStringToNameStd(nameString = \"\") Return:  MnsNameStd Arguments:   <ul> <li>nameString(str) ; [default: \"\"]</li> </ul> Keyword Arguments:   </p>"},{"location":"utility/#updatemansurprefs","title":"updateMansurPrefs","text":"<p> Constructor:  updateMansurPrefs(prefs = None, kwargs) Return:  None Arguments:   <ul> <li>prefs(str) ; [default: None]</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"utility/#validateattrandget","title":"validateAttrAndGet","text":"<p>  For the given transform (or nameStd)- check whether the given attr exists.  If the attr exist, get it and return it.  Constructor:  validateAttrAndGet(transform = None, attrName = \"\", default = None, kwargs) Return:   bool (return status), unknownType (value) Arguments:   <ul> <li>transform(str) ; [default: None]</li> <li>attrName(str) ; [default: \"\"]</li> <li>default(str) ; [default: None]</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"utility/#validatenamestd","title":"validateNameStd","text":"<p>  For any input - string/PyNode/MnsNameStd - Validate it and attempt to convert it into a MnsNameStd Object.  Constructor:  validateNameStd(objectA) Return:  MnsNameStd Arguments:   <ul> <li>objectA</li> </ul> Keyword Arguments:   </p>"},{"location":"utility/#writejson","title":"writeJson","text":"<p>  Write the input data into the input json file path.  Constructor:  writeJson(directory, fileName, data = {}, kwargs) Return:  None Arguments:   <ul> <li>directory</li> <li>fileName</li> <li>data(dict) ; [default: {}]</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"utility/#writejsonfullpath","title":"writeJsonFullPath","text":"<p>  Write the input data into the input json file path.  Constructor:  writeJsonFullPath(fullPath, data) Return:  None Arguments:   <ul> <li>fullPath</li> <li>data</li> </ul> Keyword Arguments:   </p>"},{"location":"utility/#writejsonpath","title":"writeJsonPath","text":"<p>  Write the input data into the input json file path.  Constructor:  writeJsonPath(path = None, data = {}) Return:  None Arguments:   <ul> <li>path(str) ; [default: None]</li> <li>data(dict) ; [default: {}]</li> </ul> Keyword Arguments:   </p>"},{"location":"utility/#zerojointorient","title":"zeroJointOrient","text":"<p>  Zero all jointOrient attributes for the jnt hirerchy to rotations.  Constructor:  zeroJointOrient(topNode = None) Return:  None Arguments:   <ul> <li>topNode(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"utility/#zerotransforms","title":"zeroTransforms","text":"<p>  Zero all available transforms for the given object passed in.  Constructor:  zeroTransforms(transform = \"\") Return:  bool Arguments:   <ul> <li>transform(str) ; [default: \"\"]</li> </ul> Keyword Arguments:   </p>"},{"location":"volumeJointsUI/","title":"volumeJointsUI","text":"<p>"},{"location":"volumeJointsUI/#volumejointsui","title":"volumeJointsUI","text":"<p>  === Author: Assaf Ben Zur ==="},{"location":"volumeJointsUI/#classes","title":"Classes","text":""},{"location":"volumeJointsUI/#DragDoubleSpinBox TARGET","title":"volumeJointsUI","text":""},{"location":"volumeJointsUI/#dragdoublespinbox-class","title":"DragDoubleSpinBox [Class]","text":"<p> Constructor:  DragDoubleSpinBox(parent(str) ; [default: None]) Inherits from:  QtWidgets.QDoubleSpinBox Class Members:   <ul> <ul> <li>mouseStartPosX</li> <li>startValue</li> <li>inDrag</li> <li>le</li> </ul> Methods:  <ul> <li>mouseDrag  [method] <li>mouseDragEnd  [method] <li>mouseDragStart  [method] <li>eventFilter  [method]"},{"location":"volumeJointsUI/#dragdoublespinbox-methods","title":"DragDoubleSpinBox  methods","text":"<p>"},{"location":"volumeJointsUI/#mouseDragTARGET","title":"volumeJointsUI","text":"mouseDrag  [DragDoubleSpinBox  class method]  Constructor:  mouseDrag(self, event) Return:  None Arguments:   <ul> <li>self</li> <li>event</li> </ul> Optional Arguments:"},{"location":"volumeJointsUI/#mouseDragEndTARGET","title":"volumeJointsUI","text":"mouseDragEnd  [DragDoubleSpinBox  class method]  Constructor:  mouseDragEnd(self, event) Return:  None Arguments:   <ul> <li>self</li> <li>event</li> </ul> Optional Arguments:"},{"location":"volumeJointsUI/#mouseDragStartTARGET","title":"volumeJointsUI","text":"mouseDragStart  [DragDoubleSpinBox  class method]  Constructor:  mouseDragStart(self, event) Return:  None Arguments:   <ul> <li>self</li> <li>event</li> </ul> Optional Arguments:"},{"location":"volumeJointsUI/#eventFilterTARGET","title":"volumeJointsUI","text":"eventFilter  [DragDoubleSpinBox  class method]  Override event filter to catch the close trigger to delete the callback Constructor:  eventFilter(self, source, event) Return:  None Arguments:   <ul> <li>self</li> <li>source</li> <li>event</li> </ul> Optional Arguments:"},{"location":"volumeJointsUI/#MnsVolumeJointsUI TARGET","title":"volumeJointsUI","text":""},{"location":"volumeJointsUI/#mnsvolumejointsui-class","title":"MnsVolumeJointsUI [Class]","text":"<p>  Main UI Class  Constructor:  MnsVolumeJointsUI(parent(str) ; [default: mnsUIUtils.get_maya_window()]) Inherits from:  form_class, base_class Class Members:   <ul> <ul> <li>allCollapsible</li> <li>allEditableWidgets</li> <li>mayaSelectCallBack</li> <li>blockSceneSelectCallback</li> <li>cbxSBRelations</li> <li>currentVJnt</li> <li>currentVJntNode</li> <li>currentIndex</li> <li>currentVJntSym</li> <li>currentVJntNodeSym</li> <li>currentIndexSym</li> <li>symmetryDelta</li> <li>attrMapping</li> </ul> Methods:  <ul> <li>createVJnt  [method] <li>deleteVJnt  [method] <li>duplicateVJnt  [method] <li>initializeUI  [method] <li>setCollapsibleWidgetsBehaviour  [method] <li>setRestPoseForAll  [method] <li>symmetrizeAllTrigger  [method] <li>symmetrizeVJTrigger  [method] <li>updateAllEditValues  [method] <li>updateAnglesState  [method] <li>drawAngleSection  [method] <li>drawGeneralSection  [method] <li>refreshView  [method] <li>selectionChangedTrigger  [method] <li>setCurrentStateAsRestPose  [method] <li>setSymmetryVars  [method] <li>sceneSelectionChangedTrigger  [method] <li>toggleAllCollapsed  [method] <li>setCurrentSBToMinOrMax  [method] <li>allEditTriggers  [method] <li>connectSignals  [method] <li>loadWindow  [method] <li>eventFilter  [method]"},{"location":"volumeJointsUI/#mnsvolumejointsui-methods","title":"MnsVolumeJointsUI  methods","text":"<p>"},{"location":"volumeJointsUI/#createVJntTARGET","title":"volumeJointsUI","text":"createVJnt  [MnsVolumeJointsUI  class method]  Constructor:  createVJnt(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"volumeJointsUI/#deleteVJntTARGET","title":"volumeJointsUI","text":"deleteVJnt  [MnsVolumeJointsUI  class method]  Constructor:  deleteVJnt(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"volumeJointsUI/#duplicateVJntTARGET","title":"volumeJointsUI","text":"duplicateVJnt  [MnsVolumeJointsUI  class method]  Constructor:  duplicateVJnt(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"volumeJointsUI/#initializeUITARGET","title":"volumeJointsUI","text":"initializeUI  [MnsVolumeJointsUI  class method]  Constructor:  initializeUI(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"volumeJointsUI/#setCollapsibleWidgetsBehaviourTARGET","title":"volumeJointsUI","text":"setCollapsibleWidgetsBehaviour  [MnsVolumeJointsUI  class method]  Constructor:  setCollapsibleWidgetsBehaviour(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"volumeJointsUI/#setRestPoseForAllTARGET","title":"volumeJointsUI","text":"setRestPoseForAll  [MnsVolumeJointsUI  class method]  Constructor:  setRestPoseForAll(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"volumeJointsUI/#symmetrizeAllTriggerTARGET","title":"volumeJointsUI","text":"symmetrizeAllTrigger  [MnsVolumeJointsUI  class method]  Constructor:  symmetrizeAllTrigger(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"volumeJointsUI/#symmetrizeVJTriggerTARGET","title":"volumeJointsUI","text":"symmetrizeVJTrigger  [MnsVolumeJointsUI  class method]  Constructor:  symmetrizeVJTrigger(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"volumeJointsUI/#updateAllEditValuesTARGET","title":"volumeJointsUI","text":"updateAllEditValues  [MnsVolumeJointsUI  class method]  Constructor:  updateAllEditValues(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"volumeJointsUI/#updateAnglesStateTARGET","title":"volumeJointsUI","text":"updateAnglesState  [MnsVolumeJointsUI  class method]  Constructor:  updateAnglesState(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"volumeJointsUI/#drawAngleSectionTARGET","title":"volumeJointsUI","text":"drawAngleSection  [MnsVolumeJointsUI  class method]  Constructor:  drawAngleSection(self, kwargs) Return:  None Arguments:   <ul> <li>self</li> <li>kwargs</li> </ul> Optional Arguments:"},{"location":"volumeJointsUI/#drawGeneralSectionTARGET","title":"volumeJointsUI","text":"drawGeneralSection  [MnsVolumeJointsUI  class method]  Constructor:  drawGeneralSection(self, kwargs) Return:  None Arguments:   <ul> <li>self</li> <li>kwargs</li> </ul> Optional Arguments:"},{"location":"volumeJointsUI/#refreshViewTARGET","title":"volumeJointsUI","text":"refreshView  [MnsVolumeJointsUI  class method]  Constructor:  refreshView(self, kwargs) Return:  None Arguments:   <ul> <li>self</li> <li>kwargs</li> </ul> Optional Arguments:"},{"location":"volumeJointsUI/#selectionChangedTriggerTARGET","title":"volumeJointsUI","text":"selectionChangedTrigger  [MnsVolumeJointsUI  class method]  Constructor:  selectionChangedTrigger(self, kwargs) Return:  None Arguments:   <ul> <li>self</li> <li>kwargs</li> </ul> Optional Arguments:"},{"location":"volumeJointsUI/#setCurrentStateAsRestPoseTARGET","title":"volumeJointsUI","text":"setCurrentStateAsRestPose  [MnsVolumeJointsUI  class method]  Constructor:  setCurrentStateAsRestPose(self, kwargs) Return:  None Arguments:   <ul> <li>self</li> <li>kwargs</li> </ul> Optional Arguments:"},{"location":"volumeJointsUI/#setSymmetryVarsTARGET","title":"volumeJointsUI","text":"setSymmetryVars  [MnsVolumeJointsUI  class method]  Constructor:  setSymmetryVars(self, kwargs) Return:  None Arguments:   <ul> <li>self</li> <li>kwargs</li> </ul> Optional Arguments:"},{"location":"volumeJointsUI/#sceneSelectionChangedTriggerTARGET","title":"volumeJointsUI","text":"sceneSelectionChangedTrigger  [MnsVolumeJointsUI  class method]  Constructor:  sceneSelectionChangedTrigger(self, dummy = None) Return:  None Arguments:   <ul> <li>self</li> <li>dummy(str) ; [default: None]</li> </ul> Optional Arguments:"},{"location":"volumeJointsUI/#toggleAllCollapsedTARGET","title":"volumeJointsUI","text":"toggleAllCollapsed  [MnsVolumeJointsUI  class method]  Constructor:  toggleAllCollapsed(self, pressedColWid) Return:  None Arguments:   <ul> <li>self</li> <li>pressedColWid</li> </ul> Optional Arguments:"},{"location":"volumeJointsUI/#setCurrentSBToMinOrMaxTARGET","title":"volumeJointsUI","text":"setCurrentSBToMinOrMax  [MnsVolumeJointsUI  class method]  Constructor:  setCurrentSBToMinOrMax(self, sourceWidget, targetWidget) Return:  None Arguments:   <ul> <li>self</li> <li>sourceWidget</li> <li>targetWidget</li> </ul> Optional Arguments:"},{"location":"volumeJointsUI/#allEditTriggersTARGET","title":"volumeJointsUI","text":"allEditTriggers  [MnsVolumeJointsUI  class method]  Constructor:  allEditTriggers(self, widget = None, value = None) Return:  None Arguments:   <ul> <li>self</li> <li>widget(str) ; [default: None]</li> <li>value(str) ; [default: None]</li> </ul> Optional Arguments:"},{"location":"volumeJointsUI/#connectSignalsTARGET","title":"volumeJointsUI","text":"connectSignals  [MnsVolumeJointsUI  class method]  Connect all UI signals Constructor:  connectSignals(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"volumeJointsUI/#loadWindowTARGET","title":"volumeJointsUI","text":"loadWindow  [MnsVolumeJointsUI  class method]  Main UI load Constructor:  loadWindow(self) Return:  None Arguments:   <ul> <li>self</li> </ul> Optional Arguments:"},{"location":"volumeJointsUI/#eventFilterTARGET","title":"volumeJointsUI","text":"eventFilter  [MnsVolumeJointsUI  class method]  Override event filter to catch the close trigger to delete the callback Constructor:  eventFilter(self, source, event) Return:  None Arguments:   <ul> <li>self</li> <li>source</li> <li>event</li> </ul> Optional Arguments:"},{"location":"volumeJointsUI/#defenitions","title":"Defenitions","text":""},{"location":"volumeJointsUI/#loadvolumejointsui","title":"loadVolumeJointsUI","text":"<p>  Load the cns tool UI from globals, avoid UI duplication.  Constructor:  loadVolumeJointsUI() Return:  None Arguments:   Keyword Arguments:   </p>"},{"location":"volumeJointsUI/#voljointstatechangedcb","title":"volJointStateChangedCB","text":"<p> Constructor:  volJointStateChangedCB(msg, plug, otherPlug, clientData, kwargs) Return:  None Arguments:   <ul> <li>msg</li> <li>plug</li> <li>otherPlug</li> <li>clientData</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"wheel/","title":"Wheel","text":"<p>"},{"location":"wheel/#wheel","title":"wheel","text":"<p>  Author: Asaf Ben-Zur  Best used for: Wheels  A simple module to create an auto-drive for wheels.  This module will calculate the rotation of a wheel based on the input settings, using the module's world position.  This will yield an auto-drive for wheels.  The behaviour will not be confined to a single control being moved, but rather to the modules world position.  This will apply to translation, as well as rotation, in all directions."},{"location":"wheel/#defenitions","title":"Defenitions","text":""},{"location":"wheel/#construct","title":"construct","text":"<p> Constructor:  construct(mansur, MnsBuildModule, kwargs) Return:   list (controls), dict (internalSpaces) Arguments:   <ul> <li>mansur</li> <li>MnsBuildModule</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"wheel/#customguides","title":"customGuides","text":"<p> Constructor:  customGuides(mansur, builtGuides) Return:  None Arguments:   <ul> <li>mansur</li> <li>builtGuides</li> </ul> Keyword Arguments:   </p>"},{"location":"wheel_settings/","title":"Wheel settings","text":"<p>"},{"location":"wheel_settings/#wheel-settings","title":"wheel Settings","text":"<p>  Author: Asaf Ben-Zur  Best used for: Wheels  A simple module to create an auto-drive for wheels.  This module will calculate the rotation of a wheel based on the input settings, using the module's world position.  This will yield an auto-drive for wheels.  The behaviour will not be confined to a single control being moved, but rather to the modules world position.  This will apply to translation, as well as rotation, in all directions.  </p>"},{"location":"wheel_settings/#attributes","title":"Attributes","text":""},{"location":"wheel_settings/#globalsettings","title":"GlobalSettings","text":"<p>Attribute NameDefaultDescription controlShape circle Control shape channelControl T R S X v v v Y v v v Z v v v Control channel-box settings wheelDiameter 20.0 The driven wheel diameter. This is the base of the calculation and needs to be set accurately gearRatio 1.0 In case you target is a driven gear, you can set the diameter above to the driver gears diameter, and set the ratio between them for accurate results mapRoatationToAxis 0 Map the rotation axis needs to be acted on. This is based on the orientaton of your guide reverseDirection False In some cases the direction of the drive is flipped. If this is your case, set this setting to True to correct this issue autoDriveDefault 1.0 Auto-Drive channel default state"},{"location":"wing/","title":"Wing","text":"<p>"},{"location":"wing/#wing","title":"wing","text":"<p>  Author: Asaf Ben-Zur  Best used for: Bird Wings  This module is designed for birds (feathered) wings.  This is a compound module.  The main module is based on the limb module, including most of it's features.  On top of the main limb module, there is a compound FK chain modules extending from each of the main modules main guides, to create a global feathers silhouette control.  Out of these compounds, a grid of interp-joints is created to control the shape's deformation, using mnsPointOnCuveNode as a driver.  As a bird wing is incredibly complex, controlling it precisely is incredibly difficult.  With that in mind, the grid of interp joints is designed to control the overall shape of the feathers as a group, mid-controls to curl them as a group, as well as control each feather row individually.  Use featherJoints attribute to define the number of feathers along the wings main skeleton.  Post joint-struct creation, use the custom position adjustment attribute on the root-guide to adjust the position of the joint grid to match your needs.  This module also contains multiple features to make animation even better:  Feathers spring, global wave control, individual feather control, bendy limbs, extension-to-look-at for easy wing fold control."},{"location":"wing/#defenitions","title":"Defenitions","text":""},{"location":"wing/#attempfeatherparamadjustremap","title":"attempFeatherParamAdjustRemap","text":"<p> Constructor:  attempFeatherParamAdjustRemap(mansur, rootGuide = None, previousValues = {}) Return:  None Arguments:   <ul> <li>mansur</li> <li>rootGuide(str) ; [default: None]</li> <li>previousValues(dict) ; [default: {}]</li> </ul> Keyword Arguments:   </p>"},{"location":"wing/#collectfeathparamadjustvalues","title":"collectFeathParamAdjustValues","text":"<p> Constructor:  collectFeathParamAdjustValues(rootGuide) Return:  None Arguments:   <ul> <li>rootGuide</li> </ul> Keyword Arguments:   </p>"},{"location":"wing/#construct","title":"construct","text":"<p> Constructor:  construct(mansur, MnsBuildModule, kwargs) Return:   list (controls), dict (internalSpaces), MnsNameStd (moduleSpaceAttrHost) Arguments:   <ul> <li>mansur</li> <li>MnsBuildModule</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"wing/#customguides","title":"customGuides","text":"<p> Constructor:  customGuides(mansur, builtGuides) Return:  None Arguments:   <ul> <li>mansur</li> <li>builtGuides</li> </ul> Keyword Arguments:   </p>"},{"location":"wing/#deconstruct","title":"deconstruct","text":"<p>  deconstruct method implementation.   Transfer interJoints control back to the main joints.  Constructor:  deconstruct(mansur, MnsBuildModule, kwargs) Return:  None Arguments:   <ul> <li>mansur</li> <li>MnsBuildModule</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"wing/#deleteunusedmnsnodesfromrootguide","title":"deleteUnusedMnsNodesFromRootGuide","text":"<p> Constructor:  deleteUnusedMnsNodesFromRootGuide(rootNode = None) Return:  None Arguments:   <ul> <li>rootNode(str) ; [default: None]</li> </ul> Keyword Arguments:   </p>"},{"location":"wing/#getnumsections","title":"getNumSections","text":"<p> Constructor:  getNumSections(tweakersPerSection, doTweakers = False) Return:  None Arguments:   <ul> <li>tweakersPerSection</li> <li>doTweakers(bool) ; [default: False]</li> </ul> Keyword Arguments:   </p>"},{"location":"wing/#jointstructure","title":"jointStructure","text":"<p> Constructor:  jointStructure(mansur, guides, mnsBuildModule = None, kwargs) Return:  None Arguments:   <ul> <li>mansur</li> <li>guides</li> <li>mnsBuildModule(str) ; [default: None]</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"wing/#jointstructuresoftmod","title":"jointStructureSoftMod","text":"<p> Constructor:  jointStructureSoftMod(mansur, guides, mnsBuildModule = None, kwargs) Return:  None Arguments:   <ul> <li>mansur</li> <li>guides</li> <li>mnsBuildModule(str) ; [default: None]</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"wing/#modulecompound","title":"moduleCompound","text":"<p> Constructor:  moduleCompound(mansur, bmButtonList, guides, mnsBuildModule = None, kwargs) Return:  None Arguments:   <ul> <li>mansur</li> <li>bmButtonList</li> <li>guides</li> <li>mnsBuildModule(str) ; [default: None]</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"wing/#postconstruct","title":"postConstruct","text":"<p> Constructor:  postConstruct(mansur, MnsBuildModule, kwargs) Return:  None Arguments:   <ul> <li>mansur</li> <li>MnsBuildModule</li> <li>kwargs</li> </ul> Keyword Arguments:"},{"location":"wing_settings/","title":"Wing settings","text":"<p>"},{"location":"wing_settings/#wing-settings","title":"wing Settings","text":"<p>  Author: Asaf Ben-Zur  Best used for: Bird Wings  This module is designed for birds (feathered) wings.  This is a compound module.  The main module is based on the limb module, including most of it's features.  On top of the main limb module, there is a compound FK chain modules extending from each of the main modules main guides, to create a global feathers silhouette control.  Out of these compounds, a grid of interp-joints is created to control the shape's deformation, using mnsPointOnCuveNode as a driver.  As a bird wing is incredibly complex, controlling it precisely is incredibly difficult.  With that in mind, the grid of interp joints is designed to control the overall shape of the feathers as a group, mid-controls to curl them as a group, as well as control each feather row individually.  Use featherJoints attribute to define the number of feathers along the wings main skeleton.  Post joint-struct creation, use the custom position adjustment attribute on the root-guide to adjust the position of the joint grid to match your needs.  This module also contains multiple features to make animation even better:  Feathers spring, global wave control, individual feather control, bendy limbs, extension-to-look-at for easy wing fold control.  </p>"},{"location":"wing_settings/#attributes","title":"Attributes","text":""},{"location":"wing_settings/#globalsettings","title":"GlobalSettings","text":"<p>Attribute NameDefaultDescription interpolationJoints 5 Increments of 4, starting from 5. This setting controls the number of driven interpolation joints needed. This interpolation joint chain will behave according to the module's design, and will inherit transformations that are required by this module. Usually the driven interpolation joint-chain is the compenents result behaviour in animation offsetX 20.0 Up curve X value offset for the interpolation joints offsetZ 0.0 Up curve Z value offset for the interpolation joints FKSymmetryType 0 FK controls symmetry type, in case it needs to differ from the main symmetry type scaleMode 2 Default scale mode. Please refer to the documentation of mnsPointsOnCurve node to learn more about each mode squashMode 4 Default squash mode. Please refer to the documentation of mnsPointsOnCurve node to learn more about each mode ikFkBlendDefault 1.0 Default value for the main IK-FK blend channel. 0 is IK, 1 is FK."},{"location":"wing_settings/#featherssettings","title":"FeathersSettings","text":"<p>Attribute NameDefaultDescription featherJoints 15 The amount of primary feathers. Ideally, a joint chain will be craeted for each primary feather for the most control in animation. This setting sets the mount of primary feathers, or the amount of feather column chains created featherFKSections 3 The amount of sections each primary feather joint column will consist of. In case the amount of sections set is 3 for example, a column of 4 joints will be created for the amount of feather joints selected above doFeathersSpring True Choose whether create the automatic feather spring feature or not doFeatherIsolatedCtrls True In case this setting is set to true, the isolated-feather controls feature will be created featherFKControlShape cube Feather FK controls shape featherIsolatedControlShape square Feather isolted controls shape extensionLookAtControlShape lightPin Extensions look-at control shape"},{"location":"wing_settings/#ik","title":"IK","text":"<p>Attribute NameDefaultDescription stretchLimit 1.0 IK Handle stratch limit default value softness 0.0 IK handle softness default value iKHandleMatchOrient Select a guide to match the IK-Handle's orientation. This will override the native orientation as well as all symmetry options"},{"location":"wing_settings/#main-ctrl-shapes","title":"Main-Ctrl-Shapes","text":"<p>Attribute NameDefaultDescription rootControlShape plus Module root control control shape ikHandleControlShape square IK Handle control shape poleVectorControlShape diamond Pole Vector control shape fkControlShape cylinder FK controls shape tertiariesControlShape flatDiamond Tweak tertiary controls shape"},{"location":"wing_settings/#tweakersbendy-limbs","title":"tweakers/bendy-Limbs","text":"<p>Attribute NameDefaultDescription doTweakers False This feature will create a secondary tweak layer below the main control chain. This is commonly known as Bendy-Limbs tweakersSymmetryType 3 Tweak controls symmetry type, in case it needs to differ from the main symmetry type tweakersPerSection 1 The amount of bendy controls per section. A value of one will create two controls in total - one for the upper section of the limb, on for the lower section createExtraAttributes True If this is set to True, some extra tertiary channel-box control attributes will be added to the attribute-host tweakControlShape dialSquare Tweak controls shape negateOffsetOnSymmetry False If this is set to True, the above offsetX and offsetZ value for the up curve will be negated tweakersChannelControl T R S X v v v Y v v v Z v v v Tweak controls channel-box settings"},{"location":"faq/FAQ/","title":"Frequently Asked Questions","text":""},{"location":"faq/FAQ/#pricingsubscriptions","title":"Pricing/Subscriptions","text":"<ul> <li>What is the key difference between the Gold and Silver subscription plans?</li> <li>Can  sell rigs created using Mansur-Rig?</li> <li>Is there an option to get an annual subscription?</li> <li>Does Mansur-Rig offer student license discounts?</li> </ul>"},{"location":"faq/FAQ/#installation","title":"Installation","text":"<ul> <li>How do I install Mansur-Rig?</li> <li>I installed Mansur-Rig, and I don't see the menu in Maya</li> <li>I'm a freelance rigging artist using Mansur-Rig. do my clients require Mansur-Rig?</li> <li>Do animators require Mansur-Rig?</li> <li>After extracting the skeleton, do I still need Mansur-Rig?</li> <li>Can I install Mansur-Rig in other softwares other then Maya?</li> <li>Can I use Mansur-Rig without an internet conection?</li> <li>I'm in a studio environment, and I have a firewall. Are there any URL's I need to white-list to use Mansur-Rig?</li> </ul>"},{"location":"faq/FAQ/#activation-in-maya","title":"Activation in Maya","text":"<ul> <li>How Do I activate my account in Maya?</li> <li>Activation failed. Message: email, password and License-ID inputs are required.</li> <li>Activation failed. Message: Invalid Credentials.</li> <li>Activation failed. Message: Couldn't find license. Please check your inputs.</li> <li>Activation failed. Message: This seat is already occupied. Couldn't Log-In.</li> <li>Activation failed. Message: mnsLicDigest command wans't found. Please check your environment.</li> </ul>"},{"location":"faq/FAQ/#compatibility","title":"Compatibility","text":"<ul> <li>Is Mansur-Rig Game-Engine compatible?</li> <li>Is Mansur-Rig joint based?</li> <li>Can I use Mansur-Rig in combination with another Rig-Builder/manual-rig?</li> <li>I'm using a custom pipeline, and picker images don't load. Can I specify a static location for picker images?</li> <li>Is there an easy way to extract animations from Mansur-Rig to FBX?</li> <li>Can I incorporate Motion-Capture (MOCAP) with Mansur-Rig?</li> </ul>"},{"location":"faq/FAQ/#general","title":"General","text":"<ul> <li>Does Mansur-Rig auto skin?</li> <li>Can I use Mansur-Rig to create Facial-Rigs?</li> <li>What's the difference between Mansur-Rig and other rig-builders?</li> <li>Where can I get support?</li> </ul>"},{"location":"faq/FAQ/#custom-rigging","title":"Custom Rigging","text":"<ul> <li>Can I add manual steps to Mansur-Rig's build?</li> <li>Can I run Mansur-Rig using code instead of the UI?</li> </ul>"},{"location":"faq/FAQ/#license-management","title":"License Management","text":"<ul> <li>I want to use Mansur-Rig in a studio, and I need multiple licenses for my users. What do I do?</li> <li>I want to test Mansur-Rig for studio use, and m Trial is expired. what do I do?</li> <li>I use Mansur-Rig in a studio environment, do I need to credit it?</li> </ul>"},{"location":"faq/FAQ/#development","title":"Development","text":"<ul> <li>Is Mansur-Rig maintained?</li> <li>Where can I track Mansur-Rig's Development?</li> <li>I have a bug to report, where can I do that?</li> <li>I have a feature request, where can I send it to?</li> </ul>"},{"location":"faq/FAQ/#pricingsubscriptions-answers","title":"Pricing/Subscriptions [Answers]","text":""},{"location":"faq/FAQ/#what-is-the-key-difference-between-the-gold-and-silver-subscription-plans","title":"What is the key difference between the Gold and Silver subscription plans?","text":"<p>The key difference is the fact the the Gold subscription is targeted for Riggers, while the Silver subscription is targeted for Animators.</p> <ul> <li>The Gold license has no restrictions. All actions/tools/nodes within Mansur-Rig are open for Gold subscribers.</li> <li>The Silver license is a 'Read-Only' subscription. Meaning that all Build actions, or Change actions are not avilable. Although all animation related tools are avilable. This license is designed for Animators who only need to use rigs created using Mansur-Rig, rather then build/change them.</li> </ul> <p>\u2191 Back to top \u2191 </p>"},{"location":"faq/FAQ/#can-sell-rigs-created-using-mansur-rig","title":"Can  sell rigs created using Mansur-Rig?","text":"<p>Yes, absolutely. Anyone is free to sell rigs created using Mansur-Rig, without any restrictions, and without any prior approval, and at any price. Also, there is no requirement to credit Mansur-Rig. Although that will help support Mansur-Rig and will be appreciated.  With that said, remember that Mansur-Rig is required (installation and license) in order for the rigs your are selling to function. So anyone you sell your rigs to, will require to install and validate Mansur-Rig.  </p> <p>\u2191 Back to top \u2191 </p>"},{"location":"faq/FAQ/#is-there-an-option-to-get-an-annual-subscription","title":"Is there an option to get an annual subscription?","text":"<p>Not currently. It is on the road-map, but there is no ETA at the moment.  Note: An exception can be made for studio teams, please contact us atsupport@mansur-rig.com if that is your case and you are interested.</p> <p>\u2191 Back to top \u2191 </p>"},{"location":"faq/FAQ/#does-mansur-rig-offer-student-license-discounts","title":"Does Mansur-Rig offer student license discounts?","text":"<p>Unfortunately, not currently.</p> <p>\u2191 Back to top \u2191 </p>"},{"location":"faq/FAQ/#installation-answers","title":"Installation [Answers]","text":""},{"location":"faq/FAQ/#how-do-i-install-mansur-rig","title":"How do I install Mansur-Rig?","text":"<p>Here is a video guide on how to install and activate Mansur-Rig: Installation &amp; Activation Tutorial</p> <p>\u2191 Back to top \u2191 </p>"},{"location":"faq/FAQ/#i-installed-mansur-rig-and-i-dont-see-the-menu-in-maya","title":"I installed Mansur-Rig, and I don't see the menu in Maya","text":"<ul> <li>First, make sure the Maya version in question is within Mansur-Rig's supported versions, and that you are using a supported platform: System-Requirements</li> <li>If so, make sure PyMel is installed within the Maya version you are using: 2022 &amp; 2023 2024</li> <li>Try to uninstall, then use the manual installation instead. </li> <li>If non if the above make a difference, please send a support ticket to support@mansur-rig.com with as much information possible.</li> </ul> <p>\u2191 Back to top \u2191 </p>"},{"location":"faq/FAQ/#im-a-freelance-rigging-artist-using-mansur-rig-do-my-clients-require-mansur-rig","title":"I'm a freelance rigging artist using Mansur-Rig. do my clients require Mansur-Rig?","text":"<p>Yes. Mansur-Rig is based on a dedicated custom C++ node library, that is the heart of it's operation. In order for the Rigs created using Mansur-Rig to run, this solver-library is required. Without it, it won't function. Moreover, Mansur-Rig's solvers will only function in case Mansur-Rig is activated using a valid license. So, your clients will require the installation of Mansur-Rig, as well as a valid license to activate it within Maya for them to be able to use the rig you created using Mansur-Rig. With that said, in case your clients only need to animate using the rig (not build it), they will only require the lower tier Silver license.  It is also important to note that in case your clients only need to use Mansur-Rig's extracted skeleton for a game-engine for example- they do not require Mansur-Rig at all. Mansur-Rig is only required to build/use puppets within Maya. Once the sekeleton/animated-skeleton is extracted, Mansur-Rig is no longer required.</p> <p>\u2191 Back to top \u2191 </p>"},{"location":"faq/FAQ/#do-animators-require-mansur-rig","title":"Do animators require Mansur-Rig?","text":"<p>Yes. Mansur-Rig is required to build/use puppets created using Mansur-Rig within Maya. With that said, Animators only require the lower tier Silver license.</p> <p>\u2191 Back to top \u2191 </p>"},{"location":"faq/FAQ/#after-extracting-the-skeleton-do-i-still-need-mansur-rig","title":"After extracting the skeleton, do I still need Mansur-Rig?","text":"<p>No. Mansur-Rig is only required to build/use puppets within Maya. Once the sekeleton/animated-skeleton is extracted, Mansur-Rig is no longer required.</p> <p>\u2191 Back to top \u2191 </p>"},{"location":"faq/FAQ/#can-i-install-mansur-rig-in-other-softwares-other-then-maya","title":"Can I install Mansur-Rig in other softwares other then Maya?","text":"<p>No. Mansur-Rig is a plugin written specifically for Maya. Although the UI is written in Python, it is based on a dedicated custom C++ node library written using Maya's API, hence running it in any other software other then Maya isn't possible.  Transforming Mansur-Rig to other softwares isn't possible as well, just for clarity.</p> <p>\u2191 Back to top \u2191 </p>"},{"location":"faq/FAQ/#can-i-use-mansur-rig-without-an-internet-conection","title":"Can I use Mansur-Rig without an internet conection?","text":"<p>Currently, No. Mansur-Rig license system is validating against a web-based server. Without an internet connection, your license cannot be validated. Offline authentication is a future possibility, although it is not on the roadmap for now.</p> <p>\u2191 Back to top \u2191 </p>"},{"location":"faq/FAQ/#im-in-a-studio-environment-and-i-have-a-firewall-are-there-any-urls-i-need-to-white-list-to-use-mansur-rig","title":"I'm in a studio environment, and I have a firewall. Are there any URL's I need to white-list to use Mansur-Rig?","text":"<p>Yes. In case you have a firewall preventing you from authenticating Mansur-Rig you need to white-list these URL's:</p> <ul> <li>https://api.keygen.sh</li> <li>https://dist.keygen.sh</li> </ul> <p>\u2191 Back to top \u2191 </p>"},{"location":"faq/FAQ/#activation-in-maya-answers","title":"Activation in Maya [Answers]","text":""},{"location":"faq/FAQ/#how-do-i-activate-my-account-in-maya","title":"How Do I activate my account in Maya?","text":"<p>Here is a video guide on how to install and activate Mansur-Rig: Installation &amp; Activation Tutorial</p> <p>\u2191 Back to top \u2191 </p>"},{"location":"faq/FAQ/#activation-failed-message-email-password-and-license-id-inputs-are-required","title":"Activation failed. Message: email, password and License-ID inputs are required.","text":"<p>All three of these feilds are required. This means one of them was not inputted into the dialog. Please fill the requird feilds and try again.</p> <p>\u2191 Back to top \u2191 </p>"},{"location":"faq/FAQ/#activation-failed-message-invalid-credentials","title":"Activation failed. Message: Invalid Credentials.","text":"<p>This means the creadentials inserted were not found in the system. Please make sure the information you inserted is correct. Make sure there arn't any hidden spaces within your inputs.  </p> <p>\u2191 Back to top \u2191 </p>"},{"location":"faq/FAQ/#activation-failed-message-couldnt-find-license-please-check-your-inputs","title":"Activation failed. Message: Couldn't find license. Please check your inputs.","text":"<p>This means that the user credentials were found, although the license ID did not match any records for this user. Please check your licenceid input and try again. Make sure there arn't any hidden spaces within your inputs.  </p> <p>\u2191 Back to top \u2191 </p>"},{"location":"faq/FAQ/#activation-failed-message-this-seat-is-already-occupied-couldnt-log-in","title":"Activation failed. Message: This seat is already occupied. Couldn't Log-In.","text":"<p>This message means that the licensing system detected a \"double use\" of the same license. If only you are using this license, it means that for some reason your comupter fingerprint has changed. there are a few reasons this could happen:</p> <ol> <li>You are using multiple computers with the saem license (for example a home office and a work computer)</li> <li>Your computer fingerprint changed. Maybe because you are using a VPN, or maybe your IP changed.</li> <li>You are using different platforms (Windows/Linux) with the same license.</li> </ol> <p> If any of the above apply to you, or even if you don't know why this happened, here is what you can do:  </p> <ol> <li>Go to Mansur-Rig's Wep-App</li> <li>Log-In to your account.</li> <li>Move to Licenses tab.</li> <li>Locate the license you are trying to activate within the licenses list. It should be indicated as Occupied.</li> <li>Click the license row to open the drop-down menu.</li> <li>Click the Log-Out button.</li> <li>Your license has now been unoccupied, go back to Maya and activate successfully.</li> </ol> <p>\u2191 Back to top \u2191 </p>"},{"location":"faq/FAQ/#activation-failed-message-mnslicdigest-command-wanst-found-please-check-your-environment","title":"Activation failed. Message: mnsLicDigest command wans't found. Please check your environment.","text":"<p>This message means that Mansur-Rig's licensing plugin was not found. If this is the message you are seeing please follow these guides:  </p> <p></p> <p>Step A:</p> <ol> <li>In Maya, go to Windows -&gt; Settings/Preferences -&gt; Plug-In Manager.</li> <li>In the serach bar, type mnsLicDigest</li> <li>In case you find the plugin and it is unloaded, check both Loaded &amp; Auto-Load checkboxes, and activate your account successfully.</li> <li>In case you don't find the plugin, or it fails to load, move to step B.</li> </ol> <p></p> <p>Step B:</p> <ol> <li>In case you can't find mncLicDigest.mll in the list, it generally means that you are missing an essential plugin from your installation.</li> <li>In most cases, it is a firewall/antivirus deleting this file due to a false threat trigger. These .mll files are a subtype of a .dll file-type, which are considered a threat by most firewall/antivirus software. I can guarentee all .mll plugin included in Mansur-Rig are 100% safe and contain no threat.</li> <li>So, what you need to do is restore the missing files. Their location within the installation is here: .../%Mansur_Rig_Installation_Path%/mnsPlugins/%platform%/%maya_version%. The best thing to do is create an exception within your firewall/antivirus software to that directory, and simply re-dowloading Mansur-Rig's version to restore these files.</li> <li>It is important to say that without these files Mansur-Rig will not function.</li> <li>In case you did find mnsLicDigest and it simply fails to load, move to step C.</li> </ol> <p></p> <p>step C</p> <ol> <li>In case mnsLicDigest fails to load, i suggest re-downloading and re-installing Mansur-Rig.</li> <li>If that doesn't work, please sent a support ticket to support@mansur-rig.com explaining your issue, with as much information as possible, including the error message you get when trying to load mnsLicDigest</li> </ol> <p>\u2191 Back to top \u2191 </p>"},{"location":"faq/FAQ/#compatibility-answers","title":"Compatibility [Answers]","text":""},{"location":"faq/FAQ/#is-mansur-rig-game-engine-compatible","title":"Is Mansur-Rig Game-Engine compatible?","text":"<p>Yes. Mansur-Rig was designed to support game engines workflows. In case you are using Mansur-Rig with only a Skin-Cluster and Blend-Shape deformers, your rig is 100% Game-Engine compatible. Mansur-Rig created a single joint hierarchy, with an origin top joint, which is the Game-Engine standard. Also, Mansur-Rig contains easy to use tools to extract animations and assets to FBX format to enhence Game-Engine workflows. Mansur-Rig contains MOCAP support and easy to use tools in order to incorporate MOCAP into your workflow easily.</p> <p>\u2191 Back to top \u2191 </p>"},{"location":"faq/FAQ/#is-mansur-rig-joint-based","title":"Is Mansur-Rig joint based?","text":"<p>Yes. Mansur-Rig modules were designed to be joint-driven. As creating modules that are joint-based is usually more difficult, especially for facial rigs, Mansur-Rig was designed to be Game-Engine compatible, hence an effort was made to make sure all functionalities are joint-based.  </p> <p>\u2191 Back to top \u2191 </p>"},{"location":"faq/FAQ/#can-i-use-mansur-rig-in-combination-with-another-rig-buildermanual-rig","title":"Can I use Mansur-Rig in combination with another Rig-Builder/manual-rig?","text":"<p>Yes, of course. You can combine Mansur-Rig with any other technics of your choice. Although Mansur-Rig does not contain pre-defined ways of combining it with other non-native objects, it is completely up to you do choose to do so. You can choose to use manual actions to connect Mansur-Rig with other entities, or you can use Mansur-Rig's Custom-Scripts to automate this workflow.   </p> <p>\u2191 Back to top \u2191 </p>"},{"location":"faq/FAQ/#im-using-a-custom-pipeline-and-picker-images-dont-load-can-i-specify-a-static-location-for-picker-images","title":"I'm using a custom pipeline, and picker images don't load. Can I specify a static location for picker images?","text":"<p>Yes. Simply go to Mansur-Rig -&gt; Preferences dialog, move to Picker tab within the preferences dialog, and set your centralized picker-imaged path into the pickerImagesFallbakPath setting. Click Save Now, if a picker image isn't found, this directory will be used as a fallback directory to try and find it. Note: please use this-guide for correct naming convention for picker images</p> <p>\u2191 Back to top \u2191 </p>"},{"location":"faq/FAQ/#is-there-an-easy-way-to-extract-animations-from-mansur-rig-to-fbx","title":"Is there an easy way to extract animations from Mansur-Rig to FBX?","text":"<p>Yes. Mansur-Rig contains a comprehensive Animation-Exporter that allows fast and easy export of assets/animations to FBX format.</p> <p>\u2191 Back to top \u2191 </p>"},{"location":"faq/FAQ/#can-i-incorporate-motion-capture-mocap-with-mansur-rig","title":"Can I incorporate Motion-Capture (MOCAP) with Mansur-Rig?","text":"<p>Yes. Mansur-Rig supports Motion-Capture workflows fully. Here is a Guide to Mansur-Rig's Mocap Tools</p> <p>\u2191 Back to top \u2191 </p>"},{"location":"faq/FAQ/#license-management-answers","title":"License Management [Answers]","text":""},{"location":"faq/FAQ/#i-want-to-use-mansur-rig-in-a-studio-and-i-need-multiple-licenses-for-my-users-what-do-i-do","title":"I want to use Mansur-Rig in a studio, and I need multiple licenses for my users. What do I do?","text":"<p>No problem at all. Mansur-Rig has an enterprise-level license management system. Using Mansur-Rig's Web-App you can easily acquire multiple licenses (of both Gold and Silver) and assign these licenses to your users. Your users will only be able to log-in and log-out using these assigned licenses, while you as the licenses owner will be able to manage them. Assigned licenses can always be retreived and re-used for changing users, and the amount of licenses you own can always be changed according to you needs. Here is a video guide to the license management system</p> <p>\u2191 Back to top \u2191 </p>"},{"location":"faq/FAQ/#i-use-mansur-rig-in-a-studio-environment-do-i-need-to-credit-it","title":"I use Mansur-Rig in a studio environment, do I need to credit it?","text":"<p>No. Although that will help support Mansur-Rig and will be very appreciated.</p> <p>\u2191 Back to top \u2191 </p>"},{"location":"faq/FAQ/#i-want-to-test-mansur-rig-for-studio-use-and-my-trial-is-expired-what-do-i-do","title":"I want to test Mansur-Rig for studio use, and my Trial is expired. what do I do?","text":"<p>Please contact us atsupport@mansur-rig.com and we will gladly support your needs.</p> <p>\u2191 Back to top \u2191 </p>"},{"location":"faq/FAQ/#general-answers","title":"General [Answers]","text":""},{"location":"faq/FAQ/#does-mansur-rig-auto-skin","title":"Does Mansur-Rig auto skin?","text":"<p>No. Mansur-Rig is a puppet-creation tool and offers no skinning tools. Skinning is an essential skill required in order to build any rig, and Mansur-Rig is no exception. If you are only looking for a tool to enhence/automate your skinning workflow, Mansur-Rig is not a good match.</p> <p>\u2191 Back to top \u2191 </p>"},{"location":"faq/FAQ/#can-i-use-mansur-rig-to-create-facial-rigs","title":"Can I use Mansur-Rig to create Facial-Rigs?","text":"<p>Absolutely. Mansur-Rig contains both sepecificaly designed Facial-Rigging modules, as well as many more sulotions to create high-end Facial-Rigs. Moreover, Mansur-Rig's Facial-Rigging methods are one of it's best strengths, and all of them are joint-based as well, so they are also Game-Engine compatible. Check out some examples over at our Art-Station profile and our You-Tube Channel And here is a full tutorial series on Mansur-Rig's Facial-Rigging</p> <p>\u2191 Back to top \u2191 </p>"},{"location":"faq/FAQ/#whats-the-difference-between-mansur-rig-and-other-rig-builders","title":"What's the difference between Mansur-Rig and other rig-builders?","text":"<ul> <li>First and foremost, Mansur-Rig's performance is faster. It is based on an extensive custom node-library, dedicated to fast performing rigs.  </li> <li>Second, it's ability to be deconstructed will speed-up your workflow tremendously. Instead of building a puppet from pre-defined guides, one-way-steet, it's one of a kind ability to be decostructed back to guides state means that your puppet and guides are the same entity.  </li> <li>This in turn means that your rig building iterations are much faster. Instead of needing to re-open \"guides\" file and building again, you simply go back and forth between constructed and decustrected states.  </li> <li>This also means, that ALL rig information is within one scene. No longer you need to manage multiple files containing different types of data. Your guides, controls, rig-poses, control shapes, picker information and skin-data are contained within a single Maya scene.  </li> <li>This unique ability also allows you to pre-pose your puppet- which is very significant. Instead of being dependent of the Modeling team to deliver a T-Posed model (which isn't optimal), using Mansur-Rig you will be liberated to pre-pose your model, since the skin-data is a part of your rig, instead of being loaded post-construction. The skinning information is preserved in both constructed and deconstructed states, so you can pose your rig before constrcuting the puppet. Your animators will feel the difference- it's MASSIVE.  </li> <li>Next, Mansur-Rig's components are to the highest possible extent of modularity. Not only you can combine any component with any different one, the components are layered so you can choose the amount of flexibility you provide within your rig based on your performance limitations. You can also connect components using a centralized spaces system.</li> <li>Since Mansur-Rig has dual states, every rig is also a template. You can use ANY Mansur-Rig's puppet and simply deconstruct it- and just like that you have a guide template. Move components to their new location basedon your model, construct, and the puppet will match the original puppet you based you rig on. Of course you can always deconstruct and alter settings/components to your needs.</li> <li>Finally- completeness. Mansur-Rig contains many tools for rigging and animation workflows to support it's main behaviour. These tools are a part of the product and don't need to be externaly installed. They are simply there whenever you need them:</li> <li>LOD Tool</li> <li>Animation Picker</li> <li>Control Visibility Tool</li> <li>CNS Tool</li> <li>Spring Tool</li> <li>Spaces/IK-FK Tool</li> <li>Facial Mocap Tool</li> <li>Animation Exporter</li> <li>Volume-Joints Tool</li> <li>Deformation Utilities</li> <li>MOCAP tools</li> <li>Module-Preset Editor</li> <li>Dynamic UI Creation Tool</li> <li>Enterprise-Level license Management system</li> <li>Overall, Mansur-Rig is the single high end One-Stop-Shop for all of your rigging needs. A production ready proven product, suitable for both offline productions and Game-Engines.</li> </ul> <p>\u2191 Back to top \u2191 </p>"},{"location":"faq/FAQ/#where-can-i-get-support","title":"Where can I get support?","text":"<p>In case you are having any issues with your product or your account, here are the ways to get in touch:</p> <ul> <li>Live-Support at Mansur-Rig's Discord Server</li> <li>Send an email directly to support@Mansur-Rig.com </li> <li>This official Mansur-Rig documentation page</li> <li>The official Mansur-Rig You-Tube Channel</li> <li>PM using any social media.</li> <li>Any official and unofficial guides/tutorials.</li> </ul> <p>\u2191 Back to top \u2191 </p>"},{"location":"faq/FAQ/#custom-rigging-answers","title":"Custom Rigging [Answers]","text":""},{"location":"faq/FAQ/#can-i-add-manual-steps-to-mansur-rigs-build","title":"Can I add manual steps to Mansur-Rig's build?","text":"<p>Yes. Please follow this guide to Custom-Scripts in order to add python-scripts to Mansur-Rig's automated build.</p> <p>\u2191 Back to top \u2191 </p>"},{"location":"faq/FAQ/#can-i-run-mansur-rig-using-code-instead-of-the-ui","title":"Can I run Mansur-Rig using code instead of the UI?","text":"<p>Yes. Here is a Guide To Scripted Builds</p> <p>\u2191 Back to top \u2191 </p>"},{"location":"faq/FAQ/#development-answers","title":"Development [Answers]","text":""},{"location":"faq/FAQ/#is-mansur-rig-maintained","title":"Is Mansur-Rig maintained?","text":"<p>YES! Mansur-Rig is an ongoing development, and IT IS HERE TO STAY!</p> <p>\u2191 Back to top \u2191 </p>"},{"location":"faq/FAQ/#where-can-i-track-mansur-rigs-development","title":"Where can I track Mansur-Rig's Development?","text":"<p>You can follow Mansur-Rig's developement on our Development Board You can also track past development and release notes at the Release Notes Page</p> <p>\u2191 Back to top \u2191 </p>"},{"location":"faq/FAQ/#i-have-a-bug-to-report-where-can-i-do-that","title":"I have a bug to report, where can I do that?","text":"<p>First, you can try our live support at our Discord Server You can also send a support ticket tosupport@mansur-rig.com In case your report was reproduced successfully, it will be logged to our Development Board</p> <p>\u2191 Back to top \u2191 </p>"},{"location":"faq/FAQ/#i-have-a-feature-request-where-can-i-send-it-to","title":"I have a feature request, where can I send it to?","text":"<p>First, you can try our live support at our Discord Server You can also send a feature request tosupport@mansur-rig.com In case your feature request was accepted, it will be logged to our Development Board</p> <p>\u2191 Back to top \u2191 </p>"},{"location":"releaseNotes/v1.1.0/","title":"V1.1.0","text":""},{"location":"releaseNotes/v1.1.0/#mansur-rig-110","title":"Mansur-Rig 1.1.0","text":"<p>Mansur-Rig is a python modular rig-builder for Autodesk-Maya, equipped with a full custom rigging nodes-library to fill all of your Rigging needs in one place.</p>"},{"location":"releaseNotes/v1.1.0/#whats-new-in-version-110","title":"What's new in Version 1.1.0","text":""},{"location":"releaseNotes/v1.1.0/#features","title":"features","text":"<ul> <li>Construct and Deconstruct performance improvements</li> <li>Block UI picker tab update</li> <li>createFreePlg will now create facial/body plg based on picker layout base state, instead of \"body\" type default</li> <li>lookAtControl module- added combinedAttributeHost to allow single combined attribute to control multiple modules dilate/contract within a single channel</li> <li>lips module- added cheeckRaise feature (dropdown). A new implementation to create a relationship between a lip corner control and an external cheek module ctrl, driving raise and push values to the slave cheek controls from the main lips corners controls.</li> </ul>"},{"location":"releaseNotes/v1.1.0/#bug-fixes","title":"Bug fixes","text":"<ul> <li>Version manager - version order was reversed to display the latest version on top, and the oldest version at the bottom.</li> <li>freeControl module - jumps/twitches bug related to mesh tweakers were fixed. Mesh tweaker local ctrl was transitioned to a techCtrl type to avoid getting any keys. Keys on the local control were causing the issue.</li> <li>Construction and deconstruction attribute connect warnings in the script editor were removed</li> <li>#33 - Foot not building in version 1.0.14 - fixed. Foot module should now build properly.</li> <li>#34 - Simple squash deconstruction issues - resolved. simpleSquash should now be stable on construction and deconstruction.</li> <li>#35 - Can't create freeControl with no attributes- fixed. Any module with all channel control attributes set to OFF should build with ease.</li> </ul>"},{"location":"releaseNotes/v1.1.0/#mnsmayaplugins-v-10017","title":"mnsMayaPlugins v 1.0.0.17","text":""},{"location":"releaseNotes/v1.1.1/","title":"V1.1.1","text":""},{"location":"releaseNotes/v1.1.1/#mansur-rig-111","title":"Mansur-Rig 1.1.1","text":"<p>Mansur-Rig is a python modular rig-builder for Autodesk-Maya, equipped with a full custom rigging nodes-library to fill all of your Rigging needs in one place.</p>"},{"location":"releaseNotes/v1.1.1/#whats-new-in-version-111","title":"What's new in Version 1.1.1","text":""},{"location":"releaseNotes/v1.1.1/#features","title":"features","text":"<ul> <li>#37 - Added \"Select Main joints\" button to Block UI (deformation tab) that will select all main joints ignoring interpolation joints.</li> <li>#40 - Default values save/load will now include world control's modules vis state attributes as well</li> </ul>"},{"location":"releaseNotes/v1.1.1/#bug-fixes","title":"Bug fixes","text":"<ul> <li>#38 - Simple Squash control shape not extracting - Fixed.</li> <li>#39 - Add guides/remove guides related bugs - Fixed. These should now be fully funstional again.</li> <li>#41 - Sleeve for limb module was construction outside the rig-top hierarchy - Fixed.</li> <li>CurveZipB module - interp joints where not inhereting global orientation properly - Fixed.</li> <li>Depreciated unused moduleRootVis attribute from puppet root.</li> <li>limb softMod related errors - Fixed.</li> </ul>"},{"location":"releaseNotes/v1.1.1/#mnsmayaplugins-v-10017","title":"mnsMayaPlugins v 1.0.0.17","text":""},{"location":"releaseNotes/v1.1.2/","title":"V1.1.2","text":""},{"location":"releaseNotes/v1.1.2/#mansur-rig-112","title":"Mansur-Rig 1.1.2","text":"<p>Mansur-Rig is a python modular rig-builder for Autodesk-Maya, equipped with a full custom rigging nodes-library to fill all of your Rigging needs in one place.</p>"},{"location":"releaseNotes/v1.1.2/#whats-new-in-version-112","title":"What's new in Version 1.1.2","text":""},{"location":"releaseNotes/v1.1.2/#features","title":"features","text":"<ul> <li>Comments/Tooltips were written and inserted to all modules and all attributes</li> </ul>"},{"location":"releaseNotes/v1.1.2/#bug-fixes","title":"Bug fixes","text":"<ul> <li>limb module twist issues resolved (please rebuild you puppets)</li> </ul>"},{"location":"releaseNotes/v1.1.2/#mnsmayaplugins-v-10017","title":"mnsMayaPlugins v 1.0.0.17","text":""},{"location":"releaseNotes/v1.1.3/","title":"V1.1.3","text":""},{"location":"releaseNotes/v1.1.3/#mansur-rig-113","title":"Mansur-Rig 1.1.3","text":"<p>Mansur-Rig is a python modular rig-builder for Autodesk-Maya, equipped with a full custom rigging nodes-library to fill all of your Rigging needs in one place.</p>"},{"location":"releaseNotes/v1.1.3/#whats-new-in-version-113","title":"What's new in Version 1.1.3","text":""},{"location":"releaseNotes/v1.1.3/#features","title":"features","text":"<ul> <li>Module description was implemented in Block UI, as well as the documentation page.</li> <li>Module settings was implemented in the documentation</li> </ul>"},{"location":"releaseNotes/v1.1.3/#bug-fixes","title":"Bug fixes","text":"<ul> <li>#36 - FKChains still need to have attrHosts - This bug was found and fixed and should now display the space switch attribute on the appropriate control in FKChain Module</li> <li>#42 - sleeve issue - Sleeve feature unstable behaviour on construction and deconstruction iterations is now fixed.</li> <li>Control shapes list in any UI is now sorted alphabetically</li> <li>Control shapes extraction action will now display correct log once completed</li> <li>Reference and Template modes for the puppet group is now removed, both in Rig-Top creation and Module-Vis UI</li> </ul>"},{"location":"releaseNotes/v1.1.3/#mnsmayaplugins-v-10017","title":"mnsMayaPlugins v 1.0.0.17","text":""},{"location":"releaseNotes/v1.1.4/","title":"V1.1.4","text":""},{"location":"releaseNotes/v1.1.4/#mansur-rig-114","title":"Mansur-Rig 1.1.4","text":"<p>Mansur-Rig is a python modular rig-builder for Autodesk-Maya, equipped with a full custom rigging nodes-library to fill all of your Rigging needs in one place.</p>"},{"location":"releaseNotes/v1.1.4/#whats-new-in-version-114","title":"What's new in Version 1.1.4","text":""},{"location":"releaseNotes/v1.1.4/#features","title":"features","text":"<ul> <li>Core module settings was added to the documentation</li> <li>Construct &amp; deconstruct auto module path fix. Now when you get an external rig, you don't need to use \"fix module paths\" utility, the fix will happen automatically once you construct or deconstruct</li> <li>All new mnsTransformSpring node!</li> <li>Using the new node, added a spring feature to Look-At module. This can be used to create dynamic spring vehicle suspention behaviour!</li> </ul>"},{"location":"releaseNotes/v1.1.4/#bug-fixes","title":"Bug fixes","text":"<ul> <li>#46 - limb interJoints attribute missplaced is now fixed</li> <li>Module symmetry and duplicate error when using an emoty channel control is now fixed.</li> <li>Module mirror attribute read was missing from simple squash construction</li> <li>Added right side flip options for the tweakers is CurveZipB Module</li> </ul>"},{"location":"releaseNotes/v1.1.4/#mnsmayaplugins-v-1012","title":"mnsMayaPlugins v 1.0.1.2","text":""},{"location":"releaseNotes/v1.1.5/","title":"V1.1.5","text":""},{"location":"releaseNotes/v1.1.5/#mansur-rig-115","title":"Mansur-Rig 1.1.5","text":"<p>Mansur-Rig is a python modular rig-builder for Autodesk-Maya, equipped with a full custom rigging nodes-library to fill all of your Rigging needs in one place.</p>"},{"location":"releaseNotes/v1.1.5/#whats-new-in-version-115","title":"What's new in Version 1.1.5","text":""},{"location":"releaseNotes/v1.1.5/#features","title":"features","text":"<ul> <li>#49 - A new attribute on Puppet-Root-Ctrl - Hide Controls On Playback. When animating, you can now set this attribute to True, to automatically hide controls when playing your animation.</li> </ul>"},{"location":"releaseNotes/v1.1.5/#bug-fixes","title":"Bug fixes","text":"<ul> <li>Attribute host creation position was always at origin. This has now been fixed and attribute host locator creation position will be the module's root guide</li> <li>Rig renaming was broken (renaming after creation). This has now been resolved.</li> <li>#47 - Problems with interpolation joints after promoting modules is ow resolved.</li> <li>#48 - FKChain's Variable FK was forcing joint structure uniform mode only at construction. This attribute is now marked as a jointStructSoftMod now, and will force a UNIFORM curve sampling on joint structure on guides state. This was added to the attribute's comment and the documentation.</li> </ul>"},{"location":"releaseNotes/v1.1.5/#mnsmayaplugins-v-1012","title":"mnsMayaPlugins v 1.0.1.2","text":""},{"location":"releaseNotes/v1.1.6/","title":"V1.1.6","text":""},{"location":"releaseNotes/v1.1.6/#mansur-rig-116","title":"Mansur-Rig 1.1.6","text":"<p>Mansur-Rig is a python modular rig-builder for Autodesk-Maya, equipped with a full custom rigging nodes-library to fill all of your Rigging needs in one place.</p>"},{"location":"releaseNotes/v1.1.6/#whats-new-in-version-116","title":"What's new in Version 1.1.6","text":""},{"location":"releaseNotes/v1.1.6/#features","title":"features","text":"<ul> <li>#49 - A new attribute on Puppet-Root-Ctrl - Hide Controls On Playback. When animating, you can now set this attribute to True, to automatically hide controls when playing your animation.</li> </ul>"},{"location":"releaseNotes/v1.1.6/#bug-fixes","title":"Bug fixes","text":"<ul> <li>Attribute host creation position was always at origin. This has now been fixed and attribute host locator creation position will be the module's root guide</li> <li>Rig renaming was broken (renaming after creation). This has now been resolved.</li> <li>#47 - Problems with interpolation joints after promoting modules is ow resolved.</li> <li>#48 - FKChain's Variable FK was forcing joint structure uniform mode only at construction. This attribute is now marked as a jointStructSoftMod now, and will force a UNIFORM curve sampling on joint structure on guides state. This was added to the attribute's comment and the documentation.</li> </ul>"},{"location":"releaseNotes/v1.1.6/#mnsmayaplugins-v-1012","title":"mnsMayaPlugins v 1.0.1.2","text":""},{"location":"releaseNotes/v1.1.7/","title":"V1.1.7","text":""},{"location":"releaseNotes/v1.1.7/#mansur-rig-117","title":"Mansur-Rig 1.1.7","text":"<p>Mansur-Rig is a python modular rig-builder for Autodesk-Maya, equipped with a full custom rigging nodes-library to fill all of your Rigging needs in one place.</p>"},{"location":"releaseNotes/v1.1.7/#whats-new-in-version-117","title":"What's new in Version 1.1.7","text":""},{"location":"releaseNotes/v1.1.7/#depreciation","title":"Depreciation","text":"<ul> <li>CurveZip module depreciated. Please use CurveZipB.</li> </ul>"},{"location":"releaseNotes/v1.1.7/#bug-fixes","title":"Bug fixes","text":"<ul> <li>FK shain's \"IK secondaries\" weren't being collected to the build module contstruct and display as \"primaries\"- Fixed.</li> <li>#50 - Module Visibility UI Parenting issues resolved.</li> <li>#53 - Installation with existing MAYA_MODULE_PATH variable whould break the syntax, and the variable - Fixed.</li> </ul>"},{"location":"releaseNotes/v1.1.7/#mnsmayaplugins-v-102","title":"mnsMayaPlugins v 1.0.2","text":""},{"location":"releaseNotes/v1.1.9/","title":"V1.1.9","text":""},{"location":"releaseNotes/v1.1.9/#mansur-rig-119","title":"Mansur-Rig 1.1.9","text":"<p>Released 25 Mar 2021</p>"},{"location":"releaseNotes/v1.1.9/#whats-new-in-version-119","title":"What's new in Version 1.1.9","text":""},{"location":"releaseNotes/v1.1.9/#features","title":"Features","text":"<ul> <li>Linux support!</li> </ul>"},{"location":"releaseNotes/v1.1.9/#bug-fixes","title":"Bug fixes","text":"<ul> <li>#57 - CurveZipB- BlinkHeight module setting value wasn't updated correctly on construction</li> </ul>"},{"location":"releaseNotes/v1.1.9/#mnsmayaplugins-v-104","title":"mnsMayaPlugins v 1.0.4","text":""},{"location":"releaseNotes/v1.2.0/","title":"V1.2.0","text":""},{"location":"releaseNotes/v1.2.0/#mansur-rig-120","title":"Mansur-Rig 1.2.0","text":"<p>Released 1 Apr 2021</p>"},{"location":"releaseNotes/v1.2.0/#whats-new-in-version-120","title":"What's new in Version 1.2.0","text":"<p>Maya 2017-2022 Compatibility for both Windows and Linux</p>"},{"location":"releaseNotes/v1.2.0/#features","title":"Features","text":""},{"location":"releaseNotes/v1.2.0/#bug-fixes","title":"Bug fixes","text":""},{"location":"releaseNotes/v1.2.0/#mnsmayaplugins-v-105","title":"mnsMayaPlugins v 1.0.5","text":""},{"location":"releaseNotes/v1.2.1/","title":"V1.2.1","text":""},{"location":"releaseNotes/v1.2.1/#mansur-rig-121","title":"Mansur-Rig 1.2.1","text":"<p>Released 11 Apr 2021</p>"},{"location":"releaseNotes/v1.2.1/#whats-new-in-version-121","title":"What's new in Version 1.2.1","text":"<p>Picker upgrades and maintenance   </p>"},{"location":"releaseNotes/v1.2.1/#features","title":"Features","text":"<ul> <li>#63 - Implemented default text attributes for plg creation. These new preferences are located in Mansur-&gt;Preferences-&gt;Picker</li> </ul>"},{"location":"releaseNotes/v1.2.1/#bug-fixes","title":"Bug fixes","text":"<ul> <li>PLG settings facial/body attribute change will now affect all controls within the changed module</li> <li>Non-Free PLG ctrl list and buttons re-locked</li> <li>Free PLG creation color will be dictated by the rig's color-scheme</li> <li>FKChain interpolation mode wasn't changing on construction- Fixed.</li> <li>Changed Block main window min/max values to allow further window adjustments in 4K monitors</li> <li>Removed redundant Qt libs from main code library</li> </ul>"},{"location":"releaseNotes/v1.2.1/#mnsmayaplugins-v-106","title":"mnsMayaPlugins v 1.0.6","text":""},{"location":"releaseNotes/v1.2.2/","title":"V1.2.2","text":""},{"location":"releaseNotes/v1.2.2/#mansur-rig-122","title":"Mansur-Rig 1.2.2","text":"<p>Released 15 Apr 2021</p>"},{"location":"releaseNotes/v1.2.2/#whats-new-in-version-122","title":"What's new in Version 1.2.2","text":"<p>Bug fixes </p>"},{"location":"releaseNotes/v1.2.2/#features","title":"Features","text":""},{"location":"releaseNotes/v1.2.2/#bug-fixes","title":"Bug fixes","text":"<ul> <li>Issues with module names that share the same prefix - fixed</li> <li>#65 - Mansur-Rig's install blocking main maya menus (file, edit) in Maya 2022 - Fixed</li> <li>#66 - Issues with module color overrides - Fixed</li> <li>FK Chain module- Construction fails when IK secondaries layer is ON, but the amount of controls selected is less then the amount of Primary FK controls - Fixed, and added to the attribute description and the documentation accordingly.</li> </ul>"},{"location":"releaseNotes/v1.2.2/#mnsmayaplugins-v-106","title":"mnsMayaPlugins v 1.0.6","text":""},{"location":"releaseNotes/v1.2.3/","title":"V1.2.3","text":""},{"location":"releaseNotes/v1.2.3/#mansur-rig-123","title":"Mansur-Rig 1.2.3","text":"<p>Released 7 May 2021</p>"},{"location":"releaseNotes/v1.2.3/#whats-new-in-version-123","title":"What's new in Version 1.2.3","text":"<p>Many bug fixes and few new features</p>"},{"location":"releaseNotes/v1.2.3/#features","title":"Features","text":"<ul> <li>Block - New Guide/Joint toggle button in main tab.</li> <li>IK-FK blend default value attribute added to Limb-Module.</li> <li>Default symmetry mode for freeControl module was changes to- None.</li> <li>#72 - Custom script execution faliure will now display the error stack-trace in the errro dialog as well as print into maya's console.</li> <li>Added new sub-groups to rig-top. All of these sub groups were added for the cleanest setup possible - the objective is for the top group to contain the entire rig data, including the model, so when adding it as a reference, a single transform will contain everything related to the rig in the outliner.<ul> <li>oSkelGrp - offset-skeleton-group, to contain the offset skeleton in the future</li> <li>extSetupGrp - extra setup group, to contain any manual setups </li> <li>mdlGrp - model group, to contain the model</li> </ul> </li> <li>Accordingly, a new \"Check/Update Rig Top Structure\" Utility was added to Block's Utility tab, to update rig-tops created with previous Mansur-Rig versions.</li> </ul>"},{"location":"releaseNotes/v1.2.3/#bug-fixes","title":"Bug fixes","text":"<ul> <li>#68 - Once any channel-control related checkboxes were set to off by the user, they became permanently off- Fixed.</li> <li>#68 - Embedded IK construction was failing in case the user selected to turn off the rotation channels in the channel-control - Fixed.</li> <li>#71 - Updated error message in \"Copy-Skin\" failure. The message was not very informative, it is now updated to suggest possible fixes.</li> <li>Module Setting button press in Block was resulting in an error in case there was no selection- Fixed.</li> <li>FK Chain IK-Secondaries and Variable-FK attribute description typos fix.</li> </ul>"},{"location":"releaseNotes/v1.2.3/#transition-log","title":"Transition Log","text":"<ul> <li>In case you ned to update from a previous version of Mansur-Rig, please use the new \"Check/Update Rig Top Structure\" in Block's Utility tab to update your rig-top structure.</li> </ul>"},{"location":"releaseNotes/v1.2.3/#mnsmayaplugins-v-106","title":"mnsMayaPlugins v 1.0.6","text":""},{"location":"releaseNotes/v1.3.0/","title":"V1.3.0","text":""},{"location":"releaseNotes/v1.3.0/#mansur-rig-130","title":"Mansur-Rig 1.3.0","text":"<p>Released 15 May 2021</p>"},{"location":"releaseNotes/v1.3.0/#features","title":"Features","text":"<ul> <li>New  centralized \"Update Rig\" utility in Block's utility tab. This method now consists of all previous update-related methods. This method will now execute all of the following processes:<ol> <li>Update the rig-top structure in case it was changed.</li> <li>Fix module paths for all existing modules within the rig.</li> <li>Update all module attributes based on the currrent version settings.  Update-Rig Utility </li> </ol> </li> <li>Module name changes will now automatically update all module space lists that consist of the given module. i.e. all space attributes will be updated with the module's new name automatically.</li> <li>Read-Only mode was introduced into dynUI. Now, instead of blocking a module-settings-load in puppet state, the settings window will now load, but in read-only mode. You can now view your settings in puppet state instead of needing to deconstruct, although editting the settings remains locked.</li> <li>Control-Shape Icons - All control shape related attributes now include icons!  Control-Shapes Icons </li> <li>CNS/Sub-Controls creation and deletion methods were detached from the CNS-Tool's class in order to allow creating CNS/Sub-Controls using custom-scripts. Please use this example to use as a post-construction custom script: </li> </ul> Python <pre><code>#import Mansur-Rig's Block-Utility python module, to access the method    \nfrom mansur.block.core import blockUtility as blkUtils\n\n#Using implicit control-names list\nblkUtils.createCnsForCtrls([\"c_cog_A001_ctrl\", \"c_head_A001_ctrl\"])\n\n#Using a simple right/left loop for efficiency and ease of use\nfor side in \"rl\": \n    blkUtils.createCnsForCtrls(side + \"_armIkTarget_A001_ctrl\")\n</code></pre> <ul> <li>limb module - Added a \"IK-Handle Orientation Match\" feature by request. Using this feature you can now choose to override the native orientation of the IK-Handle control. You can now input a guide into this attribute to align the orientation to, and this orientation will override any other orientation related attribute. This was requested in order to fully align all IK handles orientations.  IK-Handle Match Orient Attribute </li> <li>freeControl - Spring layer! You can now easily create a simple spring action for your free-controls. Create a procedural secondary motion in seconds!  freeControl spring layer </li> <li>Space attribute re-ordering guide was inserted into the attribute's description. Please use drag-drop within the list to change spaces order.</li> <li>Deformation tab was updated with icons.</li> <li>curveZipB - New mid-curve generation feature was introduced into the module. Please see mnsCurveZipB notes below.</li> <li>curveZipB - Attachment curves feature stabilized. Please see mnsBuildTransformsCurve node notes below.</li> </ul>"},{"location":"releaseNotes/v1.3.0/#bug-fixes","title":"Bug fixes","text":"<ul> <li>#74- Copy-Skin related issues resolved. This method is now fully stabilized.</li> <li>freeControl \"meshTweaker\" section attrbiute descriptions were updated and clarified. </li> </ul>"},{"location":"releaseNotes/v1.3.0/#transition-log","title":"Transition Log","text":"<ul> <li>Please use the new centralized \"Update Rig\" utility button in Block's utility tab to update rigs built with previous versions of Mansur-Rig</li> </ul>"},{"location":"releaseNotes/v1.3.0/#mnsmayaplugins-v-107","title":"mnsMayaPlugins v 1.0.7","text":"<ul> <li>mnsBuildTransformsCurve- Upgraded. Added \"centerMatrix\" attribute and offset curve build based on it. This was done in order to stablize the attachment curves feature in curveZipB module. Now the attachments offset curves will be built using the module's root guide as a center matrix which will result in a much stabler behaviour.</li> <li>mnsCurveZipB - Upgraded. Added a new Mid-Curve-Generation support, in order to smooth the meet mid curve for all related \"mid\" attrbiutes. The new addition is the \"midCurveGenerationMode\" and \"midCurveResolution\" attributes. In case \"regenerate\" mode is choosen for the mid curve generation, a new mid-curve will be constructed given the resulotion instead of using the input curves' resolution. This will result in a much nicer and smoother mid-curve.</li> <li>mnsSphereVectorPush Node released!</li> </ul>"},{"location":"releaseNotes/v1.3.1/","title":"V1.3.1","text":""},{"location":"releaseNotes/v1.3.1/#mansur-rig-131","title":"Mansur-Rig 1.3.1","text":"<p>Released 04 Jun 2021</p>"},{"location":"releaseNotes/v1.3.1/#features","title":"Features","text":"<ul> <li>New mnsSphereVectorPushNode method to be used in the Synamic UI Creator tool.</li> <li>FKChain Module - Added \"doPrimariesSpaceSwitch\" feature to allow IK mode using FK chain. This feature, when on, will create an FK heirarchy using constraints, instead of a direct heirarchy. With that, all primary FK controls will receive a space switch, which is defaulted to it's native parent, to create the FK behaviour.This will allow to break the FK heirarchy if needed by setting the primary controls to any space we choose, creating the IK behaviour.</li> <li>New Extra Channels feature!<ol> <li>At the bottom of the core module settings tab, there is a new drop-down called extra channels.</li> <li>This feature was created mainly with blend shape targets in mind.</li> <li>If ever you are confused about what this feature is, check out the info box tooltip- there is a full explanation there.</li> <li>Any row within this list will create a custom attribute with the selected name on the given module main control, and connect to the given attribute.</li> <li>This feature is assuming that the target attribute range is 0-1. Once again mainly with blend-shape targets in mind.</li> <li>Use the direction column to choose the channel's control direction. Negative direction will be revesed to the 0 to 1 range when connected.</li> <li>For example, in case you have 2 shapes, one for expantion and one for contraction, you can create 2 rows with the same attrbiute name, one in the positive direction- connected to the expantion shape, and one in the negative direction- connected to the contraction shape.</li> <li>This will result in a single attribute that ranges between -1 and +1, while 0 to -1 will control the contraction shape, and 0 to +1 will control the expantion shape.</li> <li>You can Use dividers as well to group attributes in case you need to. All attributes will be created in the same order they are listed in  Extra-Channels Feature </li> </ol> </li> <li>Lip-Curls introduced in lips Module! Please re-create your module from previous versions of Mansur-Rig. Now, the Lips module will create 2 new extra custom guides, to choose the upper and lower lip curl pivots. These will then be added into the setup using the main upper and lower lip controls rotation to curl the lips from the selected pivots.  Lip Curls </li> <li>Implemented argument disable ability in DynUI.</li> <li>Block- Module symmetry will now work on multiple module selection.</li> <li>CurveZipB Follow feature will now except rootGuides as input as well as joints, and convert on construcion.</li> <li>Foot module - Foot roll behaviour upgraded. A new Channel \"strighten-Angle\" was introduced, to choose the range to straighten the toes back when exceeding the roll Max-Angle to achive more realistic results. Please reconstruct your puppets to get this feature created.  New Foot Roll </li> </ul>"},{"location":"releaseNotes/v1.3.1/#bug-fixes","title":"Bug fixes","text":"<ul> <li>Block - deformation tab- left mesh list was not working at all- Fixed. </li> <li>FKChain- Using \"secondary-ik\" layer in combination with \"isolate-poles\" feature, was breaking the module on deconstruction- Fixed.</li> <li>Block - Module symmetry was not handeling set space defaults correctly- fixed.</li> <li>#77 - Block wasn't loading when the preferences directory was not found for some reason- Fixed.</li> <li>#79 - CurveZipB - Mid Curve Regeneration minimum was decreased to 1 by request.</li> <li>Callback errors on Picker load - fixed.</li> <li>CurveZipB - Construction faliure when there are no vertex inputs- fixed.</li> <li>All annoying warning: \"Warning: pymel.core.general : Could not create desired MFn. Defaulting to MFnDagNode.\" where removed. Bug found at origin and fixed.</li> </ul>"},{"location":"releaseNotes/v1.3.1/#transition-log","title":"Transition Log","text":"<ul> <li>Please use the new centralized \"Update Rig\" utility button in Block's utility tab to update rigs built with previous versions of Mansur-Rig</li> <li>To get the new foot roll, please reconstruct.</li> <li>To update lip module- please delete it and re-create.</li> </ul>"},{"location":"releaseNotes/v1.3.1/#mnsmayaplugins-v-108","title":"mnsMayaPlugins v 1.0.8","text":"<ul> <li>mnzLipZip - Added lip curls feature.</li> </ul>"},{"location":"releaseNotes/v1.3.2/","title":"V1.3.2","text":""},{"location":"releaseNotes/v1.3.2/#mansur-rig-132","title":"Mansur-Rig 1.3.2","text":"<p>Released 20 Jun 2021</p>"},{"location":"releaseNotes/v1.3.2/#features","title":"Features","text":"<ul> <li>New Ctrl/Guide toggle in Block  Ctrl/Guide Toggle </li> </ul>"},{"location":"releaseNotes/v1.3.2/#bug-fixes","title":"Bug fixes","text":"<ul> <li>Maya 2022 installation bugs (#84)- Fixed. Installation in Maya 2022 and all fuctionallities is now fully available in Maya 2022</li> <li>Main Joint Structure Joints- Previously, all transform channels were hidden from the channel box which made them unavailable for animation bake. From this point on, joint transforms will be only locked, but visible in the channel box. This will make the entire skeleton availble for animation baking. Please use the \"Update Rig\" Utility, in Block's \"Utility\" Tab to fix previously built rigs.</li> <li>#85 - isFacial tag wasn't inherited correctly, when choosing to create a new module under a parent that isn't a root-guide- Fixed.</li> <li>Limb Module - IK-Softness was re-implemented. This feature wasn't working well, as well as wasn't very clear. Softness attribute within the Limb Module (located on the main IK control) was normalized to 0 to 1 range. 1 = As soft as possible (dependent on the angle at rest pose. More \"bend\" in the knee at rest pose = higher soft range), 0 = No softness. The softness feature was re-written within the mnsIkSolver node, and should now behave correctly (in combination with stretch as well). Please reconstruct your puppet for this change to take affect.</li> </ul> Ctrl/Guide Toggle"},{"location":"releaseNotes/v1.3.2/#transition-log","title":"Transition Log","text":"<ul> <li>Please use the new centralized \"Update Rig\" utility button in Block's utility tab to update rigs built with previous versions of Mansur-Rig. This will now unhide all joint transforms, for them to be accessible for animation baking.</li> </ul>"},{"location":"releaseNotes/v1.3.2/#mnsmayaplugins-v-109","title":"mnsMayaPlugins v 1.0.9","text":"<ul> <li>mnsIkSolver - IK Softness re-implemented.</li> </ul>"},{"location":"releaseNotes/v1.3.4/","title":"V1.3.4","text":""},{"location":"releaseNotes/v1.3.4/#mansur-rig-134","title":"Mansur-Rig 1.3.4","text":"<p>Released 04 Jul 2021</p>"},{"location":"releaseNotes/v1.3.4/#features","title":"Features","text":"<ul> <li>New Interpolated/Weighted orientation in lookAt module. This feature is used to create a weighted split orientation. When you need to create a weighted orientation for a control between two spaces, use this feature.</li> <li>Angle-based scale driver feature within the weighted orient feature. Create an angle-based scale driver, to scale the target slave joint when the angle changes between the two sources. Originally designed for double-chin setup  Weighted Orientation &amp; Angle Based Scale Driver </li> </ul>"},{"location":"releaseNotes/v1.3.4/#bug-fixes","title":"Bug fixes","text":"<ul> <li>Added reverseRightSideBindCurves for curveZipB module. In Some cases, the right side symmetrical vertices are in a reversed order. If that is the case, check this new attribute on to fix it.</li> <li>Controls default values deletion was not deleting defaults foe the global world control- fixed.</li> <li>Added custom defaults save &amp; load on UI-Style control's offset groups. This will allow placing the UI-style control offset groups individually- saving default will now recognize the UI-style controls and save defaults for their offset group parent as well, which will restore the position set by the user.</li> <li>Construction was failing when only one FK-Chain was placed under the meta module - Fixed.</li> <li>Limb module had an issue with joints changing position on construction. The was a calculation error in the number of segments input to mnsBuildTransformsCurve node which is now fixed.</li> <li>Limb module also had some twisting issues when rotating the shoulder, which is now resolved as well.</li> </ul>"},{"location":"releaseNotes/v1.3.4/#transition-log","title":"Transition Log","text":"<ul> <li>Please use the centralized \"Update Rig\" utility button in Block's utility tab to update rigs built with previous versions of Mansur-Rig. </li> </ul>"},{"location":"releaseNotes/v1.3.4/#mnsmayaplugins-v-109","title":"mnsMayaPlugins v 1.0.9","text":""},{"location":"releaseNotes/v1.3.5/","title":"V1.3.5","text":""},{"location":"releaseNotes/v1.3.5/#mansur-rig-135","title":"Mansur-Rig 1.3.5","text":"<p>Released 24 Jul 2021</p>"},{"location":"releaseNotes/v1.3.5/#features","title":"Features","text":"<ul> <li>New Curl feature in meta module. Meta module now includes curl channels foe detacted FKChain children on top of the splays.  Curl Channels </li> </ul>"},{"location":"releaseNotes/v1.3.5/#bug-fixes","title":"Bug fixes","text":"<ul> <li>About window wasn't loading on Maya 2022- Fixed</li> <li>World Ctrl plg creation bugs fixed</li> <li>Limb flip issues improvements</li> </ul>"},{"location":"releaseNotes/v1.3.5/#transition-log","title":"Transition Log","text":"<ul> <li>Please use the centralized \"Update Rig\" utility button in Block's utility tab to update rigs built with previous versions of Mansur-Rig. </li> </ul>"},{"location":"releaseNotes/v1.3.5/#mnsmayaplugins-v-1010","title":"mnsMayaPlugins v 1.0.10","text":""},{"location":"releaseNotes/v1.3.6/","title":"V1.3.6","text":""},{"location":"releaseNotes/v1.3.6/#mansur-rig-136","title":"Mansur-Rig 1.3.6","text":"<p>Released 05 Aug 2021</p>"},{"location":"releaseNotes/v1.3.6/#features","title":"Features","text":""},{"location":"releaseNotes/v1.3.6/#bug-fixes","title":"Bug fixes","text":"<ul> <li>LipZip Module - Added Base-Surface related attributes to solve follow issues when the surface is skinned/deforming.</li> </ul>"},{"location":"releaseNotes/v1.3.6/#transition-log","title":"Transition Log","text":"<ul> <li>Please use the centralized \"Update Rig\" utility button in Block's utility tab to update rigs built with previous versions of Mansur-Rig. </li> </ul>"},{"location":"releaseNotes/v1.3.6/#mnsmayaplugins-v-1011","title":"mnsMayaPlugins v 1.0.11","text":"<ul> <li>mnsLipZip - Added bind/base syrface as well as functionallity. This to solve follow issues when the surface is skinned/deforming</li> </ul>"},{"location":"releaseNotes/v1.4.0/","title":"V1.4.0","text":""},{"location":"releaseNotes/v1.4.0/#mansur-rig-140","title":"Mansur-Rig 1.4.0","text":"<p>Released 05 Sep 2021</p>"},{"location":"releaseNotes/v1.4.0/#features","title":"Features","text":"<ul> <li> <p>Mocap/Game Tools released! See the full documentation here Mocap Retarget Example <li> <p>A new picker! See the full documentation here Mocap Retarget Example <ul> <li>Progress-Bar indication for all Block main tab actions</li> <li>ModuleVisUI- UI is will now update automatically based on visibility changes made in the scene</li> </ul>"},{"location":"releaseNotes/v1.4.0/#bug-fixes","title":"Bug fixes","text":"<ul> <li>Maya 2022 Block deformation tab bugs</li> <li>Maya 2022 About bug</li> <li>White-Spaces in my account inputs will now be disregarded</li> <li>Some License validation issues in Maya 2019 and above are now fixed</li> <li>#99 - matrixNodes.mll - Maya plugin was added to Mansur-Rig's auto load list, as it is required for Block to function proporly.</li> </ul>"},{"location":"releaseNotes/v1.4.0/#transition-log","title":"Transition Log","text":"<ul> <li>Please use the centralized \"Update Rig\" utility button in Block's utility tab to update rigs built with previous versions of Mansur-Rig. </li> <li>In order to use the new Mocap tools feature, please recustruct rigs made with previous versions of Mansur-Rig.</li> </ul>"},{"location":"releaseNotes/v1.4.0/#mnsmayaplugins-v-1011","title":"mnsMayaPlugins v 1.0.11","text":""},{"location":"releaseNotes/v1.4.1/","title":"V1.4.1","text":""},{"location":"releaseNotes/v1.4.1/#mansur-rig-141","title":"Mansur-Rig 1.4.1","text":"<p>Released 27 Sep 2021</p>"},{"location":"releaseNotes/v1.4.1/#features","title":"Features","text":"<ul> <li>Module Batch edit settings- edit multiple modules using the same settings window. If case you choose multiple modules of the same type, all settings will be vailable for edit. In case you choose mutiple modules of different types, only common settings tab will be available.  Module Setting Batch Edit </li> <li>Module \"Factory-Reset\" implemented. This feature isn't available in batch edit mode  Factory reset button in module settings window </li> <li>#75 - Esc Key interuption during construction/deconstruction</li> <li>API-Style Construction/Deconstruction support. See the full documentation here <li>Construction/Deconstruction Maya help line progress bar implemented.</li> <li>Picker data import/export implementation  Picker Data Import Eport </li> <li>PLG Projection utility was extended to Module and Barnch modes  PLG Projection Section </li> <li>New Translation/Scale mathching utilities in the picker tab.  New match buttons in Picker tab </li> <li>Implemented double-right-click in picker- This will \"reset hierarchy\"</li> <li>New Guides-Orient ability  Orient-Guides Section </li>"},{"location":"releaseNotes/v1.4.1/#bug-fixes","title":"Bug fixes","text":"<ul> <li>Maya 2022 Skin Utilities fixed</li> <li>Picker double-click fixed</li> <li>Maya 2022 Version-Manager Downalod bug fixed</li> <li>Maya 2022 Installation from path with white-spaces issues fixed</li> <li>Menu title name changed to \"Mansur-Rig\" </li> <li>Block's main tab layout was converted to a scroll area to accomedate all widgets in case all drop-down menus are collapsed</li> <li>Squash Module- Missing slave-control added</li> <li>#103 - Offset Skeleton wasn't working well with freeControl module as tweaker. Fixed- Please reconstruct.</li> </ul>"},{"location":"releaseNotes/v1.4.1/#transition-log","title":"Transition Log","text":"<ul> <li>Please use the centralized \"Update Rig\" utility button in Block's utility tab to update rigs built with previous versions of Mansur-Rig. </li> </ul>"},{"location":"releaseNotes/v1.4.1/#mnsmayaplugins-v-1011","title":"mnsMayaPlugins v 1.0.11","text":""},{"location":"releaseNotes/v1.4.2/","title":"V1.4.2","text":""},{"location":"releaseNotes/v1.4.2/#mansur-rig-142","title":"Mansur-Rig 1.4.2","text":"<p>Released 17 Oct 2021</p>"},{"location":"releaseNotes/v1.4.2/#features","title":"Features","text":"<ul> <li>A completly new and very powerful feature- Mns-Volume-Joints! You can now create volume joints to refine and enhence you deformations. These joints are driven by 2 parent+child joints. Using the new UI, you can choose actions (translation/scale) to take for every angle direction between the 2 joint drivers. Please see the  full documentation here for full info.  Volume Joints Demo Volume Joints UI </li> <li>New much stabler and more intuative Embedded-IK mode in FK Chain</li> <li>Free Control- Mesh tweakers can now be rotation controlled as well. Now, in case you cohose so, the mesh tweaker control will not only follow the mesh's position, it will also follow it's rotation.</li> <li>New position river mode in Mesh-Tweaker section- new ability to rivet to the closest-vertex as well as the original closest face center.</li> <li>New \"Rebuild Joint-Structure\" utility in Block.  Rebuild Joint-Structure button </li> <li>New control shapes utilities- Copy Shape &amp; Reposition. Copy will allow you to copy a shape from a different control, or create a whole new control shape from scratch and copy it to a Block-control. Reposition will simply center control shape based on the objects-pivot.  Control-Shapes Utilities </li> <li>New \"Text Control Shape\" feature added as a core ability. You can now select to create a Nurbs-Curve text control shape. This is mainly useful for Attribute-Host controls, in case you want to make them extra distict by setting their control shapes to \"Vis\", \"UI\" or \"FK/IK\" for example.  Text Control-Shapes </li> <li>#100- Attribute Host space- You can now set a space for the attribute-host control. This space will be the parent space for the host to follow. This cannot be changed post contruction.  Attribute-Host Space </li> </ul>"},{"location":"releaseNotes/v1.4.2/#bug-fixes","title":"Bug fixes","text":""},{"location":"releaseNotes/v1.4.2/#transition-log","title":"Transition Log","text":"<ul> <li>Please use the centralized \"Update Rig\" utility button in Block's utility tab to update rigs built with previous versions of Mansur-Rig. </li> </ul>"},{"location":"releaseNotes/v1.4.2/#mnsmayaplugins-v-1012","title":"mnsMayaPlugins v 1.0.12","text":"<ul> <li>new mnsVolumeJoint node</li> <li>added rotation solve to mnsSimpleRivets</li> </ul>"},{"location":"releaseNotes/v1.4.3/","title":"V1.4.3","text":""},{"location":"releaseNotes/v1.4.3/#mansur-rig-143","title":"Mansur-Rig 1.4.3","text":"<p>Released 31 Oct 2021</p>"},{"location":"releaseNotes/v1.4.3/#features","title":"Features","text":"<ul> <li>Hind Limb Module- A new module to handle quadruped hind limbs.  New Volume Joints Utils </li> <li>Round-Square control shape added globally into the system.</li> <li>Volume Joints UI Utilities<ul> <li>Set Rest Pose For All - Set rest pose as current for all volume joints.</li> <li>Duplicate Volume Joint- Duplicate selected colume joint  New Volume Joints Utils </li> </ul> </li> <li>Volume Joints UI - Update UI selection based on viewport selection added</li> </ul>"},{"location":"releaseNotes/v1.4.3/#bug-fixes","title":"Bug fixes","text":"<ul> <li>Volume joints UI icons</li> <li>Control shape reposition method undo not working well</li> <li>#102 - Character definition UI not parented to main window</li> </ul>"},{"location":"releaseNotes/v1.4.3/#transition-log","title":"Transition Log","text":"<ul> <li>Please use the centralized \"Update Rig\" utility button in Block's utility tab to update rigs built with previous versions of Mansur-Rig. </li> </ul>"},{"location":"releaseNotes/v1.4.3/#mnsmayaplugins-v-1012","title":"mnsMayaPlugins v 1.0.12","text":""},{"location":"releaseNotes/v1.4.4/","title":"V1.4.4","text":""},{"location":"releaseNotes/v1.4.4/#mansur-rig-144","title":"Mansur-Rig 1.4.4","text":"<p>Released 07 Nov 2021</p>"},{"location":"releaseNotes/v1.4.4/#bug-fixes","title":"Bug fixes","text":"<ul> <li>Turn off display overrides after extracting a skeleton</li> <li>Transfer Skin To Extracted Skeleton doesn't work on a referenced rig</li> <li>Baking doesn't work for referenced rigs that have a namespace</li> <li>#106- Eyelids joint structure isn't built correctly based on input vertices</li> </ul>"},{"location":"releaseNotes/v1.4.4/#mnsmayaplugins-v-1012","title":"mnsMayaPlugins v 1.0.12","text":""},{"location":"releaseNotes/v1.4.5/","title":"V1.4.5","text":""},{"location":"releaseNotes/v1.4.5/#mansur-rig-145","title":"Mansur-Rig 1.4.5","text":"<p>Released 20 Nov 2021</p>"},{"location":"releaseNotes/v1.4.5/#features","title":"Features","text":"<ul> <li>Spring Tool - Please see the  full documentation here for full info.  Spring Tool UI </li> <li>Free-Control Module- Added interpolated orientation feature  Free-Control- Interpolated Orientation </li> <li>Direct-Connection method was added to skeleton extraction utility.  Skeleton-Extraction- Direct Connection </li> </ul>"},{"location":"releaseNotes/v1.4.5/#bug-fixes","title":"Bug fixes","text":"<ul> <li>Picker-Images - JPG image type support is now fixed</li> <li>Module Symmetry- A global behaviour was inserted into the system to mirror all attributes that contain a Block node name(i.e. \"eyeFollowJnt\" in curveZipB module)</li> <li>Picker2 - Callbacks optimized to avoid unnecessary duplicate actions</li> <li>Picker2 - Control specific visibility changes weren't  handled correctly in the picker UI- fixed.</li> </ul>"},{"location":"releaseNotes/v1.4.5/#mnsmayaplugins-v-1012","title":"mnsMayaPlugins v 1.0.12","text":""},{"location":"releaseNotes/v1.4.6/","title":"V1.4.6","text":""},{"location":"releaseNotes/v1.4.6/#mansur-rig-146","title":"Mansur-Rig 1.4.6","text":"<p>Released 10 Dec 2021</p>"},{"location":"releaseNotes/v1.4.6/#features","title":"Features","text":"<ul> <li>Spaces &amp; FK-IK Tool - Please see the  full documentation here for full info.  Spaces Tool UI </li> </ul>"},{"location":"releaseNotes/v1.4.6/#bug-fixes","title":"Bug fixes","text":"<ul> <li>#108 - Lip and module isn't behaving as expected in small scales - Fixed.</li> <li>#108- lip module joint struct issues in small scales - Fixed.</li> </ul>"},{"location":"releaseNotes/v1.4.6/#mnsmayaplugins-v-1012","title":"mnsMayaPlugins v 1.0.12","text":""},{"location":"releaseNotes/v1.5.0/","title":"V1.5.0","text":""},{"location":"releaseNotes/v1.5.0/#mansur-rig-150","title":"Mansur-Rig 1.5.0","text":"<p>Released 14 Jan 2022</p>"},{"location":"releaseNotes/v1.5.0/#features","title":"Features","text":"<ul> <li>LODs Tool</li> <li>\"Update Rig\" Method is now connected to the main progress bar.</li> <li>Limb modules- added new Mute-Root-Twist attribute. You can now choose whether you want to root interpolation to twist with the shoulder root or not, and anywhere in between.</li> <li>New \"leave settings window open\" value in preferences, to choose not to close the module settings window when pressing \"update\". The preferences value affects the default value for the new checkbox added in the settings window.</li> <li>Control-Shapes import/export</li> <li>CNS Tool Documentation added</li> <li>Predefined CNS Ctrls Added to rig top attributes. Often it is needed to create CNS controls for animators. As it is slightly inconvenient to do so manually or using custom scripts, a new predefined-CNS controls attribute was added. A CNS control will be created automatically post-construction for every input control within the new attribute list.</li> <li>Update-Rig utility was added to Block's main static section as well as the old location in Utility tab.</li> <li>Custom-Scripts relative paths- In some cases, relative paths for custom scripts can be very useful. When working in a non-production environment, it is sometimes useful to point to a custom script using a relative path to the Maya Project root directory. In case the selected custom script path is within the current Maya Project directory, a new pop-up question window will load, allowing users to choose to convert the selected path to a relative path format. This new relative path will be re-converted to the absolute path dynamically pre-execution.</li> </ul>"},{"location":"releaseNotes/v1.5.0/#bug-fixes","title":"Bug fixes","text":"<ul> <li>Twisting Issues with upper limb up node are now resolved. In previous versions, there were a few scenarios where the shoulder flipped. This has been resolved both in Limb &amp; Hind-Limb modules, and the upper section of the limb is now fully stable. </li> <li>Errors when trying to batch render a scene with a Block-Rig present- Fixed. Batch rendering with a Block rig within the scene is now fully supported.</li> <li>Squash module decendents behaviour- Squash module decentent behaviour was fully stabalized and will now yeild expected results.</li> <li>Load rig setting when rig-top is selected isn't working - Fixed.</li> <li>Update Rig isn't updating Rig-Top attributes- Fixed.</li> <li>OC Group is created for all ctrls- Fixed.</li> </ul>"},{"location":"releaseNotes/v1.5.0/#transition-log","title":"Transition Log","text":"<ul> <li>Please use the centralized \"Update Rig\" utility button in Block's utility tab to update rigs built with previous versions of Mansur-Rig. </li> </ul>"},{"location":"releaseNotes/v1.5.0/#mnsmayaplugins-v-111","title":"mnsMayaPlugins v 1.1.1","text":"<ul> <li>Parametrically Uniform mode in mnsPointsOnCurve Node</li> <li>Periodic form mode in buildTransformsCurveNode</li> </ul>"},{"location":"releaseNotes/v1.5.1/","title":"V1.5.1","text":""},{"location":"releaseNotes/v1.5.1/#mansur-rig-151","title":"Mansur-Rig 1.5.1","text":"<p>Released 18 Jan 2022</p>"},{"location":"releaseNotes/v1.5.1/#features","title":"Features","text":"<ul> <li>LODs Tool - Please see the  full documentation here for full info.  LODs Tool UI </li> <li>\"Update Rig\" Method is now connected to the main progress bar.</li> <li>Limb modules- added new Mute-Root-Twist attribute. You can now choose whether you want to root interpolation to twist with the shoulder root or not, and anywhere in between.  Mute Root Twist Demo </li> <li>New \"leave settings window open\" value in preferences, to choose not to close the module settings window when pressing \"update\". The preferences value affects the default value for the new checkbox added in the settings window.  Leave Setting Open Choice </li> <li>Control-Shapes import/export  Control-Shapes Import/Export </li> <li>CNS Tool Documentation added</li> <li>Predefined CNS Ctrls Added to rig top attributes. Often it is needed to create CNS controls for animators. As it is slightly inconvenient to do so manually or using custom scripts, a new predefined-CNS controls attribute was added. A CNS control will be created automatically post-construction for every input control within the new attribute list.   Predefined CNS Controls Attribute </li> <li>Update-Rig utility was added to Block's main static section as well as the old location in Utility tab.   New Update-Rig Button </li> <li>Custom-Scripts relative paths- In some cases, relative paths for custom scripts can be very useful. When working in a non-production environment, it is sometimes useful to point to a custom script using a relative path to the Maya Project root directory. In case the selected custom script path is within the current Maya Project directory, a new pop-up question window will load, allowing users to choose to convert the selected path to a relative path format. This new relative path will be re-converted to the absolute path dynamically pre-execution.   Custom Scripts Relative Paths </li> <li>New version available indication in main menu</li> <li>Rig info feature- rig construction will now log construction data. To load rig-info post construction use the new \"Rig Info\" button in block   Rig Info Button </li> <li>Custom Guides Shapes Posing- Saving poses will now store custom guides shape when relevant. </li> <li>curveZipB Module now supports bind tweaks for deforming eyelids pre-construction. This was created mainly to allow rigging a closed eyes model. Use the new \"doBindTweaks\" attribute within the curveZipB module- that will create edittable curves that can be editted pre-construction.</li> </ul>"},{"location":"releaseNotes/v1.5.1/#bug-fixes","title":"Bug fixes","text":"<ul> <li>Twisting Issues with upper limb up node are now resolved. In previous versions, there were a few scenarios where the shoulder flipped. This has been resolved both in Limb &amp; Hind-Limb modules, and the upper section of the limb is now fully stable. </li> <li>Errors when trying to batch render a scene with a Block-Rig present- Fixed. Batch rendering with a Block rig within the scene is now fully supported.</li> <li>Squash module decendents behaviour- Squash module decentent behaviour was fully stabalized and will now yeild expected results.  Squash Module Decendents </li> <li>Load rig setting when rig-top is selected isn't working - Fixed.</li> <li>Update Rig isn't updating Rig-Top attributes- Fixed.</li> <li>OC Group is created for all ctrls- Fixed.</li> <li>Regained Maya 2017 support.</li> <li>Some limb related un-wanted warnings in construction and deconsruction were removed.</li> <li>FK Chain Module- Some issues were found with embeddedIK to FK controls inheritence. These issues are now resolved and the embedded IK layer was stabalized.</li> </ul>"},{"location":"releaseNotes/v1.5.1/#transition-log","title":"Transition Log","text":"<ul> <li>Please restore Mansur-Rig default preferences. Go to Mansur-Rig Main Menu -&gt; Preferences -&gt; Restore Defaults</li> <li>Please use the centralized \"Update Rig\" utility button in Block's utility tab to update rigs built with previous versions of Mansur-Rig. </li> </ul>"},{"location":"releaseNotes/v1.5.1/#mnsmayaplugins-v-111","title":"mnsMayaPlugins v 1.1.1","text":"<ul> <li>Parametrically Uniform mode in mnsPointsOnCurve Node</li> <li>Periodic form mode in buildTransformsCurveNode</li> </ul>"},{"location":"releaseNotes/v1.5.2/","title":"V1.5.2","text":""},{"location":"releaseNotes/v1.5.2/#mansur-rig-152","title":"Mansur-Rig 1.5.2","text":"<p>Released 6 Feb 2022</p>"},{"location":"releaseNotes/v1.5.2/#features","title":"Features","text":"<ul> <li> <p>Symmetrize Custom-Guide shape utility - A new utility to symetrize a custom guides Nurbs-Curve Shape.  Symmetrize Custom Guide Shape Utility </p> </li> <li> <p>Module Preset Editor - Please see the  full documentation here for full info.  Module Preset Edit Dialog </p> </li> <li>#97 - Mirror Skin To Detached Component Utility- A new method for mirroring skin to a detached symetrical mesh.  Mirror Skin To Detached component tool </li> </ul>"},{"location":"releaseNotes/v1.5.2/#transition-log","title":"Transition Log","text":"<ul> <li>Please use the centralized \"Update Rig\" utility button in Block's utility tab to update rigs built with previous versions of Mansur-Rig. </li> </ul>"},{"location":"releaseNotes/v1.5.2/#mnsmayaplugins-v-111","title":"mnsMayaPlugins v 1.1.1","text":""},{"location":"releaseNotes/v2.0.0/","title":"V2.0.0","text":""},{"location":"releaseNotes/v2.0.0/#mansur-rig-200","title":"Mansur-Rig 2.0.0","text":"<p>Released 20 Sep 2022</p>"},{"location":"releaseNotes/v2.0.0/#features","title":"Features","text":"<p><ul> <li>Web-App upgrade, with a new license management system. This new app upgrade will now allow you to get as many seats as you want, as well as assign these seats to any Mansur-Rig user on your team. All Mansur-Rig versions prior to v2.0.0 are now depricated New License types:   <ul> <li>Gold- This is the best license for riggers. This license gives you full-edit capabilities and full access to all tools and the entire node-library.</li> <li>Silver- This is the best license for animators. This license is a Read-Only license, and can be used only to use rigs, but not edit them. This license includes all animation related tools, but not the node library.</li> <li>Trial- This is a full license (equivalent to Gold), 30-Days Free. Does not require any payment information. One Trial is allowed per user, and only once. This license can not be assigned.</li> </ul> <li>New modules! <ul> <li>LipsB- A much stronger and stabler version of the Lips module. </li> <li>chassis- A simple module to create a chassis behaviour. This will create a joint with 4 IK controls at chosen positions to calculate the highet and rotation of the chassis joint. This will allow you to control estimate a chassis position and orientation along a given surface very easily. <li>Hydrolic Piston- Create a piston behaviour with ease. <li>Sphere Roll- First of its kind! Calculate a sphere roll based on global position. This is mainly used to create a B-88 style characters.  <li>Curve Attachment- Attach a control to any given curve <li>Wheel- Create a wheel behaviour with great ease. Wheel rotation based on global position as well as rotation, works in all directions. <li>Link Chain- Create a link chain behaviour. Used for bike chains, tank treads, conveyor belts or any type of closed link chain deformation. <li>Local Clump- Create a clump control to any group of controls. This will connect using local channels to your clump slaves so it will not break any hierarchy based behaviour. <li>Lips module is now deprecated and replaced by the LipsB module</li> <li>Free-Control module- spring layer- added a new ability to spring specific axes only</li> <li>Multi-row attributes symmetry behaviour improved.</li> <li>Rig-Info- Added Maya version</li> <li>PLG - Select PLGs post projection</li> <li>CurveZipB - Default \"Remote-Control-Style\" controls position were normalized.</li> <li>licensing UI- \"Always On Top\" behaviour removed. Window parenting issues resolved.</li> <li>Mansur-Rig will no longer support Maya 2017.</li> <li>Mansur-Rig now supports Maya 2023.</li>"},{"location":"releaseNotes/v2.0.0/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Attribute hosts were not constructed at chosen positions - Fixed.</li> <li>Module duplicate- CG Shapes duplication behaviour fixed and normalized.</li> <li>Module symmetry- CG Shapes symmetry behaviour fixed and normalized.</li> <li>Foot module - Construction fails when choosing to create a dynamic control layer without the roll layer - Fixed.</li> <li>FK Chain module- Scaling with interp-joints on Fixed-Length mode- behaves incorrectly- Fixed.</li> <li>Free Control Module - create joint feature is loosing authority over related joint after construction in off mode</li> <li>Module symmetry- Spaces symmetry wasn't behaving as expected - Fixed.</li> <li>Partial construction isn't skipping unfound spaces - Fixed.</li> <li>curveZipB module - uShift ins't connected correctly post construction - Fixed</li> <li>Lips, curveZip - vertex to edges conversions, on a mesh-related input attribute are failing on related meshes with namespaces - Fixed.</li> <li>Module Symmetry - FK Chain - post construction orientation for symmetrized module is inconsistent - Fixed</li> <li>Lips module control mirroring issues were fixed on the new LipsB module</li> <li>PLGs - most actions were not undoable - Fixed. All actions wrapped into proper undo chunks.</li> <li>curveZipB module- bind curves creation direction normalized</li> <li>Module preset tool - Custom preset paths were not working - Fixed.</li> </ul>"},{"location":"releaseNotes/v2.0.0/#mnsmayaplugins-v-20","title":"mnsMayaPlugins v 2.0","text":"<ul> <li>mnsAutoWheelDrive Node released</li> <li>mnsSphereRoll node released</li> <li>mnsPointOnCurve - Object-Orient Up mode</li> <li>mnsPointsOnCurve - Curve Aim Mode</li> <li>mnsPointsOnCurve - objectOrientAim rotate mode</li> </ul>"},{"location":"releaseNotes/v2.0.0/#transition-log","title":"Transition Log","text":"<ul> <li>Please use the centralized \"Update Rig\" utility button in Block's utility tab to update rigs built with previous versions of Mansur-Rig. </li> </ul>"},{"location":"releaseNotes/v2.1.0/","title":"V2.1.0","text":""},{"location":"releaseNotes/v2.1.0/#mansur-rig-210","title":"Mansur-Rig 2.1.0","text":"<p>Released 09 Feb 2023</p>"},{"location":"releaseNotes/v2.1.0/#features","title":"Features","text":"<p><ul> <li>Module compounds introduced - It is now possible to create module compounds. Meaning, it is possible combining additional modules to be a part of a new module structure.</li> <li>Wing module (beta) is finally released!</li> <li>Missing PyMel installation is now cought with an informative info-box to avoid confusion after installing Mansur-Rig on Maya 2022 and above.</li> <li>Link Chain - Added Rotation mode setting.</li> </ul></p>"},{"location":"releaseNotes/v2.1.0/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Underscores in rig names is now prvented to avoid system errors</li> <li>FKChain build breaks when disabling scale/translate using channel control on the FK layer - Fixed</li> <li>LipsB module not building correctly due to naming issues- Fixed</li> <li>Limb modules - sofness and pinToMid attributes bug- Fixed</li> <li>Insert guides not working with interp joints- Fixed</li> <li>Delete guides not working with interp joints- Fixed</li> <li>Picker Data save/load not working on Python 3- Fixed</li> <li>Trello Development Board Discord BOT is now back in working order</li> </ul>"},{"location":"releaseNotes/v2.1.0/#mnsmayaplugins-v-21","title":"mnsMayaPlugins v 2.1","text":"<ul> <li>mnsPointsOnCurve - manual parameters adjustments introduced (both posision parameters and aim parameters)</li> </ul>"},{"location":"releaseNotes/v2.1.0/#transition-log","title":"Transition Log","text":"<ul> <li>Please use the centralized \"Update Rig\" utility button in Block's utility tab to update rigs built with previous versions of Mansur-Rig. </li> </ul>"},{"location":"releaseNotes/v2.2.0/","title":"V2.2.0","text":""},{"location":"releaseNotes/v2.2.0/#mansur-rig-220","title":"Mansur-Rig 2.2.0","text":"<p>Released 26 Jun 2023</p>"},{"location":"releaseNotes/v2.2.0/#features","title":"Features","text":"<p><ul> <li>Maya-2024 support - Mansur-Rig now supports Maya2024 for both Windows and Linux platforms.</li> <li>Facial Mocap Tool (beta) - A new Facial-Motion-Capture to control rig mapping tool.</li> </ul></p>"},{"location":"releaseNotes/v2.2.0/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>localClump module right side flip ability</li> <li>freeControl right-side flip issues - Fixed</li> <li>selection restore issues after ctrlShapes exctraction and symmetry.</li> </ul>"},{"location":"releaseNotes/v2.2.0/#mnsmayaplugins-v-22","title":"mnsMayaPlugins v 2.2","text":"<ul> <li>mnsPoseBlend - New node supporting the new Facial-Mocap-Tool</li> </ul>"},{"location":"releaseNotes/v2.2.0/#transition-log","title":"Transition Log","text":"<ul> <li>Please use the centralized \"Update Rig\" utility button in Block's utility tab to update rigs built with previous versions of Mansur-Rig. </li> </ul>"},{"location":"releaseNotes/v2.3.0/","title":"V2.3.0","text":""},{"location":"releaseNotes/v2.3.0/#mansur-rig-230","title":"Mansur-Rig 2.3.0","text":"<p>Released 23 Aug 2023</p>"},{"location":"releaseNotes/v2.3.0/#features","title":"Features","text":"<p><ul> <li>Guide Posing Absolute/Relative Modes - Guide posing can now be saved/loaded in an absolute world value format.</li> <li>FK Chain Module - Added a new feature to control all axes curls for the primary chain in a single channel. On by default. Please use the centralized \"Update Rig\" utility button in Block's utility tab to update rigs built with previous versions of Mansur-Rig.</li> <li>Joint Radius Tool - A Simple tool to control joint-radius for rigs is now vailable. Please see the  full documentation here for full info.      Joint Radius Tool <li>Game Exporter Tool - A A new tool to easily extract asset and animated skeletons. Please see the  full documentation here for full info.      Joint Radius Tool"},{"location":"releaseNotes/v2.3.0/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>LipsB Module- customMid locators intial visibility was not set correctly- Fixed.</li> <li>Extract control shapes isn't working when selecting the rigTop- Fixed.</li> <li>Double name-space causes picker to malfunction- Fixed.</li> <li>Buggy toggles on picker cameras- Fixed.</li> <li>FKChain- When using VariableFK Layer, main curve interp MUST be uniform- Implemented.</li> <li>Maya 2024 syntax warnings- Corrected.</li> </ul>"},{"location":"releaseNotes/v2.3.0/#mnsmayaplugins-v-22","title":"mnsMayaPlugins v 2.2","text":""},{"location":"releaseNotes/v2.3.0/#transition-log","title":"Transition Log","text":"<ul> <li>Please use the centralized \"Update Rig\" utility button in Block's utility tab to update rigs built with previous versions of Mansur-Rig. </li> </ul>"},{"location":"releaseNotes/v2.4.0/","title":"V2.4.0","text":""},{"location":"releaseNotes/v2.4.0/#mansur-rig-240","title":"Mansur-Rig 2.4.0","text":"<p>Released 14 Nov 2023</p>"},{"location":"releaseNotes/v2.4.0/#features","title":"Features","text":"<p><ul> <li>Updated Prefs gathering methods to increase performance - An unexpected performance impact bug was found related to prefs gathering mehthods. The entire structure for prefs gathering was updated, and a 50% increase in all actions (!!!) speed is logged!</li> <li>Module Settings - int increment rule - Added an ability to create an increment rule within int type settings in module-settings and dyn-UI.</li> <li>All module int increment rule setting pass - Implemented the new int-increment rule in all relevant modules.</li> <li>Preferences Update trigger - Added trigger in centralized location to find and fix preferences in case they are currupt/out-of-date.</li> <li>Static \"Picker-Images\" directory in preferences - Added a new preference named \"Picker images fallback path\". This path can now be used to centralize all picker images in a single location. This is convenient for any user, but especially important when using pipelines that use different file structures for rig. Now in case there is a need, use this preferece to specify a centralized location for all picker images. This location will be used for searching picker images in case the default location was not found.</li> <li>Remote-Control style Ctrls symmetry - Control shapes symmetry action will now symmetrize remote-control style shapes and positions.</li> <li>\"Save Default Values\" trigger for ui-style controls, on \"extract shapes\" - For ease of use, now \"extract shapes\" action will trigger a \"save custom default values\" for remote-control style controls.</li> <li>Prevent all guide-related actions in Block while in constructed state - Implemented.</li> <li>Game Exporter - Indication for ongoing process - Implemented.</li> <li>Game Exporter - Custom-Attributes Extraction ability - Game exporter is now enhenced with an ability to extract additional channel-box attributes. Relevant for blend-shapes drivers, texture-switchers etc.</li> <li>CurveZipB Module- Attachments joint struct Manual parameters adjustments - Added an ability to manually adjust indevidual joint placements for the attachment (eyelashes) layer.</li> </ul></p>"},{"location":"releaseNotes/v2.4.0/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>After Relative/Absolute guide poses load addition, previously built rigs break as they were all relative. add a failsafe as well as a pose mode definition for each guide- Fixed.</li> <li>When creating a new module- match rig's joint radius. Implemented.</li> <li>Wing module - Some control shape settings are set to be a jntStructSoftMod incorrectly- Fixed.</li> <li>When a rig is referenced without namespace, picker images are not loading- Fixed.</li> <li>Picker fails to initialize when there are multiple rigs without namespaces in one scene- Fixed.</li> <li>FreeControl - Setting createJoint attribute to False, deletes the attribute host object- Fixed.</li> <li>Selection is not restored after guides orientation action- Fixed.</li> <li>Selection isn't restored when symmetrizing cg shapes action- Fixed.</li> <li>When symmetrizing a module branch- match joint radius- Implemented.</li> <li>doPrimariesSpaceSwitch on FKChain module causes module construction to fail- Fixed.</li> <li>FK Chain module existence is causing partial construction to fail - Fixed.</li> <li>Custom default values deletion isn't working for UI style ctrls- Fixed.</li> <li>Game Exporter - failing to initialize with preset ranges set in scene- Fixed.</li> </ul>"},{"location":"releaseNotes/v2.4.0/#documentation","title":"Documentation","text":"<ul> <li>Keyword arguments missing from documentation - Fixed.</li> <li>Link-Chain- shape tweakers must be Mansur-Rig objects. Added to the docs.</li> <li>Mechanical Modules- Documentation fully updated.</li> <li>Module settings reviewed and updated.</li> </ul>"},{"location":"releaseNotes/v2.4.0/#mnsmayaplugins-v-24","title":"mnsMayaPlugins v 2.4","text":"<ul> <li>New node- mnsModulo</li> </ul>"},{"location":"releaseNotes/v2.4.0/#transition-log","title":"Transition Log","text":"<ul> <li>Please use the centralized \"Update Rig\" utility button in Block's utility tab to update rigs built with previous versions of Mansur-Rig. </li> </ul>"},{"location":"userGuides/Asset-Scaling/","title":"Asset Scaling","text":"<p> Mansur-Rig\u2019s default scale is based on: Human-male character- 180cm in Height. <p>There are three values that dictate Asset scaling: <ul> <li>Preferences - \u201cBase Scale\u201d, or \u201cProject Scale\u201d- Global scale multiplier.</li> <li>Rig-Top Setting - \u201cAsset Scale\u201d, Asset specific scale multiplier.</li> <li>Preferences - \u201cRoot Guide Scale\u201d - This will dictate the multiplier for the \u201cRoot Guide\u201d only.</li> </ul></p> <p> </p> <p>Variables used internally : <ul> <li><code>mnsProjectScale</code> - Located in \"Preferences\", is set by the user using the preferences UI, which can be accesed through Mansur's main menu.</li> <li><code>assetScale</code> - Rig-Top's attribute, can be accessed when creating a new Rig-Top, or via the \"Rig settings\" in Mansur BLOCK's main UI.</li> <li><code>gScale</code> - Compiled in MnsBuildModule Class = <code>mnsProjectScale</code> * <code>assetScale</code></li> <li><code>spacing</code> - This variable dictates the spacing (distance) between guides when creating them. This variable is <code>gScale</code> * 10</li> </ul></p> <p></p> <p>examples (Recommended Values):  Environment Scale Asset Height Base Scale Asset Scale Root Guide Scale 1:1 (Real-Scale) 180 cm 1.0 1.0 50.0 1:1 (Real-Scale) 135 cm 1.0 0.75 50.0 1:1 (Real-Scale) 45 cm 1.0 0.25 50.0 1:2 (Half-Scale) 180 cm 0.5 1.0 50.0 1:4 (Quarter-Scale) 135 cm 0.25 0.75 50.0 </p> <p> </p>"},{"location":"userGuides/CNS-Tool/","title":"CNS Tool","text":""},{"location":"userGuides/CNS-Tool/#user-guide","title":"User-Guide","text":"<p>This tool was created to allow animators to create offset additional control for any control within block rig, if they have a need to constrain the control to a different object.  Often, animators need to constrain a control to a different object to create the required animation. Since this operation will result in locking the control's transform channels, it is neccessary to create an aditional offset control above in order to constrain the offset control, maintaining animation ability on the child control.  This tool is operational both in normal rig state as well as in a referenced rig state.</p>"},{"location":"userGuides/CNS-Tool/#ui","title":"UI","text":"<p>Access this Tool via Mansur-Rig main Maya menu  Menu Entry </p>"},{"location":"userGuides/CNS-Tool/#workflow","title":"Workflow","text":"<p><ol> <li>Open the tool. The UI will list all existing CNS controls within the scene.</li> <li>Select any control and click Create CNS(1). This will create the offset CNS, maintining the selected control's transforms.</li> <li>In case you want to remove an existing CNS, use Remove CNS(2).</li> </ol></p>"},{"location":"userGuides/CNS-Tool/#legend","title":"Legend","text":"<p> CNS Tool- UI </p> <ol> <li> Create CNS- Create a CNS for selected controls.    <li> Delete CNS- Delete an existing CNS for selected controls.    <li> Scene CNS Controls- Existing scene CNS controls display."},{"location":"userGuides/Custom-Scripts/","title":"Custom Scripts","text":""},{"location":"userGuides/Custom-Scripts/#general","title":"General","text":"<p>Mansur-Rig contains the ability to append Python-scripts to it's automated process. You can easily add custom Python scripts to Mansur-Rig's process in 4 key stages: <ol> <li>Pre-Construction- The script will be run just before the rig construction is initiated.</li> <li>Post-Construction - The script will be run after the construction is finished.</li> <li>Pre-Deconstruction - The script will bb run before the rig is deconstructed.</li> <li>Post-Deconstruction- The script will be run after deconstruction is finished.</li> </ol>  Inserting custom scripts into any Block-Rig is very easy, follow the guide below.</p>"},{"location":"userGuides/Custom-Scripts/#user-guide","title":"User-Guide","text":"<p><ol> <li>         First, open your Block-Rig's Rig-Settings by selecting your Rig-Top, and clicking the Module/Rig Settings in Block-Builder.          Rig-Settings Button </li> <li>         Then move to the Custom-Scripts Tab in the Rig-Settings dialog.          Custom-Scripts Tab </li> <li>         Then open the dropdown menu for the stage you want to add a custom-script to (you can add as many as you want, and at any combination of stages you choose.)          Custom-Scripts Open Drop-Down Menu </li> <li>         Then simply use the dialog options to add/remove custom scripts paths into the list.          Note: the checkbox above the list named execPostCustruct.         This checkbox is there for your convenience, in order to choose whether to execute the stage's cutom scripts inserted, or not.         Notice this checkbox is OFF by default, make sure you turn it ON in order to execute this stage's inserted custom-scripts.     </li> <li>         Use the + button to choose a script path.         In the opened dialog, navigate to your script path, and choose Open         The path will be added to the dialog's list.          Added Script Note: For ease of use, in case the path selected is within Maya's current Project-Set directory, a message dialog will be displayed, asking you wether you want to convert the selected path to a Relative-Path. In case you do so, the path will be converted to a relative path from your Project-Set directory onwards. That will mean that if any other artists opens this rig (in a team environment for example) opens this rig and sets his Maya-Project correctly, the script will be found regardless. Use this feature in case it fits your needs.           Relative path convertion dialog </li> <li>         Then simply check the execPostCunstruct to indicate you want to run your custom-scripts, and click Update-Settings at the bottom of the dialog.          Execute checkbox </li> <li>         Now once you construct/deconstruct your rig, the custom-scripts will be executed based on the stage you choose to insert them.         You can add as many as you want, and at any stage, in any combination.     </li> </ol></p>"},{"location":"userGuides/Game-Exporter/","title":"Game Exporter","text":""},{"location":"userGuides/Game-Exporter/#user-guide","title":"User-Guide","text":""},{"location":"userGuides/Game-Exporter/#example","title":"Example","text":"<p> Game Exporter- Base State </p>"},{"location":"userGuides/Game-Exporter/#general","title":"General","text":"<p><ol> <li>This tool was created to allow an easy animation/asset export process for animators.</li> <li>Using this tool, animators can easily process skeleton FBX exports with just a few clicks.</li> <li>This tool was primaraly designed to use for game-engine exports.</li> <li>Using this tool, you can quickly define the type of export needed (whether asset or animation sequence), and all needed parameters to export animations to FBX format without damaging the scene in any way.</li> <li>This tool also supports batch exports for multiple animation ranges within a single scene.</li> <li>The general workflow after there is an animation scene present, needed to be exported, is as follows   <ol> <li>First, once an asset rig/skeleton is complete, the sekelton is needed to be exported as a base-state asset. Simply \"add-Range\" using the button within the UI, and move to the \"asset\" option. Then choose a directory for the file to be written to, and click \"Export\". Both the skeleton and the bound geometry will be exported.        Game Exporter- Asset Export </li> <li>Then, once you have an animation ready to be exported, use the same dialog in \"range\" mode to bake and export your animation sequence. You can export multiple ranges from the same scene in case needed.        Game Exporter- Animation Export </li> <li>The settings you selected will be saved within the current scene. So you can define the animation ranges for the selected scene once, then once you re-open the tool the settings will automatically load into the dialog.</li> <li>It is possible to export an asset as well as animation ranges in the same batch, in case needed.</li> </ol> </li> </ol></p>"},{"location":"userGuides/Game-Exporter/#general-settings","title":"General Settings","text":"<p> Game Exporter - Legend </p> <ol> <li>Export Format- Exported file format. Currently only FBX is available.</li> <li>Connection Method- This setting sets the methid in which the new extracted skeleton will be connected to the original animation skeleton.     <ul> <li>Direct (default)- Use direct channel connection.</li> <li>Constraints - Use Parent and Scale Constraints connection. This method is slightly less reliable, but may be needed in some cases.</li> </ul> </li> <li>Skeleton- Choose which skeleton is requested to be exported.     <ul> <li>Base Skeleton (Default)- This is the mian skeleton. This setting will be used 98% of times.</li> <li>Offset Skeleton - This option will bake and export the offset skeleton instead of the main skeleton, in case it exists.</li> </ul> </li> <li>Normalize Ranges- If checked, the animation ranges will be normalized to start from frame 1. For example, if the animation range selected is 30f-100f, the exported animation range will be normalized to 1f-70f. In case this isn't chacked, the selected range will be preserved. This is most useful in case you export multiple ranges from the same scene.</li> <li>Delete Unused Nodes- If checked, while extracting the skeleton from the rig, any joints that are not used in any connected skin cluster, will be removed from the heirarchy. This is most useful for performance maximization in game engined. Be-Aware! This means that the extracted skeleton heirarchy will be different then the one present in the rig, and any changes within the skin clusters related to the heirarchy will requst in a different skeleton structure.</li> <li>Include Meshes- If checked, the aniamtion exported will contain the skeleton's connected skinned meshed. This is only relevant in \"range\" mode. It is always true in \"Asset\" mode.</li> <li>Joint Rotate To Orient- If checked, after the skeleton is extracted at base state, all joint rotation values will be converted to 'joint orient' values.</li> </ol>"},{"location":"userGuides/IK-FK-Match/","title":"IK FK Match","text":""},{"location":"userGuides/IK-FK-Match/#how-to-match-limb-module-ik-fk-controls","title":"How To Match Limb Module IK &amp; FK Controls","text":"<p>In order to switch &amp; match IK and FK controls of a limb module, please use the following code snippets. The following code is selection based. Select any control related to the limb module you want to switch and run the method.</p> <ul> <li>Mode 0: Match IK Controls to the FK controls</li> <li>Mode 1: Match FK Controls to the IK controls</li> </ul> IK to FK (Python) <pre><code>#import Mansur-Rig's Block-Utility python module, to access the method    \nfrom mansur.block.core import blockUtility as blkUtils\n\n#Mode 0 - Match IK to FK\nblkUtils.limbMatchFkIK(pm.ls(sl=True)[0], 0)\n</code></pre> FK to IK (Python) <pre><code>#import Mansur-Rig's Block-Utility python module, to access the method    \nfrom mansur.block.core import blockUtility as blkUtils\n\n#Mode 1 - Match FK to IK\nblkUtils.limbMatchFkIK(pm.ls(sl=True)[0], 1)\n</code></pre>"},{"location":"userGuides/IK-FK-Match/#using-the-code-snippet-as-a-picker-button","title":"Using the code snippet as a picker button","text":"<p>In case you are creating a picker, it is recommended to add FK &amp; IK switch buttons for easy access in animation. The way to do so is simply to insert the above snippets as a \"custom script\" into a picker button.</p> <ol> <li>Open Block Builder, and move to \"Picker\" tab.  Picker Tab </li> <li>While any control is selected, click \"Edit Picker Layout\" to open the picker layout editor.</li> <li>Click \"Create Free PLG\" to create a new free picker button, and position it within your picker layout.</li> <li>While the new PLG is selected, click \"PLG Settings\" to open it's attributes.</li> <li>In the opened UI, insert any of the above code snippets.</li> <li>Optionally add a text in the \"button text\" line edit to indicate it's behaviour- for example: \"To FK\" or \"To IK\".</li> <li>Optionally add the Module's UI control into the controls select list.  PLG Settings </li> <li>Repeat the process for the reverse operation.</li> <li>test the buttons by openning the picker, and clicking the button.</li> </ol> Result Example"},{"location":"userGuides/Joint-Radius/","title":"Joint Radius","text":""},{"location":"userGuides/Joint-Radius/#user-guide","title":"User-Guide","text":"<p>A very simple tool to adjust a rig's skeleton radius easily.  Simply select a rig, launch the dialog and adjust joint-radius.  This tool is available in Mansur-Rig's main menu.  The tool is based on selection. In case the tool is launched and any Mansur-Rig isn't detected within the selection, it will simply be disabled.   In this case simply close the dialog, select your rig, and re-launch.  Joint Radius Tool </p>"},{"location":"userGuides/LODs-Tool/","title":"LODs Tool","text":""},{"location":"userGuides/LODs-Tool/#user-guide","title":"User-Guide","text":"<p>LODs Tool is a simple way for managing visibility switches between model states.  Often, a given model has different states, or different resolutions, which can be switched while animating to gain performance. These states are most commonly known as LOD (Level-Of-Detail) modes.  Using this tool you can simply create LOD grouping (as many as you need) and input transforms into these groups to switch visibility states using a simple Enum attribute that will be created automatically (both in deconstructed and constructed states of Block rig).  This tool can also be used to switch between model variations, or clothing variations of a model.</p>"},{"location":"userGuides/LODs-Tool/#ui","title":"UI","text":"<p>Access this Tool via Mansur-Rig main Maya menu  Menu Entry </p>"},{"location":"userGuides/LODs-Tool/#workflow","title":"Workflow","text":"<p><ol> <li>Open the tool.</li> <li>Select any component of a Block rig. If any previous LOD setting were created for this rig, they will be displayed within the UI. If not, only the Rig(1) indication will display the name of the selected rig.</li> <li>Start with adding a LOD group by clicking Add LOD(6). A new LOD column will be created in the LOD groups section(5).</li> <li>Repeat the previous step to add more LOD groups (columns).</li> <li>Use the Right-Click Menu(8-11) (using right click in the LOD groups section) to edit the contents of each group (selection based). Any transfom can be added here. <li>Once you are done editting your LOD groups, click Apply Changes. This will write the data into the rig, and UI will refresh.</li> <li>Now you should see that the Current LOD(2) drop-down now contains an item for each LOD group you selected. You will also notice that the visibility channels for the nodes you selected are already connected. Using the Current LOD(2) drop down you can now switch between states.</li> <li>In case you want to switch states in deconstructed state without using the UI, simply look for the LOD Vis attribute created on the root guide.</li> <li>For the constructed state- the default attribute host will be the world control. In case you want to change the host in constructed state, simply open the UI again, and input the host into the LOD Attribute Host(3) box. Once you re-construct, the LOD Vis attribute will be created on your selected host.</li>  You can edit/change this data at any time."},{"location":"userGuides/LODs-Tool/#legend","title":"Legend","text":"<p> LODs Tool- UI </p> <ol> <li> Rig- Selected Rig indication.    <li> Current LOD- Switch between existing LODs using the UI.    <li> LODs Attribute Host- Input the constructed state attribute host for the LOD switch.    <li> LOD Naming Style- Select your prefered naming style. Alphabetical will result in lodA, lodB, lodC... style naming. Numeric will result in lod1, lod2, lod3... naming style.    <li> LODs Defenition- This is where the LOD groups data is displayed and editted. Edit your LOD groups using the righ-click menu (8-11).    <li> Add LOD- Add LOD group, increasing the amount of LOD groups.    <li> Delete Last LOD- Remove the last LOD group, decreasing the amount of LOD groups.    <li> Set Selected Items- For the selected LOD group (column), set the selected scene nodes as the group's content. This will replace any existing members of the group.    <li> Add Selected Items- For the selected LOD group (column), add the selected scene nodes as the group's content. Existing members of the group will be kept.    <li> Remove Selected Items- For the selected LOD group (column), remove any UI selected members from the group.    <li> Clear ALL- Clear ALL Data. All LOD groups and members will be removed.    <li> Apply Changes- Once you are happy with your data, apply (write) it into the rig."},{"location":"userGuides/License-Management/","title":"License Management","text":""},{"location":"userGuides/License-Management/#video-overview","title":"Video Overview","text":"<p> In this video, I want to explain how to use Mansur-Rig's enterprise-level license manager.  We will go through the recently upgraded web app and all actions within it, which you can use to manage your Mansur-Rig licenses.  I'm sure you are already aware that Mansur-Rig's toolset and rigs require an active subscription to function properly.  Whether you are working alone, within a team, or managing a team, our web app is got you covered.  https://app.mansur-rig.com/"},{"location":"userGuides/License-Management/#covered-subjects-in-this-video","title":"Covered subjects in this video:","text":"<ul> <li>Starting a free trial</li> <li>Aquiring a new license</li> <li>License types</li> <li>Assigning a license</li> <li>Retreiving a license</li> <li>Remote Log-Out</li> </ul>"},{"location":"userGuides/Log-In/","title":"Log In","text":"<p>In order for Mansur-Rig toolset to work properly, you must be logged in using an account connected to an active subscription.  In case you haven't already, please  visit Mansur-Rig.com to create an account and subscribe to a plan of your choosing.  Once you have an account and an active subscription, you will be able to successfully log-in and activate the product.  To do so, please open My-Account dialog via Mansur-Rig's main menu:  </p>"},{"location":"userGuides/Log-In/#how-to-use-my-account","title":"How to use My-Account","text":"<p> <ol> <li>Via Mansur main menu, click the My-Account item to open the dialog.  <li>Use the same credentials you used to open your account to fill-in the form.</li> <li>Optianally, fill in a Machine-Name. This field is for your convenience in case you have a multi-seat subscription, and you want to easily identify active machines.</li> <li>Click the Log-In button.</li> <li>If the credentials are valid, a clear indication will be showen and the dialog will switch to an Active state.</li> <li>Once the account is active, the entire toolset will be active. Enjoy!  <p>Auto-log-in</p> <p>Once you entered your credentials and successfully activated the product, your credentials will be saved and the product will be activated automatically when you restart Maya. If that isn't your preference, feel free to disable this behavior using Mansur-Rig's Preferences dialog.</p>"},{"location":"userGuides/Log-In/#using-a-multi-seat-subscription","title":"Using a multi-seat subscription","text":"<p>In case you have a multi-seat subscription, a few more features will be of your interest. </p>"},{"location":"userGuides/Log-In/#logging-in-with-multiple-machines-at-the-same-time","title":"Logging in with multiple machines at the same time","text":"<p> <ul> <li>You are will be able to log-in with multiple machines at the same time.     <li>The ammount of seats that are available within your subscription will be listed under your profile within the website.</li> <li>You can also see some of your license details via My-Account dialog, under License-Details dropdown menu"},{"location":"userGuides/Log-In/#managing-users","title":"Managing Users","text":"<p>In case you have multiple machines, your credentials can be used in two ways:  <ol> <li>As an Admin (Account Owner)</li> <li>As a User, which was given user credentials.</li> </ol> <p>In case you own a multi-seat subscription, you might be interested in allowing multiple users, who are not yourself, to use your subscription (a member of your team most-likely).  In case you don't want to give your full credentials which can be used to do actions within your account, you can alternatively use the User Password field of your account.  This field can be edited via Mansur-Rig's website, in My-Profile section.  Now, the user you want to give access to your account can log-in as a User, which will give him \"read-only\" access to your account.  You, as an Admin are able to control access to your account, and even force log-out any user using the Manage-Users section in My-Account dialog:  </p>"},{"location":"userGuides/Log-In/#logging-in-with-different-machines","title":"Logging in with different machines","text":"<p>In case you have a single seat subscription and wish to use it on different machines (i.e Home, Office), you are welcome to do so.  If in any case you did not log-out a machine, and want to use a second one, you can always log-out machines as an Admin remotely in order to release the seat using Manage-Users section in My-Account dialog.</p> <p></p>"},{"location":"userGuides/Mocap-And-Game-Tools/","title":"Mocap And Game Tools","text":"<p>Mansur-Rig is equipped with a full toll-set to manage Mocap data as well as manipulate rigs to be game-engine ready.  This guide will cover the entire tool-set, and some example use-scenarions/workflows.  </p>"},{"location":"userGuides/Mocap-And-Game-Tools/#block-builder-mocapgame-tab","title":"Block Builder- Mocap/Game tab","text":"<p> Mocap Tab Legend </p>"},{"location":"userGuides/Mocap-And-Game-Tools/#offset-rig-section","title":"Offset-Rig Section","text":"<p><ol> <li> Guide Preset section- Mnausr-Rig is delivered with pre-existing guide presets for ease of use. Use the Import button to gather the guide prset of you choice.   </li> <li> Create Offset Rig- A Block-Offset-Rig, is a joint skeleton, created from the base joint-structure, that can be used to control the puppet. In essence reversing the puppet structure. Instead of the puppet controling the skeleton, this new skeleton will control the puppet. The puppet will of course still control the base-skeleton which drives the deformations. This behaviour is used to import mocap data onto the offset skeleton, which drives the puppet. This in turn will allow you to bake the animation into the puppet-controls- for post-editting the animation/cleanup, mainaing the kinematics of the puppet.          The joint-control relationship is set within Block's internal contruct process, so you don't need to define it, the offset skeleton will know how to connect to the puppet automatically.          Note that the control isn't automatically transferred- use Authority To Skeleton(4).   </li> </ol></p> Offset Skeleton Example <ol> <li> Delete Offset Rig- Delete the Offset-Rig, if it exists.   </li> <li> Authority To Skeleton- Use this utilty to constrain the puppet controls to the offset-Skeleton. Make sure the puppet and offset-skeleton are in the same pose.   </li> <li> Authority To Puppet- If the puppet controls are constrained to the offset skeleton, use this utility to release that connection, restorinng normal bahvaviour.   </li> <li> Select Slave Controls- Select all controls that are set to be driven by the offset-rig connection.   </li> <li> Bake Controls- Bake the slave controls, within the current animation range.           If require further bakinng options, use Select Slave Controls(6) to select the slave controls, then use Maya's Bake-Animation utility.   </li> </ol>"},{"location":"userGuides/Mocap-And-Game-Tools/#utilities-section","title":"Utilities Section","text":"<ol> <li> Rest Puppet- Reset all puppet controls.    </li> <li> Rest Offset-Rig- Reset the offset-skeleton.   </li> <li> Joint Rotate To Orient- Attempt to transfer all joint rotation values into the joint orient values, to \"zero out\" the rotation values. This action will be performed on the entire seleted heirarchy.    </li> </ol>"},{"location":"userGuides/Mocap-And-Game-Tools/#character-definition-section","title":"Character Definition Section","text":"<ol> <li> Character Definition- Load the Character-Definition Tool- which will allow you to charactraize your pupprts/skeletons into HumanIK, in order to retarget mocap data.   </li> </ol>"},{"location":"userGuides/Mocap-And-Game-Tools/#extract-skeleton-section","title":"Extract Skeleton Section","text":"<p><ol> <li> Extract Skeleton- Use this utility to easily extract your puppet's skeleton, in order to export it.          Once you extracted your skeleton, you will be able to delete Block's rig, leaving only the skeleton (with or without animation) and your geometry (with it's deformation). This will make exporting using any tool of your choosing fast and easy.   </li> <li> Snap Extracted Skeleton To Base- Match extracted skeleton transformations to the base skeleton   </li> <li> Pose Edit Section- Use these utilities to save\\load dagPoses onto your extracted skeleton.   </li> </ol></p>"},{"location":"userGuides/Mocap-And-Game-Tools/#character-definition-tool","title":"Character Definition Tool","text":"<p>This tool was created to enhance mocap data retargeting to Block rigs.  Using this tool, you can easily Characterize your puppets into Maya's Human-IK tool.  The goal behind this tool is to speed up your motion-capture data import workflow.  Not only Mansur-Rig is equipped with many mocap-data presents, it will also allow you to create custom presets easily and export them to re-use.</p> Character Definition UI Legend"},{"location":"userGuides/Mocap-And-Game-Tools/#presets-importexport","title":"Presets import/Export","text":"<p><ol> <li> Presets dropdown- Choose a predefined naming preset to import.   </li> <li> Target Column dropdown- Choose which column to import the preset to, or export from.       Humak-IK column will be exported always along side the column selected.   </li> <li> Import- Improt from the predifined preset selecter, into the selected column.   </li> <li> Import From File- Improt from a custom preset file exported previously, into the selected column.   </li> <li> Export- Export the select column, as well as it's related Human-IK defintion into a file.           Use this preset later-on using the Import From File(4) utility.   </li> </ol></p>"},{"location":"userGuides/Mocap-And-Game-Tools/#display-settings","title":"Display Settings","text":"<p><ol> <li> Filter- Filter UI display to easily find the component you are after.   </li> <li> Update Selection- When this checkbox is ON, the main scene selection will update based on the selected rows, in case any of the objects within it exists.           When OFF, scene selection will not be changed.   </li> <li> Reset UI- Clear the entire UI.   </li> </ol></p>"},{"location":"userGuides/Mocap-And-Game-Tools/#data-section","title":"Data Section","text":"<p><ol> <li> Data Viewer- This is where all of the data is displayed.          Data in this UI can be editted, not only viewed.          In case you need to create a preset, you can always start with a similar preset and edit it to your needs to avoid creating it from scratch.      Right-Click- Edit menu      Double-Click- Free edit      Column description <ul> <li> Component Column- This culomn is the name of the component. This name is entirly up to you- it is simply an indetifier for the row.       </li> <li> Block Skeleton Column- This column represent the Block joint related to this component row.                  Objects in this Column must be from Block's rig base skeleton- NOT the offset-skeleton.       </li> <li> Target Skeleton Column- This column represets a joint from an external source (not block).                   The target skeleton may be a skeleton you wish to retarget data from, or retarget data to.                  This skeleton can be any skeleton.                   In case a preset doesn't exist for your target skeleton, you can always create a custom one yourself.       </li> <li> Human-IK Column- This column represents the Human-IK slot this row is related to.                  Since Human-IK slots are pre-defined, this column can not be editted freely.                  Please use the right-click menu to access all Human-IK slots.       </li> </ul> </li> <li> Name-Sapces- In case your target/block contain a namespace, input it into the correct boxed.          In case a namespace exists for a target/block skeleton and they are not inputed correctly, the objects won't be found and the characterazation process will fail.          For ease, simply select one of your name-spaced objects and press the arrow button to the right of the box you want to input it to.   </li> </ol></p>"},{"location":"userGuides/Mocap-And-Game-Tools/#match-section","title":"Match Section","text":"<p>In case you have a skeleton you wish to animate (Metahuman for example), and you need a puppet for it, you can use this section. <ol> <li> Match Block Guides To Target- Match the Block guides position to the target skeleton.          Simply input all of the data into the UI, using presets/edit, while your Block-skeleton column is set to an existing Block-Rig (in deconstructed state), and match the guides' position to the target skeleton you want to animate.          Once again, The Block column input should contain base skeleton objects.          When using this utility, the system will find the correct guides automatically.          Then, you can construct your rig to aquire a fully functioning puppet.          Then simply use Connect Target Skeleton(12) to connect your target skeleton to the base skeleton.          Now you have a fully functional animation puppet you can animate your skeleton with.   </li> <li> Connect Target Skeleton- Connect a Block puppet to the target skeleton in order to animate.   </li> <li> Disconnect Target Skeleton- Break the connection between Blok puppet and the target skeleton (if exists).          When you finish animating, you can simply bake your target skeleton animation, disconnect the connection to Block's puppet.   </li> </ol></p>"},{"location":"userGuides/Mocap-And-Game-Tools/#human-ik-section","title":"Human-IK section","text":"<p><ol> <li> Humak-IK UI- Open Maya's Human-IK tool.   </li> <li> Characterize- Create a Human-IK character definition based on the current data.          You can do this for both Block skeleton and the target skeleton.          This process will create a new character definition in Human-IK, and attempt the connect all objects to their related slot within that character definition.   </li> </ol></p>"},{"location":"userGuides/Module-Preset-Editor/","title":"Module Preset Editor","text":""},{"location":"userGuides/Module-Preset-Editor/#user-guide","title":"User-Guide","text":"<p>This tool was designed to manage module presets.  As Mansur-Rig modules comatin many attrbiutes, it is sometimes more convenient to use a predefined preset to speed up the wrokflow.  Mansur-Rig includes some module presets, although this was designed mainly to allow usesrs to create their own presets, essentially saving the module settings' state in order to re-use later. </p> <p>Important</p> <p>Module preset actions are only relevant to the Module Settings tab within the module settings window. All common attributes (first tab) will be ignored.</p>"},{"location":"userGuides/Module-Preset-Editor/#ui","title":"UI","text":"<p>Access this Tool via the \"Preset Editor\" button within any module settings window.</p> Tool Load Button Module Preset Editor Dialog"},{"location":"userGuides/Module-Preset-Editor/#preferences-setup","title":"Preferences setup","text":"<p>In case you want to use custom-presets, it is recomended to setup a local folder which you want to save your presets in, and add the path to Mansur-Rig's module preset paths variable.  At deafult, the tool will list presets within the UI only out of Mansur-Rig predefined preset folder &lt;$MNS_INSTALL_PATH&gt;/scripts/mansur/block/modulePresetEditor/mnsModulePresets   Since the system has no way of knowing where to find additional custom presets, you need to tell the system where to look.  The process is very easy:  <ol> <li>Open Block Builder from Mansur's main menu.</li> <li>Move to Utility tab.</li> <li>Open the Module Presets Paths dropdown menu.</li> <li>Press the Add Path (+) button</li> <li>Navigate to the custom directory you want to add and click Select-Folder</li> <li>The directory will be added to the main preset directories list.</li> <li>Click Apply.</li> </ol> The path you selected is now added into Mansur-Rig's preferences as a variable, and once you reload Module Presets Editor, presets you saved within this folder will be listed in the UI.  You will not need to repeat this step when restarting Block, nor when restarting Maya, this prefernce will be saved locally within Mansur-Rig's preferences folder.  You can add as many paths as you require.  Also, you can always go back to this dropdown menu to edit your custom preset paths.  Custom Presets Paths UI </p>"},{"location":"userGuides/Module-Preset-Editor/#export-workflow","title":"Export Workflow","text":"<p><ol> <li>Edit your module settings to best represent your preset.</li> <li>Open the module preset editor.</li> <li>Click Export.</li> <li>Input required information in the prompted dialog (Author, Preset Description).</li> <li>Press Export in the dialog.</li> <li>Chose the file name and the location where you ant to save it.</li> <li>Your new preset is now saved and ready to be re-used.</li> </ol> </p>"},{"location":"userGuides/Module-Preset-Editor/#import-workflow","title":"Import Workflow","text":"<p><ol> <li>Open any module's settings.</li> <li>Open the module preset editor.</li> <li>It is recommended to follow Preferences Setup guide above to load custom presets folders information into the UI.</li> <li>Select the preset you want to use.</li> <li>Click Load button.</li> <li>The settings window will now consist of all data saved in your selected preset.</li> <li>To finalize, click Update Settings in the module settings window to apply your changes.</li> <li>Alternatively, if your preset isn't found in the UI, you can manually load it from file using the Import button.</li> </ol> </p>"},{"location":"userGuides/Module-Preset-Editor/#legend","title":"Legend","text":"<p> Module Preset Editor Legend </p> <ol> <li> Available Presets- All available presets, within all Module Presets Paths. Only relevant module preset types will be displayed. Meaning that if you loaded the preset editor from an FKChain type module settings window, only presets saved for FKChain type module will be displayed.    <li> Preset Author and Description- Information about the current selected module preset.    <li> Load- Update the module settings window with the currently selected preset.    <li> Import- Import module preset from a file.    <li> Export- Export the current module settings values into a module preset file.    <li> Close- Close Dialog."},{"location":"userGuides/Naming-Convention/","title":"Naming Convention","text":"<p>Mansur-Rig is following strict naming convention rules. These rules are followed throught the toolset and in most cases the provided tools will handle the names so you won't have to.  The naming convention format is as follows (components seperated by an underscore):  Component Valid Examples Comments Constructed Name Side c, l, r Lower case. Only the three listed components are valid. l_ ... Body arm, spine, frontHair, indexFinger ANY camel-cased name is valid. l_arm_ ... Alpha ID A, F, KB, DAC, G All upper case, base 26, up to 3 letters. l_arm_A ... Component ID 001, 039, 014, 005, 147 Integer index, represneted in 3 numbers. This component isn't seperated l_arm_A001 ... Suffix ctrl, grp, plg, blkRig This suffix represents the type of object. l_arm_A001_ctrl </p>"},{"location":"userGuides/Scripted-Builds/","title":"Scripted Builds","text":"<p>If you need to operate on Block rigs externaly, use this article to guide you through the few simple Python commands in order to do so. In some cases, you may need to operate on Block rigs extarnaly, without using Block UI. Use the simple steps described below to operate on any rig using python commands.</p>"},{"location":"userGuides/Scripted-Builds/#mansur-rig-python-libraries","title":"Mansur-Rig Python Libraries","text":"<p>In order to use Mansur-Rig's external commands, you'll first need to import the Python module containing the methods.</p> Python module import <pre><code>from mansur.block.core import blockUtility as blkUtils\n</code></pre> <p>This simple import command will import Mansur-Rig's Block-Utility library, which contains the methods you'll require.</p>"},{"location":"userGuides/Scripted-Builds/#global-methods","title":"Global methods","text":"<p>Use these methods to operate on Block Rig's or specific components within it:</p> <ul> <li> gatherMnsRigObject() - Use this command to gather a MnsRig class object to operate on.   </li> <li> collectPartialModules() - Most of Block's main methods can operate on an entire rig, as well as module branches, and indevidual modules.          In order to utelize this ability, use this method to collect the modules you want to operate on.          This method will collect module root objects based on the input data.     In case fromNodes argument is Null, this method will return data based on the current scene selection.          fromNodes is a list argument.      In case any input is passed, this method will attempt to aquire the modules to construct based on the mode selected.     You can pass in any Block-Node names into this method.          mode 0 = ALL          mode 1 = Branch          mode 2 = Module   </li> <li> constructRig(fromNodes = [], mode = 0) - Use this simple command to construct a rig using a Python command.   </li> <li> deconstructRig(fromNodes = [], mode = 0) - Use this simple command to deconstruct a rig using a Python command.   </li> </ul>"},{"location":"userGuides/Scripted-Builds/#examples","title":"Examples","text":"Constructing a Rig from selection <pre><code># Library import\nfrom mansur.block.core import blockUtility as blkUtils\n\n#construct command with default arguments- selection based(fromNodes = Null, mode = 0)\nblkUtils.constructRig()\n</code></pre> Constructing a Specific Rig based on a Rig-Top node name <pre><code># Library import\nfrom mansur.block.core import blockUtility as blkUtils\n\n#construct command with input fromNodes argument, with default construction mode = 0\nblkUtils.constructRig(\"c_maleDummy_A001_blkRig\")\n</code></pre> Constructing a Specific Rig based on a Rig-Top node name, in branch mode <pre><code># Library import\nfrom mansur.block.core import blockUtility as blkUtils\n\n#construct command with input fromNodes argument, with branch construction mode = 1\nblkUtils.constructRig(\"c_maleDummy_A001_blkRig\", 1)\n</code></pre> Constructing a single component of a rig <pre><code># Library import\nfrom mansur.block.core import blockUtility as blkUtils\n\n#construct command with input fromNodes argument, with module construction mode = 2\nblkUtils.constructRig(\"l_arm_A001_rCtrl\", 2)\n</code></pre> Deconstructing a Rig from selection <pre><code># Library import\nfrom mansur.block.core import blockUtility as blkUtils\n\n#construct command with default arguments- selection based(fromNodes = Null, mode = 0)\nblkUtils.deconstructRig()\n</code></pre>"},{"location":"userGuides/Scripted-Builds/#altering-module-settings-via-the-api","title":"Altering Module settings via the API","text":"<p><ol> <li>Some settings require an action post change (like joint structure members), so changing the attributes only isn't sufficiant, you need to run an update command.</li> <li>The update command has a few requirements - settings update need to come in a dictionary format, passed in with a double asterisk (**) keyword arguments. The settings must contain a \"settingsHolder\" definition, which is the root guide, a \"rigTop\" which is the rig top node, and \"originalArguments\" dictionary that define the settings format, in order to update the module correctly.</li> <li>Some settings have very specific data format (like channel control) and you'll need to be very accurate when changing settings of this type.</li> </ol></p> Altering Module settings via the API <pre><code># Libraries import\nfrom mansur.block import blockBuildUI\nfrom mansur.core import utility as mnsUtils\nblockWin = blockBuildUI.MnsBlockBuildUI()\n\n#defining mandatory variables for the update settings command\nrigTop = mnsUtils.validateNameStd(\"c_blkChar_A001_blkRig\")\nrootGuide = mnsUtils.validateNameStd(\"c_FKChain_A001_rCtrl\")\norigArgs, split = blockWin.getModuleSettings(rootGuide)\n\n#creating the settings dictionary\nsettings = {\"settingsHolder\": rootGuide, #mandatory\n            \"origArgs\": origArgs, #mandatory\n            \"rigTop\": rigTop, #mandatory\n            \"doInterpolationJoints\": True, #exmaple change\n            \"interpolationJoints\": 10} #example change\n\n#running the update command\nblockWin.updateSettings(**settings)\n</code></pre> <p>In this example, I created an FK chain module with all default settings.  Now I want to update the settings and change \"doInterpJoints\" and the number of interpJoints.  I passed all required data, and then the settings I want to change.  Once you run this code, you'll see that not only the attributes have changed, the joint structure is being rebuilt correctly as these are jointStruct members attributes.</p>"},{"location":"userGuides/Spaces-IK-FK-Tool/","title":"Spaces IK FK Tool","text":"<p>This simple animation tool was created to allow animators to space switch and IK-&gt;FK switch easily.  This tool is selection based. Please select controls to enable relevant capabilities.  For spaces, simply select the controls you want to act upon, choose your target spaces, and press \"switch\". This will switch the space, while maintaining the controls's transforms, using keys created automatically.  For Limbs, simply select any control/s for the limbs that you wish to act upon, and press the relevant button- To-IK or To-FK.  This will switch the limb/controls to the selected state.  This tool also includes Auto-Key switches, as well as a sequence and bake modes.  </p>"},{"location":"userGuides/Spaces-IK-FK-Tool/#spacesik-fk-tool-load","title":"Spaces/IK-FK Tool Load","text":"<p> Spaces/FK-IK Tool Menu Item </p>"},{"location":"userGuides/Spaces-IK-FK-Tool/#how-to-use","title":"How to use","text":"<p>The spaces tool is quite standard, but if ever you get confused, here are a few guidelines.  Spaces/FK-IK Tool Legend <ol> <li>Auto-Key Button - When this button is checked, keys will be inserted automatically when performing actions. <li>Bake Button - When this button is checked, the auto-key button is checked, and the sequence mode is selected, every frame within the frame range selected will be keyed- \"baking\" the switch for the selected frame-range, <li>Current-Frame/Sequence Mode - In case the \"Current-Frame\" mode is selected, any action will be performed on the current frame selected. In case \"Sequence\" mode is selected, any action will be performed on the selected frame-range. <li>Frame-Range Section - This section will determine the frame range to act upon, when \"Sequence\" is selected. <li>Spaces/IK-FK Tabs - This tool has two modes- Spaces, and IK-FK. Choose the relevant tab based on the action you are interested in. Please read the two next bullets (6A &amp; 6B) for additional information on both modes. <li>Tool Modes:     <ol> <li>Spaces-Mode - This mode is for switching control spaces. In contrast of switching a space using the channel box, this tool will switch to the selected space while maintaining the control's transform.         <ul> <li>On Current-Frame Mode - The space of the control will be switched for the current frame, maintaining the control's transform. When \"Auto-Key\" button is checked, a key of the current frame will be inserted automatically. <li>On Sequence Mode: <ul> <li>On Non-Bake mode:  - A key will be inserted for every frame the space-switch attribute in question has a key, within the selected range. The current tranform for the control/s in question will be maintained.</li> <li>On Bake mode:  - A key will be inserted for every frame within the selected range. The current tranform for the control/s in question (at the relevant frame) will be maintained- \"Baking\" the switch.</li> </ul> <li>IK-FK-Mode - This mode is for switching IK-FK modes for limbs.  In contrast of switching FK-IK modes for limbs using the channel box, this tool will switch to the selected kinematics while maintaining the limb controls' transforms. <ul> <li>On Current-Frame Mode - The kinematic state of the limb will be switched for the current frame, maintaining the limb controls' transform. When \"Auto-Key\" button is checked, a key of the current frame will be inserted automatically. <li>On Sequence Mode: <ul> <li>On Non-Bake mode:  - A key will be inserted for every frame the kinematic-switch attribute in question has a key, within the selected range. The current limb controls' in question will be maintained.</li> <li>On Bake mode:  - A key will be inserted for every frame within the selected range. The current limb controls' in question (at the relevant frame) will be maintained- \"Baking\" the switch.</li> <li>Select Host:  - Select the kinematic switch attribute control holder for the selected limb modules.</li> </ul>"},{"location":"userGuides/Spring-Tool/","title":"Spring Tool","text":"<p>In Mansur-Rig, springs are extremely easy to create. Using this tool, you'll be able to control spring values comfortably while animating.  This guide will cover the entire tool and how to use it.  </p>"},{"location":"userGuides/Spring-Tool/#spring-tool-load","title":"Spring Tool Load","text":"<p> Spring Tool Menu Item </p>"},{"location":"userGuides/Spring-Tool/#how-to-use","title":"How to use","text":"<p>The spring tool is quite intuative, but if ever you get confused, here are a few guidelines.  Spring Tool Legend <ol> <li>Rig List - The tool is being initalized everytime you open it. When it is initialized, it first looks for any Block-Rigs that exist within the scene (referenced or not). The found rigs will be listed at the puppet combo box at the top of the UI. <li>Spring Nodes List - Once a rig is selected from the list, a list of spring nodes associated with the selected rig will be displayed. You can select multiple items, the edit section will be updated according to the selection. In case you have multiple nodes selected, remember that edits within the UI will affect all selected nodes. <li>Display - Use these view filters to display only the nodes you need. <li>Auto-Symmetry - When this checkbox is selected, the tool will attempt to find a symmetrical spring node within the rig, and match all attribute changes to it as well, automatically. If a symmetrical node is found, it is painted light-green within the list above. <li>Common Attributes - This edit section is the common attributes. These attributes exists for all spring node types. Any changes made will affect all selected nodes. <li>Specific Attributes - This edit section is the updated based on the selected node(s) type(s). Based on the type(s) selected, an edit UI will be displayed. Any changes made will affect all selected nodes."},{"location":"userGuides/System-Requirements/","title":"System Requirements","text":""},{"location":"userGuides/System-Requirements/#compatible-platforms","title":"Compatible Platforms","text":"<ul> <li>Windows</li> <li>Linux (Tested on CentOS 7.9)</li> </ul>"},{"location":"userGuides/System-Requirements/#compatible-maya-versions","title":"Compatible Maya versions","text":"<p> Maya 2018 - 2022 Maya 2023 Maya 2024 WinLinux WinLinux WinLinux 2.4.0 \u2726\u2726 \u2726\u2726 \u2726\u2726 2.3.0 \u2726\u2726 \u2726\u2726 \u2726\u2726 2.2.0 \u2726\u2726 \u2726\u2726 \u2726\u2726 2.1.0 \u2726\u2726 \u2726\u2726 2.0.0 \u2726\u2726"},{"location":"userGuides/System-Requirements/#windows-system-requirements","title":"Windows - System requirements","text":"<ul> <li>Microsoft Visual C++ Redistributable for Visual Studio 2015-2022</li> </ul> <p>Important</p> <p>Microsoft Visual C++ Redistributable for Visual Studio 2015-2022 is a part of the native Maya installation. In most cases, no action is required to use Mansur-Rig in Maya. In some rare cases (incomplete Maya installation), if missing this component needs to be installed manually.</p>"},{"location":"userGuides/System-Requirements/#maya-2022-2023-requirements","title":"Maya 2022, 2023 requirements","text":"<ol> <li>Mansur-Rig requires a native Maya python module - PyMel. For an unknown reason, Maya 2022 (and above) installation has this module for Python 3 presented as an optional feature. Worse then that, it is un-checked by default:</li> Maya 2022 installation dialog example <li>In case you installed Maya 2022 (and above) without this checked, Mansur-Rig manu would not show up once you install it. To check whether you have this component installed, simply run 'import pymel.core' (without the qoutes) in a Python tab within Maya's script editor. if an error is logged, it means this reuqired component is NOT installed, and Mansur-Rig will not function. If this is the case for you, you have a few options available to resolve this issue: <ol> <li>Install PyMel for Python 3 on an existing Maya installation using this guide. <li>Re-installing Maya, making sure you tick the PyMel checkbox.</li>"},{"location":"userGuides/System-Requirements/#maya-2024-requirements","title":"Maya 2024 requirements","text":"<ol> <li>Mansur-Rig requires a native Maya python module - PyMel. For an unknown reason, Maya 2024 no longer presents PyMel module installation as an option for users.</li> <li>Please use the following guide to install it: <ol> <li>Install PyMel for Python 3 on an existing Maya 2024 installation."},{"location":"userGuides/The-Picker/","title":"The Picker","text":""},{"location":"userGuides/The-Picker/#user-guide","title":"User-Guide","text":""},{"location":"userGuides/The-Picker/#example","title":"Example","text":"<p> Picker - Body Tab Example </p> Picker - Face Tab Example"},{"location":"userGuides/The-Picker/#general","title":"General","text":"<p><ol> <li>Move between characters using to top combo box.</li> <li>When a character is first drawn into the picker, it may take a few seconds, but once it is drawn, you will be able to switch back to it intantly.</li> <li>Selected controls will be displayed with gray background, and a light-blue outline.</li> <li>Scene selection will automatically update the picker selection, and vice versa.</li> </ol></p>"},{"location":"userGuides/The-Picker/#selection","title":"Selection","text":"<p> Picker - Selection Legend </p>"},{"location":"userGuides/The-Picker/#keyboard-shortcuts","title":"Keyboard Shortcuts","text":"<p> Picker - Keyboard Shortcuts Legend </p>"},{"location":"userGuides/The-Picker/#navigation","title":"Navigation","text":"<p> Picker - Navigation Legend </p>"},{"location":"userGuides/Version-Updates/","title":"Version Updates","text":"<p>For your ease of use, Mansur-Rig is equipped with a Version-Manager tool  </p>"},{"location":"userGuides/Version-Updates/#how-to-use-the-version-manager","title":"How to use the Version-Manager","text":"<p> <ol> <li>Via Mansur main menu, click the Version-Manager item to open the tool.  <li>Current Mansur-Rig version will be visibly marked with a green V icon.</li> <li>To upgrade/downgrade to a version, you will need to make sure the version is Install Available. In case it isn't, you can easily download it using the download button. <li>Once a version is Install Available, simply select the version you wish to upgrade/downgrade to, and click Install. <li>Once the installation is complete, a message will be displayed stating the process  finished.</li> <li>Restart Maya</li> <li>Version-Update is complete.</li> <p>Manual-verison-updates</p> <p>In case you wish to manually change a version, please follow the Install Guide using any version of your choosing. Installing a new version of Mansur-Rig when any version is installed will result in an upgrade/downgrade to the newly installed version.</p>"},{"location":"userGuides/Volume-Joints/","title":"Volume Joints","text":""},{"location":"userGuides/Volume-Joints/#user-guide","title":"User-Guide","text":"<p>Create volume joints to refine and enhence you deformations. These joints are driven by 2 parent &amp; child joints. Using the new UI, you can choose actions (translation/scale) to take for every angle direction between the 2 joint drivers.</p>"},{"location":"userGuides/Volume-Joints/#example","title":"Example","text":"<p> Volume-Joints- Example </p>"},{"location":"userGuides/Volume-Joints/#ui","title":"UI","text":"<p>Access this UI via Mansur-Rig main Maya menu  Menu Entry </p>"},{"location":"userGuides/Volume-Joints/#legend","title":"Legend","text":"<p> Volume-Joints- UI </p> <ol> <li> Volume-Joint List- List of all Volume joints within the current scene. Use the Refresh(4) button to refresh.  <li> Create- Creation button.   This will create a volume joint, based on the current scene selection.    The selected object should be the \"child\" item- meaning, if you want to create a volume joint for a knee, select an object relating to the lower leg section. This will create a volume joint between the upper-leg, and lower leg.    Valid selection object types are- Joints, Guides, Ctrls. In case a joint wasn't selected, the system will attemp to retreive the joint related to the selection. If the system did not find a related joint, nothing will be created.    Important note: Volume joints have a \"Rest state\"- which is the base state or \"Zero\" state- where nothing is triggered- when creating a volume joint, the current state will be set as the rest state. In case you want to update the rest position, use the \"Set current as rest position\" button undeer the General tab when the requested volume-joint is selected. In case Auto-Symmetry(7) is selected, the system will attempt to create a symmetrical volume-joint (if relevant).   The amount of Volume-Joints is unlimited. </li> <li> Delete- Delete the selected volume joint.   In case Auto-Symmetry(7) is selected, the system will attempt to delete the symmetrical volume-joint (if one exists).  <li> Refresh- Refresh the UI. Rescan the current scene.  <li> Symmetrize- Attempt to create/update a symmetrical volume joint based on the selected colume joint.   <li> Symmetrize ALL- Attempt to create/update ALL volume joints in the scene.  <li> Auto-Symmetry- In case this is checked ON, all actions will attempt to symmetrize.   That includes- Creation, Deletion, Symmetry, any value edit.   This is recommended to be kept on.  <li> Current-State-Display- This section was design to minimize confusion when dealing with volume joints.    Based on the UI-selected volume joint, this display will update based on the current state of the angle relationship between the two master (source) joints.   When editting a volume joint's behaviour, it is very convenient to visually determine the current angle state the sources are in.   Since the angles are based on the guide's original orientation, this changes between modules.   For example, if you need to create a volume joint for an elbow, create it in rest-state, the \"bend\" the elbow- the display will indicate which direction the elbow bend is set to, so you can open the correct dropdown menu to edit the behaviour.  <li> Edit Section- This is where the behaviour for each volume joint is set.   <ul> <li>       General Section-        <ul> <li> Rotation-Blend attribute, which will determine the orientation blend between the parent and the child joints for the selected volume joint.         </li> <li> Set Current As Rest utility.         </li> </ul> </li> <li>       Rest Section-       <ul> <li> Rest-Translation attributes         </li> </ul> </li> <li>       All Angle Sections-       <ul> <li> Translation-Target attributes         </li> <li> Scale-Target attributes         </li> <li> Translation-Limit attributes         </li> <li> Scale-Limit attributes         </li> <li> Current Values display         </li> </ul> </li> </ul>"},{"location":"userGuides/installation/","title":"Installation","text":"<ul> <li>Go to Mansur-Rig.com and create an account (if you haven't already).</li> <li>Log in to your account.</li> <li>Subscribe to any plan that fits you best</li> <li>Download the latest version of Mansur-Rig.</li> <li>Extract the .zip library to your preferred location.</li> <li>If you have another version already installed, preferably extract to the same location (version root folder should be placed in the same root folder of the previous version) </li> <li>.../ANY_DIRECTORY<ul> <li>.../ANY_DIRECTORY/mansurRig_1.0.1</li> <li>.../ANY_DIRECTORY/mansurRig_1.0.2</li> <li>.../ANY_DIRECTORY/mansurRig_1.0.3</li> </ul> </li> <li>Go into the main version directory</li> <li>Drag and Drop the \"mansurRig_DragAndDrop_install.mel\" into any supported Maya version</li> <li>Follow the prompt instructions</li> <li>Restart Maya</li> </ul> <p>Updates</p> <p>Please make sure to update as appropriate.  Version Updates Guide </p>"},{"location":"userGuides/installation/#manual-installation","title":"Manual Installation","text":"<ul> <li>Download and extract Mansur-Rig as described above. </li> <li>For the target Maya version, locate \"Maya.env\" file. For example (On Windows): \"C:\\Users\\xxx\\Documents\\maya\\2022\\Maya.env\"</li> <li>Open the file for editting using any text editor software (e.g. Notepad)</li> <li>Insert the following variable, changing the directory to your Mansur-Rig extracted version location: MAYA_MODULE_PATH = D:\\mansurRig\\mansurRig_1.3.6</li> </ul>"},{"location":"userGuides/installation/#uninstallation","title":"Uninstallation","text":"<ul> <li>Locate any installation directory of Mansur-Rig in your file system</li> <li>Go into the main version (any version) directory</li> <li>Drag and Drop the \"mansurRig_DragAndDrop_UNINSTALL.mel\" into any supported Maya version</li> <li>Follow the prompt instructions</li> <li>Restart Maya</li> </ul>"},{"location":"userGuides/installation/#linux-notes","title":"Linux Notes","text":"<ul> <li>As opposed to the Windows installer, the Linux version will install Mansur-Rig on the choosen maya version only. </li> <li>The Linux installer is using the local Maya.env file to append the new envioronment variable instead of installing a system-wide persistant variable, as the installer can not assume system write permissions.</li> <li>In case you want to install Mansur-Rig on multiple versions of Maya, please repeat the installation (drag-drop) on every required Maya version.</li> </ul>"},{"location":"userGuides/license/","title":"License","text":"<p>End User License Agreement:  Mansur-Rig's EULA </p> <p>Privacy-Policy:  Mansur-Rig's Privacy-Policy </p>"},{"location":"userGuides/tutorials/Creating-A-Picker/","title":"Creating A Picker","text":""},{"location":"userGuides/tutorials/Creating-A-Picker/#video-overview","title":"Video Overview","text":"<p> A picker can be the difference between a good rig, and a great one! In this video I want to show you how you can easily create a picker for your rigs, using Mansur-Rig. </p>"},{"location":"userGuides/tutorials/Creating-A-Picker/#covered-subjects-in-this-video","title":"Covered subjects in this video:","text":"<ul> <li>Picker Layout</li> <li>Picker Background Images</li> <li>Creating a related PLG</li> <li>Creating a Free-PLG</li> <li>Adjusting PLG Settings</li> <li>Body/Facial tabs</li> <li>Delivery</li> <li>Creating FK-IK Switch PLG</li> </ul>"},{"location":"userGuides/tutorials/Creating-A-Picker/#picker-images-naming-convention","title":"Picker Images Naming Convention","text":"<ul> <li>Picker-Body-Image: \"%rig_name%_pickerBody.png\"</li> <li>Picker-Face-Image: \"%rig_name%_pickerFace.png\"</li> <li>Picker-Thumbnail-Image: \"%rig_name%_pickerThumbnail.png\"  Delivery Folder Example </li> </ul>"},{"location":"userGuides/tutorials/Variable-FK-Tail/","title":"Variable FK Tail","text":""},{"location":"userGuides/tutorials/Variable-FK-Tail/#video-overview","title":"Video Overview","text":"<p> In this Mansur-Rig speed-rigging tutorial, we are going to rig a tail with a Variable-FK setup, using the FKChain module in about 3 minutes. To make things even nicer we will add a spring behavior to the tail with only a few clicks. </p>"},{"location":"userGuides/tutorials/Variable-FK-Tail/#covered-subjects-in-this-video","title":"Covered subjects in this video:","text":"<ul> <li>Rigging a Variable-FK-Tail from scratch</li> </ul>"},{"location":"userGuides/tutorials/mansurRig101/01_Introduction/","title":"01 Introduction","text":""},{"location":"userGuides/tutorials/mansurRig101/01_Introduction/#series-overview","title":"Series Overview","text":"<p> Welcome to Mansur-Rig 101 Tutorial Series! In this series i'm going to go over the basics of how to use Mansur-Rig to build your puppets. We are going to build a complete character from the ground up, so at the end of this series you will have a clear idea on how to use the product. </p>"},{"location":"userGuides/tutorials/mansurRig101/01_Introduction/#covered-subjects-in-this-video","title":"Covered subjects in this video:","text":"<ul> <li>Product overview</li> <li>Global Flow</li> </ul>"},{"location":"userGuides/tutorials/mansurRig101/01_Introduction/#covered-subjects-in-this-series","title":"Covered subjects in this series:","text":"<ul> <li>Product overview</li> <li>Global Flow</li> <li>Block UI Sections</li> <li>Rig Top Creation</li> <li>Rig Top Settings</li> <li>Custom Scripts Tab</li> <li>Module Creation</li> <li>Module Settings Window</li> <li>Guides Creation</li> <li>Rig Top Creation</li> <li>Rig Top Sub Groups</li> <li>Root Guide</li> <li>Root Joint</li> <li>Joint-guide relationship</li> <li>Selection Dependence</li> <li>Guide Parenting</li> <li>Module Creation</li> <li>Number of guides Attribute</li> <li>Tool tips and documentation of modules</li> <li>Module Layers</li> <li>FKChain Module - embedded IK layer </li> <li>Anim Tech control</li> <li>Attribute Host</li> <li>controls scale multiplier</li> <li>Limb Module</li> <li>Custom Guides </li> <li>Foot module</li> <li>Spaces/space switching</li> <li>Guide Creation Orientation</li> <li>Space splitting</li> <li>Meta Module</li> <li>Finger Splays</li> <li>Guides editting Utilities</li> <li>Duplicate Module</li> <li>duplicate Branch</li> <li>symmetrize branch</li> <li>Promote module</li> <li>Add/Remove Guides</li> <li>guide posing</li> <li>Control shapes</li> <li>Control shapes symmetry</li> <li>Control shapes extract</li> <li>controls grouping</li> <li>Controls default values</li> <li>Picker Basics</li> <li>Documentation page</li> </ul>"},{"location":"userGuides/tutorials/mansurRig101/02_The-Basics/","title":"02 The Basics","text":""},{"location":"userGuides/tutorials/mansurRig101/02_The-Basics/#video-overview","title":"Video Overview","text":"<p> In this video, we are going to cover Block UI's basics, Rig-Creation Settings, Module settings, and some icon indications to keep an eye out for. </p>"},{"location":"userGuides/tutorials/mansurRig101/02_The-Basics/#covered-subjects-in-this-video","title":"Covered subjects in this video:","text":"<ul> <li>Block UI Sections</li> <li>Rig Top Creation</li> <li>Rig Top Settings</li> <li>Custom Scripts Tab</li> <li>Module Creation</li> <li>Module Settings Window</li> <li>Guides Creation</li> </ul>"},{"location":"userGuides/tutorials/mansurRig101/03_Getting-Started/","title":"03 Getting Started","text":""},{"location":"userGuides/tutorials/mansurRig101/03_Getting-Started/#video-overview","title":"Video Overview","text":"<p> We're finally going to get started with rigging our character.  </p>"},{"location":"userGuides/tutorials/mansurRig101/03_Getting-Started/#covered-subjects-in-this-video","title":"Covered subjects in this video:","text":"<ul> <li>Rig Top Creation</li> <li>Rig Top Sub Groups</li> <li>Root Guide</li> <li>Root Joint</li> <li>Joint-guide relationship</li> <li>Selection Dependence</li> <li>Guide Parenting</li> <li>Module Creation</li> <li>Number of guides Attribute</li> <li>Tool tips and documentation of modules</li> <li>Module Layers</li> <li>FKChain Module - embedded IK layer </li> <li>Anim Tech control</li> <li>Attribute Host</li> </ul>"},{"location":"userGuides/tutorials/mansurRig101/04_Building-The-Leg-And-Foot/","title":"04 Building The Leg And Foot","text":""},{"location":"userGuides/tutorials/mansurRig101/04_Building-The-Leg-And-Foot/#video-overview","title":"Video Overview","text":"<p> In this video, we are going to build the leg &amp; foot, and learn more about custom guides and space switching in Block. </p>"},{"location":"userGuides/tutorials/mansurRig101/04_Building-The-Leg-And-Foot/#covered-subjects-in-this-video","title":"Covered subjects in this video:","text":"<ul> <li>controls scale multiplier</li> <li>Limb Module</li> <li>Custom Guides </li> <li>Foot module</li> <li>Spaces/space switching</li> </ul>"},{"location":"userGuides/tutorials/mansurRig101/05_Building-The-Arm-And-Fingers/","title":"05 Building The Arm And Fingers","text":""},{"location":"userGuides/tutorials/mansurRig101/05_Building-The-Arm-And-Fingers/#video-overview","title":"Video Overview","text":"<p> In this video, we are going to set up the arm and fingers as well as learn about space splitting and a few more Block components. </p>"},{"location":"userGuides/tutorials/mansurRig101/05_Building-The-Arm-And-Fingers/#covered-subjects-in-this-video","title":"Covered subjects in this video:","text":"<ul> <li>Guide Creation Orientation</li> <li>Space splitting</li> <li>Meta Module</li> <li>Finger Splays</li> </ul>"},{"location":"userGuides/tutorials/mansurRig101/06_Completing-The-Guides/","title":"06 Completing The Guides","text":""},{"location":"userGuides/tutorials/mansurRig101/06_Completing-The-Guides/#video-overview","title":"Video Overview","text":"<p> In this video, we are going to finalize our guides, learn about Block's guide editing utilities, and start deforming our geometry. </p>"},{"location":"userGuides/tutorials/mansurRig101/06_Completing-The-Guides/#covered-subjects-in-this-video","title":"Covered subjects in this video:","text":"<ul> <li>Guides editting Utilities</li> <li>Duplicate Module</li> <li>duplicate Branch</li> <li>symmetrize branch</li> <li>Promote module</li> <li>Add/Remove Guides</li> </ul>"},{"location":"userGuides/tutorials/mansurRig101/07_Puppet-Finish/","title":"07 Puppet Finish","text":""},{"location":"userGuides/tutorials/mansurRig101/07_Puppet-Finish/#video-overview","title":"Video Overview","text":"<p> In this video, we are going to finish our puppet and finalize it for delivery. We are going to create a T-Pose for our guides, adjust the control shapes, and set our default values. </p>"},{"location":"userGuides/tutorials/mansurRig101/07_Puppet-Finish/#covered-subjects-in-this-video","title":"Covered subjects in this video:","text":"<ul> <li>guide posing</li> <li>Control shapes</li> <li>Control shapes symmetry</li> <li>Control shapes extract</li> <li>controls grouping</li> <li>Controls default values</li> <li>Picker Basics</li> </ul>"},{"location":"userGuides/tutorials/mansurRig101/08_Conclusion/","title":"08 Conclusion","text":""},{"location":"userGuides/tutorials/mansurRig101/08_Conclusion/#video-overview","title":"Video Overview","text":"<p> Thanks for watching the series! Any questions and feedback are most welcome in the comments! </p>"},{"location":"userGuides/tutorials/mansurRig_FacialRigging/01_Intro/","title":"01 Intro","text":""},{"location":"userGuides/tutorials/mansurRig_FacialRigging/01_Intro/#video-overview","title":"Video Overview","text":"<p> Welcome to Mansur-Rig's Facial Rigging Tutorial Series! Learn how to build facial rigs using Mansur-Rig easily and efficiently! </p>"},{"location":"userGuides/tutorials/mansurRig_FacialRigging/01_Intro/#covered-subjects-in-this-video","title":"Covered subjects in this video:","text":"<ul> <li>Intro</li> <li>Credits</li> <li>Series Overview</li> <li>Material and Support</li> </ul>"},{"location":"userGuides/tutorials/mansurRig_FacialRigging/02_Rigging-The-Eyes/","title":"02 Rigging The Eyes","text":""},{"location":"userGuides/tutorials/mansurRig_FacialRigging/02_Rigging-The-Eyes/#video-overview","title":"Video Overview","text":"<p> In this video, we are going to start rigging the eyes. </p>"},{"location":"userGuides/tutorials/mansurRig_FacialRigging/02_Rigging-The-Eyes/#covered-subjects-in-this-video","title":"Covered subjects in this video:","text":"<ul> <li>Eye Setup</li> <li>Global IK Aim Control</li> </ul>"},{"location":"userGuides/tutorials/mansurRig_FacialRigging/03_Rigging-The-Eyelids/","title":"03 Rigging The Eyelids","text":""},{"location":"userGuides/tutorials/mansurRig_FacialRigging/03_Rigging-The-Eyelids/#video-overview","title":"Video Overview","text":"<p> In this video, we are going to rig the eyelids </p>"},{"location":"userGuides/tutorials/mansurRig_FacialRigging/03_Rigging-The-Eyelids/#covered-subjects-in-this-video","title":"Covered subjects in this video:","text":"<ul> <li>Eyelids Setup</li> <li>Input Mesh Guidelines</li> <li>Creating The Module</li> <li>Skinning The Eyelids</li> <li>Finalizing The Setup</li> </ul>"},{"location":"userGuides/tutorials/mansurRig_FacialRigging/04_Rigging-The-Eyelashes/","title":"04 Rigging The Eyelashes","text":""},{"location":"userGuides/tutorials/mansurRig_FacialRigging/04_Rigging-The-Eyelashes/#video-overview","title":"Video Overview","text":"<p> In this video, we are going to rig the eyelashes </p>"},{"location":"userGuides/tutorials/mansurRig_FacialRigging/04_Rigging-The-Eyelashes/#covered-subjects-in-this-video","title":"Covered subjects in this video:","text":"<ul> <li>Eyelashes Setup</li> <li>Skinning The Eyelashes</li> </ul>"},{"location":"userGuides/tutorials/mansurRig_FacialRigging/05_Finalizing-The-Eye/","title":"05 Finalizing The Eye","text":""},{"location":"userGuides/tutorials/mansurRig_FacialRigging/05_Finalizing-The-Eye/#video-overview","title":"Video Overview","text":"<p> In this video, we are going to finalize our eye rig </p>"},{"location":"userGuides/tutorials/mansurRig_FacialRigging/05_Finalizing-The-Eye/#covered-subjects-in-this-video","title":"Covered subjects in this video:","text":"<ul> <li>Improving The Eyelids Range</li> <li>Pupil &amp; Iris Shapes</li> <li>Control Shapes Adjustments</li> </ul>"},{"location":"userGuides/tutorials/mansurRig_FacialRigging/06_Rigging-The-Eyebrows/","title":"06 Rigging The Eyebrows","text":""},{"location":"userGuides/tutorials/mansurRig_FacialRigging/06_Rigging-The-Eyebrows/#video-overview","title":"Video Overview","text":"<p> In this video, we are going to rig the eyebrows. In this video, I also want to take you through my thought process when rigging the eyebrows. I want to show you that in most cases, there is more then one solution to rig a component in Block. So I want to create two types of setups for the eyebrows, I'll let you decide which one you think is best- let me know in the comments. That will also be a good chance to see a few more attributes and features we didn't use so far. </p>"},{"location":"userGuides/tutorials/mansurRig_FacialRigging/06_Rigging-The-Eyebrows/#covered-subjects-in-this-video","title":"Covered subjects in this video:","text":"<ul> <li>Eyebrows Setup A</li> <li>Surface Follow Feature</li> <li>Eyebrows Setup B</li> </ul>"},{"location":"userGuides/tutorials/mansurRig_FacialRigging/07_Nose-And-Cheek-Rig/","title":"07 Nose And Cheek Rig","text":""},{"location":"userGuides/tutorials/mansurRig_FacialRigging/07_Nose-And-Cheek-Rig/#video-overview","title":"Video Overview","text":"<p> In this video, we are going to rig the nose and cheek. </p>"},{"location":"userGuides/tutorials/mansurRig_FacialRigging/07_Nose-And-Cheek-Rig/#covered-subjects-in-this-video","title":"Covered subjects in this video:","text":"<ul> <li>Rigging The Nose And Cheek</li> <li>Extra-Channels Feature</li> <li>Cheek Puff Shapes</li> </ul>"},{"location":"userGuides/tutorials/mansurRig_FacialRigging/08_Rigging-The_Mouth/","title":"08 Rigging The Mouth","text":""},{"location":"userGuides/tutorials/mansurRig_FacialRigging/08_Rigging-The_Mouth/#video-overview","title":"Video Overview","text":"<p> In this video, we are going to rig the lips and inner mouth. </p>"},{"location":"userGuides/tutorials/mansurRig_FacialRigging/08_Rigging-The_Mouth/#covered-subjects-in-this-video","title":"Covered subjects in this video:","text":"<ul> <li>Lips Setup</li> <li>Skinning The Lips</li> <li>Cheek Raise Feature</li> <li>Inner Mouth Setup</li> <li>Mouth Rig Review</li> </ul>"},{"location":"userGuides/tutorials/mansurRig_FacialRigging/09_Tweakers-And-Symmetry/","title":"09 Tweakers And Symmetry","text":""},{"location":"userGuides/tutorials/mansurRig_FacialRigging/09_Tweakers-And-Symmetry/#video-overview","title":"Video Overview","text":"<p> In this video, we are going to create additional facial tweak controls, and symmetrize all of our modules. </p>"},{"location":"userGuides/tutorials/mansurRig_FacialRigging/09_Tweakers-And-Symmetry/#covered-subjects-in-this-video","title":"Covered subjects in this video:","text":"<ul> <li>Mesh Tweaker Types Overview</li> <li>Creating The Tweakers</li> <li>Symmetry Types Overview</li> <li>Modules Symmetry</li> <li>Skin Weights Mirror</li> <li>Symmetry Finalize</li> </ul>"},{"location":"userGuides/tutorials/mansurRig_FacialRigging/10_Finalizing-The-Rig/","title":"10 Finalizing The Rig","text":""},{"location":"userGuides/tutorials/mansurRig_FacialRigging/10_Finalizing-The-Rig/#video-overview","title":"Video Overview","text":"<p> In this video, we are going to finalize our rig. Let's press on and get this rig ready for delivery </p>"},{"location":"userGuides/tutorials/mansurRig_FacialRigging/10_Finalizing-The-Rig/#covered-subjects-in-this-video","title":"Covered subjects in this video:","text":"<ul> <li>Rigging Missing Components</li> <li>Adding Squash Ability</li> <li>Tweaker Positions Update</li> <li>Conclusion And Overview</li> </ul>"}]}