{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Mansur's documentaion page ! Here you can find detailed code documentation, as well as some helful guides to get started as a user, or as a developer. Here are some Quick-Links to get started: about Getting Started Support-Us Documentation Help-Desk","title":"Home"},{"location":"#_1","text":"Welcome to Mansur's documentaion page ! Here you can find detailed code documentation, as well as some helful guides to get started as a user, or as a developer. Here are some Quick-Links to get started: about Getting Started Support-Us Documentation Help-Desk","title":""},{"location":"Core_Module_Settings/","text":"Core Module Settings Attributes Module-Name Attribute Name Default Description body Main module name blkSide center Module side alpha A Module's Alpha id Type-Attributes Attribute Name Default Description isFacial False Choose whether this module is marked as a facial module. This attribute is going to be used by the Picker and ModuleVisUI tools to seperate controls/modules in a Body group and a Facial group. symmetryType 3 Choose the mirror type for right side controls controlsMultiplier 2.0 Scale multiplier for this module's controls alongSurface Input surface to attach all joints within this module to the selected surface when constructing the rig. NurbsSurface is recommended doGimbleCtrls False Not implemented currently doPivotCtrls False Not implemented currently postSymmetryJntStruct False If this attribute is set to true, a joint structure re-build will be initiated after this module is symmetrized Attribute-Host Attribute Name Default Description doAttributeHostCtrl False If this is set to True, a new attribute host control will be created along with this module in the position set by it's guide. Depending on the module, all relevant custom channel box attributes/contrls will be created on it for the sake of order and coherence controling the module attributeHostControlShape plus The shape created for the attribute host control attrHostSpace The space of which the attribute host control will be parented to. This cannot be changed post construction. Space-Attributes Attribute Name Default Description spaces [' '] Drag and drop items to reorder. Depending on the module, all relevant space-switch controls will contain these spaces. Valid object types are Guides, Joints, and iterpJoints splitOrientSpace False If this is set to True, all space switch attributes for this module will split into two spaces- Translate and Orient, for the animator to be able to set different space for tranlation and orientation. Color Attribute Name Default Description colOverride False Override the main rig's color scheme for this module only schemeOverride [(0.0, 1.0, 0.0), (0.15, 1.0, 0.15), (0.3, 1.0, 0.3), (0.45, 1.0, 0.45), (0.6, 1.0, 0.6)] Override with these colors Extra-Channels Attribute Name Default Description extraChannels Use this UI to create custom attributes within your modules and automatically connect to an attribute.","title":"Core Module Settings"},{"location":"Core_Module_Settings/#core-module-settings","text":"","title":"Core Module Settings"},{"location":"Core_Module_Settings/#attributes","text":"","title":"Attributes"},{"location":"Core_Module_Settings/#module-name","text":"Attribute Name Default Description body Main module name blkSide center Module side alpha A Module's Alpha id","title":"Module-Name"},{"location":"Core_Module_Settings/#type-attributes","text":"Attribute Name Default Description isFacial False Choose whether this module is marked as a facial module. This attribute is going to be used by the Picker and ModuleVisUI tools to seperate controls/modules in a Body group and a Facial group. symmetryType 3 Choose the mirror type for right side controls controlsMultiplier 2.0 Scale multiplier for this module's controls alongSurface Input surface to attach all joints within this module to the selected surface when constructing the rig. NurbsSurface is recommended doGimbleCtrls False Not implemented currently doPivotCtrls False Not implemented currently postSymmetryJntStruct False If this attribute is set to true, a joint structure re-build will be initiated after this module is symmetrized","title":"Type-Attributes"},{"location":"Core_Module_Settings/#attribute-host","text":"Attribute Name Default Description doAttributeHostCtrl False If this is set to True, a new attribute host control will be created along with this module in the position set by it's guide. Depending on the module, all relevant custom channel box attributes/contrls will be created on it for the sake of order and coherence controling the module attributeHostControlShape plus The shape created for the attribute host control attrHostSpace The space of which the attribute host control will be parented to. This cannot be changed post construction.","title":"Attribute-Host"},{"location":"Core_Module_Settings/#space-attributes","text":"Attribute Name Default Description spaces [' '] Drag and drop items to reorder. Depending on the module, all relevant space-switch controls will contain these spaces. Valid object types are Guides, Joints, and iterpJoints splitOrientSpace False If this is set to True, all space switch attributes for this module will split into two spaces- Translate and Orient, for the animator to be able to set different space for tranlation and orientation.","title":"Space-Attributes"},{"location":"Core_Module_Settings/#color","text":"Attribute Name Default Description colOverride False Override the main rig's color scheme for this module only schemeOverride [(0.0, 1.0, 0.0), (0.15, 1.0, 0.15), (0.3, 1.0, 0.3), (0.45, 1.0, 0.45), (0.6, 1.0, 0.6)] Override with these colors","title":"Color"},{"location":"Core_Module_Settings/#extra-channels","text":"Attribute Name Default Description extraChannels Use this UI to create custom attributes within your modules and automatically connect to an attribute.","title":"Extra-Channels"},{"location":"FKChain/","text":"FKChain Author: Asaf Ben-Zur Best used for: General Chain, Spine, Neck, Tail, Elephant-Trunk, Tentacle This Module when used in it's basic state, will create a simple FK hierarchy control chain. Altough this module contains many layers with many features such as Variable FK, Spring, Embedded IK, Secondary IK chains (interpolation controls). Use as many layers an in any combination to create any form of FK chain behaviour. Defenitions construct Constructor: construct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments: deconstruct deconstruct method implementation for FKChain. Transfer interJoints control back to the main joints. Constructor: deconstruct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments: jointStructure Constructor: jointStructure(mansur, guides, mnsBuildModule = None, kwargs) Return: None Arguments: mansur guides mnsBuildModule ( str ) ; [default: None] kwargs Keyword Arguments: jointStructureSoftMod Constructor: jointStructureSoftMod(mansur, guides, mnsBuildModule = None, kwargs) Return: None Arguments: mansur guides mnsBuildModule ( str ) ; [default: None] kwargs Keyword Arguments:","title":"FKChain"},{"location":"FKChain/#fkchain","text":"Author: Asaf Ben-Zur Best used for: General Chain, Spine, Neck, Tail, Elephant-Trunk, Tentacle This Module when used in it's basic state, will create a simple FK hierarchy control chain. Altough this module contains many layers with many features such as Variable FK, Spring, Embedded IK, Secondary IK chains (interpolation controls). Use as many layers an in any combination to create any form of FK chain behaviour.","title":"FKChain"},{"location":"FKChain/#defenitions","text":"","title":"Defenitions"},{"location":"FKChain/#construct","text":"Constructor: construct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"construct"},{"location":"FKChain/#deconstruct","text":"deconstruct method implementation for FKChain. Transfer interJoints control back to the main joints. Constructor: deconstruct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"deconstruct"},{"location":"FKChain/#jointstructure","text":"Constructor: jointStructure(mansur, guides, mnsBuildModule = None, kwargs) Return: None Arguments: mansur guides mnsBuildModule ( str ) ; [default: None] kwargs Keyword Arguments:","title":"jointStructure"},{"location":"FKChain/#jointstructuresoftmod","text":"Constructor: jointStructureSoftMod(mansur, guides, mnsBuildModule = None, kwargs) Return: None Arguments: mansur guides mnsBuildModule ( str ) ; [default: None] kwargs Keyword Arguments:","title":"jointStructureSoftMod"},{"location":"FKChain_settings/","text":"FKChain Settings Author: Asaf Ben-Zur Best used for: General Chain, Spine, Neck, Tail, Elephant-Trunk, Tentacle This Module when used in it's basic state, will create a simple FK hierarchy control chain. Altough this module contains many layers with many features such as Variable FK, Spring, Embedded IK, Secondary IK chains (interpolation controls). Use as many layers an in any combination to create any form of FK chain behaviour. Attributes GlobalSettings Attribute Name Default Description doInterpolationJoints False Create interpolation joints for this module interpolationJoints 2 Amount of interpolation joints isolatePolesRotation False If this is set to True, the first and last interpolation joints orientation will be isolated. This is primarily used in combination with the EmbeddedIK feature to achive a stable spine setup offsetX 20.0 Up curve X value offset for the interpolation joints offsetZ 0.0 Up curve Z value offset for the interpolation joints scaleMode 2 Default scale mode. Please refer to the documentation of mnsPointsOnCurve node to learn more about each mode squashMode 0 Default squash mode. Please refer to the documentation of mnsPointsOnCurve node to learn more about each mode doPrimariesSpaceSwitch False If this is set to True, primary controls will receive a space switcher doIntepJntsSpring False If this is set to True, a mnsSpringCurve node will be created on top of the primary curve controling the interpolation joints FK Attribute Name Default Description FKcontrolShape circle FK controls shape doFKSeconderyIK False If this is set to True, another level of IK controls will be created below the FK controls FKSecondaryIKControlShape diamond Secodary IK controls shape primaryCurveDegree 3 Primary interpolation joints curve generation degree. Please refer to the documentation of mnsBuildTransformsCurve node to learn more about curve generation degree primaryCurveMode 0 Primary interpolation joints curve sampling mode. Please refer to the documentation of mnsPointsOnCurve node to learn more about curve each mode primaryInterpolaion 0 Primary interpolation joints curve generation interpolation mode. Please refer to the documentation of mnsBuildTransformsCurve node to learn more about each mode FKChannelControl T R S X v v v Y v v v Z v v v FK controls channel-box settings EmbeddedIK Attribute Name Default Description doEmbeddedIK False This feature is mainly used to create a spine setup, where another layer of IK control is needed. The result of this feature is three IK controls - Root, Mid and End controls, which will allow IK control over the entire chain defaultVisibilityMode 1 Default visibility settings. FK and IK main controls can be used in combination, or indevidually- hence a manuall visibility switch embIKMode 1 Setup mode. btcTranslation is legacy, please use btcRotation ikCurveInterpolation 0 IK curve interpolation mode embIKCurveDegree 3 Embedded IK curve degree. Please refer to the documentation of mnsBuildTransformsCurve node to learn more about curve generation degree doMidTangentCtrls True If this is set to True, two extra tangent controls will be build from the IK Mid control embIKControlShape flatDiamond Main shape for the embedded IK controls embIKChannelControl T R S X v v v Y v v v Z v v v Embedded IK controls channel-box settings IK_Secondaries Attribute Name Default Description doSecondaryIKCtrls False This feature will create a secondary IK controls layer below the primary FK chain controls. The number of IK Secondaries MUST be equel or greater then the number of guides/Primary FK controls for this layer to execute. This layer's will not execute without creating Interp-Joints. numIKControls 2 Amount of secondary layer controls, this value MUST be equel or greater then the number of guides/Primary FK controls. isolateSecPolesRotation False If this is set to True, the first and last controls orientation will be isolated. IKControlShape dial Secondary IK layer control shape secondaryCurveDegree 3 Secondary IK curve generation degree. Please refer to the documentation of mnsBuildTransformsCurve node to learn more about curve generation degree secondaryCurveMode 0 Secondary IK curve sampling mode. Please refer to the documentation of mnsPointsOnCurve node to learn more about curve each mode secondaryInterpolaion 0 Secondary IK curve generation interpolation mode. Please refer to the documentation of mnsBuildTransformsCurve node to learn more about each mode doIKSpring False If this is set to True, a mnsSpringCurve node will be created on top of the secondary curve IKChannelControl T R S X v v v Y v v v Z v v v Secondary IK controls channel-box settings VariableFK Attribute Name Default Description doVariableFK False This will create a veriable FK setup on this chain. NOTE: Setting this attribute to True when the curve mode is set to PARAMETRIC, will force the joint structure curve mode to UNIFORM. This layer's will not execute without creating Interp-Joints. numVarFKControls 2 Number of variable FK controls varFKControlShape pinchedCircle Variable FK control shape varFKDegree 3 Variable FK curve degree. Please refer to the documentation of mnsBuildTransformsCurve node to learn more about curve generation degree defaultFalloff 0.5 Default falloff value for the variable FK controls varFKSubsteps 20 The variable FK setup is able to re-sample the curve to any amount of control points to refine the fidelity of the setup. This is the default sampling value doVarFKSpring False If this is set to True, a mnsSpringCurve node will be created on top of the variable FK controls varFKChannelControl T R S X v v Y v v Z v v Variable FK controls channel-box settings Tweakers Attribute Name Default Description doTweakControls False This feature is a global extra layer to tweak the final result cuvre samples rotation and scale. This layer's will not execute without creating Interp-Joints. numTweakers 2 Number of tweak controls to create tweakControlShape dialSquare Tweak controls shape tweakersChannelControl T R S X v v Y v v Z v v Tweak controls channel-box settings","title":"FKChain settings"},{"location":"FKChain_settings/#fkchain-settings","text":"Author: Asaf Ben-Zur Best used for: General Chain, Spine, Neck, Tail, Elephant-Trunk, Tentacle This Module when used in it's basic state, will create a simple FK hierarchy control chain. Altough this module contains many layers with many features such as Variable FK, Spring, Embedded IK, Secondary IK chains (interpolation controls). Use as many layers an in any combination to create any form of FK chain behaviour.","title":"FKChain Settings"},{"location":"FKChain_settings/#attributes","text":"","title":"Attributes"},{"location":"FKChain_settings/#globalsettings","text":"Attribute Name Default Description doInterpolationJoints False Create interpolation joints for this module interpolationJoints 2 Amount of interpolation joints isolatePolesRotation False If this is set to True, the first and last interpolation joints orientation will be isolated. This is primarily used in combination with the EmbeddedIK feature to achive a stable spine setup offsetX 20.0 Up curve X value offset for the interpolation joints offsetZ 0.0 Up curve Z value offset for the interpolation joints scaleMode 2 Default scale mode. Please refer to the documentation of mnsPointsOnCurve node to learn more about each mode squashMode 0 Default squash mode. Please refer to the documentation of mnsPointsOnCurve node to learn more about each mode doPrimariesSpaceSwitch False If this is set to True, primary controls will receive a space switcher doIntepJntsSpring False If this is set to True, a mnsSpringCurve node will be created on top of the primary curve controling the interpolation joints","title":"GlobalSettings"},{"location":"FKChain_settings/#fk","text":"Attribute Name Default Description FKcontrolShape circle FK controls shape doFKSeconderyIK False If this is set to True, another level of IK controls will be created below the FK controls FKSecondaryIKControlShape diamond Secodary IK controls shape primaryCurveDegree 3 Primary interpolation joints curve generation degree. Please refer to the documentation of mnsBuildTransformsCurve node to learn more about curve generation degree primaryCurveMode 0 Primary interpolation joints curve sampling mode. Please refer to the documentation of mnsPointsOnCurve node to learn more about curve each mode primaryInterpolaion 0 Primary interpolation joints curve generation interpolation mode. Please refer to the documentation of mnsBuildTransformsCurve node to learn more about each mode FKChannelControl T R S X v v v Y v v v Z v v v FK controls channel-box settings","title":"FK"},{"location":"FKChain_settings/#embeddedik","text":"Attribute Name Default Description doEmbeddedIK False This feature is mainly used to create a spine setup, where another layer of IK control is needed. The result of this feature is three IK controls - Root, Mid and End controls, which will allow IK control over the entire chain defaultVisibilityMode 1 Default visibility settings. FK and IK main controls can be used in combination, or indevidually- hence a manuall visibility switch embIKMode 1 Setup mode. btcTranslation is legacy, please use btcRotation ikCurveInterpolation 0 IK curve interpolation mode embIKCurveDegree 3 Embedded IK curve degree. Please refer to the documentation of mnsBuildTransformsCurve node to learn more about curve generation degree doMidTangentCtrls True If this is set to True, two extra tangent controls will be build from the IK Mid control embIKControlShape flatDiamond Main shape for the embedded IK controls embIKChannelControl T R S X v v v Y v v v Z v v v Embedded IK controls channel-box settings","title":"EmbeddedIK"},{"location":"FKChain_settings/#ik_secondaries","text":"Attribute Name Default Description doSecondaryIKCtrls False This feature will create a secondary IK controls layer below the primary FK chain controls. The number of IK Secondaries MUST be equel or greater then the number of guides/Primary FK controls for this layer to execute. This layer's will not execute without creating Interp-Joints. numIKControls 2 Amount of secondary layer controls, this value MUST be equel or greater then the number of guides/Primary FK controls. isolateSecPolesRotation False If this is set to True, the first and last controls orientation will be isolated. IKControlShape dial Secondary IK layer control shape secondaryCurveDegree 3 Secondary IK curve generation degree. Please refer to the documentation of mnsBuildTransformsCurve node to learn more about curve generation degree secondaryCurveMode 0 Secondary IK curve sampling mode. Please refer to the documentation of mnsPointsOnCurve node to learn more about curve each mode secondaryInterpolaion 0 Secondary IK curve generation interpolation mode. Please refer to the documentation of mnsBuildTransformsCurve node to learn more about each mode doIKSpring False If this is set to True, a mnsSpringCurve node will be created on top of the secondary curve IKChannelControl T R S X v v v Y v v v Z v v v Secondary IK controls channel-box settings","title":"IK_Secondaries"},{"location":"FKChain_settings/#variablefk","text":"Attribute Name Default Description doVariableFK False This will create a veriable FK setup on this chain. NOTE: Setting this attribute to True when the curve mode is set to PARAMETRIC, will force the joint structure curve mode to UNIFORM. This layer's will not execute without creating Interp-Joints. numVarFKControls 2 Number of variable FK controls varFKControlShape pinchedCircle Variable FK control shape varFKDegree 3 Variable FK curve degree. Please refer to the documentation of mnsBuildTransformsCurve node to learn more about curve generation degree defaultFalloff 0.5 Default falloff value for the variable FK controls varFKSubsteps 20 The variable FK setup is able to re-sample the curve to any amount of control points to refine the fidelity of the setup. This is the default sampling value doVarFKSpring False If this is set to True, a mnsSpringCurve node will be created on top of the variable FK controls varFKChannelControl T R S X v v Y v v Z v v Variable FK controls channel-box settings","title":"VariableFK"},{"location":"FKChain_settings/#tweakers","text":"Attribute Name Default Description doTweakControls False This feature is a global extra layer to tweak the final result cuvre samples rotation and scale. This layer's will not execute without creating Interp-Joints. numTweakers 2 Number of tweak controls to create tweakControlShape dialSquare Tweak controls shape tweakersChannelControl T R S X v v Y v v Z v v Tweak controls channel-box settings","title":"Tweakers"},{"location":"LODsTool/","text":"LODsTool === Author: Assaf Ben Zur === This simple animation tool was created to allow animators to space switch and IK->FK switch easily. This tool is selection based. Please select controls to enable relevant capabilities. For spaces, simply select the controls you want to act upon, choose your target spaces, and press \"switch\". This will switch the space, while maintaining the controls's transforms, using keys created automatically. For Limbs, simple select any control/s for the limbs that you wish to act upon, and press the relevant button- To-IK or To-FK. This will switch the limb/controls to the selected state. This tool also includes Auto-Key switches, as well as a sequence and bake modes. Classes MnsLodsTool [Class] Spaces Tool UI Class. Constructor: MnsLodsTool( parent ( str ) ; [default: mnsUIUtils.get_maya_window()]) Inherits from: form_class, base_class Class Members: iconsDir rigTops rigTop puppetRoot namespace rootGuide lodVisAttr Methods: addLod [method] clearALLLods [method] convertLodsDictKeysToInts [method] drawLODsView [method] initializeUI [method] initializeView [method] readDataFromUI [method] setAttrHost [method] setLodStyle [method] setRigTop [method] writeData [method] addSelectedItems [method] deleteLOD [method] removeSlectedItems [method] setSelectedItems [method] updateLODAttrState [method] openMenu [method] connectSignals [method] loadWindow [method] MnsLodsTool methods addLod [ MnsLodsTool class method] Constructor: addLod(self) Return: None Arguments: self Optional Arguments: clearALLLods [ MnsLodsTool class method] Constructor: clearALLLods(self) Return: None Arguments: self Optional Arguments: convertLodsDictKeysToInts [ MnsLodsTool class method] Constructor: convertLodsDictKeysToInts(self) Return: None Arguments: self Optional Arguments: drawLODsView [ MnsLodsTool class method] Constructor: drawLODsView(self) Return: None Arguments: self Optional Arguments: initializeUI [ MnsLodsTool class method] Constructor: initializeUI(self) Return: None Arguments: self Optional Arguments: initializeView [ MnsLodsTool class method] Constructor: initializeView(self) Return: None Arguments: self Optional Arguments: readDataFromUI [ MnsLodsTool class method] Constructor: readDataFromUI(self) Return: None Arguments: self Optional Arguments: setAttrHost [ MnsLodsTool class method] Constructor: setAttrHost(self) Return: None Arguments: self Optional Arguments: setLodStyle [ MnsLodsTool class method] Constructor: setLodStyle(self) Return: None Arguments: self Optional Arguments: setRigTop [ MnsLodsTool class method] Constructor: setRigTop(self) Return: None Arguments: self Optional Arguments: writeData [ MnsLodsTool class method] Constructor: writeData(self) Return: None Arguments: self Optional Arguments: addSelectedItems [ MnsLodsTool class method] Constructor: addSelectedItems(self, index = 0) Return: None Arguments: self index ( int ) ; [default: 0] Optional Arguments: deleteLOD [ MnsLodsTool class method] Constructor: deleteLOD(self, index = 0) Return: None Arguments: self index ( int ) ; [default: 0] Optional Arguments: removeSlectedItems [ MnsLodsTool class method] Constructor: removeSlectedItems(self, index = 0) Return: None Arguments: self index ( int ) ; [default: 0] Optional Arguments: setSelectedItems [ MnsLodsTool class method] Constructor: setSelectedItems(self, index = 0) Return: None Arguments: self index ( int ) ; [default: 0] Optional Arguments: updateLODAttrState [ MnsLodsTool class method] Constructor: updateLODAttrState(self, index = 0) Return: None Arguments: self index ( int ) ; [default: 0] Optional Arguments: openMenu [ MnsLodsTool class method] Constructor: openMenu(self, position) Return: None Arguments: self position Optional Arguments: connectSignals [ MnsLodsTool class method] Connect all UI Signals. Constructor: connectSignals(self) Return: None Arguments: self Optional Arguments: loadWindow [ MnsLodsTool class method] Show window method. Constructor: loadWindow(self) Return: None Arguments: self Optional Arguments: Defenitions loadLodsTool Load the Def Serach UI from globals, avoid UI duplication. Constructor: loadLodsTool() Return: None Arguments: Keyword Arguments:","title":"LODsTool"},{"location":"LODsTool/#lodstool","text":"=== Author: Assaf Ben Zur === This simple animation tool was created to allow animators to space switch and IK->FK switch easily. This tool is selection based. Please select controls to enable relevant capabilities. For spaces, simply select the controls you want to act upon, choose your target spaces, and press \"switch\". This will switch the space, while maintaining the controls's transforms, using keys created automatically. For Limbs, simple select any control/s for the limbs that you wish to act upon, and press the relevant button- To-IK or To-FK. This will switch the limb/controls to the selected state. This tool also includes Auto-Key switches, as well as a sequence and bake modes.","title":"LODsTool"},{"location":"LODsTool/#classes","text":"","title":"Classes"},{"location":"LODsTool/#mnslodstool-class","text":"Spaces Tool UI Class. Constructor: MnsLodsTool( parent ( str ) ; [default: mnsUIUtils.get_maya_window()]) Inherits from: form_class, base_class Class Members: iconsDir rigTops rigTop puppetRoot namespace rootGuide lodVisAttr Methods: addLod [method] clearALLLods [method] convertLodsDictKeysToInts [method] drawLODsView [method] initializeUI [method] initializeView [method] readDataFromUI [method] setAttrHost [method] setLodStyle [method] setRigTop [method] writeData [method] addSelectedItems [method] deleteLOD [method] removeSlectedItems [method] setSelectedItems [method] updateLODAttrState [method] openMenu [method] connectSignals [method] loadWindow [method]","title":"MnsLodsTool [Class]"},{"location":"LODsTool/#mnslodstool-methods","text":"","title":"MnsLodsTool  methods"},{"location":"LODsTool/#defenitions","text":"","title":"Defenitions"},{"location":"LODsTool/#loadlodstool","text":"Load the Def Serach UI from globals, avoid UI duplication. Constructor: loadLodsTool() Return: None Arguments: Keyword Arguments:","title":"loadLodsTool"},{"location":"Maya-Plugins/","text":"Maya-Plugins mnsAnnotate === Author: Assaf Ben Zur === This node is a utility node used to present value annotations in maya's viewport easily. When needing to present any keyframed values in a playblast within maya, there isn't any maya native node to allow values display within the VP. This node was created for this need. All connected attributes will be displayed as a new line presenting attributes and their current values, updating in real time. The display settings are controled within this node, where the position of the display is controlled via the custom locator created with it. The amount of attribute display is unlimited, and multiple unlimited instances of this node can be created freely. This is mainly used to display technicall setups. Inputs Long-Name Short-Name Type Description attributes attrs multi Input attributes array to display, unlimited amount. Each attribute component will be displayed as a single line. fontSize fontSize float Display Font Size. fontColor fontColor float[3] Display Font Color, RGB (0 to 1). fontTransparency fontTransparency float Font transperancy. 1 = Fully opaque, 0 = Fully tansparennt. precision precision int Numberic attribute display precision- value represents the amount of integers right to the decimal point. lineSpacing lineSpacing float Line spacing between attributes line. drawFlat drawFlat int Draw in 2D mode, regardless of the matrix position. The position is dictated by positionX and positionY attributes, relative to the viewports screen space resolution. positionX positionX double Display top-left corener X position, if drawFlat attribute is True. positionY positionY double Display top-left corener y position, if drawFlat attribute is True. nameOnlyMode nameOnlyMode int MObject mnsAnnotate::aNameMode mnsAutoWheelDrive === Author: Assaf Ben Zur === Inputs Long-Name Short-Name Type Description startFrame startFrame int Evaluation start frame. startFrameFromRange startFrameFromRange bool If true, take the start frame from current maya range instead of the input value given. time time time Time input. mnsBuildTransformsCurve === Author: Assaf Ben Zur === This node builds a nurbsCurve shape, based on input transforms array. The curve parameters are dictated by this node's attributes, and can be dynamiclly changed and even keyframed if needed. This node also creates and offset curve shape result, to be used later as an Up-Vector for every single arbitrary point along the result main curve. Inputs Long-Name Short-Name Type Description globalScale globalScale float Global scale multiplier. tweakCurve tweakCurve nurbsCurve Input tweak curve shape. tweakCurveBase tweakCurveBase nurbsCurve Input tweak curve base shape. buildMode buildMode enum Build mode- EPs, CVs, Hermite, TangentedCVs, bezier. transforms transforms compound Transforms array to build the curve from. matrix matrix matrix Input matrix transform, child of transforms. If this plug is connected, offsetX value will be taken as an the offset amount. offsetBaseMatrix offsetBaseMatrix matrix Matrix to build offset vectors from degree degree int Output curve degree, 1-5. offsetX offsetX float Output offset curve X parameter. offsetY offsetY float Output offset curve Y parameter. offsetZ offsetZ float Output offset curve Z parameter. tangentDirection tangentDirection enum If build mode is on Hermite, this paremeter dictates the tangent direction. reverse reverse int Reverse output curve and offset curve. form form enum Result curve form- open or closed HermiteSteps HermiteSteps int Hermite mode steps amount. tangentLength tangentLength float Control tangent length (if present) OffsetType OffsetType enum Offset build type - world or local. buildOffsetCurve buildOffsetCurve int Initiate offset curve build. resample resample bool Resample curve before output, based on substeps paremeter. substeps substeps int resample substeps. localize localize bool In case this attribute is on, the result will be localized based on the input worldToLocal matrix. worldToLocalMatrix worldToLocalMatrix matrix In case localize attribute is on, the result will be localized based on this matrix. Outputs Long-Name Short-Name Type Description outCurve outCurve kNurbsCurve Result curve shape. outOffsetCurve outOffsetCurve nurbsCurve Result offset curve shape. length length double Result curve length. offsetLength offsetLength double Result offset curve length. mnsCameraGateRatio === Author: Assaf Ben Zur === A simple utility callback node to dynamiclly control and update the input camer'as display \"Camera-Gate\" parameters. Inputs Long-Name Short-Name Type Description cameraIn cameraIn message Affected camera node. gateWidth gateWidth float Cemera gate width. gateHeight gateHeight float Cemera gate height. mnsClosestPointsOnMesh Inputs Long-Name Short-Name Type Description inMesh inMesh mesh Input mesh to find closest point to. inPosition inPosition compound(Array) Input position to calculate a result for. Array Attr. matrix matrix matrix Input matrix to calculate a result for. Array Attr. targetParentMatrix targetParentMatrix matrix Target parent matrix to multiply by before setting the result. Outputs Long-Name Short-Name Type Description outPosition op vector Output position result. mnsCompressionTensionBlend === Author: Assaf Ben Zur === Deformer. A simple compression and tension based deformer. This deformer will detect, display and deform a mesh based on the difference between the current deformed state and an input base-state (base-mesh). The deformer contains 3 display modes: - Compression & Tension (50% gray as base-state) - Compression Only (black as base-state) - Tension (black as base-state) The deformer also conatins separate multipliers for both tension and compression. This deformer can be used to drive corrective shapes, wrinkles, volume gain/loss and much more. Inputs Long-Name Short-Name Type Description baseMesh baseMesh mesh Static base mesh input. tensionTarget tensionTarget mesh Tension blend target. compressionTarget compressionTarget mesh Compression blend target. liveMode liveMode bool Live mode. Re-calculate edge lengthes on evaluation. displayMode displayMode enum Map display mode- None, compressionTension, compression, tension. compressionMultiplier compressionMultiplier float Global compression multiplier. tensionMultiplier tensionMultiplier float Global tension multiplier. mnsCurveTweak === Author: Assaf Ben Zur === This node was created in order to achive curve modifications/tweaks, without changing its form, not it's shape at bind position. The input and output curves will match while the base curve and tweak curve match in shape. Once any difference between the base shape and tweak shape was detected, the difference between these curves will be projected onto the input curve. The objective of this node is to maintain all curve attributes/data (nSpans, nCvs, form, degree) unchanged while still having the ability to tweak the curve with different parameters. Inputs Long-Name Short-Name Type Description inputCurve inputCurve kNurbsCurve Input curve to tweak. Output curve will be the same as this curve while the tweak curve matches the base curve. inputBaseCurve inputBaseCurve kNurbsCurve Input base curve. This curve will be used to calculate the delta for the tweak. inputTweakCurve inputTweakCurve kNurbsCurve Input twek curve. This curve is intended to match the base curve as bind. This curve should be modified - after the curve is modified, the delta difference between it and the base curve will be projected on the input curve. buildOffsetCurve buildOffsetCurve int Initiate offset curve build. tweakOffset tweakOffset int This will determine whether the offset curve created will be tweaked or not. offsetBaseMatrix offsetBaseMatrix matrix Matrix to build offset vectors from offset offset float Output offset curve parameter. Outputs Long-Name Short-Name Type Description outCurve outCurve kNurbsCurve Result curve shape. outOffsetCurve outOffsetCurve kNurbsCurve Result offset curve shape. mnsCurveVariable === Author: Assaf Ben Zur === Curve based solve for a Variable-FK Setup. This fast and efficient node allows the user to create a variable FK setup using input curves and local transformations, outputting a solved curve and up-curve- instead of the more common transforms output method. The node will accept any amount of input transforms, outputting the complex offset parent solve for each input as well as the solved curves shapes. This is to avoid the use of any extra nodes or multiple parent transforms- pinning the controls to the output curve at all times. The initial solve, as well as all features are calculated within a single loop. As opposed to the common Variable FK setup, the curve based approach eliminates the Rest-Pose constant- making the node's algorithm Rest-Pose dynamic. In fact, it doesn't exist. This approach uses only the input array amount constant to calculate a uniform positioning along the output curve- allowing the input curve to be changeable (live / dynamic). Notice that the amount of input variable controls is completely independent of the main controls input. Inputs Long-Name Short-Name Type Description curve crv nurbsCurve Input curve. upCurve upCrv nurbsCurve Input offset curve. inTransform inTransform compound Input variable control values array. uPosition uPos float Input U position. Child of inTransform. strength strength float Input strength. Child of inTransform. aimTranslate aimT float Input aim translation. Child of inTransform. upTranslate upT float Input up translation. Child of inTransform. terTranslate terT float Input tertiary translation. Child of inTransform. falloff falloff float Input falloff value. Child of inTransform. aimRotation aimRot angle Input aim-rotation value. Child of inTransform. upRotation upRot angle Input up-rotation value. Child of inTransform. tertiaryRotation terRot angle Input tertiary-rotation value. Child of inTransform. localMatrix localMatrix angle Input local transformation matrix. Child of inTransform. upMode upMode enum Up mode- normal, curve, worldX, worldY, worldZ. substeps substeps int Resample substeps value. translateMode tMode enum Control translation mode- IK, FK. degree degree int Result curves degree. buildMode buildMode enum Result curve build mode- EPs, CVs. rotateOrder ro enum Calculation rotation-order. aimAxis aimAxis enum Aim axis choice. upAxis upAxis enum Up axis choice. offsetType offsetType enum Offset curve adjustment mode- local, world. offsetX offsetX float Offset curve adjustment offset X parameter. offsetY offsetY float Offset curve adjustment offset Y parameter. offsetZ offsetZ float Offset curve adjustment offset Z parameter. uScale uScale float Global U-Scale adjusment. Addative to array indevidual u inputs. uOffset uOffset float Global U-Offfset adjusment. Addative to array indevidual u inputs. startAmp startAmp float Sine start amplitude value. endAmp endAmp float Sine end amplitude value. amplitudeAim amplitudeAim float Sine calculation X direction amplitude value. amplitudeUp amplitudeUp float Sine calculation Y direction amplitude value. amplitudeTertiary amplitudeTertiary float Sine calculation Z direction amplitude value. frequencyAim frequencyAim float Sine calculation X direction frequency value. frequencyUp frequencyUp float Sine calculation Y direction frequency value. frequencyTertiary frequencyTertiary float Sine calculation Z direction frequency value. phaseAim phaseAim float Sine calculation X direction phase value. phaseUp phaseUp float Sine calculation Y direction phase value phaseTertiary phaseTertiary float Sine calculation Z direction phase value frequency frequency float Sine calculation global addative frequency value. phase phase float Sine calculation global addative phase value. startPos startPos float Sine start position value. outCtrlsUpMode outCtrlsUpMode enum Out position transforms up type - normal, curve, worldX, worldY, worldZ. Outputs Long-Name Short-Name Type Description outCurve outCurve nurbsCurve Output curve shape. outOffsetCurve outOffsetCurve nurbsCurve Output offset curve shape. outTransform outTransform compound Output control offset position and rotation array. translate t float[3] Output control offset position, child of outTransform. rotate r angle[3] Output control offset rotation, child of outTransform. rotateX rotX angle Output control offset rotation, X component, child of rotate. rotateY rotY angle Output control offset rotation, Y component, child of rotate. rotateZ rotZ angle Output control offset rotation, Z component, child of rotate. mnsCurveZip === Author: Assaf Ben Zur === Curve based node. This is primarily used for eyelids and lips. This fast solution was developed to replace complex and heavy graphs- containing many math nodes, curve deformers and constraints. This setup provides a very clean deployment, processing the math algorithm internally. Combining this node with mnsBuildTransformsCurve and mnsPointsOnCurve, will result in a very efficient, dynamic and flexible setup. All calculations are processed within a single loop. All curve operations are aware of one another, and are NOT addative- meaning that all operations are available at any position, and will NOT break one another, nor overlap. All attributes are not minimum limited to 0 and can be adjusted to the negative direction- pulling the bind pose against each other instead of towards each other. The node contains a centerMatrix input plug, which is a live world position that is used to scale the calculated vectors based on the bind position offset (per curve parameter). The problem arising from this method is a mismatch at any meet position between curve A and B due to an offset variation between all points (except for a perfect circle scenario, which is never the case). This problem is solved using a conform attribute within which will pull one of the curves (based on user choice) to the other below a selected distance threshold- Resulting in a watertight-seal. Using mnsPointsOnCurve to sample the result curves allows for a simple skinCluster to deform the mesh. mnsCurveZip will output a pair of offset curves as well as the result curves, calculated by world axis vectors or the centerMatrix as a base, which are used as an Up-Curve input for the mnsPointsOnCurve node to manage rotations correctly as well. The node contatins some more important inputs: The tweakCurves inputs. Aspiring to an inclusive and comprehensive setup, tweak curves (A, B and Mid) can be plugged in to expose another manual layer of animation using scene controls. The input curves are 100% independent of the base curve inputs and DO-NOT need to share topology with each other, nor the source inputs - as they are being re-sampled internally based on the build mode. This means that the tweak controls amount is limitless and is NOT a constant, nor predefined. Inputs Long-Name Short-Name Type Description bindCurveA bindCurveA nurbsCurve Input curve A base-curve shape. tweakCurveA tweakCurveA nurbsCurve Input curve A curve shape. bindCurveB bindCurveB nurbsCurve Input curve B base-curve shape. tweakCurveB tweakCurveB nurbsCurve Input curve B curve shape. tweakCurveABase tweakCurveABase nurbsCurve Input curve A tweak base-curve shape. tweakCurveBBase tweakCurveBBase nurbsCurve Input curve B tweak base-curve shape. midCurve midCrv nurbsCurve Input target mid curve. midCurveBase midCrvBase nurbsCurve Input mid tweak curve base. midCurveTweak midCrvTweak nurbsCurve Input mid tweak curve. centerMatrix centerMatrix matrix Input center transformation matrix. midPointMatrix midPointMatrix matrix Input mid point traget matrix. sampleMode m enum Curve sample mode- parametric, uniform. matchInputCurve matchInputCurve enum Result curve matched parameters to- none, curveA, curveB. substeps substeps int Result curve resampling sub-step value. degree degree int Result curve degree value. buildMode buildMode enum Curve build mode- EPs, CVs. midGenerateFrom midGenerateFrom enum Generate automatic mid curve from- bindBases, tweakCurves, input. midBias midBias float Generated curve bias. aroundCenter aroundCenter bool Calculate results considering the input center matrix. conformToMeetPoint conformToMeetPoint bool Conform the selected curve result to meet the oter curve based on set parameters. curveToConform curveToConform enum Which curve to conform - curveA, curveB. conformDistancethreshold conformDistancethreshold enum Which curve to conform - curveA, curveB. AToMid AToMid float Blend curve A to mid-curve. BToMid BToMid float Blend curve B to mid-curve. AToB AToB float Blend curve A to curve B. BToA BToA float Blend curve B to curve A. allToMidPoint allToMidPoint float Blend both curves to mid-curve. pushOut pushOut float Curves push-out added value. zipStart zipStart float Zip start value. zipStartFalloff zipStartFalloff float Zip start falloff value. zipEnd zipEnd float Zip end value. zipEndFalloff zipEndFalloff float Zip end falloff value. glue glue bool Do glue. glueTherhold glueTherhold float Glue threshold value. offsetBase offsetBase enum Offset curve build mode. centerMatrix, worldX, worldY, worldZ. offset offset float Offset curve build parameter. globalMultiplier globalMultiplier float Global value multiplier. Outputs Long-Name Short-Name Type Description outCurveA outCurveA nurbsCurve Result curve A shape. outCurveB outCurveB nurbsCurve Result curve B shape. outCurveAOffset outCurveAOffset nurbsCurve Result curve A offset shape. outCurveBOffset outCurveBOffset nurbsCurve Result curve B offset shape. mnsCurveZipB === Author: Assaf Ben Zur === Curve based node. This is primarily used for eyelids and lips. This fast solution was developed to replace complex and heavy graphs- containing many math nodes, curve deformers and constraints. This setup provides a very clean deployment, processing the math algorithm internally. Combining this node with mnsBuildTransformsCurve and mnsPointsOnCurve, will result in a very efficient, dynamic and flexible setup. All calculations are processed within a single loop. All curve operations are aware of one another, and are NOT addative- meaning that all operations are available at any position, and will NOT break one another, nor overlap. All attributes are not minimum limited to 0 and can be adjusted to the negative direction- pulling the bind pose against each other instead of towards each other. The node contains a centerMatrix input plug, which is a live world position that is used to scale the calculated vectors based on the bind position offset (per curve parameter). The problem arising from this method is a mismatch at any meet position between curve A and B due to an offset variation between all points (except for a perfect circle scenario, which is never the case). This problem is solved using a conform attribute within which will pull one of the curves (based on user choice) to the other below a selected distance threshold- Resulting in a watertight-seal. Using mnsPointsOnCurve to sample the result curves allows for a simple skinCluster to deform the mesh. mnsCurveZip will output a pair of offset curves as well as the result curves, calculated by world axis vectors or the centerMatrix as a base, which are used as an Up-Curve input for the mnsPointsOnCurve node to manage rotations correctly as well. The node contatins some more important inputs: The tweakCurves inputs. Aspiring to an inclusive and comprehensive setup, tweak curves (A, B and Mid) can be plugged in to expose another manual layer of animation using scene controls. The input curves are 100% independent of the base curve inputs and DO-NOT need to share topology with each other, nor the source inputs - as they are being re-sampled internally based on the build mode. This means that the tweak controls amount is limitless and is NOT a constant, nor predefined. Inputs Long-Name Short-Name Type Description globalScale globalScale double Global scale value. inTweakAPosition inTweakAPosition matrix (array) Input tweaker local matrix. inTweakBPosition inTweakBPosition matrix (array) Input tweaker local matrix. tweakMode tweakMode enum Tweak curve build mode. tweakMirrorMatrix tweakMirrorMatrix matrix Mirror matrix to add to the local tweaker transfomation build. bindCurveA bindCurveA nurbsCurve Input curve A base-curve shape. bindCurveB bindCurveB nurbsCurve Input curve B base-curve shape. centerMatrix centerMatrix matrix Input center transformation matrix. sampleMode m enum Curve sample mode- parametric, uniform. midCurveMode midCurveMode enum Mid curve generation mode. One To one - calculate mid point for every upper and lower pair. Regenerate- create a new mid curve, resample based on midCurveSubsteps attribute value. midCurveSubsteps midCurveSubsteps int Mid curve generation sampling amount matchInputCurve matchInputCurve enum Result curve matched parameters to- none, curveA, curveB. substeps substeps int Result curve resampling sub-step value. degree degree int Result curve degree value. buildMode buildMode enum Curve build mode- EPs, CVs. midBias midBias float Generated curve bias. aroundCenter aroundCenter bool Calculate results considering the input center matrix. conformToMeetPoint conformToMeetPoint bool Conform the selected curve result to meet the oter curve based on set parameters. curveToConform curveToConform enum Which curve to conform - curveA, curveB. conformDistancethreshold conformDistancethreshold enum Which curve to conform - curveA, curveB. AToMid AToMid float Blend curve A to mid-curve. BToMid BToMid float Blend curve B to mid-curve. AToBindB AToBindB float Blend curve A to curve B. BToBindA BToBindA float Blend curve B to curve A. AToB AToB float Blend curve A to curve B. BToA BToA float Blend curve B to curve A. sCurveA sCurveA float Blend curve A into a procedural S shape. sCurveB sCurveB float Blend curve B into a procedural S shape. allToMidPoint allToMidPoint float Blend both curves to mid-curve. pushOut pushOut float Curves push-out added value. zipStart zipStart float Zip start value. zipStartFalloff zipStartFalloff float Zip start falloff value. zipEnd zipEnd float Zip end value. zipEndFalloff zipEndFalloff float Zip end falloff value. offsetBase offsetBase enum Offset curve build mode. centerMatrix, worldX, worldY, worldZ. offset offset float Offset curve build parameter. Outputs Long-Name Short-Name Type Description outCurveA outCurveA nurbsCurve Result curve A shape. outCurveB outCurveB nurbsCurve Result curve B shape. outCurveAOffset outCurveAOffset nurbsCurve Result curve A offset shape. outCurveBOffset outCurveBOffset nurbsCurve Result curve B offset shape. outTweakA outTweakA compound (array) Parent attribute that holds output values for tweaker offset position. outTweakATranslate outTweakATranslate vector Output offset position for a given tweaker. outTweakARotate outTweakARotate vector Output offset rotation for a given tweaker. outTweakB outTweakB compound (array) Parent attribute that holds output values for tweaker offset position. outTweakBTranslate outTweakBTranslate vector Output offset position for a given tweaker. outTweakBRotate outTweakBRotate vector Output offset rotation for a given tweaker. mnsDynamicPivot === Author: Assaf Ben Zur === This is a simple node to calculate a foot's dynamic pivot internally, acoiding the use of many transforms and node connections. Given an input curve, world origin position (as matrix) and mapping info, this node will map the input rotation values into a new custom point adding the rotation into the translation. This essentailly will push the new point rapidly away from it's origin into the mapping direction. Now using the given input curve, the closest point on curve from the new point will be calcultaed and outputted into the rotatePivot plug. This output plug can then be plugged into a custom pivot attribute of any transform- creating a dynamiclly calculated pivot along the given curve. Inputs Long-Name Short-Name Type Description inputCurve inputCurve nurbsCurve Input curve. rotateX rx angle Input local X rotation. rotateY ry angle Input local Y rotation. rotateZ rz angle Input local Z rotation. rotate r angle[3] Input rotations. originWorldMatrix owm matrix Input origin position to strat the calculation from. targetParentInverseMatrix tpim matrix Target transform parent inverse matrix to localize the rotate pivot position result. mapRotXTo mapRotXTo enum Mapping info from input X rotation. mapRotYTo mapRotYTo enum Mapping info from input Y rotation. mapRotZTo mapRotZTo enum Mapping info from input Z rotation. distRateMultiplier distRateMultiplier double The rotation rate of addition in the translation values. inputMultipliers inputMultipliers bool Pre-calc input multipliers. Outputs Long-Name Short-Name Type Description rotatePivot rotatePivot float[3] Result rotate pivot position. mnsExponential mnsIKSolver === Author: Assaf Ben Zur === This IK-Solver node provides an alternative, faster and more reliable solution for a 2-joint IK set-up. This enhanced IK-solution offers a much cleaner approach as well, computing the blend internally- making any basic IK-FK set-up efficient, stable, fast and clean. To add on the internal FK-IK switch, this node contains a few more features that are already an industry standard: Softness - prevents a pop on ik limit approach. Slide - Knee position sliding (for character animation). Stretch - Providing a limb-stretch when the ik-solve is beyond its limit. Axis Switching - Offering an easy switch to any joint orientation. Inputs Long-Name Short-Name Type Description boneLengthA bla float Base length A. boneLengthB blb float Base length B. restHandleLength restHandleLength float Base length between the root position and the handle. blend blend float IK-FK blend value. rootFK rootFK matrix Input FK root matrix. midFK midFK matrix Input FK mid matrix. endFK endFK matrix Input FK end matrix. ikTarget ikTarget matrix Input IK target matrix. poleVector poleVector matrix Input pole-vector target matrix. rootWorldMatrix rootWorldMatrix matrix Module root input matrix. roll roll float IK addative roll value. slide slide float IK mid slide value. softness softness float IK softness parameter. stretchLimit stretchLimit float IK stretch limit value. 1 is no stretch, 2 is double the length. aimAxis aimAxis enum Aim axis choice. upAxis upAxis enum Up axis choice. segmentScaleCompensate segmentScaleCompensate bool calculate with segment scale compensate on or off. Outputs Long-Name Short-Name Type Description rootTranslate rootTranslate float[3] Root out translate output. Child of outRoot. rootRotateX rootRotateX float Root out translate X output. Child of outRoot. rootRotateY rootRotateY float Root out translate Y output. Child of outRoot. rootRotateZ rootRotateZ float Root out translate Z output. Child of outRoot. rootRotate rootRotate angle[3] Root out rotate output. Child of outRoot. rootScale rootScale float[3] Root out scale output. Child of outRoot. outRoot outRoot compound Root output transformation values. midTranslate midTranslate float[3] Mid out translate output. Child of outMid. midRotateX midRotateX float Mid out translate X output. Child of outMid. midRotateY midRotateY float Mid out translate Y output. Child of outMid. midRotateZ midRotateZ float Mid out translate Z output. Child of outMid. midRotate midRotate angle[3] Mid out rotate output. Child of outMid. midScale midScale float[3] Mid out scale output. Child of outMid. outMid outMid compound Mid output transformation values. endTranslate endTranslate float[3] End out translate output. Child of outEnd. endRotateX endRotateX float End out translate X output. Child of outEnd. endRotateY endRotateY float End out translate Y output. Child of outEnd. endRotateZ endRotateZ float End out translate Z output. Child of outEnd. endRotate endRotate angle[3] End out rotate output. Child of outEnd. endScale endScale float[3] End out scale output. Child of outEnd. outEnd outEnd compound End output transformation values. ikVis ikVis bool IK mode visibility. fkVis fkVis bool FK mode visibility. mnsLipZip === Author: Assaf Ben Zur === Curve based node. Inputs Long-Name Short-Name Type Description globalScale globalScale double Global scale value. inTweakAPosition inTweakAPosition matrix (array) Input tweaker local matrix. inTweakBPosition inTweakBPosition matrix (array) Input tweaker local matrix. tweakMode tweakMode enum Tweak curve build mode. tweakMirrorMatrix tweakMirrorMatrix matrix Mirror matrix to add to the local tweaker transfomation build. centerMatrix centerMatrix matrix Input center transformation matrix. sampleMode m enum Curve sample mode- parametric, uniform. substeps substeps int Result curve resampling sub-step value. degree degree int Result curve degree value. buildMode buildMode enum Curve build mode- EPs, CVs. midBias midBias float Generated curve bias. aroundCenter aroundCenter bool Calculate results considering the input center matrix. alongSurface alongSurface bool Calculate results considering the input surface. conformToMeetPoint conformToMeetPoint bool Conform the selected curve result to meet the oter curve based on set parameters. curveToConform curveToConform enum Which curve to conform - curveA, curveB. conformDistancethreshold conformDistancethreshold enum Which curve to conform - curveA, curveB. AToMid AToMid float Blend curve A to mid-curve. BToMid BToMid float Blend curve B to mid-curve. AToB AToB float Blend curve A to curve B. BToA BToA float Blend curve B to curve A. sCurveA sCurveA float Blend curve A into a procedural S shape. sCurveB sCurveB float Blend curve B into a procedural S shape. allToMidPoint allToMidPoint float Blend both curves to mid-curve. upperCurlBaseMatrix upperCurlBaseMatrix matrix Base upper matrix to calculate offsets before calculating the curl. upperCurlMatrix upperCurlMatrix matrix Upper matrix for calculating the curl. upperCurlFalloff upperCurlFalloff float Upper curl falloff lowerCurlBaseMatrix lowerCurlBaseMatrix matrix Base lower matrix to calculate offsets before calculating the curl. lowerCurlMatrix lowerCurlMatrix matrix Lower matrix for calculating the curl. lowerCurlFalloff lowerCurlFalloff float Lower curl falloff pushOutA pushOutA float Curves push-out added value. pushOutB pushOutB float Curves push-out added value. zipStart zipStart float Zip start value. zipStartFalloff zipStartFalloff float Zip start falloff value. zipEnd zipEnd float Zip end value. zipEndFalloff zipEndFalloff float Zip end falloff value. offsetBase offsetBase enum Offset curve build mode. centerMatrix, worldX, worldY, worldZ. offset offset float Offset curve build parameter. Outputs Long-Name Short-Name Type Description outCurveA outCurveA nurbsCurve Result curve A shape. outCurveB outCurveB nurbsCurve Result curve B shape. outCurveAOffset outCurveAOffset nurbsCurve Result curve A offset shape. outCurveBOffset outCurveBOffset nurbsCurve Result curve B offset shape. outTweakA outTweakA compound (array) Parent attribute that holds output values for tweaker offset position. outTweakATranslate outTweakATranslate vector Output offset position for a given tweaker. outTweakARotate outTweakARotate vector Output offset rotation for a given tweaker. outTweakB outTweakB compound (array) Parent attribute that holds output values for tweaker offset position. outTweakBTranslate outTweakBTranslate vector Output offset position for a given tweaker. outTweakBRotate outTweakBRotate vector Output offset rotation for a given tweaker. mnsMatrixConstraint === Author: Assaf Ben Zur === Light weight alternative to Maya's native constraints - All within one node. Live switchable/keyable maintainOffset channel. Easily add spaces/masters to existing constraint using recalcOffset channel. Inputs Long-Name Short-Name Type Description sourceWorldMatrix sourceWorldMatrix matrix Source world matrix. spaceSet spaceSet int Constraint Space index. maintainOffset maintainOffset bool Maintain offset attribute. recalcOffsets recalcOffsets int Recalculate offset in current state. targetParentInverseMatrix targetParentInverseMatrix matrix Traget inverse matrix. targetRotateOrder targetRotateOrder enum Calculation rotate-order. targetWorldMatrix targetWorldMatrix matrix Traget world matrix. Outputs Long-Name Short-Name Type Description matrix m matrix Result as matrix form. translate t float[3] Translation values result. rotate r angle[3] Rotation values result. scale s float[3] Scale values result. shear shear float[3] Shear values result. mnsMeshRivets === Author: Assaf Ben Zur === A multi \"Point-On-Poly\" constraint style compute node. The node will accept any amount of input positions, as well as an input base-mesh and a target mesh. The base mesh is used to calculate the source position and offset, the target mesh is used to calculate the result position based on the selected attributes within the node: - Calculation Method: Closest UV, Vertex, Face - Do Rotation: On, Off - Do Scale: On, Off - Rotation: Aim-Axis and up Axis choice (All 6) - Up-Mode: World (X,Y,Z), Closest Tangent, Closest Binormal The node will accept any amount on input tweaker matrices that can be used to adjust the riveted transforms globally and easily. The tweakers adjustments are calculated in world spcae and the algorithm is fully independent, additive, and keyable. The proximity calculation is matrix based to achieve non-spherical tweaks. As tweaking the position of the rivets is not sensible as the transforms' position is based on the target mesh, the proximity tweakers are used to adjust rotation and scale only. The node contains two adjustemt spaces: - World- Will transform the outputs in world space, providing a more intuative behaviour, although less practical. - Object - Will transform the outputs in their relative local spaces (preferable), which will provide a less intuative behaviour (dependent of the tweaker and output orientation), although very practical. A falloff attribute is also implemented to allow control over the decay within the \"collision\" zone. Inputs Long-Name Short-Name Type Description mesh mesh mesh Input mesh to rivet to. targetWorldMatrix targetWorldMatrix matrix Input mesh world matrix. rivet rivet compound Input rivet transforms array. worldMatrix worldMatrix matrix Input rivet transforms matrix. Child of rivet. parentInverseMatrix parentInverseMatrix matrix Input rivet transforms inverse parent matrix. Child of rivet. liveMode liveMode bool Live mode. Calculate everything in every evaluation. calculationMethod calculationMethod enum Calculation basis- UV, closestVertex, closestFace. uvTolerance uvTolerance float UV search tolerance threshold value. doRotation doRotation bool Calculate rotations. doRivetRotation doRivetRotation bool Calculate rivet local rotations. rotateOrder ro enum Calculation rotate-order. upMode upMode enum Rotation calculation up mode- worldX, worldY, worldZ, closestVertexBinormal, closestVertexTangent. aimAxis aimAxis enum Aim Axis choice. upAxis upAxis enum Up Axis choice. doRivetScale doRivetScale bool Calculate scale. doScale doScale bool Scale the rivets with the target mesh scale. When off the mesh's scale doesn't affect the rivets. maintainOffset maintainOffset bool Maintain offset between rivet position and target mesh. proximityRotationSpace proximityRotationSpace enum Proximity tweak rotation space- object, world. proximityTweaker proximityTweaker compound Proximity tweakers input array. proximityWorldMatrix proximityWorldMatrix matrix Proximity tweaker matrix. Child of proximityTweaker. proximityLocalMatrix proximityLocalMatrix matrix Proximity tweaker local matrix. Child of proximityTweaker. rivetScale rivetScale float[3] Scale tweak input. falloff falloff float Proximity tweak falloff. Child of proximityTweaker. texture texture color Input color map adjustment. rotationTextureAmplitude rotationTextureAmplitude float Color map adjustment amplitude. textureBothDirections textureBothDirections bool Avarage color map adjustment to both direction. -0.5 0.5 instead of 0 to 1. scaleTextureAmplitude scaleTextureAmplitude float Color map scale affect amplitude. Outputs Long-Name Short-Name Type Description translate t float[3] Translation output. Child of transform. rotate r angle[3] Rotation output. Child of transform. transform transform compound Output transforms array. scale s angle[3] Scale output. Child of transform. baseMesh baseMesh mesh Input base-mesh. mnsMeshSeparate === Author: Assaf Ben Zur === A simple node to drive seprated shell objects using one combined mesh. Inputs Long-Name Short-Name Type Description mesh mesh mesh Input mesh to separate. inShell inShell mesh Input shell object array. Outputs Long-Name Short-Name Type Description outMesh outMesh mesh Result shell meshes array. mnsNodeRelationship === Author: Assaf Ben Zur === BLOCK main relationship node. Inputs Long-Name Short-Name Type Description messageIn messageIn message Input master node. messageOut messageOut message Input slaves nodes array. deleteSlaves deleteSlaves message Input delete only slaves nodes array. mnsPointsOnCurve === Author: Assaf Ben Zur === A fast and efficient parameter based compute node to sample and control points along a given curve. In combination with mnsBuildTransformsCurve will result in a very advanced and robust \"spline IK\" control. - Creation modes + Parametric - curve parameterized position calculation + Uniform - Addaptive uniform sampling + Fixed length - Uniform sampling based on an input max length. Initialized to curve length on creation, Keyable. - Position control - Rotation control + Aim modes - curveTangent, object + Up modes - curveNormal, up-curve, worldX, worldY, worldZ, object - Scale control - Spring ability Inputs Long-Name Short-Name Type Description curve crv nurbsCurve Input curve to sample. upCurve upCrv nurbsCurve Input up curve to sample. bindCurve bindCrv nurbsCurve Input bind curve to sample. Used only in parametrically-uniform build mode. aimCurve aimCurve nurbsCurve Input aim curve to sample. Used only in curveAim rotation mode. upObject upObj matrix Input up object matrix to use if requsted. objectOrientUpAxis objectOrientUpAxis enum In case object orient up mode is selected, which axis to use. objectOrientAimAxis objectOrientAimAxis enum In case object orient aim mode is selected, which axis to use. aimObject aimObj matrix Input aim object matrix to use if requsted. globalScale globalScale float Global scale multiplier. numOutputs numO int Number of outputs/samples. mode m enum direction=i Smaple mode- parametric, uniform, uniformFixedLength. cycle cycle bool Enable cycle mode. closedShape closedShape bool Enable closed shape mode. uScale uScl float Global positions U-Scale adjustment. uScaleInverse uSclInv float Global positions U-Scale-Inverse adjustment. uScaleMid uSclMid float Global positions U-Scale-mid adjustment. uScaleMidPos uSclMidPos float U-Scale-mid-position value. uScaleMidInverse uSclMidInv float Global positions U-Scale-mid-inverse adjustment. uOffset uOffset float Global positions U-offset adjustment. inverse inv bool Inverse result order. fixedLength fixedLength float The maximum fixed length for the result sample if requested. creationLength creationLen float Value store for the creation curve length. curveLength crvLrn float Current curve length display. uTugScale uTugScl float Global positions U-Tug-Scale adjustment. uTugScaleTension uTugSclTension float Global positions U-Tug-Scale-tension parameter. uTugOffset uTugOffset float Global positions U-Tug-Offset adjustment. rotateMode rotMode enum Samples rotation mode- curveTangent, objectAim. upMode upMode enum Samples rotation up mode- normal, curve, worldX, worldY, worldZ, objectUp. scaleMode sclMode enum Samples scale mode- absuloteCurveLength, addaptiveCurveLength, segmentLengthDependent. squashMode squashMode enum Samples squash mode- squashStretch, squash, stretch, uniform, none. doRotation doRot bool Do samples rotation. doScale doScl bool Do samples scale. rotateOrder ro enum direction=i Calculation rotation order. aimAxis aimAxis enum Aim axis choice. upAxis upAxis enum Up axis choice. customPointsUpMode cusPointsUpMode enum Custom tweakers rotation up mode. enableParamAdjust enableParamAdjust bool Enable Manual parameter adjustments. paramAdjustment paramAdjustment double Manual parameter adjustments array input. Use this parameter to adjust calculated curve parameters manually. This parameter is addative. aimParamAdjustment aimParamAdjustment double Manual parameter adjustments array input for the aim curve param. Use this parameter to adjust calculated aim curve parameters manually. This parameter is addative. excludePolesTranslation excludePolesTranslation bool exclude translation set for base and tip. excludePolesRotation excludePolesRotation bool exclude rotation set for base and tip. excludeBaseRotation excludeBaseRotation bool exclude rotation set for base. Only if excludePolesRotation is set to True. excludeTipRotation excludeTipRotation bool exclude rotation set for tip. Only if excludePolesRotation is set to True. excludePolesScale excludePolesScale bool exclude scale set for base and tip. twistAimStart twistAimStart float Self explanatory. twistAimMid twistAimMid float Self explanatory. squeezeAim squeezeAim float Self explanatory. waveAimAngle waveAimAng float Self explanatory. twistAimWavePhase twistAimWavePhase float Self explanatory. twistAimMidPos twistAimMidPos float Self explanatory. twistAimEnd twistAimEnd float Self explanatory. twistAimAll twistAimAll float Self explanatory. aimToObj aimToObj float Self explanatory. upToObj upToObj float Self explanatory. twistUpStart twistUpStart float Self explanatory. twistUpMid twistUpMid float Self explanatory. twistUpSqueeze twistUpqueeze float Self explanatory. waveUpAngle waveUpAng float Self explanatory. waveUpPhase waveUPPhase float Self explanatory. twistUpMidPos twistUpMidPos float Self explanatory. twistUpEnd twistUpEnd float Self explanatory. twistUpAll twistUpAll float Self explanatory. twistTertiaryStart twistTerStart float Self explanatory. twistTertiaryMid twistTerMid float Self explanatory. tertiarySqueeze terSqueeze float Self explanatory. tertiaryWaveAngle tertiaryWaveAng float Self explanatory. tertiaryWavePhase terWavePhase float Self explanatory. twistTertiaryMidPos twistTerMidPos float Self explanatory. tertiaryTwistEnd terTwistEnd float Self explanatory. tertiaryTwistAll terTwistAll float Self explanatory. resetScale resetScl int Reset scale values to current state. scaleMaxAddaptive sclMaxAddaptive bool Adapt max scale to squash/scale relative values. squashFactor squashFactor float Squash multiplier. squashPos squashPos float Squash position. scaleStart sclStart float Self explanatory. scaleMid sclMid float Self explanatory. scaleMidPos sclMidPos float Self explanatory. scaleWaveAmp sclWaveAmp float Self explanatory. scaleWavePhase sclWavePhase float Self explanatory. scaleEnd sclEnd float Self explanatory. scaleAll sclAll float Self explanatory. scaleAllAim scaleAllAim float Self explanatory. scaleAllUp scaleAllUp float Self explanatory. scaleAllTertiary scaleAllTertiary float Self explanatory. scaleMin sclMin float Self explanatory. scaleMax sclMax float Self explanatory. springMode sprMode enum Samples spring mode- UScale, UScaleInverse, UMidScaleInverse, UTugOffset, UTugScale. springStrength sprStrength float spring strength. springDamp sprDamp float Spring damping factor. springStiffness sprStiffness float Spring stiffness factor. goalMatrix goalMatrix matrix Spring goal matrix. doSpring doSpr bool Do spring calculation. time time time Input time value. customPosition customPosition compound Custom tweakers input transforms array. uPosition uPos float Custom tweaker U-Position. Child of customPositionOut. twist twist float Custom tweaker twist value. Child of customPositionOut. aimRotation aimRot float Custom tweaker aim-rotation value. Child of customPositionOut. tertiaryRotation tertiaryRot float Custom tweaker tertiary-rotation value. Child of customPositionOut. scaleAim sclAim float Custom tweaker aim-scale value. Child of customPositionOut. scaleUp sclUp float Custom tweaker up-scale value. Child of customPositionOut. tertiaryScale terScl float Custom tweaker tertiary-scale value. Child of customPositionOut. falloff falloff float Custom tweaker falloff value. Child of customPositionOut. Outputs Long-Name Short-Name Type Description transforms transforms compound Result transforms array. translate t float[3] Result transform translation values. Child of transforms. rotate r angle[3] Result rotation translation values. Child of transforms. matrix Result matrix. Child of transforms. scale s float[3] Result scale translation values. Child of transforms. customPositionOut cusPosOut compound Custom tweakers offset transformation values array. cusTranslate cusT float[3] Custom tweakers offset translation values. Child of customPositionOut. cusRotate cusR angle[3] Custom tweakers offset rotation values. Child of customPositionOut. mnsQuaternionBlend === Author: Assaf Ben Zur === Inputs Long-Name Short-Name Type Description inMatrix1 inMatrix1 matrix Input matrix1. Blend source A. inMatrix2 inMatrix2 matrix Input matrix1. Blend source B. Outputs Long-Name Short-Name Type Description rotate r angle[3] Rotation output. mnsRemapFloatArray === Author: Assaf Ben Zur === This simple node will take the input value (as float or angle) and split and remap the values across the requested output count, based on the given values map graph attribute. The value can also be re-ranged between two values, using the remapToRnage attributes given. The input value plug will accept floats, doubles and angles (genericAttr). The output plug will be set according to the input type given. Inputs Long-Name Short-Name Type Description valuesMap valuesMap float(array) Output values remap graph. value value float Input value to remap. Can be float, double and angle. angleOutputAsDegrees angleOutputAsDegrees bool In case the input is set to angle, if this is set to true, the output values will be in degrees instead of the original radians input. remapToRange remapToRange bool A choice to remap the outputs to a new range, using the relevant attributes. outputCount outputCount int The amount of outputs to remap the input value to. min min float RemapToRnage new minimum value. max max float RemapToRnage new maximum value. oldMin oldMin float RemapToRnage old minimum value. oldMax oldMax float RemapToRnage old maximum value. Outputs Long-Name Short-Name Type Description outValue outValue float Output values array. mnsResampleCurve === Author: Assaf Ben Zur === A simple light weight curve re-sampler. Primaraly used to embed mnsThreePointArc into an IK setup. Inputs Long-Name Short-Name Type Description resampleMode resampleMode enum Reample mode- parametric, uniform. degree degree int Reample degree. sections sections int Reample amount of sections. inputCurve inputCurve nurbsCurve Input curve to re-sample. Outputs Long-Name Short-Name Type Description outCurve outCurve nurbsCurve Result curve. mnsSimpleRivets === Author: Assaf Ben Zur === This is a simple mesh rivet node. This node will take any amount of input start position as matrix and will compile a transformation matrix for the closest face center position on the given input mesh. This node will output the result in world space, unless an inpur targetParentInverseMatrix is plugged into the relevant element. The deafult output will be the closest face center transformation matrix unless maintainOffset is set to ON- then the offset will be calculated and stored resulting in the same transformation matrix as the startPosition at bind. Live mode should only be used for debugging purposes as this will initiate the nodes initialization process on every evaluation- impacting the nodes performance significantly. The initialization process will be performed from from the given input mesh, unless a base mesh is plugged in to baseMesh plug. It is recommended to avoid keeping baseMesh and startPosition plugs live. Inputs Long-Name Short-Name Type Description mesh mesh mesh Input mesh to rivet to. positionMode positionMode int position mode. 0 is closest face center, 1 is closest vertex upMode upMode int up mode. 0 is closest vertex, 1 is input up matrix. upMatrix upMatrix int Up matrix to use in case upMode is set to 1. targetWorldMatrix targetWorldMatrix matrix Input mesh world matrix. rivet rivet compound (Array) Input rivets compound array. rivetStartPosition rivetStartPosition matrix Input start position. Rivet position will be calculated from this origin matrix. targetParentInverseMatrix targetParentInverseMatrix matrix Target transform parent inverse matrix. Use when output result is needed in local space (connect the target transform parentInverseMatrix plug) liveMode liveMode bool Live mode. Calculate everything in every evaluation. maintainOffset maintainOffset bool Maintain offset between rivet position and target mesh. Outputs Long-Name Short-Name Type Description translate t float[3] Translation output. Child of transform. rotate r angle[3] Rotation output. Child of transform. transform transform compound Output transforms array. scale s angle[3] Scale output. Child of transform. baseMesh baseMesh mesh Input base-mesh. mnsSimpleSquash === Author: Assaf Ben Zur === This simple node is designed to output a scale value to squash and stretch a given single transform value. Based on the creation distance between the target and source matricies, the scale values will be calculated using a squash/stretch algorithm using the dynamic distance (or current distance). All input values will be taken into account calculating the result. The static arc length is the creation length. This value can be set manually if needed, although the node will set this value in it's initialization stage- in case the source and handle matricies where connected. This value will be set automatically only once, in case this value needs to be changed it will need to be set manually. Aim axis attribute- stretch value will be set to the aim axis selection, squash value will be set to the remaining axes. Global scale attribute - this attribute is set to scale the static arc length to avoid unwanted scaling issues when aiming for a uniform scale of the target transform. Inputs Long-Name Short-Name Type Description handleWorldMatrix handleWorldMatrix matrix Input handle world matrix. squashRootWorldMatrix squashRootWorldMatrix matrix Input squash root position world matrix. squashFactor squashFactor float Input squash factor. stretchFactor stretchFactor float Input stretch factor. stretchMin stretchMin float Input minimum stretch value. stretchMax stretchMax float Input maximum stretch value. squashMin squashMin float Input maximum squash value. squashMax squashMax float Input minimum squash value. staticArcLength staticArcLength float Static arc length / creation length value. aimAxis aimAxis enum Aim axis- stretch value will be set to the aim axis selection, squash value will be set to the remaining axes. globalScale globalScale float Global scale multiplier value. Outputs Long-Name Short-Name Type Description scale s float[3] Output scale result. arcLength arcLength float Current arc length. mnsSphereRoll === Author: Assaf Ben Zur === This node was created to deal with a ball/sphere rolling. As oposed to common solutions, this node will evaluate the rotation of the target based on it's previous state, resulting in a non-gimble solution. This node will solve the rotation for the current time. Since ball rolling is a non-deterministic solution, this node will consider the previous state of the target transform to solve for the best posssible rotation given the input values. Best used for a simple ball rolling on the ground, or a BB-8 style character, where the charcter's movements are rotation (roll) based. Inputs Long-Name Short-Name Type Description globalScale globalScale double MObject MnsSphereRoll::aGlobalScale speedMultiplier speedMultiplier double a global keyable multiplier to offset the solve. 1 is even, less then 1 will result in a backspin, greater then one will result in a topspin. sphereRadius sphereRadius double The radius of the traget sphere to rotate. driverWorldMatrix driverWorldMatrix matrix This matrix will be sampled in order to evaluate the transition to the next calculation. This should be the target transform for the output rotation. upVectorWorldMatrix upVectorWorldMatrix matrix This up vector direction will be calculated in relation to the input driver world matrix. startFrame startFrame int Evaluation start frame. startFrameFromRange startFrameFromRange bool If true, take the start frame from current maya range instead of the input value given. time time time Time input. Outputs Long-Name Short-Name Type Description outRotation outRotation vector MObject MnsSphereRoll::aOutRotation mnsSphereVectorPush === Author: Assaf Ben Zur === Presenting mnsSphereVectorPush deformer. This deformer was purpose built for the Eye-Meniscus deformation, but can be used for many more applications. As opposed to the commonly used \"matrixCollision\", mnsSphereVectorPush will also collide back faces and push them at a higher radius based on a thickness threshold (keyable). The node will accept unlimited collider matrix inputs and will combine the deformations with ease. The input radiuses and thicknesses can be varied and keyed to choice. Implementing the mnsSphereVectorPush deformer within the eyelid setup will result in a natural looking deformation of the cornea and the eyelids. This is the case for a closed eye pose as well- which will naturally suggest the eye aim even when it isn't seen, corresponding to real life behavior. The deformer can also be used to represent the eye volume- pushing the eyelid verticies towards the eye surface, for extreme poses of which are not handled correctly by the \"aroundCenterMatrix\" of mnsCurveZip due to a range which exceeds the normalization. Inputs Long-Name Short-Name Type Description collideMatrix collideMatrix matrix Input collision matrix. radius radius matrix Input collision radius. thicknessCollide thicknessCollide bool If true, collide against back-faces using the input threshold. thicknessThreshold thicknessThreshold float Backface avarage distance to collide against. collider collider compound Collision object input array. collideMethod collideMethod enum Collision method- matrix, position. mnsSpringCurve === Author: Assaf Ben Zur === This node is used to achive simple secondary motion proceduraly. Tihs node will accept an input curve and offset curves to act upon, and using the stiffness and damping graph attributes it will calculate a new curve with secondary motion embedded. This is an evaluation node rather then a simulation. Time needs to be connected to the node in order to see it's effect. Inputs Long-Name Short-Name Type Description inputCurve inputCurve nurbsCurve Input curve. inputOffsetCurve inputOffsetCurve nurbsCurve Input offset curve. strength strength float Global strength. 0 is do nothing. preventStretching preventStretching bool Calculate stretch prevention. startFrame startFrame int Evaluation start frame. startFrameFromRange startFrameFromRange bool If true, take the start frame from current maya range instead of the input value given. time time time Time input. stiffness stiffness graph Stiffness graph control. damping damping graph Damping graph control. Outputs Long-Name Short-Name Type Description outCurve outCurve nurbsCurve Result curve. outOffsetCurve outOffsetCurve nurbsCurve Result offset curve. mnsThreePointArc === Author: Assaf Ben Zur === This node was written to create a perfectly curved limb blend, instead of using common approaches like skinned curves, simulated tangents, scaled points, etc. This method provides a very elegant way of enabling curvable limbs to animators, avoiding the use of Maya's 'makeThreePointCircularArc' which doesn't support a case where the 3 input points are collinear, nor any input curve or blending support. Another major advantage of this node is the 'conformToMidPoint' attribute- This attribute signals the algorithm to take the mid-point into consideration when drawing the edit points of the calculated arc, 'pinning' the elbow/knee in place when blending to the curved shape, even when the ratio between the 2 bones is not even (most cases). The blend is triggered once with the attribute set to 'Off' - causing the knee to shift position completely- making it unusable in animation. Then, the blend is triggered when the attribute is 'On' and the knee is pinned in place, while the result curve edit points are being shifted based on the mid-point's position. Inputs Long-Name Short-Name Type Description point1 point1 matrix Input position A. point2 point2 matrix Input position B. point3 point3 matrix Input position C. blend blend float Blend value. blendSectionA blendSectionA float Section A only blend value. blendSectionB blendSectionB float Section B only blend value. swipeStart swipeStart float Swipe blend from start value. swipeStartFalloff swipeStartFalloff float Swipe blend from start falloff value. swipeMidToRoot swipeMidToRoot float Swipe blend from mid to start value. swipeMidToRootFalloff swipeMidToRootFalloff float Swipe blend from mid to start falloff value. swipeMidToEnd swipeMidToEnd float Swipe blend from mid to end value. swipeMidToEndFalloff swipeMidToEndFalloff float Swipe blend from mid to end falloff value. swipeEnd swipeEnd float Swipe blend from end to start value. swipeEndFalloff swipeEndFalloff float Swipe blend from end to start falloff value. collinearAction collinearAction enum Collinear action choice- inputCurve, resample. resampleMode resampleMode enum If resmapling is chosen, use this mode to resample- parametric, uniform. degree degree int If resmapling is chosen, use this degree. sections sections int If resmapling is chosen, use this amount of sections. conformMidPoint conformMidPoint bool Use the mid point to enhance clending algorithm. inputCurve inputCurve nurbsCurve Input curve. inputOffsetCurve inputOffsetCurve nurbsCurve Input offset curve. Outputs Long-Name Short-Name Type Description outCurve outCurve nurbsCurve Result Curve. outOffsetCurve outOffsetCurve nurbsCurve Result offset Curve. center center float[3] Result circle center point. radius radius float Result circle radius. mnsTransformSpring === Author: Assaf Ben Zur === Inputs Long-Name Short-Name Type Description inputWorldMatrix inputWorldMatrix float MObject MnsTransformSpring::aInputWorldMatrix targetParentInverseMatrix targetParentInverseMatrix float MObject MnsTransformSpring::aTargetParentInverseMatrix strength strength float Global strength. 0 is do nothing. startFrame startFrame int Evaluation start frame. startFrameFromRange startFrameFromRange bool If true, take the start frame from current maya range instead of the input value given. time time time Time input. stiffness stiffness graph Stiffness graph control. damping damping graph Damping graph control. Outputs Long-Name Short-Name Type Description translate t float MObject MnsTransformSpring::aOutTranslate mnsVolumeJoint === Author: Assaf Ben Zur === Inputs Long-Name Short-Name Type Description globalScale globalScale double Global scale multiplier. parentJointWorldMatrix parentJointWorldMatrix matrix Input parent joint world Matrix. Angle source-A. childJointWorldMatrix childJointWorldMatrix matrix Input child joint world Matrix. Angle source-B. childJointRestWorldMatrix childJointRestWorldMatrix matrix Input child joint rest matrix. This will dictate the zero position for the calculation. volumeJoint volumeJoint compound array Input array compound for a volume joint calculation. Unlimited. restTranslate restTranslate vector[3] Rest translation values. posXTranslate posXTranslate vector[3] Positive X angle translation values. negXTranslate negXTranslate vector[3] Negative X angle translation values. posYTranslate posYTranslate vector[3] Positive Y angle translation values. negYTranslate negYTranslate vector[3] Negative Y angle translation values. posZTranslate posZTranslate vector[3] Positive Z angle translation values. negZTranslate negZTranslate vector[3] Negative Z angle translation values. posXScale posXScale vector[3] Positive X angle scale values. negXScale negXScale vector[3] Negative X angle scale values. posYScale posYScale vector[3] Positive Y angle scale values. negYScale negYScale vector[3] Negative Y angle scale values. posZScale posZScale vector[3] Positive Z angle scale values. negZScale negZScale vector[3] Negative Z angle scale values. rotationBlend rotationBlend double Rotation blend between the 2 sources (parent and child joints) for this volume joint. 0 is parent rotation, 1 is child rotation. parentInverseMatrix parentInverseMatrix matrix Target joint's parent inverse matrix to be used to localize the output values. Outputs Long-Name Short-Name Type Description result result compound Output transforms array. translate t float[3] Translation output. Child of transform. rotate r angle[3] Rotation output. Child of transform. scale s angle[3] Scale output. Child of transform. posXState posXState double Current Positive-X direction state, between 0 and 1. negXState negXState double Current Negative-X direction state, between 0 and 1. posYState posYState double Current Positive-Y direction state, between 0 and 1. negYState negYState double Current Negative-Y direction state, between 0 and 1. posZState posZState double Current Positive-Z direction state, between 0 and 1. negZState negZState double Current Negative-Z direction state, between 0 and 1.","title":"Maya Plugins"},{"location":"Maya-Plugins/#maya-plugins","text":"","title":"Maya-Plugins"},{"location":"Maya-Plugins/#mnsannotate","text":"=== Author: Assaf Ben Zur === This node is a utility node used to present value annotations in maya's viewport easily. When needing to present any keyframed values in a playblast within maya, there isn't any maya native node to allow values display within the VP. This node was created for this need. All connected attributes will be displayed as a new line presenting attributes and their current values, updating in real time. The display settings are controled within this node, where the position of the display is controlled via the custom locator created with it. The amount of attribute display is unlimited, and multiple unlimited instances of this node can be created freely. This is mainly used to display technicall setups. Inputs Long-Name Short-Name Type Description attributes attrs multi Input attributes array to display, unlimited amount. Each attribute component will be displayed as a single line. fontSize fontSize float Display Font Size. fontColor fontColor float[3] Display Font Color, RGB (0 to 1). fontTransparency fontTransparency float Font transperancy. 1 = Fully opaque, 0 = Fully tansparennt. precision precision int Numberic attribute display precision- value represents the amount of integers right to the decimal point. lineSpacing lineSpacing float Line spacing between attributes line. drawFlat drawFlat int Draw in 2D mode, regardless of the matrix position. The position is dictated by positionX and positionY attributes, relative to the viewports screen space resolution. positionX positionX double Display top-left corener X position, if drawFlat attribute is True. positionY positionY double Display top-left corener y position, if drawFlat attribute is True. nameOnlyMode nameOnlyMode int MObject mnsAnnotate::aNameMode","title":"mnsAnnotate"},{"location":"Maya-Plugins/#mnsautowheeldrive","text":"=== Author: Assaf Ben Zur === Inputs Long-Name Short-Name Type Description startFrame startFrame int Evaluation start frame. startFrameFromRange startFrameFromRange bool If true, take the start frame from current maya range instead of the input value given. time time time Time input.","title":"mnsAutoWheelDrive"},{"location":"Maya-Plugins/#mnsbuildtransformscurve","text":"=== Author: Assaf Ben Zur === This node builds a nurbsCurve shape, based on input transforms array. The curve parameters are dictated by this node's attributes, and can be dynamiclly changed and even keyframed if needed. This node also creates and offset curve shape result, to be used later as an Up-Vector for every single arbitrary point along the result main curve. Inputs Long-Name Short-Name Type Description globalScale globalScale float Global scale multiplier. tweakCurve tweakCurve nurbsCurve Input tweak curve shape. tweakCurveBase tweakCurveBase nurbsCurve Input tweak curve base shape. buildMode buildMode enum Build mode- EPs, CVs, Hermite, TangentedCVs, bezier. transforms transforms compound Transforms array to build the curve from. matrix matrix matrix Input matrix transform, child of transforms. If this plug is connected, offsetX value will be taken as an the offset amount. offsetBaseMatrix offsetBaseMatrix matrix Matrix to build offset vectors from degree degree int Output curve degree, 1-5. offsetX offsetX float Output offset curve X parameter. offsetY offsetY float Output offset curve Y parameter. offsetZ offsetZ float Output offset curve Z parameter. tangentDirection tangentDirection enum If build mode is on Hermite, this paremeter dictates the tangent direction. reverse reverse int Reverse output curve and offset curve. form form enum Result curve form- open or closed HermiteSteps HermiteSteps int Hermite mode steps amount. tangentLength tangentLength float Control tangent length (if present) OffsetType OffsetType enum Offset build type - world or local. buildOffsetCurve buildOffsetCurve int Initiate offset curve build. resample resample bool Resample curve before output, based on substeps paremeter. substeps substeps int resample substeps. localize localize bool In case this attribute is on, the result will be localized based on the input worldToLocal matrix. worldToLocalMatrix worldToLocalMatrix matrix In case localize attribute is on, the result will be localized based on this matrix. Outputs Long-Name Short-Name Type Description outCurve outCurve kNurbsCurve Result curve shape. outOffsetCurve outOffsetCurve nurbsCurve Result offset curve shape. length length double Result curve length. offsetLength offsetLength double Result offset curve length.","title":"mnsBuildTransformsCurve"},{"location":"Maya-Plugins/#mnscameragateratio","text":"=== Author: Assaf Ben Zur === A simple utility callback node to dynamiclly control and update the input camer'as display \"Camera-Gate\" parameters. Inputs Long-Name Short-Name Type Description cameraIn cameraIn message Affected camera node. gateWidth gateWidth float Cemera gate width. gateHeight gateHeight float Cemera gate height.","title":"mnsCameraGateRatio"},{"location":"Maya-Plugins/#mnsclosestpointsonmesh","text":"Inputs Long-Name Short-Name Type Description inMesh inMesh mesh Input mesh to find closest point to. inPosition inPosition compound(Array) Input position to calculate a result for. Array Attr. matrix matrix matrix Input matrix to calculate a result for. Array Attr. targetParentMatrix targetParentMatrix matrix Target parent matrix to multiply by before setting the result. Outputs Long-Name Short-Name Type Description outPosition op vector Output position result.","title":"mnsClosestPointsOnMesh"},{"location":"Maya-Plugins/#mnscompressiontensionblend","text":"=== Author: Assaf Ben Zur === Deformer. A simple compression and tension based deformer. This deformer will detect, display and deform a mesh based on the difference between the current deformed state and an input base-state (base-mesh). The deformer contains 3 display modes: - Compression & Tension (50% gray as base-state) - Compression Only (black as base-state) - Tension (black as base-state) The deformer also conatins separate multipliers for both tension and compression. This deformer can be used to drive corrective shapes, wrinkles, volume gain/loss and much more. Inputs Long-Name Short-Name Type Description baseMesh baseMesh mesh Static base mesh input. tensionTarget tensionTarget mesh Tension blend target. compressionTarget compressionTarget mesh Compression blend target. liveMode liveMode bool Live mode. Re-calculate edge lengthes on evaluation. displayMode displayMode enum Map display mode- None, compressionTension, compression, tension. compressionMultiplier compressionMultiplier float Global compression multiplier. tensionMultiplier tensionMultiplier float Global tension multiplier.","title":"mnsCompressionTensionBlend"},{"location":"Maya-Plugins/#mnscurvetweak","text":"=== Author: Assaf Ben Zur === This node was created in order to achive curve modifications/tweaks, without changing its form, not it's shape at bind position. The input and output curves will match while the base curve and tweak curve match in shape. Once any difference between the base shape and tweak shape was detected, the difference between these curves will be projected onto the input curve. The objective of this node is to maintain all curve attributes/data (nSpans, nCvs, form, degree) unchanged while still having the ability to tweak the curve with different parameters. Inputs Long-Name Short-Name Type Description inputCurve inputCurve kNurbsCurve Input curve to tweak. Output curve will be the same as this curve while the tweak curve matches the base curve. inputBaseCurve inputBaseCurve kNurbsCurve Input base curve. This curve will be used to calculate the delta for the tweak. inputTweakCurve inputTweakCurve kNurbsCurve Input twek curve. This curve is intended to match the base curve as bind. This curve should be modified - after the curve is modified, the delta difference between it and the base curve will be projected on the input curve. buildOffsetCurve buildOffsetCurve int Initiate offset curve build. tweakOffset tweakOffset int This will determine whether the offset curve created will be tweaked or not. offsetBaseMatrix offsetBaseMatrix matrix Matrix to build offset vectors from offset offset float Output offset curve parameter. Outputs Long-Name Short-Name Type Description outCurve outCurve kNurbsCurve Result curve shape. outOffsetCurve outOffsetCurve kNurbsCurve Result offset curve shape.","title":"mnsCurveTweak"},{"location":"Maya-Plugins/#mnscurvevariable","text":"=== Author: Assaf Ben Zur === Curve based solve for a Variable-FK Setup. This fast and efficient node allows the user to create a variable FK setup using input curves and local transformations, outputting a solved curve and up-curve- instead of the more common transforms output method. The node will accept any amount of input transforms, outputting the complex offset parent solve for each input as well as the solved curves shapes. This is to avoid the use of any extra nodes or multiple parent transforms- pinning the controls to the output curve at all times. The initial solve, as well as all features are calculated within a single loop. As opposed to the common Variable FK setup, the curve based approach eliminates the Rest-Pose constant- making the node's algorithm Rest-Pose dynamic. In fact, it doesn't exist. This approach uses only the input array amount constant to calculate a uniform positioning along the output curve- allowing the input curve to be changeable (live / dynamic). Notice that the amount of input variable controls is completely independent of the main controls input. Inputs Long-Name Short-Name Type Description curve crv nurbsCurve Input curve. upCurve upCrv nurbsCurve Input offset curve. inTransform inTransform compound Input variable control values array. uPosition uPos float Input U position. Child of inTransform. strength strength float Input strength. Child of inTransform. aimTranslate aimT float Input aim translation. Child of inTransform. upTranslate upT float Input up translation. Child of inTransform. terTranslate terT float Input tertiary translation. Child of inTransform. falloff falloff float Input falloff value. Child of inTransform. aimRotation aimRot angle Input aim-rotation value. Child of inTransform. upRotation upRot angle Input up-rotation value. Child of inTransform. tertiaryRotation terRot angle Input tertiary-rotation value. Child of inTransform. localMatrix localMatrix angle Input local transformation matrix. Child of inTransform. upMode upMode enum Up mode- normal, curve, worldX, worldY, worldZ. substeps substeps int Resample substeps value. translateMode tMode enum Control translation mode- IK, FK. degree degree int Result curves degree. buildMode buildMode enum Result curve build mode- EPs, CVs. rotateOrder ro enum Calculation rotation-order. aimAxis aimAxis enum Aim axis choice. upAxis upAxis enum Up axis choice. offsetType offsetType enum Offset curve adjustment mode- local, world. offsetX offsetX float Offset curve adjustment offset X parameter. offsetY offsetY float Offset curve adjustment offset Y parameter. offsetZ offsetZ float Offset curve adjustment offset Z parameter. uScale uScale float Global U-Scale adjusment. Addative to array indevidual u inputs. uOffset uOffset float Global U-Offfset adjusment. Addative to array indevidual u inputs. startAmp startAmp float Sine start amplitude value. endAmp endAmp float Sine end amplitude value. amplitudeAim amplitudeAim float Sine calculation X direction amplitude value. amplitudeUp amplitudeUp float Sine calculation Y direction amplitude value. amplitudeTertiary amplitudeTertiary float Sine calculation Z direction amplitude value. frequencyAim frequencyAim float Sine calculation X direction frequency value. frequencyUp frequencyUp float Sine calculation Y direction frequency value. frequencyTertiary frequencyTertiary float Sine calculation Z direction frequency value. phaseAim phaseAim float Sine calculation X direction phase value. phaseUp phaseUp float Sine calculation Y direction phase value phaseTertiary phaseTertiary float Sine calculation Z direction phase value frequency frequency float Sine calculation global addative frequency value. phase phase float Sine calculation global addative phase value. startPos startPos float Sine start position value. outCtrlsUpMode outCtrlsUpMode enum Out position transforms up type - normal, curve, worldX, worldY, worldZ. Outputs Long-Name Short-Name Type Description outCurve outCurve nurbsCurve Output curve shape. outOffsetCurve outOffsetCurve nurbsCurve Output offset curve shape. outTransform outTransform compound Output control offset position and rotation array. translate t float[3] Output control offset position, child of outTransform. rotate r angle[3] Output control offset rotation, child of outTransform. rotateX rotX angle Output control offset rotation, X component, child of rotate. rotateY rotY angle Output control offset rotation, Y component, child of rotate. rotateZ rotZ angle Output control offset rotation, Z component, child of rotate.","title":"mnsCurveVariable"},{"location":"Maya-Plugins/#mnscurvezip","text":"=== Author: Assaf Ben Zur === Curve based node. This is primarily used for eyelids and lips. This fast solution was developed to replace complex and heavy graphs- containing many math nodes, curve deformers and constraints. This setup provides a very clean deployment, processing the math algorithm internally. Combining this node with mnsBuildTransformsCurve and mnsPointsOnCurve, will result in a very efficient, dynamic and flexible setup. All calculations are processed within a single loop. All curve operations are aware of one another, and are NOT addative- meaning that all operations are available at any position, and will NOT break one another, nor overlap. All attributes are not minimum limited to 0 and can be adjusted to the negative direction- pulling the bind pose against each other instead of towards each other. The node contains a centerMatrix input plug, which is a live world position that is used to scale the calculated vectors based on the bind position offset (per curve parameter). The problem arising from this method is a mismatch at any meet position between curve A and B due to an offset variation between all points (except for a perfect circle scenario, which is never the case). This problem is solved using a conform attribute within which will pull one of the curves (based on user choice) to the other below a selected distance threshold- Resulting in a watertight-seal. Using mnsPointsOnCurve to sample the result curves allows for a simple skinCluster to deform the mesh. mnsCurveZip will output a pair of offset curves as well as the result curves, calculated by world axis vectors or the centerMatrix as a base, which are used as an Up-Curve input for the mnsPointsOnCurve node to manage rotations correctly as well. The node contatins some more important inputs: The tweakCurves inputs. Aspiring to an inclusive and comprehensive setup, tweak curves (A, B and Mid) can be plugged in to expose another manual layer of animation using scene controls. The input curves are 100% independent of the base curve inputs and DO-NOT need to share topology with each other, nor the source inputs - as they are being re-sampled internally based on the build mode. This means that the tweak controls amount is limitless and is NOT a constant, nor predefined. Inputs Long-Name Short-Name Type Description bindCurveA bindCurveA nurbsCurve Input curve A base-curve shape. tweakCurveA tweakCurveA nurbsCurve Input curve A curve shape. bindCurveB bindCurveB nurbsCurve Input curve B base-curve shape. tweakCurveB tweakCurveB nurbsCurve Input curve B curve shape. tweakCurveABase tweakCurveABase nurbsCurve Input curve A tweak base-curve shape. tweakCurveBBase tweakCurveBBase nurbsCurve Input curve B tweak base-curve shape. midCurve midCrv nurbsCurve Input target mid curve. midCurveBase midCrvBase nurbsCurve Input mid tweak curve base. midCurveTweak midCrvTweak nurbsCurve Input mid tweak curve. centerMatrix centerMatrix matrix Input center transformation matrix. midPointMatrix midPointMatrix matrix Input mid point traget matrix. sampleMode m enum Curve sample mode- parametric, uniform. matchInputCurve matchInputCurve enum Result curve matched parameters to- none, curveA, curveB. substeps substeps int Result curve resampling sub-step value. degree degree int Result curve degree value. buildMode buildMode enum Curve build mode- EPs, CVs. midGenerateFrom midGenerateFrom enum Generate automatic mid curve from- bindBases, tweakCurves, input. midBias midBias float Generated curve bias. aroundCenter aroundCenter bool Calculate results considering the input center matrix. conformToMeetPoint conformToMeetPoint bool Conform the selected curve result to meet the oter curve based on set parameters. curveToConform curveToConform enum Which curve to conform - curveA, curveB. conformDistancethreshold conformDistancethreshold enum Which curve to conform - curveA, curveB. AToMid AToMid float Blend curve A to mid-curve. BToMid BToMid float Blend curve B to mid-curve. AToB AToB float Blend curve A to curve B. BToA BToA float Blend curve B to curve A. allToMidPoint allToMidPoint float Blend both curves to mid-curve. pushOut pushOut float Curves push-out added value. zipStart zipStart float Zip start value. zipStartFalloff zipStartFalloff float Zip start falloff value. zipEnd zipEnd float Zip end value. zipEndFalloff zipEndFalloff float Zip end falloff value. glue glue bool Do glue. glueTherhold glueTherhold float Glue threshold value. offsetBase offsetBase enum Offset curve build mode. centerMatrix, worldX, worldY, worldZ. offset offset float Offset curve build parameter. globalMultiplier globalMultiplier float Global value multiplier. Outputs Long-Name Short-Name Type Description outCurveA outCurveA nurbsCurve Result curve A shape. outCurveB outCurveB nurbsCurve Result curve B shape. outCurveAOffset outCurveAOffset nurbsCurve Result curve A offset shape. outCurveBOffset outCurveBOffset nurbsCurve Result curve B offset shape.","title":"mnsCurveZip"},{"location":"Maya-Plugins/#mnscurvezipb","text":"=== Author: Assaf Ben Zur === Curve based node. This is primarily used for eyelids and lips. This fast solution was developed to replace complex and heavy graphs- containing many math nodes, curve deformers and constraints. This setup provides a very clean deployment, processing the math algorithm internally. Combining this node with mnsBuildTransformsCurve and mnsPointsOnCurve, will result in a very efficient, dynamic and flexible setup. All calculations are processed within a single loop. All curve operations are aware of one another, and are NOT addative- meaning that all operations are available at any position, and will NOT break one another, nor overlap. All attributes are not minimum limited to 0 and can be adjusted to the negative direction- pulling the bind pose against each other instead of towards each other. The node contains a centerMatrix input plug, which is a live world position that is used to scale the calculated vectors based on the bind position offset (per curve parameter). The problem arising from this method is a mismatch at any meet position between curve A and B due to an offset variation between all points (except for a perfect circle scenario, which is never the case). This problem is solved using a conform attribute within which will pull one of the curves (based on user choice) to the other below a selected distance threshold- Resulting in a watertight-seal. Using mnsPointsOnCurve to sample the result curves allows for a simple skinCluster to deform the mesh. mnsCurveZip will output a pair of offset curves as well as the result curves, calculated by world axis vectors or the centerMatrix as a base, which are used as an Up-Curve input for the mnsPointsOnCurve node to manage rotations correctly as well. The node contatins some more important inputs: The tweakCurves inputs. Aspiring to an inclusive and comprehensive setup, tweak curves (A, B and Mid) can be plugged in to expose another manual layer of animation using scene controls. The input curves are 100% independent of the base curve inputs and DO-NOT need to share topology with each other, nor the source inputs - as they are being re-sampled internally based on the build mode. This means that the tweak controls amount is limitless and is NOT a constant, nor predefined. Inputs Long-Name Short-Name Type Description globalScale globalScale double Global scale value. inTweakAPosition inTweakAPosition matrix (array) Input tweaker local matrix. inTweakBPosition inTweakBPosition matrix (array) Input tweaker local matrix. tweakMode tweakMode enum Tweak curve build mode. tweakMirrorMatrix tweakMirrorMatrix matrix Mirror matrix to add to the local tweaker transfomation build. bindCurveA bindCurveA nurbsCurve Input curve A base-curve shape. bindCurveB bindCurveB nurbsCurve Input curve B base-curve shape. centerMatrix centerMatrix matrix Input center transformation matrix. sampleMode m enum Curve sample mode- parametric, uniform. midCurveMode midCurveMode enum Mid curve generation mode. One To one - calculate mid point for every upper and lower pair. Regenerate- create a new mid curve, resample based on midCurveSubsteps attribute value. midCurveSubsteps midCurveSubsteps int Mid curve generation sampling amount matchInputCurve matchInputCurve enum Result curve matched parameters to- none, curveA, curveB. substeps substeps int Result curve resampling sub-step value. degree degree int Result curve degree value. buildMode buildMode enum Curve build mode- EPs, CVs. midBias midBias float Generated curve bias. aroundCenter aroundCenter bool Calculate results considering the input center matrix. conformToMeetPoint conformToMeetPoint bool Conform the selected curve result to meet the oter curve based on set parameters. curveToConform curveToConform enum Which curve to conform - curveA, curveB. conformDistancethreshold conformDistancethreshold enum Which curve to conform - curveA, curveB. AToMid AToMid float Blend curve A to mid-curve. BToMid BToMid float Blend curve B to mid-curve. AToBindB AToBindB float Blend curve A to curve B. BToBindA BToBindA float Blend curve B to curve A. AToB AToB float Blend curve A to curve B. BToA BToA float Blend curve B to curve A. sCurveA sCurveA float Blend curve A into a procedural S shape. sCurveB sCurveB float Blend curve B into a procedural S shape. allToMidPoint allToMidPoint float Blend both curves to mid-curve. pushOut pushOut float Curves push-out added value. zipStart zipStart float Zip start value. zipStartFalloff zipStartFalloff float Zip start falloff value. zipEnd zipEnd float Zip end value. zipEndFalloff zipEndFalloff float Zip end falloff value. offsetBase offsetBase enum Offset curve build mode. centerMatrix, worldX, worldY, worldZ. offset offset float Offset curve build parameter. Outputs Long-Name Short-Name Type Description outCurveA outCurveA nurbsCurve Result curve A shape. outCurveB outCurveB nurbsCurve Result curve B shape. outCurveAOffset outCurveAOffset nurbsCurve Result curve A offset shape. outCurveBOffset outCurveBOffset nurbsCurve Result curve B offset shape. outTweakA outTweakA compound (array) Parent attribute that holds output values for tweaker offset position. outTweakATranslate outTweakATranslate vector Output offset position for a given tweaker. outTweakARotate outTweakARotate vector Output offset rotation for a given tweaker. outTweakB outTweakB compound (array) Parent attribute that holds output values for tweaker offset position. outTweakBTranslate outTweakBTranslate vector Output offset position for a given tweaker. outTweakBRotate outTweakBRotate vector Output offset rotation for a given tweaker.","title":"mnsCurveZipB"},{"location":"Maya-Plugins/#mnsdynamicpivot","text":"=== Author: Assaf Ben Zur === This is a simple node to calculate a foot's dynamic pivot internally, acoiding the use of many transforms and node connections. Given an input curve, world origin position (as matrix) and mapping info, this node will map the input rotation values into a new custom point adding the rotation into the translation. This essentailly will push the new point rapidly away from it's origin into the mapping direction. Now using the given input curve, the closest point on curve from the new point will be calcultaed and outputted into the rotatePivot plug. This output plug can then be plugged into a custom pivot attribute of any transform- creating a dynamiclly calculated pivot along the given curve. Inputs Long-Name Short-Name Type Description inputCurve inputCurve nurbsCurve Input curve. rotateX rx angle Input local X rotation. rotateY ry angle Input local Y rotation. rotateZ rz angle Input local Z rotation. rotate r angle[3] Input rotations. originWorldMatrix owm matrix Input origin position to strat the calculation from. targetParentInverseMatrix tpim matrix Target transform parent inverse matrix to localize the rotate pivot position result. mapRotXTo mapRotXTo enum Mapping info from input X rotation. mapRotYTo mapRotYTo enum Mapping info from input Y rotation. mapRotZTo mapRotZTo enum Mapping info from input Z rotation. distRateMultiplier distRateMultiplier double The rotation rate of addition in the translation values. inputMultipliers inputMultipliers bool Pre-calc input multipliers. Outputs Long-Name Short-Name Type Description rotatePivot rotatePivot float[3] Result rotate pivot position.","title":"mnsDynamicPivot"},{"location":"Maya-Plugins/#mnsexponential","text":"","title":"mnsExponential"},{"location":"Maya-Plugins/#mnsiksolver","text":"=== Author: Assaf Ben Zur === This IK-Solver node provides an alternative, faster and more reliable solution for a 2-joint IK set-up. This enhanced IK-solution offers a much cleaner approach as well, computing the blend internally- making any basic IK-FK set-up efficient, stable, fast and clean. To add on the internal FK-IK switch, this node contains a few more features that are already an industry standard: Softness - prevents a pop on ik limit approach. Slide - Knee position sliding (for character animation). Stretch - Providing a limb-stretch when the ik-solve is beyond its limit. Axis Switching - Offering an easy switch to any joint orientation. Inputs Long-Name Short-Name Type Description boneLengthA bla float Base length A. boneLengthB blb float Base length B. restHandleLength restHandleLength float Base length between the root position and the handle. blend blend float IK-FK blend value. rootFK rootFK matrix Input FK root matrix. midFK midFK matrix Input FK mid matrix. endFK endFK matrix Input FK end matrix. ikTarget ikTarget matrix Input IK target matrix. poleVector poleVector matrix Input pole-vector target matrix. rootWorldMatrix rootWorldMatrix matrix Module root input matrix. roll roll float IK addative roll value. slide slide float IK mid slide value. softness softness float IK softness parameter. stretchLimit stretchLimit float IK stretch limit value. 1 is no stretch, 2 is double the length. aimAxis aimAxis enum Aim axis choice. upAxis upAxis enum Up axis choice. segmentScaleCompensate segmentScaleCompensate bool calculate with segment scale compensate on or off. Outputs Long-Name Short-Name Type Description rootTranslate rootTranslate float[3] Root out translate output. Child of outRoot. rootRotateX rootRotateX float Root out translate X output. Child of outRoot. rootRotateY rootRotateY float Root out translate Y output. Child of outRoot. rootRotateZ rootRotateZ float Root out translate Z output. Child of outRoot. rootRotate rootRotate angle[3] Root out rotate output. Child of outRoot. rootScale rootScale float[3] Root out scale output. Child of outRoot. outRoot outRoot compound Root output transformation values. midTranslate midTranslate float[3] Mid out translate output. Child of outMid. midRotateX midRotateX float Mid out translate X output. Child of outMid. midRotateY midRotateY float Mid out translate Y output. Child of outMid. midRotateZ midRotateZ float Mid out translate Z output. Child of outMid. midRotate midRotate angle[3] Mid out rotate output. Child of outMid. midScale midScale float[3] Mid out scale output. Child of outMid. outMid outMid compound Mid output transformation values. endTranslate endTranslate float[3] End out translate output. Child of outEnd. endRotateX endRotateX float End out translate X output. Child of outEnd. endRotateY endRotateY float End out translate Y output. Child of outEnd. endRotateZ endRotateZ float End out translate Z output. Child of outEnd. endRotate endRotate angle[3] End out rotate output. Child of outEnd. endScale endScale float[3] End out scale output. Child of outEnd. outEnd outEnd compound End output transformation values. ikVis ikVis bool IK mode visibility. fkVis fkVis bool FK mode visibility.","title":"mnsIKSolver"},{"location":"Maya-Plugins/#mnslipzip","text":"=== Author: Assaf Ben Zur === Curve based node. Inputs Long-Name Short-Name Type Description globalScale globalScale double Global scale value. inTweakAPosition inTweakAPosition matrix (array) Input tweaker local matrix. inTweakBPosition inTweakBPosition matrix (array) Input tweaker local matrix. tweakMode tweakMode enum Tweak curve build mode. tweakMirrorMatrix tweakMirrorMatrix matrix Mirror matrix to add to the local tweaker transfomation build. centerMatrix centerMatrix matrix Input center transformation matrix. sampleMode m enum Curve sample mode- parametric, uniform. substeps substeps int Result curve resampling sub-step value. degree degree int Result curve degree value. buildMode buildMode enum Curve build mode- EPs, CVs. midBias midBias float Generated curve bias. aroundCenter aroundCenter bool Calculate results considering the input center matrix. alongSurface alongSurface bool Calculate results considering the input surface. conformToMeetPoint conformToMeetPoint bool Conform the selected curve result to meet the oter curve based on set parameters. curveToConform curveToConform enum Which curve to conform - curveA, curveB. conformDistancethreshold conformDistancethreshold enum Which curve to conform - curveA, curveB. AToMid AToMid float Blend curve A to mid-curve. BToMid BToMid float Blend curve B to mid-curve. AToB AToB float Blend curve A to curve B. BToA BToA float Blend curve B to curve A. sCurveA sCurveA float Blend curve A into a procedural S shape. sCurveB sCurveB float Blend curve B into a procedural S shape. allToMidPoint allToMidPoint float Blend both curves to mid-curve. upperCurlBaseMatrix upperCurlBaseMatrix matrix Base upper matrix to calculate offsets before calculating the curl. upperCurlMatrix upperCurlMatrix matrix Upper matrix for calculating the curl. upperCurlFalloff upperCurlFalloff float Upper curl falloff lowerCurlBaseMatrix lowerCurlBaseMatrix matrix Base lower matrix to calculate offsets before calculating the curl. lowerCurlMatrix lowerCurlMatrix matrix Lower matrix for calculating the curl. lowerCurlFalloff lowerCurlFalloff float Lower curl falloff pushOutA pushOutA float Curves push-out added value. pushOutB pushOutB float Curves push-out added value. zipStart zipStart float Zip start value. zipStartFalloff zipStartFalloff float Zip start falloff value. zipEnd zipEnd float Zip end value. zipEndFalloff zipEndFalloff float Zip end falloff value. offsetBase offsetBase enum Offset curve build mode. centerMatrix, worldX, worldY, worldZ. offset offset float Offset curve build parameter. Outputs Long-Name Short-Name Type Description outCurveA outCurveA nurbsCurve Result curve A shape. outCurveB outCurveB nurbsCurve Result curve B shape. outCurveAOffset outCurveAOffset nurbsCurve Result curve A offset shape. outCurveBOffset outCurveBOffset nurbsCurve Result curve B offset shape. outTweakA outTweakA compound (array) Parent attribute that holds output values for tweaker offset position. outTweakATranslate outTweakATranslate vector Output offset position for a given tweaker. outTweakARotate outTweakARotate vector Output offset rotation for a given tweaker. outTweakB outTweakB compound (array) Parent attribute that holds output values for tweaker offset position. outTweakBTranslate outTweakBTranslate vector Output offset position for a given tweaker. outTweakBRotate outTweakBRotate vector Output offset rotation for a given tweaker.","title":"mnsLipZip"},{"location":"Maya-Plugins/#mnsmatrixconstraint","text":"=== Author: Assaf Ben Zur === Light weight alternative to Maya's native constraints - All within one node. Live switchable/keyable maintainOffset channel. Easily add spaces/masters to existing constraint using recalcOffset channel. Inputs Long-Name Short-Name Type Description sourceWorldMatrix sourceWorldMatrix matrix Source world matrix. spaceSet spaceSet int Constraint Space index. maintainOffset maintainOffset bool Maintain offset attribute. recalcOffsets recalcOffsets int Recalculate offset in current state. targetParentInverseMatrix targetParentInverseMatrix matrix Traget inverse matrix. targetRotateOrder targetRotateOrder enum Calculation rotate-order. targetWorldMatrix targetWorldMatrix matrix Traget world matrix. Outputs Long-Name Short-Name Type Description matrix m matrix Result as matrix form. translate t float[3] Translation values result. rotate r angle[3] Rotation values result. scale s float[3] Scale values result. shear shear float[3] Shear values result.","title":"mnsMatrixConstraint"},{"location":"Maya-Plugins/#mnsmeshrivets","text":"=== Author: Assaf Ben Zur === A multi \"Point-On-Poly\" constraint style compute node. The node will accept any amount of input positions, as well as an input base-mesh and a target mesh. The base mesh is used to calculate the source position and offset, the target mesh is used to calculate the result position based on the selected attributes within the node: - Calculation Method: Closest UV, Vertex, Face - Do Rotation: On, Off - Do Scale: On, Off - Rotation: Aim-Axis and up Axis choice (All 6) - Up-Mode: World (X,Y,Z), Closest Tangent, Closest Binormal The node will accept any amount on input tweaker matrices that can be used to adjust the riveted transforms globally and easily. The tweakers adjustments are calculated in world spcae and the algorithm is fully independent, additive, and keyable. The proximity calculation is matrix based to achieve non-spherical tweaks. As tweaking the position of the rivets is not sensible as the transforms' position is based on the target mesh, the proximity tweakers are used to adjust rotation and scale only. The node contains two adjustemt spaces: - World- Will transform the outputs in world space, providing a more intuative behaviour, although less practical. - Object - Will transform the outputs in their relative local spaces (preferable), which will provide a less intuative behaviour (dependent of the tweaker and output orientation), although very practical. A falloff attribute is also implemented to allow control over the decay within the \"collision\" zone. Inputs Long-Name Short-Name Type Description mesh mesh mesh Input mesh to rivet to. targetWorldMatrix targetWorldMatrix matrix Input mesh world matrix. rivet rivet compound Input rivet transforms array. worldMatrix worldMatrix matrix Input rivet transforms matrix. Child of rivet. parentInverseMatrix parentInverseMatrix matrix Input rivet transforms inverse parent matrix. Child of rivet. liveMode liveMode bool Live mode. Calculate everything in every evaluation. calculationMethod calculationMethod enum Calculation basis- UV, closestVertex, closestFace. uvTolerance uvTolerance float UV search tolerance threshold value. doRotation doRotation bool Calculate rotations. doRivetRotation doRivetRotation bool Calculate rivet local rotations. rotateOrder ro enum Calculation rotate-order. upMode upMode enum Rotation calculation up mode- worldX, worldY, worldZ, closestVertexBinormal, closestVertexTangent. aimAxis aimAxis enum Aim Axis choice. upAxis upAxis enum Up Axis choice. doRivetScale doRivetScale bool Calculate scale. doScale doScale bool Scale the rivets with the target mesh scale. When off the mesh's scale doesn't affect the rivets. maintainOffset maintainOffset bool Maintain offset between rivet position and target mesh. proximityRotationSpace proximityRotationSpace enum Proximity tweak rotation space- object, world. proximityTweaker proximityTweaker compound Proximity tweakers input array. proximityWorldMatrix proximityWorldMatrix matrix Proximity tweaker matrix. Child of proximityTweaker. proximityLocalMatrix proximityLocalMatrix matrix Proximity tweaker local matrix. Child of proximityTweaker. rivetScale rivetScale float[3] Scale tweak input. falloff falloff float Proximity tweak falloff. Child of proximityTweaker. texture texture color Input color map adjustment. rotationTextureAmplitude rotationTextureAmplitude float Color map adjustment amplitude. textureBothDirections textureBothDirections bool Avarage color map adjustment to both direction. -0.5 0.5 instead of 0 to 1. scaleTextureAmplitude scaleTextureAmplitude float Color map scale affect amplitude. Outputs Long-Name Short-Name Type Description translate t float[3] Translation output. Child of transform. rotate r angle[3] Rotation output. Child of transform. transform transform compound Output transforms array. scale s angle[3] Scale output. Child of transform. baseMesh baseMesh mesh Input base-mesh.","title":"mnsMeshRivets"},{"location":"Maya-Plugins/#mnsmeshseparate","text":"=== Author: Assaf Ben Zur === A simple node to drive seprated shell objects using one combined mesh. Inputs Long-Name Short-Name Type Description mesh mesh mesh Input mesh to separate. inShell inShell mesh Input shell object array. Outputs Long-Name Short-Name Type Description outMesh outMesh mesh Result shell meshes array.","title":"mnsMeshSeparate"},{"location":"Maya-Plugins/#mnsnoderelationship","text":"=== Author: Assaf Ben Zur === BLOCK main relationship node. Inputs Long-Name Short-Name Type Description messageIn messageIn message Input master node. messageOut messageOut message Input slaves nodes array. deleteSlaves deleteSlaves message Input delete only slaves nodes array.","title":"mnsNodeRelationship"},{"location":"Maya-Plugins/#mnspointsoncurve","text":"=== Author: Assaf Ben Zur === A fast and efficient parameter based compute node to sample and control points along a given curve. In combination with mnsBuildTransformsCurve will result in a very advanced and robust \"spline IK\" control. - Creation modes + Parametric - curve parameterized position calculation + Uniform - Addaptive uniform sampling + Fixed length - Uniform sampling based on an input max length. Initialized to curve length on creation, Keyable. - Position control - Rotation control + Aim modes - curveTangent, object + Up modes - curveNormal, up-curve, worldX, worldY, worldZ, object - Scale control - Spring ability Inputs Long-Name Short-Name Type Description curve crv nurbsCurve Input curve to sample. upCurve upCrv nurbsCurve Input up curve to sample. bindCurve bindCrv nurbsCurve Input bind curve to sample. Used only in parametrically-uniform build mode. aimCurve aimCurve nurbsCurve Input aim curve to sample. Used only in curveAim rotation mode. upObject upObj matrix Input up object matrix to use if requsted. objectOrientUpAxis objectOrientUpAxis enum In case object orient up mode is selected, which axis to use. objectOrientAimAxis objectOrientAimAxis enum In case object orient aim mode is selected, which axis to use. aimObject aimObj matrix Input aim object matrix to use if requsted. globalScale globalScale float Global scale multiplier. numOutputs numO int Number of outputs/samples. mode m enum direction=i Smaple mode- parametric, uniform, uniformFixedLength. cycle cycle bool Enable cycle mode. closedShape closedShape bool Enable closed shape mode. uScale uScl float Global positions U-Scale adjustment. uScaleInverse uSclInv float Global positions U-Scale-Inverse adjustment. uScaleMid uSclMid float Global positions U-Scale-mid adjustment. uScaleMidPos uSclMidPos float U-Scale-mid-position value. uScaleMidInverse uSclMidInv float Global positions U-Scale-mid-inverse adjustment. uOffset uOffset float Global positions U-offset adjustment. inverse inv bool Inverse result order. fixedLength fixedLength float The maximum fixed length for the result sample if requested. creationLength creationLen float Value store for the creation curve length. curveLength crvLrn float Current curve length display. uTugScale uTugScl float Global positions U-Tug-Scale adjustment. uTugScaleTension uTugSclTension float Global positions U-Tug-Scale-tension parameter. uTugOffset uTugOffset float Global positions U-Tug-Offset adjustment. rotateMode rotMode enum Samples rotation mode- curveTangent, objectAim. upMode upMode enum Samples rotation up mode- normal, curve, worldX, worldY, worldZ, objectUp. scaleMode sclMode enum Samples scale mode- absuloteCurveLength, addaptiveCurveLength, segmentLengthDependent. squashMode squashMode enum Samples squash mode- squashStretch, squash, stretch, uniform, none. doRotation doRot bool Do samples rotation. doScale doScl bool Do samples scale. rotateOrder ro enum direction=i Calculation rotation order. aimAxis aimAxis enum Aim axis choice. upAxis upAxis enum Up axis choice. customPointsUpMode cusPointsUpMode enum Custom tweakers rotation up mode. enableParamAdjust enableParamAdjust bool Enable Manual parameter adjustments. paramAdjustment paramAdjustment double Manual parameter adjustments array input. Use this parameter to adjust calculated curve parameters manually. This parameter is addative. aimParamAdjustment aimParamAdjustment double Manual parameter adjustments array input for the aim curve param. Use this parameter to adjust calculated aim curve parameters manually. This parameter is addative. excludePolesTranslation excludePolesTranslation bool exclude translation set for base and tip. excludePolesRotation excludePolesRotation bool exclude rotation set for base and tip. excludeBaseRotation excludeBaseRotation bool exclude rotation set for base. Only if excludePolesRotation is set to True. excludeTipRotation excludeTipRotation bool exclude rotation set for tip. Only if excludePolesRotation is set to True. excludePolesScale excludePolesScale bool exclude scale set for base and tip. twistAimStart twistAimStart float Self explanatory. twistAimMid twistAimMid float Self explanatory. squeezeAim squeezeAim float Self explanatory. waveAimAngle waveAimAng float Self explanatory. twistAimWavePhase twistAimWavePhase float Self explanatory. twistAimMidPos twistAimMidPos float Self explanatory. twistAimEnd twistAimEnd float Self explanatory. twistAimAll twistAimAll float Self explanatory. aimToObj aimToObj float Self explanatory. upToObj upToObj float Self explanatory. twistUpStart twistUpStart float Self explanatory. twistUpMid twistUpMid float Self explanatory. twistUpSqueeze twistUpqueeze float Self explanatory. waveUpAngle waveUpAng float Self explanatory. waveUpPhase waveUPPhase float Self explanatory. twistUpMidPos twistUpMidPos float Self explanatory. twistUpEnd twistUpEnd float Self explanatory. twistUpAll twistUpAll float Self explanatory. twistTertiaryStart twistTerStart float Self explanatory. twistTertiaryMid twistTerMid float Self explanatory. tertiarySqueeze terSqueeze float Self explanatory. tertiaryWaveAngle tertiaryWaveAng float Self explanatory. tertiaryWavePhase terWavePhase float Self explanatory. twistTertiaryMidPos twistTerMidPos float Self explanatory. tertiaryTwistEnd terTwistEnd float Self explanatory. tertiaryTwistAll terTwistAll float Self explanatory. resetScale resetScl int Reset scale values to current state. scaleMaxAddaptive sclMaxAddaptive bool Adapt max scale to squash/scale relative values. squashFactor squashFactor float Squash multiplier. squashPos squashPos float Squash position. scaleStart sclStart float Self explanatory. scaleMid sclMid float Self explanatory. scaleMidPos sclMidPos float Self explanatory. scaleWaveAmp sclWaveAmp float Self explanatory. scaleWavePhase sclWavePhase float Self explanatory. scaleEnd sclEnd float Self explanatory. scaleAll sclAll float Self explanatory. scaleAllAim scaleAllAim float Self explanatory. scaleAllUp scaleAllUp float Self explanatory. scaleAllTertiary scaleAllTertiary float Self explanatory. scaleMin sclMin float Self explanatory. scaleMax sclMax float Self explanatory. springMode sprMode enum Samples spring mode- UScale, UScaleInverse, UMidScaleInverse, UTugOffset, UTugScale. springStrength sprStrength float spring strength. springDamp sprDamp float Spring damping factor. springStiffness sprStiffness float Spring stiffness factor. goalMatrix goalMatrix matrix Spring goal matrix. doSpring doSpr bool Do spring calculation. time time time Input time value. customPosition customPosition compound Custom tweakers input transforms array. uPosition uPos float Custom tweaker U-Position. Child of customPositionOut. twist twist float Custom tweaker twist value. Child of customPositionOut. aimRotation aimRot float Custom tweaker aim-rotation value. Child of customPositionOut. tertiaryRotation tertiaryRot float Custom tweaker tertiary-rotation value. Child of customPositionOut. scaleAim sclAim float Custom tweaker aim-scale value. Child of customPositionOut. scaleUp sclUp float Custom tweaker up-scale value. Child of customPositionOut. tertiaryScale terScl float Custom tweaker tertiary-scale value. Child of customPositionOut. falloff falloff float Custom tweaker falloff value. Child of customPositionOut. Outputs Long-Name Short-Name Type Description transforms transforms compound Result transforms array. translate t float[3] Result transform translation values. Child of transforms. rotate r angle[3] Result rotation translation values. Child of transforms. matrix Result matrix. Child of transforms. scale s float[3] Result scale translation values. Child of transforms. customPositionOut cusPosOut compound Custom tweakers offset transformation values array. cusTranslate cusT float[3] Custom tweakers offset translation values. Child of customPositionOut. cusRotate cusR angle[3] Custom tweakers offset rotation values. Child of customPositionOut.","title":"mnsPointsOnCurve"},{"location":"Maya-Plugins/#mnsquaternionblend","text":"=== Author: Assaf Ben Zur === Inputs Long-Name Short-Name Type Description inMatrix1 inMatrix1 matrix Input matrix1. Blend source A. inMatrix2 inMatrix2 matrix Input matrix1. Blend source B. Outputs Long-Name Short-Name Type Description rotate r angle[3] Rotation output.","title":"mnsQuaternionBlend"},{"location":"Maya-Plugins/#mnsremapfloatarray","text":"=== Author: Assaf Ben Zur === This simple node will take the input value (as float or angle) and split and remap the values across the requested output count, based on the given values map graph attribute. The value can also be re-ranged between two values, using the remapToRnage attributes given. The input value plug will accept floats, doubles and angles (genericAttr). The output plug will be set according to the input type given. Inputs Long-Name Short-Name Type Description valuesMap valuesMap float(array) Output values remap graph. value value float Input value to remap. Can be float, double and angle. angleOutputAsDegrees angleOutputAsDegrees bool In case the input is set to angle, if this is set to true, the output values will be in degrees instead of the original radians input. remapToRange remapToRange bool A choice to remap the outputs to a new range, using the relevant attributes. outputCount outputCount int The amount of outputs to remap the input value to. min min float RemapToRnage new minimum value. max max float RemapToRnage new maximum value. oldMin oldMin float RemapToRnage old minimum value. oldMax oldMax float RemapToRnage old maximum value. Outputs Long-Name Short-Name Type Description outValue outValue float Output values array.","title":"mnsRemapFloatArray"},{"location":"Maya-Plugins/#mnsresamplecurve","text":"=== Author: Assaf Ben Zur === A simple light weight curve re-sampler. Primaraly used to embed mnsThreePointArc into an IK setup. Inputs Long-Name Short-Name Type Description resampleMode resampleMode enum Reample mode- parametric, uniform. degree degree int Reample degree. sections sections int Reample amount of sections. inputCurve inputCurve nurbsCurve Input curve to re-sample. Outputs Long-Name Short-Name Type Description outCurve outCurve nurbsCurve Result curve.","title":"mnsResampleCurve"},{"location":"Maya-Plugins/#mnssimplerivets","text":"=== Author: Assaf Ben Zur === This is a simple mesh rivet node. This node will take any amount of input start position as matrix and will compile a transformation matrix for the closest face center position on the given input mesh. This node will output the result in world space, unless an inpur targetParentInverseMatrix is plugged into the relevant element. The deafult output will be the closest face center transformation matrix unless maintainOffset is set to ON- then the offset will be calculated and stored resulting in the same transformation matrix as the startPosition at bind. Live mode should only be used for debugging purposes as this will initiate the nodes initialization process on every evaluation- impacting the nodes performance significantly. The initialization process will be performed from from the given input mesh, unless a base mesh is plugged in to baseMesh plug. It is recommended to avoid keeping baseMesh and startPosition plugs live. Inputs Long-Name Short-Name Type Description mesh mesh mesh Input mesh to rivet to. positionMode positionMode int position mode. 0 is closest face center, 1 is closest vertex upMode upMode int up mode. 0 is closest vertex, 1 is input up matrix. upMatrix upMatrix int Up matrix to use in case upMode is set to 1. targetWorldMatrix targetWorldMatrix matrix Input mesh world matrix. rivet rivet compound (Array) Input rivets compound array. rivetStartPosition rivetStartPosition matrix Input start position. Rivet position will be calculated from this origin matrix. targetParentInverseMatrix targetParentInverseMatrix matrix Target transform parent inverse matrix. Use when output result is needed in local space (connect the target transform parentInverseMatrix plug) liveMode liveMode bool Live mode. Calculate everything in every evaluation. maintainOffset maintainOffset bool Maintain offset between rivet position and target mesh. Outputs Long-Name Short-Name Type Description translate t float[3] Translation output. Child of transform. rotate r angle[3] Rotation output. Child of transform. transform transform compound Output transforms array. scale s angle[3] Scale output. Child of transform. baseMesh baseMesh mesh Input base-mesh.","title":"mnsSimpleRivets"},{"location":"Maya-Plugins/#mnssimplesquash","text":"=== Author: Assaf Ben Zur === This simple node is designed to output a scale value to squash and stretch a given single transform value. Based on the creation distance between the target and source matricies, the scale values will be calculated using a squash/stretch algorithm using the dynamic distance (or current distance). All input values will be taken into account calculating the result. The static arc length is the creation length. This value can be set manually if needed, although the node will set this value in it's initialization stage- in case the source and handle matricies where connected. This value will be set automatically only once, in case this value needs to be changed it will need to be set manually. Aim axis attribute- stretch value will be set to the aim axis selection, squash value will be set to the remaining axes. Global scale attribute - this attribute is set to scale the static arc length to avoid unwanted scaling issues when aiming for a uniform scale of the target transform. Inputs Long-Name Short-Name Type Description handleWorldMatrix handleWorldMatrix matrix Input handle world matrix. squashRootWorldMatrix squashRootWorldMatrix matrix Input squash root position world matrix. squashFactor squashFactor float Input squash factor. stretchFactor stretchFactor float Input stretch factor. stretchMin stretchMin float Input minimum stretch value. stretchMax stretchMax float Input maximum stretch value. squashMin squashMin float Input maximum squash value. squashMax squashMax float Input minimum squash value. staticArcLength staticArcLength float Static arc length / creation length value. aimAxis aimAxis enum Aim axis- stretch value will be set to the aim axis selection, squash value will be set to the remaining axes. globalScale globalScale float Global scale multiplier value. Outputs Long-Name Short-Name Type Description scale s float[3] Output scale result. arcLength arcLength float Current arc length.","title":"mnsSimpleSquash"},{"location":"Maya-Plugins/#mnssphereroll","text":"=== Author: Assaf Ben Zur === This node was created to deal with a ball/sphere rolling. As oposed to common solutions, this node will evaluate the rotation of the target based on it's previous state, resulting in a non-gimble solution. This node will solve the rotation for the current time. Since ball rolling is a non-deterministic solution, this node will consider the previous state of the target transform to solve for the best posssible rotation given the input values. Best used for a simple ball rolling on the ground, or a BB-8 style character, where the charcter's movements are rotation (roll) based. Inputs Long-Name Short-Name Type Description globalScale globalScale double MObject MnsSphereRoll::aGlobalScale speedMultiplier speedMultiplier double a global keyable multiplier to offset the solve. 1 is even, less then 1 will result in a backspin, greater then one will result in a topspin. sphereRadius sphereRadius double The radius of the traget sphere to rotate. driverWorldMatrix driverWorldMatrix matrix This matrix will be sampled in order to evaluate the transition to the next calculation. This should be the target transform for the output rotation. upVectorWorldMatrix upVectorWorldMatrix matrix This up vector direction will be calculated in relation to the input driver world matrix. startFrame startFrame int Evaluation start frame. startFrameFromRange startFrameFromRange bool If true, take the start frame from current maya range instead of the input value given. time time time Time input. Outputs Long-Name Short-Name Type Description outRotation outRotation vector MObject MnsSphereRoll::aOutRotation","title":"mnsSphereRoll"},{"location":"Maya-Plugins/#mnsspherevectorpush","text":"=== Author: Assaf Ben Zur === Presenting mnsSphereVectorPush deformer. This deformer was purpose built for the Eye-Meniscus deformation, but can be used for many more applications. As opposed to the commonly used \"matrixCollision\", mnsSphereVectorPush will also collide back faces and push them at a higher radius based on a thickness threshold (keyable). The node will accept unlimited collider matrix inputs and will combine the deformations with ease. The input radiuses and thicknesses can be varied and keyed to choice. Implementing the mnsSphereVectorPush deformer within the eyelid setup will result in a natural looking deformation of the cornea and the eyelids. This is the case for a closed eye pose as well- which will naturally suggest the eye aim even when it isn't seen, corresponding to real life behavior. The deformer can also be used to represent the eye volume- pushing the eyelid verticies towards the eye surface, for extreme poses of which are not handled correctly by the \"aroundCenterMatrix\" of mnsCurveZip due to a range which exceeds the normalization. Inputs Long-Name Short-Name Type Description collideMatrix collideMatrix matrix Input collision matrix. radius radius matrix Input collision radius. thicknessCollide thicknessCollide bool If true, collide against back-faces using the input threshold. thicknessThreshold thicknessThreshold float Backface avarage distance to collide against. collider collider compound Collision object input array. collideMethod collideMethod enum Collision method- matrix, position.","title":"mnsSphereVectorPush"},{"location":"Maya-Plugins/#mnsspringcurve","text":"=== Author: Assaf Ben Zur === This node is used to achive simple secondary motion proceduraly. Tihs node will accept an input curve and offset curves to act upon, and using the stiffness and damping graph attributes it will calculate a new curve with secondary motion embedded. This is an evaluation node rather then a simulation. Time needs to be connected to the node in order to see it's effect. Inputs Long-Name Short-Name Type Description inputCurve inputCurve nurbsCurve Input curve. inputOffsetCurve inputOffsetCurve nurbsCurve Input offset curve. strength strength float Global strength. 0 is do nothing. preventStretching preventStretching bool Calculate stretch prevention. startFrame startFrame int Evaluation start frame. startFrameFromRange startFrameFromRange bool If true, take the start frame from current maya range instead of the input value given. time time time Time input. stiffness stiffness graph Stiffness graph control. damping damping graph Damping graph control. Outputs Long-Name Short-Name Type Description outCurve outCurve nurbsCurve Result curve. outOffsetCurve outOffsetCurve nurbsCurve Result offset curve.","title":"mnsSpringCurve"},{"location":"Maya-Plugins/#mnsthreepointarc","text":"=== Author: Assaf Ben Zur === This node was written to create a perfectly curved limb blend, instead of using common approaches like skinned curves, simulated tangents, scaled points, etc. This method provides a very elegant way of enabling curvable limbs to animators, avoiding the use of Maya's 'makeThreePointCircularArc' which doesn't support a case where the 3 input points are collinear, nor any input curve or blending support. Another major advantage of this node is the 'conformToMidPoint' attribute- This attribute signals the algorithm to take the mid-point into consideration when drawing the edit points of the calculated arc, 'pinning' the elbow/knee in place when blending to the curved shape, even when the ratio between the 2 bones is not even (most cases). The blend is triggered once with the attribute set to 'Off' - causing the knee to shift position completely- making it unusable in animation. Then, the blend is triggered when the attribute is 'On' and the knee is pinned in place, while the result curve edit points are being shifted based on the mid-point's position. Inputs Long-Name Short-Name Type Description point1 point1 matrix Input position A. point2 point2 matrix Input position B. point3 point3 matrix Input position C. blend blend float Blend value. blendSectionA blendSectionA float Section A only blend value. blendSectionB blendSectionB float Section B only blend value. swipeStart swipeStart float Swipe blend from start value. swipeStartFalloff swipeStartFalloff float Swipe blend from start falloff value. swipeMidToRoot swipeMidToRoot float Swipe blend from mid to start value. swipeMidToRootFalloff swipeMidToRootFalloff float Swipe blend from mid to start falloff value. swipeMidToEnd swipeMidToEnd float Swipe blend from mid to end value. swipeMidToEndFalloff swipeMidToEndFalloff float Swipe blend from mid to end falloff value. swipeEnd swipeEnd float Swipe blend from end to start value. swipeEndFalloff swipeEndFalloff float Swipe blend from end to start falloff value. collinearAction collinearAction enum Collinear action choice- inputCurve, resample. resampleMode resampleMode enum If resmapling is chosen, use this mode to resample- parametric, uniform. degree degree int If resmapling is chosen, use this degree. sections sections int If resmapling is chosen, use this amount of sections. conformMidPoint conformMidPoint bool Use the mid point to enhance clending algorithm. inputCurve inputCurve nurbsCurve Input curve. inputOffsetCurve inputOffsetCurve nurbsCurve Input offset curve. Outputs Long-Name Short-Name Type Description outCurve outCurve nurbsCurve Result Curve. outOffsetCurve outOffsetCurve nurbsCurve Result offset Curve. center center float[3] Result circle center point. radius radius float Result circle radius.","title":"mnsThreePointArc"},{"location":"Maya-Plugins/#mnstransformspring","text":"=== Author: Assaf Ben Zur === Inputs Long-Name Short-Name Type Description inputWorldMatrix inputWorldMatrix float MObject MnsTransformSpring::aInputWorldMatrix targetParentInverseMatrix targetParentInverseMatrix float MObject MnsTransformSpring::aTargetParentInverseMatrix strength strength float Global strength. 0 is do nothing. startFrame startFrame int Evaluation start frame. startFrameFromRange startFrameFromRange bool If true, take the start frame from current maya range instead of the input value given. time time time Time input. stiffness stiffness graph Stiffness graph control. damping damping graph Damping graph control. Outputs Long-Name Short-Name Type Description translate t float MObject MnsTransformSpring::aOutTranslate","title":"mnsTransformSpring"},{"location":"Maya-Plugins/#mnsvolumejoint","text":"=== Author: Assaf Ben Zur === Inputs Long-Name Short-Name Type Description globalScale globalScale double Global scale multiplier. parentJointWorldMatrix parentJointWorldMatrix matrix Input parent joint world Matrix. Angle source-A. childJointWorldMatrix childJointWorldMatrix matrix Input child joint world Matrix. Angle source-B. childJointRestWorldMatrix childJointRestWorldMatrix matrix Input child joint rest matrix. This will dictate the zero position for the calculation. volumeJoint volumeJoint compound array Input array compound for a volume joint calculation. Unlimited. restTranslate restTranslate vector[3] Rest translation values. posXTranslate posXTranslate vector[3] Positive X angle translation values. negXTranslate negXTranslate vector[3] Negative X angle translation values. posYTranslate posYTranslate vector[3] Positive Y angle translation values. negYTranslate negYTranslate vector[3] Negative Y angle translation values. posZTranslate posZTranslate vector[3] Positive Z angle translation values. negZTranslate negZTranslate vector[3] Negative Z angle translation values. posXScale posXScale vector[3] Positive X angle scale values. negXScale negXScale vector[3] Negative X angle scale values. posYScale posYScale vector[3] Positive Y angle scale values. negYScale negYScale vector[3] Negative Y angle scale values. posZScale posZScale vector[3] Positive Z angle scale values. negZScale negZScale vector[3] Negative Z angle scale values. rotationBlend rotationBlend double Rotation blend between the 2 sources (parent and child joints) for this volume joint. 0 is parent rotation, 1 is child rotation. parentInverseMatrix parentInverseMatrix matrix Target joint's parent inverse matrix to be used to localize the output values. Outputs Long-Name Short-Name Type Description result result compound Output transforms array. translate t float[3] Translation output. Child of transform. rotate r angle[3] Rotation output. Child of transform. scale s angle[3] Scale output. Child of transform. posXState posXState double Current Positive-X direction state, between 0 and 1. negXState negXState double Current Negative-X direction state, between 0 and 1. posYState posYState double Current Positive-Y direction state, between 0 and 1. negYState negYState double Current Negative-Y direction state, between 0 and 1. posZState posZState double Current Positive-Z direction state, between 0 and 1. negZState negZState double Current Negative-Z direction state, between 0 and 1.","title":"mnsVolumeJoint"},{"location":"Support-Us/","text":"Any type of support goes a long way, thank you! So how can you support this project ? Subscribe to our YouTube channel! Join our Discord community! Follow our social-media pages Share it Share it with your colleges and friends or share it on any social media platform! Exposure and user-base is the key to keep this project going, so don't hold back ! Write a testimonial In case you want to write a testimonial to be featured in the testimonial section in our main website Mansur-Rig.com , we will greatly appreciate it! Please contact us at support@mansur-rig.com Mention Mansur-Rig on posts Hashtags and mentions in social-media increase the exposure and credibility of the product, so when you can- mantion Mansur-Rig Every like counts! Likes go a long way, as they help promote the project by promoting videos/posts.","title":"Support Us"},{"location":"Support-Us/#any-type-of-support-goes-a-long-way-thank-you","text":"","title":"Any type of support goes a long way, thank you!"},{"location":"Support-Us/#so-how-can-you-support-this-project","text":"Subscribe to our YouTube channel! Join our Discord community! Follow our social-media pages Share it Share it with your colleges and friends or share it on any social media platform! Exposure and user-base is the key to keep this project going, so don't hold back ! Write a testimonial In case you want to write a testimonial to be featured in the testimonial section in our main website Mansur-Rig.com , we will greatly appreciate it! Please contact us at support@mansur-rig.com Mention Mansur-Rig on posts Hashtags and mentions in social-media increase the exposure and credibility of the product, so when you can- mantion Mansur-Rig Every like counts! Likes go a long way, as they help promote the project by promoting videos/posts.","title":"So how can you support this project ?"},{"location":"UIUtils/","text":"UIUtils === Author: Assaf Ben Zur === UI Utility function assembly. This module holds all UI utility functions as well s any QT dynamic draw functions. All UI functions should be held in here for multi-usage of the same UI draw functions. This module also holds the QT ui dynamic conversion to '.py' and the 'get_maya_window' function. Classes CollapsibleFrameWidget [Class] Collapsible frame Widget class. This is a wrapper widget that allows for a collapisble frame to be built. The QFrame object will allow for Layouts to be inserted into the Collapsible frame, inserting any widgets within it, collapsing and expanding it by a click trigger (from the user). Constructor: CollapsibleFrameWidget( parent ( str ) ; [default: None], title ( str ) ; [default: None]) Inherits from: QFrame Class Members: _is_collasped _title_frame _content _main_v_layout clickedSignal Methods: initCollapsable [method] toggleCollapsed [method] setArrow [method] initArrow [method] initContent [method] initTitleFrame [method] addWidget [method] CollapsibleFrameWidget methods initCollapsable [ CollapsibleFrameWidget class method] Constructor: initCollapsable(self) Return: None Arguments: self Optional Arguments: toggleCollapsed [ CollapsibleFrameWidget class method] Constructor: toggleCollapsed(self) Return: None Arguments: self Optional Arguments: setArrow [ CollapsibleFrameWidget class method] Constructor: setArrow(self, arrow_dir) Return: None Arguments: self arrow_dir Optional Arguments: initArrow [ CollapsibleFrameWidget class method] Constructor: initArrow(self, collapsed) Return: None Arguments: self collapsed Optional Arguments: initContent [ CollapsibleFrameWidget class method] Constructor: initContent(self, collapsed) Return: None Arguments: self collapsed Optional Arguments: initTitleFrame [ CollapsibleFrameWidget class method] Constructor: initTitleFrame(self, title, collapsed) Return: None Arguments: self title collapsed Optional Arguments: addWidget [ CollapsibleFrameWidget class method] Constructor: addWidget(self, widget) Return: None Arguments: self widget Optional Arguments: MnsAbout [Class] Mansur - About dialog Constructor: MnsAbout( parent ( str ) ; [default: get_maya_window()], version ( str ) ; [default: \"dev\"]) Inherits from: QtWidgets.QDialog Class Members: iconsDir versionDisplay close_btn extraChannelsDelegate [Class] Constructor: extraChannelsDelegate( parent ( str ) ; [default: None], *args ) Inherits from: QtWidgets.QItemDelegate Class Members: Methods: setModelData [method] createEditor [method] extraChannelsDelegate methods setModelData [ extraChannelsDelegate class method] Constructor: setModelData(self, editor, model, index) Return: None Arguments: self editor model index Optional Arguments: createEditor [ extraChannelsDelegate class method] Constructor: createEditor(self, parent, option, index) Return: None Arguments: self parent option index Optional Arguments: Defenitions acquireExternalWindow A simple method to acquire an external QT window, into an actual PyQt MianWindow object. Constructor: acquireExternalWindow(UIName = None) Return: None Arguments: UIName ( str ) ; [default: None] Keyword Arguments: buildFormBaseClassForUI Constructor: buildFormBaseClassForUI(script_dir, rel_path) Return: None Arguments: script_dir rel_path Keyword Arguments: buildStackedTabForModuleParentDir Main BLOCK dynamiuc tab builder. Builds a tab for a given tab parent including all the neccesary layouts within, returning the main layout that can be inserted with new q items. Constructor: buildStackedTabForModuleParentDir(modDirName, insertIndex, tabWidget, kwargs) Return: None Arguments: modDirName insertIndex tabWidget kwargs Keyword Arguments: buildTabForModuleParentDir Main BLOCK dynamiuc tab builder. Builds a tab for a given tab parent including all the neccesary layouts within, returning the main layout that can be inserted with new q items. Constructor: buildTabForModuleParentDir(modDirName, insertIndex, tabWidget, kwargs) Return: None Arguments: modDirName insertIndex tabWidget kwargs Keyword Arguments: checkChannelCommand DynUI 'channel control' checkBox changed command trigger. Constructor: checkChannelCommand(chanBtn,chanCbxs) Return: None Arguments: chanBtn chanCbxs Keyword Arguments: colOverrideBlockDefTriggerCommand DynUI color-override default command trigger. Constructor: colOverrideBlockDefTriggerCommand(colorOverrideCbx, sideCB, ovverideBtnList) Return: None Arguments: colorOverrideCbx sideCB ovverideBtnList Keyword Arguments: colOverrideStateChange DynUI color-override changed command trigger. Constructor: colOverrideStateChange(colorOverrideCbx, sideCB, ovverideBtnList) Return: None Arguments: colorOverrideCbx sideCB ovverideBtnList Keyword Arguments: convertRelativePathToAbs A method for replacing a projectRoot variable within a relative path to the absolute path Based on the current project directory Constructor: convertRelativePathToAbs(filePath = \"\") Return: None Arguments: filePath ( str ) ; [default: \"\"] Keyword Arguments: createAboutWindow Load about dialog Constructor: createAboutWindow() Return: None Arguments: Keyword Arguments: createTextSeparator Constructor: createTextSeparator(label = \"\", QMenuItem = None, parent = get_maya_window()) Return: None Arguments: label ( str ) ; [default: \"\"] QMenuItem ( str ) ; [default: None] parent ( str ) ; [default: get_maya_window()] Keyword Arguments: customScriptsAddCommand Add button trigger command for \"custom scripts\" slot of synamic UI. Constructor: customScriptsAddCommand(listWidget) Return: None Arguments: listWidget Keyword Arguments: customScriptsDefaultCommand Default trigger command for 'custom scripts' slot in dynUI. Constructor: customScriptsDefaultCommand(listWidget, MnsArgumentObj) Return: None Arguments: listWidget MnsArgumentObj Keyword Arguments: customScriptsRemoveCommand Remove button trigger command for \"custom scripts\" slot of synamic UI. Constructor: customScriptsRemoveCommand(listWidget) Return: None Arguments: listWidget Keyword Arguments: deleteAllLayoutItems A method to delete all widgets/object from a given layout Constructor: deleteAllLayoutItems(layout, kwargs) Return: None Arguments: layout kwargs Keyword Arguments: drawBooleanChk Main dynamic check-box UI draw. Creates a simple boolean check-box (QCheckBox) as well as a connected 'default' button. Constructor: drawBooleanChk(MnsArgumentObj, layoutParent) Return: None Arguments: MnsArgumentObj layoutParent Keyword Arguments: drawButtonAndField Main dynamic 'button and field' draw. Draws a deault button, text field and an 'Insert items from scene' button into the given parent layout. This function makes all relevant connections between the QItems created- - 'Load command' from the QPushButton (insert) to the text field - 'Clear' trigger for the text field. - 'Set default' from the QPushButton 'default' to the text field. Constructor: drawButtonAndField(MnsArgumentObj, layoutParent, alphaLimit = False) Return: None Arguments: MnsArgumentObj layoutParent alphaLimit ( bool ) ; [default: False] Keyword Arguments: drawButtonAndFieldUnknown Main 'unknown' button and field UI draw. In case the MnsArgument.type in question is an unknown type, draw a button and field style item for it. Constructor: drawButtonAndFieldUnknown(MnsArgumentObj, layoutParent) Return: None Arguments: MnsArgumentObj layoutParent Keyword Arguments: drawChannelColumnAndConnect Draw channel column (part of channel control) into a DynUI. Constructor: drawChannelColumnAndConnect(MnsArgumentObj, channel, kwargs) Return: None Arguments: MnsArgumentObj channel kwargs Keyword Arguments: drawChannelControl Draw the predefined channel-control slot into a DynUI. Constructor: drawChannelControl(MnsArgumentObj, layoutParent, kwargs) Return: None Arguments: MnsArgumentObj layoutParent kwargs Keyword Arguments: drawColorBox Main dynamic 'draw color box' creation function. Will create a new QPushButton with its 'color picker' style display and inserts it into the given layoutParent. An automatic connection to the 'getColor' function is made, as well as a 'default' button creation and connection is made. Constructor: drawColorBox(MnsArgumentObj, layoutParent) Return: None Arguments: MnsArgumentObj layoutParent Keyword Arguments: drawColorBtnAndConnect Constructor: drawColorBtnAndConnect(default, kwargs) Return: None Arguments: default kwargs Keyword Arguments: buttonSize ( int ) ; [default: 25] colOverrideCbx ( str ) ; [default: None] drawColorScheme Main block 'draw color scheme box' creation function. Will create a new QPushButton series with 'color picker's style display and inserts it into the given layoutParent. An automatic connection to the 'getColor' function is made, as well as a 'default' button creation and connection is made. Constructor: drawColorScheme(MnsArgumentObj, layoutParent) Return: None Arguments: MnsArgumentObj layoutParent Keyword Arguments: drawColorSchemeOverride Draw the predefined 'color scheme' slot into a dynUI. Constructor: drawColorSchemeOverride(MnsArgumentObj, layoutParent, kwargs) Return: None Arguments: MnsArgumentObj layoutParent kwargs Keyword Arguments: drawCustomScriptsSlot draw a \"custom scripts\" slot into dyn UI. Constructor: drawCustomScriptsSlot(MnsArgumentObj, layoutParent) Return: None Arguments: MnsArgumentObj layoutParent Keyword Arguments: drawExtraChannelsBox Main dynamic 'draw blend shape targets box' creation function. Constructor: drawExtraChannelsBox(MnsArgumentObj, layoutParent) Return: None Arguments: MnsArgumentObj layoutParent Keyword Arguments: drawFloatScroll Main dynamic \"Float spinner\" UI draw Creates a Float QDoubleSpinBox widget, and a default button connected to it. Constructor: drawFloatScroll(MnsArgumentObj, layoutParent) Return: None Arguments: MnsArgumentObj layoutParent Keyword Arguments: drawHorizontalDevider Draw a simple Horizontal devider into the dynUI. Constructor: drawHorizontalDevider(MnsArgumentObj, layoutParent) Return: None Arguments: MnsArgumentObj layoutParent Keyword Arguments: drawIntSpinner Main dynamic 'int field' field and spinner UI draw. Creates an int QSpinBox widget, and a default button connected to it. Constructor: drawIntSpinner(MnsArgumentObj, layoutParent) Return: None Arguments: MnsArgumentObj layoutParent Keyword Arguments: drawJntStructMemberCol Constructor: drawJntStructMemberCol(layout = None, argument = None) Return: None Arguments: layout ( str ) ; [default: None] argument ( str ) ; [default: None] Keyword Arguments: drawModuleButton Main BLOCK dynamic build module buttom function draw. Builds a new QPushButoon for a given module, return the QPushButton created after connecting it to the given 'connectFunction'. The QPush buttom created will then to be inserted into a layout by the caller function. Constructor: drawModuleButton(MnsBuildModuleObj, connectFunction) Return: None Arguments: MnsBuildModuleObj connectFunction Keyword Arguments: drawOptionBox Main dynamic 'option box' draw. Drawing a new ob based on parameters within the MnsArgument object passed in. The QComboBox is inserted into the parent layout passed in. A default button and connection is made. Constructor: drawOptionBox(MnsArgumentObj, layoutParent) Return: None Arguments: MnsArgumentObj layoutParent Keyword Arguments: drawPathField Main Path row draw Constructor: drawPathField(MnsArgumentObj, layoutParent) Return: None Arguments: MnsArgumentObj layoutParent Keyword Arguments: drawPrimaryButton Picker method- draw a generic picker button. Constructor: drawPrimaryButton(plg, tabWidget, pickerBase, picker) Return: None Arguments: plg tabWidget pickerBase picker Keyword Arguments: drawSpacesBox Main dynamic 'draw spaces box' creation function. Constructor: drawSpacesBox(MnsArgumentObj, layoutParent, kwargs) Return: None Arguments: MnsArgumentObj layoutParent kwargs Keyword Arguments: dynUIExtraChannelsMenu Constructor: dynUIExtraChannelsMenu(treeWG, position) Return: None Arguments: treeWG position Keyword Arguments: extraChannelsAddDivider Constructor: extraChannelsAddDivider(treeWG, kwargs) Return: None Arguments: treeWG kwargs Keyword Arguments: extraChannelsAddRow Constructor: extraChannelsAddRow(treeWG, kwargs) Return: None Arguments: treeWG kwargs Keyword Arguments: extraChannelsChangeDirection Constructor: extraChannelsChangeDirection(treeWG, direction = 1) Return: None Arguments: treeWG direction ( int ) ; [default: 1] Keyword Arguments: extraChannelsDuplicateRows Constructor: extraChannelsDuplicateRows(treeWG, kwargs) Return: None Arguments: treeWG kwargs Keyword Arguments: extraChannelsEdit Constructor: extraChannelsEdit(item, col) Return: None Arguments: item col Keyword Arguments: extraChannelsLoadCBSel Constructor: extraChannelsLoadCBSel(treeWG) Return: None Arguments: treeWG Keyword Arguments: extraChannelsMoveItemsDown Constructor: extraChannelsMoveItemsDown(treeWG) Return: None Arguments: treeWG Keyword Arguments: extraChannelsMoveItemsUp Constructor: extraChannelsMoveItemsUp(treeWG) Return: None Arguments: treeWG Keyword Arguments: extraChannelsRemoveSelected Constructor: extraChannelsRemoveSelected(treeWG) Return: None Arguments: treeWG Keyword Arguments: extraChannelsValidateCurrentData Constructor: extraChannelsValidateCurrentData(treeWG) Return: None Arguments: treeWG Keyword Arguments: getColor Simple 'get color for a color PButton'. Creates a new QColorDialog asking the user for a color choice. When color selected sets the caller QPushButton color to the selected color Constructor: getColor(btn, kwargs) Return: None Arguments: btn kwargs Keyword Arguments: getColorArrayFromColorScheme Collect a normalized array of colors from a 'colorSceheme' enum attribute. Constructor: getColorArrayFromColorScheme(side, colorScheme) Return: None Arguments: side colorScheme Keyword Arguments: getEulaText get the most recent eula. Constructor: getEulaText() Return: None Arguments: Keyword Arguments: getObjectScreenSpaceByFilmGate This method is used to 'project' a plg into the projection camera's film gate. Get the relative position of the plg to the camera film-gate's top left corener. Constructor: getObjectScreenSpaceByFilmGate(objectProj, cam) Return: None Arguments: objectProj cam Keyword Arguments: getPathCommand Dyn UI path slot 'get path' command trigger. Constructor: getPathCommand(LEdit, mode = 0, fileTypes = []) Return: None Arguments: LEdit mode ( int ) ; [default: 0] fileTypes ( list ) ; [default: []] Keyword Arguments: getPlgPosition Get the relative position of the requested plg, based on the 'Picker Layout Base' Guide top left corner. Return the local bounding box size as well. Constructor: getPlgPosition(plg, pickerBase) Return: None Arguments: plg pickerBase Keyword Arguments: getWindow Constructor: getWindow(windowName = \"\") Return: None Arguments: windowName ( str ) ; [default: \"\"] Keyword Arguments: get_maya_window Main maya window get for a global UI parent Constructor: get_maya_window() Return: None Arguments: Keyword Arguments: listLoadCmd Load to list command trigger (dynUI) Constructor: listLoadCmd(QListWidget) Return: None Arguments: QListWidget Keyword Arguments: listRemoveCommand Remove from list command trigger (dynUI) Constructor: listRemoveCommand(QListWidget) Return: None Arguments: QListWidget Keyword Arguments: loadCmd Main text field 'load from scene' trigger command. This command will update the given QLEdit with members of the maya scene when triggered. Three main cases: 1. Nothing is selected - if the field is empty- do nothing, else clear the field. 2. objects are selected, without any CB selection - load the object names in, seperated by commas. 3. Objects are selected and there is a CB selection as well - load all objects and chnnels in a 'object.channel' format, seperated by commas. Constructor: loadCmd(LEdit) Return: None Arguments: LEdit Keyword Arguments: load_ui_type This function converts a '.ui' file into a '.py' file live. This means that all UI's are derived from a QT designer ui files that are converted directly to form the UI. This keeps a live connection between the '.ui' file and the actul UI in maya. Meaning that any edit or a change to the UI base needs to be done only from the QT designer, without any further action by the user. It reruns a baseClass and a formClass to be used when creating any UI. Constructor: load_ui_type(ui_file) Return: None Arguments: ui_file Keyword Arguments: optionBoxTextTrigger Constructor: optionBoxTextTrigger(comboBox = None, lineWditWidget = None, index = 0) Return: None Arguments: comboBox ( str ) ; [default: None] lineWditWidget ( str ) ; [default: None] index ( int ) ; [default: 0] Keyword Arguments: recDeleteAllLayoutItems A method to delete all widgets/object from a given layout Constructor: recDeleteAllLayoutItems(layout, kwargs) Return: None Arguments: layout kwargs Keyword Arguments: relativePathCheck A method for checking if any file path can be converted to a relative path. If relative path is available, promt a message asking the user if he want to convert. if so, convert and return. Constructor: relativePathCheck(filePath = \"\") Return: None Arguments: filePath ( str ) ; [default: \"\"] Keyword Arguments: reloadWindow Constructor: reloadWindow(windowName = \"\") Return: None Arguments: windowName ( str ) ; [default: \"\"] Keyword Arguments: setBooleanDefaultCmd 'Set default' trigger for a QCheckBox item. Constructor: setBooleanDefaultCmd(cbx,default) Return: None Arguments: cbx default Keyword Arguments: setChennelControlDefaultCmd DynUI chennel control slot default command trigger. Constructor: setChennelControlDefaultCmd(cbxList, MnsArgumentObj) Return: None Arguments: cbxList MnsArgumentObj Keyword Arguments: setColorDefaultCmd A 'set color back to default command. A command to be triggered by an outside 'default' button, or when initializing to set the specified QPushButton color back to it's default value. Constructor: setColorDefaultCmd(btn, colorDef) Return: None Arguments: btn colorDef Keyword Arguments: setColorSchemeDefaultCmd DynUI color-scheme default command trigger. Constructor: setColorSchemeDefaultCmd(btnList, default) Return: None Arguments: btnList default Keyword Arguments: setFloatDefaultCmd 'Set default' trigger for a QDoubleSpinBox item. Constructor: setFloatDefaultCmd(spinner,default) Return: None Arguments: spinner default Keyword Arguments: setIntDefaultCmd 'Set deafult' command trigget for an int QSpinBox. Constructor: setIntDefaultCmd(spinner,default) Return: None Arguments: spinner default Keyword Arguments: setLinkToQLabel Constructor: setLinkToQLabel(labelObj = None, ahref = \"\") Return: None Arguments: labelObj ( str ) ; [default: None] ahref ( str ) ; [default: \"\"] Keyword Arguments: setListWidgetDefaultCommand 'Default' command trigger for a 'list' type synamic row (dynUI) Constructor: setListWidgetDefaultCommand(QListWidget, default) Return: None Arguments: QListWidget default Keyword Arguments: setOtionBoxDefaultCmd A 'set default' command to be triggered for a combo box item. Constructor: setOtionBoxDefaultCmd(cbox, default) Return: None Arguments: cbox default Keyword Arguments: setSpaceDefault Constructor: setSpaceDefault(listWG, kwargs) Return: None Arguments: listWG kwargs Keyword Arguments: setStringDefaultCmd 'Set default' command trigger from a text field Constructor: setStringDefaultCmd(LEdit,default) Return: None Arguments: LEdit default Keyword Arguments: sideCBChangedTriggerCommand DynUI side combo box changed command trigger. Constructor: sideCBChangedTriggerCommand(colorOverrideCbx, sideCB, ovverideBtnList, rigTop, ignoreOvverideCheckbox = False) Return: None Arguments: colorOverrideCbx sideCB ovverideBtnList rigTop ignoreOvverideCheckbox ( bool ) ; [default: False] Keyword Arguments: tearOffWindow Create a new maya 'tear-off' panel. Constructor: tearOffWindow(name, title, width, height, cameraToView) Return: None Arguments: name title width height cameraToView Keyword Arguments: toQtObject Convert a maya UI component into a QT object Constructor: toQtObject(mayaName, kwargs) Return: None Arguments: mayaName kwargs Keyword Arguments:","title":"UIUtils"},{"location":"UIUtils/#uiutils","text":"=== Author: Assaf Ben Zur === UI Utility function assembly. This module holds all UI utility functions as well s any QT dynamic draw functions. All UI functions should be held in here for multi-usage of the same UI draw functions. This module also holds the QT ui dynamic conversion to '.py' and the 'get_maya_window' function.","title":"UIUtils"},{"location":"UIUtils/#classes","text":"","title":"Classes"},{"location":"UIUtils/#collapsibleframewidget-class","text":"Collapsible frame Widget class. This is a wrapper widget that allows for a collapisble frame to be built. The QFrame object will allow for Layouts to be inserted into the Collapsible frame, inserting any widgets within it, collapsing and expanding it by a click trigger (from the user). Constructor: CollapsibleFrameWidget( parent ( str ) ; [default: None], title ( str ) ; [default: None]) Inherits from: QFrame Class Members: _is_collasped _title_frame _content _main_v_layout clickedSignal Methods: initCollapsable [method] toggleCollapsed [method] setArrow [method] initArrow [method] initContent [method] initTitleFrame [method] addWidget [method]","title":"CollapsibleFrameWidget [Class]"},{"location":"UIUtils/#collapsibleframewidget-methods","text":"","title":"CollapsibleFrameWidget  methods"},{"location":"UIUtils/#mnsabout-class","text":"Mansur - About dialog Constructor: MnsAbout( parent ( str ) ; [default: get_maya_window()], version ( str ) ; [default: \"dev\"]) Inherits from: QtWidgets.QDialog Class Members: iconsDir versionDisplay close_btn","title":"MnsAbout [Class]"},{"location":"UIUtils/#extrachannelsdelegate-class","text":"Constructor: extraChannelsDelegate( parent ( str ) ; [default: None], *args ) Inherits from: QtWidgets.QItemDelegate Class Members: Methods: setModelData [method] createEditor [method]","title":"extraChannelsDelegate [Class]"},{"location":"UIUtils/#extrachannelsdelegate-methods","text":"","title":"extraChannelsDelegate  methods"},{"location":"UIUtils/#defenitions","text":"","title":"Defenitions"},{"location":"UIUtils/#acquireexternalwindow","text":"A simple method to acquire an external QT window, into an actual PyQt MianWindow object. Constructor: acquireExternalWindow(UIName = None) Return: None Arguments: UIName ( str ) ; [default: None] Keyword Arguments:","title":"acquireExternalWindow"},{"location":"UIUtils/#buildformbaseclassforui","text":"Constructor: buildFormBaseClassForUI(script_dir, rel_path) Return: None Arguments: script_dir rel_path Keyword Arguments:","title":"buildFormBaseClassForUI"},{"location":"UIUtils/#buildstackedtabformoduleparentdir","text":"Main BLOCK dynamiuc tab builder. Builds a tab for a given tab parent including all the neccesary layouts within, returning the main layout that can be inserted with new q items. Constructor: buildStackedTabForModuleParentDir(modDirName, insertIndex, tabWidget, kwargs) Return: None Arguments: modDirName insertIndex tabWidget kwargs Keyword Arguments:","title":"buildStackedTabForModuleParentDir"},{"location":"UIUtils/#buildtabformoduleparentdir","text":"Main BLOCK dynamiuc tab builder. Builds a tab for a given tab parent including all the neccesary layouts within, returning the main layout that can be inserted with new q items. Constructor: buildTabForModuleParentDir(modDirName, insertIndex, tabWidget, kwargs) Return: None Arguments: modDirName insertIndex tabWidget kwargs Keyword Arguments:","title":"buildTabForModuleParentDir"},{"location":"UIUtils/#checkchannelcommand","text":"DynUI 'channel control' checkBox changed command trigger. Constructor: checkChannelCommand(chanBtn,chanCbxs) Return: None Arguments: chanBtn chanCbxs Keyword Arguments:","title":"checkChannelCommand"},{"location":"UIUtils/#coloverrideblockdeftriggercommand","text":"DynUI color-override default command trigger. Constructor: colOverrideBlockDefTriggerCommand(colorOverrideCbx, sideCB, ovverideBtnList) Return: None Arguments: colorOverrideCbx sideCB ovverideBtnList Keyword Arguments:","title":"colOverrideBlockDefTriggerCommand"},{"location":"UIUtils/#coloverridestatechange","text":"DynUI color-override changed command trigger. Constructor: colOverrideStateChange(colorOverrideCbx, sideCB, ovverideBtnList) Return: None Arguments: colorOverrideCbx sideCB ovverideBtnList Keyword Arguments:","title":"colOverrideStateChange"},{"location":"UIUtils/#convertrelativepathtoabs","text":"A method for replacing a projectRoot variable within a relative path to the absolute path Based on the current project directory Constructor: convertRelativePathToAbs(filePath = \"\") Return: None Arguments: filePath ( str ) ; [default: \"\"] Keyword Arguments:","title":"convertRelativePathToAbs"},{"location":"UIUtils/#createaboutwindow","text":"Load about dialog Constructor: createAboutWindow() Return: None Arguments: Keyword Arguments:","title":"createAboutWindow"},{"location":"UIUtils/#createtextseparator","text":"Constructor: createTextSeparator(label = \"\", QMenuItem = None, parent = get_maya_window()) Return: None Arguments: label ( str ) ; [default: \"\"] QMenuItem ( str ) ; [default: None] parent ( str ) ; [default: get_maya_window()] Keyword Arguments:","title":"createTextSeparator"},{"location":"UIUtils/#customscriptsaddcommand","text":"Add button trigger command for \"custom scripts\" slot of synamic UI. Constructor: customScriptsAddCommand(listWidget) Return: None Arguments: listWidget Keyword Arguments:","title":"customScriptsAddCommand"},{"location":"UIUtils/#customscriptsdefaultcommand","text":"Default trigger command for 'custom scripts' slot in dynUI. Constructor: customScriptsDefaultCommand(listWidget, MnsArgumentObj) Return: None Arguments: listWidget MnsArgumentObj Keyword Arguments:","title":"customScriptsDefaultCommand"},{"location":"UIUtils/#customscriptsremovecommand","text":"Remove button trigger command for \"custom scripts\" slot of synamic UI. Constructor: customScriptsRemoveCommand(listWidget) Return: None Arguments: listWidget Keyword Arguments:","title":"customScriptsRemoveCommand"},{"location":"UIUtils/#deletealllayoutitems","text":"A method to delete all widgets/object from a given layout Constructor: deleteAllLayoutItems(layout, kwargs) Return: None Arguments: layout kwargs Keyword Arguments:","title":"deleteAllLayoutItems"},{"location":"UIUtils/#drawbooleanchk","text":"Main dynamic check-box UI draw. Creates a simple boolean check-box (QCheckBox) as well as a connected 'default' button. Constructor: drawBooleanChk(MnsArgumentObj, layoutParent) Return: None Arguments: MnsArgumentObj layoutParent Keyword Arguments:","title":"drawBooleanChk"},{"location":"UIUtils/#drawbuttonandfield","text":"Main dynamic 'button and field' draw. Draws a deault button, text field and an 'Insert items from scene' button into the given parent layout. This function makes all relevant connections between the QItems created- - 'Load command' from the QPushButton (insert) to the text field - 'Clear' trigger for the text field. - 'Set default' from the QPushButton 'default' to the text field. Constructor: drawButtonAndField(MnsArgumentObj, layoutParent, alphaLimit = False) Return: None Arguments: MnsArgumentObj layoutParent alphaLimit ( bool ) ; [default: False] Keyword Arguments:","title":"drawButtonAndField"},{"location":"UIUtils/#drawbuttonandfieldunknown","text":"Main 'unknown' button and field UI draw. In case the MnsArgument.type in question is an unknown type, draw a button and field style item for it. Constructor: drawButtonAndFieldUnknown(MnsArgumentObj, layoutParent) Return: None Arguments: MnsArgumentObj layoutParent Keyword Arguments:","title":"drawButtonAndFieldUnknown"},{"location":"UIUtils/#drawchannelcolumnandconnect","text":"Draw channel column (part of channel control) into a DynUI. Constructor: drawChannelColumnAndConnect(MnsArgumentObj, channel, kwargs) Return: None Arguments: MnsArgumentObj channel kwargs Keyword Arguments:","title":"drawChannelColumnAndConnect"},{"location":"UIUtils/#drawchannelcontrol","text":"Draw the predefined channel-control slot into a DynUI. Constructor: drawChannelControl(MnsArgumentObj, layoutParent, kwargs) Return: None Arguments: MnsArgumentObj layoutParent kwargs Keyword Arguments:","title":"drawChannelControl"},{"location":"UIUtils/#drawcolorbox","text":"Main dynamic 'draw color box' creation function. Will create a new QPushButton with its 'color picker' style display and inserts it into the given layoutParent. An automatic connection to the 'getColor' function is made, as well as a 'default' button creation and connection is made. Constructor: drawColorBox(MnsArgumentObj, layoutParent) Return: None Arguments: MnsArgumentObj layoutParent Keyword Arguments:","title":"drawColorBox"},{"location":"UIUtils/#drawcolorbtnandconnect","text":"Constructor: drawColorBtnAndConnect(default, kwargs) Return: None Arguments: default kwargs Keyword Arguments: buttonSize ( int ) ; [default: 25] colOverrideCbx ( str ) ; [default: None]","title":"drawColorBtnAndConnect"},{"location":"UIUtils/#drawcolorscheme","text":"Main block 'draw color scheme box' creation function. Will create a new QPushButton series with 'color picker's style display and inserts it into the given layoutParent. An automatic connection to the 'getColor' function is made, as well as a 'default' button creation and connection is made. Constructor: drawColorScheme(MnsArgumentObj, layoutParent) Return: None Arguments: MnsArgumentObj layoutParent Keyword Arguments:","title":"drawColorScheme"},{"location":"UIUtils/#drawcolorschemeoverride","text":"Draw the predefined 'color scheme' slot into a dynUI. Constructor: drawColorSchemeOverride(MnsArgumentObj, layoutParent, kwargs) Return: None Arguments: MnsArgumentObj layoutParent kwargs Keyword Arguments:","title":"drawColorSchemeOverride"},{"location":"UIUtils/#drawcustomscriptsslot","text":"draw a \"custom scripts\" slot into dyn UI. Constructor: drawCustomScriptsSlot(MnsArgumentObj, layoutParent) Return: None Arguments: MnsArgumentObj layoutParent Keyword Arguments:","title":"drawCustomScriptsSlot"},{"location":"UIUtils/#drawextrachannelsbox","text":"Main dynamic 'draw blend shape targets box' creation function. Constructor: drawExtraChannelsBox(MnsArgumentObj, layoutParent) Return: None Arguments: MnsArgumentObj layoutParent Keyword Arguments:","title":"drawExtraChannelsBox"},{"location":"UIUtils/#drawfloatscroll","text":"Main dynamic \"Float spinner\" UI draw Creates a Float QDoubleSpinBox widget, and a default button connected to it. Constructor: drawFloatScroll(MnsArgumentObj, layoutParent) Return: None Arguments: MnsArgumentObj layoutParent Keyword Arguments:","title":"drawFloatScroll"},{"location":"UIUtils/#drawhorizontaldevider","text":"Draw a simple Horizontal devider into the dynUI. Constructor: drawHorizontalDevider(MnsArgumentObj, layoutParent) Return: None Arguments: MnsArgumentObj layoutParent Keyword Arguments:","title":"drawHorizontalDevider"},{"location":"UIUtils/#drawintspinner","text":"Main dynamic 'int field' field and spinner UI draw. Creates an int QSpinBox widget, and a default button connected to it. Constructor: drawIntSpinner(MnsArgumentObj, layoutParent) Return: None Arguments: MnsArgumentObj layoutParent Keyword Arguments:","title":"drawIntSpinner"},{"location":"UIUtils/#drawjntstructmembercol","text":"Constructor: drawJntStructMemberCol(layout = None, argument = None) Return: None Arguments: layout ( str ) ; [default: None] argument ( str ) ; [default: None] Keyword Arguments:","title":"drawJntStructMemberCol"},{"location":"UIUtils/#drawmodulebutton","text":"Main BLOCK dynamic build module buttom function draw. Builds a new QPushButoon for a given module, return the QPushButton created after connecting it to the given 'connectFunction'. The QPush buttom created will then to be inserted into a layout by the caller function. Constructor: drawModuleButton(MnsBuildModuleObj, connectFunction) Return: None Arguments: MnsBuildModuleObj connectFunction Keyword Arguments:","title":"drawModuleButton"},{"location":"UIUtils/#drawoptionbox","text":"Main dynamic 'option box' draw. Drawing a new ob based on parameters within the MnsArgument object passed in. The QComboBox is inserted into the parent layout passed in. A default button and connection is made. Constructor: drawOptionBox(MnsArgumentObj, layoutParent) Return: None Arguments: MnsArgumentObj layoutParent Keyword Arguments:","title":"drawOptionBox"},{"location":"UIUtils/#drawpathfield","text":"Main Path row draw Constructor: drawPathField(MnsArgumentObj, layoutParent) Return: None Arguments: MnsArgumentObj layoutParent Keyword Arguments:","title":"drawPathField"},{"location":"UIUtils/#drawprimarybutton","text":"Picker method- draw a generic picker button. Constructor: drawPrimaryButton(plg, tabWidget, pickerBase, picker) Return: None Arguments: plg tabWidget pickerBase picker Keyword Arguments:","title":"drawPrimaryButton"},{"location":"UIUtils/#drawspacesbox","text":"Main dynamic 'draw spaces box' creation function. Constructor: drawSpacesBox(MnsArgumentObj, layoutParent, kwargs) Return: None Arguments: MnsArgumentObj layoutParent kwargs Keyword Arguments:","title":"drawSpacesBox"},{"location":"UIUtils/#dynuiextrachannelsmenu","text":"Constructor: dynUIExtraChannelsMenu(treeWG, position) Return: None Arguments: treeWG position Keyword Arguments:","title":"dynUIExtraChannelsMenu"},{"location":"UIUtils/#extrachannelsadddivider","text":"Constructor: extraChannelsAddDivider(treeWG, kwargs) Return: None Arguments: treeWG kwargs Keyword Arguments:","title":"extraChannelsAddDivider"},{"location":"UIUtils/#extrachannelsaddrow","text":"Constructor: extraChannelsAddRow(treeWG, kwargs) Return: None Arguments: treeWG kwargs Keyword Arguments:","title":"extraChannelsAddRow"},{"location":"UIUtils/#extrachannelschangedirection","text":"Constructor: extraChannelsChangeDirection(treeWG, direction = 1) Return: None Arguments: treeWG direction ( int ) ; [default: 1] Keyword Arguments:","title":"extraChannelsChangeDirection"},{"location":"UIUtils/#extrachannelsduplicaterows","text":"Constructor: extraChannelsDuplicateRows(treeWG, kwargs) Return: None Arguments: treeWG kwargs Keyword Arguments:","title":"extraChannelsDuplicateRows"},{"location":"UIUtils/#extrachannelsedit","text":"Constructor: extraChannelsEdit(item, col) Return: None Arguments: item col Keyword Arguments:","title":"extraChannelsEdit"},{"location":"UIUtils/#extrachannelsloadcbsel","text":"Constructor: extraChannelsLoadCBSel(treeWG) Return: None Arguments: treeWG Keyword Arguments:","title":"extraChannelsLoadCBSel"},{"location":"UIUtils/#extrachannelsmoveitemsdown","text":"Constructor: extraChannelsMoveItemsDown(treeWG) Return: None Arguments: treeWG Keyword Arguments:","title":"extraChannelsMoveItemsDown"},{"location":"UIUtils/#extrachannelsmoveitemsup","text":"Constructor: extraChannelsMoveItemsUp(treeWG) Return: None Arguments: treeWG Keyword Arguments:","title":"extraChannelsMoveItemsUp"},{"location":"UIUtils/#extrachannelsremoveselected","text":"Constructor: extraChannelsRemoveSelected(treeWG) Return: None Arguments: treeWG Keyword Arguments:","title":"extraChannelsRemoveSelected"},{"location":"UIUtils/#extrachannelsvalidatecurrentdata","text":"Constructor: extraChannelsValidateCurrentData(treeWG) Return: None Arguments: treeWG Keyword Arguments:","title":"extraChannelsValidateCurrentData"},{"location":"UIUtils/#getcolor","text":"Simple 'get color for a color PButton'. Creates a new QColorDialog asking the user for a color choice. When color selected sets the caller QPushButton color to the selected color Constructor: getColor(btn, kwargs) Return: None Arguments: btn kwargs Keyword Arguments:","title":"getColor"},{"location":"UIUtils/#getcolorarrayfromcolorscheme","text":"Collect a normalized array of colors from a 'colorSceheme' enum attribute. Constructor: getColorArrayFromColorScheme(side, colorScheme) Return: None Arguments: side colorScheme Keyword Arguments:","title":"getColorArrayFromColorScheme"},{"location":"UIUtils/#geteulatext","text":"get the most recent eula. Constructor: getEulaText() Return: None Arguments: Keyword Arguments:","title":"getEulaText"},{"location":"UIUtils/#getobjectscreenspacebyfilmgate","text":"This method is used to 'project' a plg into the projection camera's film gate. Get the relative position of the plg to the camera film-gate's top left corener. Constructor: getObjectScreenSpaceByFilmGate(objectProj, cam) Return: None Arguments: objectProj cam Keyword Arguments:","title":"getObjectScreenSpaceByFilmGate"},{"location":"UIUtils/#getpathcommand","text":"Dyn UI path slot 'get path' command trigger. Constructor: getPathCommand(LEdit, mode = 0, fileTypes = []) Return: None Arguments: LEdit mode ( int ) ; [default: 0] fileTypes ( list ) ; [default: []] Keyword Arguments:","title":"getPathCommand"},{"location":"UIUtils/#getplgposition","text":"Get the relative position of the requested plg, based on the 'Picker Layout Base' Guide top left corner. Return the local bounding box size as well. Constructor: getPlgPosition(plg, pickerBase) Return: None Arguments: plg pickerBase Keyword Arguments:","title":"getPlgPosition"},{"location":"UIUtils/#getwindow","text":"Constructor: getWindow(windowName = \"\") Return: None Arguments: windowName ( str ) ; [default: \"\"] Keyword Arguments:","title":"getWindow"},{"location":"UIUtils/#get_maya_window","text":"Main maya window get for a global UI parent Constructor: get_maya_window() Return: None Arguments: Keyword Arguments:","title":"get_maya_window"},{"location":"UIUtils/#listloadcmd","text":"Load to list command trigger (dynUI) Constructor: listLoadCmd(QListWidget) Return: None Arguments: QListWidget Keyword Arguments:","title":"listLoadCmd"},{"location":"UIUtils/#listremovecommand","text":"Remove from list command trigger (dynUI) Constructor: listRemoveCommand(QListWidget) Return: None Arguments: QListWidget Keyword Arguments:","title":"listRemoveCommand"},{"location":"UIUtils/#loadcmd","text":"Main text field 'load from scene' trigger command. This command will update the given QLEdit with members of the maya scene when triggered. Three main cases: 1. Nothing is selected - if the field is empty- do nothing, else clear the field. 2. objects are selected, without any CB selection - load the object names in, seperated by commas. 3. Objects are selected and there is a CB selection as well - load all objects and chnnels in a 'object.channel' format, seperated by commas. Constructor: loadCmd(LEdit) Return: None Arguments: LEdit Keyword Arguments:","title":"loadCmd"},{"location":"UIUtils/#load_ui_type","text":"This function converts a '.ui' file into a '.py' file live. This means that all UI's are derived from a QT designer ui files that are converted directly to form the UI. This keeps a live connection between the '.ui' file and the actul UI in maya. Meaning that any edit or a change to the UI base needs to be done only from the QT designer, without any further action by the user. It reruns a baseClass and a formClass to be used when creating any UI. Constructor: load_ui_type(ui_file) Return: None Arguments: ui_file Keyword Arguments:","title":"load_ui_type"},{"location":"UIUtils/#optionboxtexttrigger","text":"Constructor: optionBoxTextTrigger(comboBox = None, lineWditWidget = None, index = 0) Return: None Arguments: comboBox ( str ) ; [default: None] lineWditWidget ( str ) ; [default: None] index ( int ) ; [default: 0] Keyword Arguments:","title":"optionBoxTextTrigger"},{"location":"UIUtils/#recdeletealllayoutitems","text":"A method to delete all widgets/object from a given layout Constructor: recDeleteAllLayoutItems(layout, kwargs) Return: None Arguments: layout kwargs Keyword Arguments:","title":"recDeleteAllLayoutItems"},{"location":"UIUtils/#relativepathcheck","text":"A method for checking if any file path can be converted to a relative path. If relative path is available, promt a message asking the user if he want to convert. if so, convert and return. Constructor: relativePathCheck(filePath = \"\") Return: None Arguments: filePath ( str ) ; [default: \"\"] Keyword Arguments:","title":"relativePathCheck"},{"location":"UIUtils/#reloadwindow","text":"Constructor: reloadWindow(windowName = \"\") Return: None Arguments: windowName ( str ) ; [default: \"\"] Keyword Arguments:","title":"reloadWindow"},{"location":"UIUtils/#setbooleandefaultcmd","text":"'Set default' trigger for a QCheckBox item. Constructor: setBooleanDefaultCmd(cbx,default) Return: None Arguments: cbx default Keyword Arguments:","title":"setBooleanDefaultCmd"},{"location":"UIUtils/#setchennelcontroldefaultcmd","text":"DynUI chennel control slot default command trigger. Constructor: setChennelControlDefaultCmd(cbxList, MnsArgumentObj) Return: None Arguments: cbxList MnsArgumentObj Keyword Arguments:","title":"setChennelControlDefaultCmd"},{"location":"UIUtils/#setcolordefaultcmd","text":"A 'set color back to default command. A command to be triggered by an outside 'default' button, or when initializing to set the specified QPushButton color back to it's default value. Constructor: setColorDefaultCmd(btn, colorDef) Return: None Arguments: btn colorDef Keyword Arguments:","title":"setColorDefaultCmd"},{"location":"UIUtils/#setcolorschemedefaultcmd","text":"DynUI color-scheme default command trigger. Constructor: setColorSchemeDefaultCmd(btnList, default) Return: None Arguments: btnList default Keyword Arguments:","title":"setColorSchemeDefaultCmd"},{"location":"UIUtils/#setfloatdefaultcmd","text":"'Set default' trigger for a QDoubleSpinBox item. Constructor: setFloatDefaultCmd(spinner,default) Return: None Arguments: spinner default Keyword Arguments:","title":"setFloatDefaultCmd"},{"location":"UIUtils/#setintdefaultcmd","text":"'Set deafult' command trigget for an int QSpinBox. Constructor: setIntDefaultCmd(spinner,default) Return: None Arguments: spinner default Keyword Arguments:","title":"setIntDefaultCmd"},{"location":"UIUtils/#setlinktoqlabel","text":"Constructor: setLinkToQLabel(labelObj = None, ahref = \"\") Return: None Arguments: labelObj ( str ) ; [default: None] ahref ( str ) ; [default: \"\"] Keyword Arguments:","title":"setLinkToQLabel"},{"location":"UIUtils/#setlistwidgetdefaultcommand","text":"'Default' command trigger for a 'list' type synamic row (dynUI) Constructor: setListWidgetDefaultCommand(QListWidget, default) Return: None Arguments: QListWidget default Keyword Arguments:","title":"setListWidgetDefaultCommand"},{"location":"UIUtils/#setotionboxdefaultcmd","text":"A 'set default' command to be triggered for a combo box item. Constructor: setOtionBoxDefaultCmd(cbox, default) Return: None Arguments: cbox default Keyword Arguments:","title":"setOtionBoxDefaultCmd"},{"location":"UIUtils/#setspacedefault","text":"Constructor: setSpaceDefault(listWG, kwargs) Return: None Arguments: listWG kwargs Keyword Arguments:","title":"setSpaceDefault"},{"location":"UIUtils/#setstringdefaultcmd","text":"'Set default' command trigger from a text field Constructor: setStringDefaultCmd(LEdit,default) Return: None Arguments: LEdit default Keyword Arguments:","title":"setStringDefaultCmd"},{"location":"UIUtils/#sidecbchangedtriggercommand","text":"DynUI side combo box changed command trigger. Constructor: sideCBChangedTriggerCommand(colorOverrideCbx, sideCB, ovverideBtnList, rigTop, ignoreOvverideCheckbox = False) Return: None Arguments: colorOverrideCbx sideCB ovverideBtnList rigTop ignoreOvverideCheckbox ( bool ) ; [default: False] Keyword Arguments:","title":"sideCBChangedTriggerCommand"},{"location":"UIUtils/#tearoffwindow","text":"Create a new maya 'tear-off' panel. Constructor: tearOffWindow(name, title, width, height, cameraToView) Return: None Arguments: name title width height cameraToView Keyword Arguments:","title":"tearOffWindow"},{"location":"UIUtils/#toqtobject","text":"Convert a maya UI component into a QT object Constructor: toQtObject(mayaName, kwargs) Return: None Arguments: mayaName kwargs Keyword Arguments:","title":"toQtObject"},{"location":"about/","text":"My name is Asaf Ben Zur and I'm a 3D Rigger & Developer for 3D Animation. I know first hand how difficult it is to survive in the VFX & Animation world, and i believe that the only ones who can change that are the artists. The fact that in-order to survive as an Animation or a VFX artist, you have to constantly strive for a higher position or a bigger studio- there you will be a part of a higher-budget projects, and higher-level tools as a result. As a Rigger, I know for a fact that any 3D animation is limited to the rig provided. And when the rig fails- the animator's vision fails with it- forcing them to compremise. I want to support creation by sharing some higher-end developments and tools- which are created mainly with animators in mind, to try and provide artists with a better envioroment to work in and tools that will allow better behavior, faster performance, and easier control. The videos I make are mainly technical currently (which will change soon), but I try and make it as clear as possible for artists to recognize the potential to produce some amazing results with minimum effort, while trying to ignore my terrible animation skills. The plugins I present are a part of a big modular rig builder I'm working on called BLOCK- which will use all of these plugins under the hood of the build-modules.","title":"About"},{"location":"arguments/","text":"arguments === Author: Assaf Ben Zur === MNS main arguments core functions and Classes. This module holds the MnsArgument class as well as all argument handeling functions. This module was designed to procedurally handle function arguments in order to manipulate them, generate dynamic UI's from them, and pass them along back to their creator function as an execute. Classes MnsArgument [Class] MnsArgument Convieniency Class. A class instance holds all relevant information regarding an extracted single function argument. These class members will dectate any behavior derived from an actual function object or a method object. Constructor: MnsArgument( **kwargs ) Inherits from: object Class Members: name type default min max comment ob side pathMode pathFileTypes blockCreationOnly jntStructMember jntStructSoftMod lockOffAttributes simpleDivider meshComponents disabled multiRowList alphabeticalOnly Methods: formatCommentToToolTip [method] MnsArgument methods formatCommentToToolTip [ MnsArgument class method] Constructor: formatCommentToToolTip(self) Return: None Arguments: self Optional Arguments: Defenitions convertChannelControlDictToAttr Constructor: convertChannelControlDictToAttr(channelControlDict = {}) Return: None Arguments: channelControlDict ( dict ) ; [default: {}] Keyword Arguments: extractArgsFromDef This function will extract all arguments and optional arguments from a given function object. Returns two lists containing MnsArgument instances. Constructor: extractArgsFromDef(defenition) Return: None Arguments: defenition Keyword Arguments: extractArgsFromSource This function will extract all arguments and optional arguments from a given function source. Returns two lists containing MnsArgument instances. Constructor: extractArgsFromSource(src) Return: None Arguments: src Keyword Arguments: extractChennelControlDefaultFromLine Constructor: extractChennelControlDefaultFromLine(line = \"\", argAame = \"\") Return: None Arguments: line ( str ) ; [default: \"\"] argAame ( str ) ; [default: \"\"] Keyword Arguments: extractColorSchemeDefaultFromLine Constructor: extractColorSchemeDefaultFromLine(line = \"\", argAame = \"\") Return: None Arguments: line ( str ) ; [default: \"\"] argAame ( str ) ; [default: \"\"] Keyword Arguments: formatArgumetsAsDict Format given list of arguments into a predefined dictionary structure. Constructor: formatArgumetsAsDict(mnsArgsList = []) Return: None Arguments: mnsArgsList ( list ) ; [default: []] Keyword Arguments: recompileArgumetsAsString A reverse function to the 'extractArgsFromDef'. In order to pass any arguments back to it's creator, comes a need to re-compile an argument list into a single callable formatted string. This function covers this need. Constructor: recompileArgumetsAsString(defenition, arguments, optArgs, values) Return: None Arguments: defenition arguments optArgs values Keyword Arguments: returnValueAndTypeFromArgString This function will return a value (as its actual type) and a type (as a type object) from a given extracted argument string Constructor: returnValueAndTypeFromArgString(argString = \"\") Return: None Arguments: argString ( str ) ; [default: \"\"] Keyword Arguments: splitStringToArg This function return a MnsArgument object from a given argument string. It will split the argument string into actual elemnts and values and directly ingest them into the class members. Constructor: splitStringToArg(argAsString) Return: None Arguments: argAsString Keyword Arguments:","title":"Arguments"},{"location":"arguments/#arguments","text":"=== Author: Assaf Ben Zur === MNS main arguments core functions and Classes. This module holds the MnsArgument class as well as all argument handeling functions. This module was designed to procedurally handle function arguments in order to manipulate them, generate dynamic UI's from them, and pass them along back to their creator function as an execute.","title":"arguments"},{"location":"arguments/#classes","text":"","title":"Classes"},{"location":"arguments/#mnsargument-class","text":"MnsArgument Convieniency Class. A class instance holds all relevant information regarding an extracted single function argument. These class members will dectate any behavior derived from an actual function object or a method object. Constructor: MnsArgument( **kwargs ) Inherits from: object Class Members: name type default min max comment ob side pathMode pathFileTypes blockCreationOnly jntStructMember jntStructSoftMod lockOffAttributes simpleDivider meshComponents disabled multiRowList alphabeticalOnly Methods: formatCommentToToolTip [method]","title":"MnsArgument [Class]"},{"location":"arguments/#mnsargument-methods","text":"","title":"MnsArgument  methods"},{"location":"arguments/#defenitions","text":"","title":"Defenitions"},{"location":"arguments/#convertchannelcontroldicttoattr","text":"Constructor: convertChannelControlDictToAttr(channelControlDict = {}) Return: None Arguments: channelControlDict ( dict ) ; [default: {}] Keyword Arguments:","title":"convertChannelControlDictToAttr"},{"location":"arguments/#extractargsfromdef","text":"This function will extract all arguments and optional arguments from a given function object. Returns two lists containing MnsArgument instances. Constructor: extractArgsFromDef(defenition) Return: None Arguments: defenition Keyword Arguments:","title":"extractArgsFromDef"},{"location":"arguments/#extractargsfromsource","text":"This function will extract all arguments and optional arguments from a given function source. Returns two lists containing MnsArgument instances. Constructor: extractArgsFromSource(src) Return: None Arguments: src Keyword Arguments:","title":"extractArgsFromSource"},{"location":"arguments/#extractchennelcontroldefaultfromline","text":"Constructor: extractChennelControlDefaultFromLine(line = \"\", argAame = \"\") Return: None Arguments: line ( str ) ; [default: \"\"] argAame ( str ) ; [default: \"\"] Keyword Arguments:","title":"extractChennelControlDefaultFromLine"},{"location":"arguments/#extractcolorschemedefaultfromline","text":"Constructor: extractColorSchemeDefaultFromLine(line = \"\", argAame = \"\") Return: None Arguments: line ( str ) ; [default: \"\"] argAame ( str ) ; [default: \"\"] Keyword Arguments:","title":"extractColorSchemeDefaultFromLine"},{"location":"arguments/#formatargumetsasdict","text":"Format given list of arguments into a predefined dictionary structure. Constructor: formatArgumetsAsDict(mnsArgsList = []) Return: None Arguments: mnsArgsList ( list ) ; [default: []] Keyword Arguments:","title":"formatArgumetsAsDict"},{"location":"arguments/#recompileargumetsasstring","text":"A reverse function to the 'extractArgsFromDef'. In order to pass any arguments back to it's creator, comes a need to re-compile an argument list into a single callable formatted string. This function covers this need. Constructor: recompileArgumetsAsString(defenition, arguments, optArgs, values) Return: None Arguments: defenition arguments optArgs values Keyword Arguments:","title":"recompileArgumetsAsString"},{"location":"arguments/#returnvalueandtypefromargstring","text":"This function will return a value (as its actual type) and a type (as a type object) from a given extracted argument string Constructor: returnValueAndTypeFromArgString(argString = \"\") Return: None Arguments: argString ( str ) ; [default: \"\"] Keyword Arguments:","title":"returnValueAndTypeFromArgString"},{"location":"arguments/#splitstringtoarg","text":"This function return a MnsArgument object from a given argument string. It will split the argument string into actual elemnts and values and directly ingest them into the class members. Constructor: splitStringToArg(argAsString) Return: None Arguments: argAsString Keyword Arguments:","title":"splitStringToArg"},{"location":"blockBuildUI/","text":"blockBuildUI === Author: Assaf Ben Zur === MANSUR - BLOCK Main BLOCK UI. This is the main UI for rig building (BLOCK). This is the essence of the entire library. This tool gathers all user actions, and defines triggers for edditing rigs. The main goal of this UI is to collect the available build-modules and draw creation buttons for them. The core module library is defined as the block library, but additionals paths can be inserted into the collect loop. Many UI triggers are available in this UI, but many are kept external to the UI class, to keep things as clean and independent as possible. Most core functionalitites belong to the rig classes in 'buildModules'. Classes MnsBlockBuildUI [Class] BLOCK UI Class. Constructor: MnsBlockBuildUI( parent ( str ) ; [default: mnsUIUtils.get_maya_window()]) Inherits from: form_class, base_class Class Members: iconsDir tabIndex buildModulesBtns sidePlaceHolder bmLib bmToolTips mayaSelectCallBack Methods: bmCategoryChangedTrigger [method] copySkin [method] createAllModulesSection [method] getListWidgetFromSender [method] getPickerProjectionMode [method] getPoseMode [method] initializeGuidePresetCb [method] initializePrefDirs [method] plgMatch [method] promoteModule [method] resizeWindowBasedOnLog [method] sceneSelectFromWidgets [method] sortMeshLists [method] toggleProjPerpCam [method] updateMeshWidgetsDict [method] getPickerExportMode [method] loadMeshes [method] getToolTipForModule [method] refreshSelectionState [method] loadSelectionToLineEdit [method] addMeshes [method] removeMeshes [method] getCurrentMeshes [method] echoLog [method] meshListWidgetMenu [method] applyModulePathsChange [method] applyModulePresetPathsChange [method] moduleBuildGuide [method] addModulePath [method] addModulePresetPath [method] connectSignals [method] constructRigInit [method] deconstructRigInit [method] buildModulesDefine [method] defineBuildParentModules [method] extractControlShapes [method] getCorrespondingModuleButtonForModule [method] symmetrizeControlShapes [method] gatherAdditionalModulePaths [method] gatherAdditionalModulePresetPaths [method] getConstructMode [method] getModuleSettings [method] initializeAdditionalModulePaths [method] initializeAdditionalModulePresetsPaths [method] initView [method] loadModuleSettings [method] loadRigSettings [method] duplicateModule [method] pureDuplicate [method] eventFilter [method] removeModelPath [method] removeModulePresetPath [method] removeCustomShapes [method] poseSaveLoadTrigger [method] loadWindow [method] getDefaultsMode [method] symmetrizeModule [method] newRigTopTrig [method] orientGuides [method] updateSettings [method] MnsBlockBuildUI methods bmCategoryChangedTrigger [ MnsBlockBuildUI class method] Constructor: bmCategoryChangedTrigger(self) Return: None Arguments: self Optional Arguments: copySkin [ MnsBlockBuildUI class method] Constructor: copySkin(self) Return: None Arguments: self Optional Arguments: createAllModulesSection [ MnsBlockBuildUI class method] Constructor: createAllModulesSection(self) Return: None Arguments: self Optional Arguments: getListWidgetFromSender [ MnsBlockBuildUI class method] Constructor: getListWidgetFromSender(self) Return: None Arguments: self Optional Arguments: getPickerProjectionMode [ MnsBlockBuildUI class method] Constructor: getPickerProjectionMode(self) Return: None Arguments: self Optional Arguments: getPoseMode [ MnsBlockBuildUI class method] Constructor: getPoseMode(self) Return: None Arguments: self Optional Arguments: initializeGuidePresetCb [ MnsBlockBuildUI class method] Constructor: initializeGuidePresetCb(self) Return: None Arguments: self Optional Arguments: initializePrefDirs [ MnsBlockBuildUI class method] Constructor: initializePrefDirs(self) Return: None Arguments: self Optional Arguments: plgMatch [ MnsBlockBuildUI class method] Constructor: plgMatch(self) Return: None Arguments: self Optional Arguments: promoteModule [ MnsBlockBuildUI class method] Constructor: promoteModule(self) Return: None Arguments: self Optional Arguments: resizeWindowBasedOnLog [ MnsBlockBuildUI class method] Constructor: resizeWindowBasedOnLog(self) Return: None Arguments: self Optional Arguments: sceneSelectFromWidgets [ MnsBlockBuildUI class method] Constructor: sceneSelectFromWidgets(self) Return: None Arguments: self Optional Arguments: sortMeshLists [ MnsBlockBuildUI class method] Constructor: sortMeshLists(self) Return: None Arguments: self Optional Arguments: toggleProjPerpCam [ MnsBlockBuildUI class method] Constructor: toggleProjPerpCam(self) Return: None Arguments: self Optional Arguments: updateMeshWidgetsDict [ MnsBlockBuildUI class method] Constructor: updateMeshWidgetsDict(self) Return: None Arguments: self Optional Arguments: getPickerExportMode [ MnsBlockBuildUI class method] Constructor: getPickerExportMode(self) Return: int Arguments: self Optional Arguments: loadMeshes [ MnsBlockBuildUI class method] Constructor: loadMeshes(self, kwargs) Return: None Arguments: self kwargs Optional Arguments: getToolTipForModule [ MnsBlockBuildUI class method] Constructor: getToolTipForModule(self, buildModule) Return: None Arguments: self buildModule Optional Arguments: refreshSelectionState [ MnsBlockBuildUI class method] Constructor: refreshSelectionState(self, dummy = None) Return: None Arguments: self dummy ( str ) ; [default: None] Optional Arguments: loadSelectionToLineEdit [ MnsBlockBuildUI class method] Constructor: loadSelectionToLineEdit(self, lEditWidget = None) Return: None Arguments: self lEditWidget ( str ) ; [default: None] Optional Arguments: addMeshes [ MnsBlockBuildUI class method] Constructor: addMeshes(self, listWidget) Return: None Arguments: self listWidget Optional Arguments: removeMeshes [ MnsBlockBuildUI class method] Constructor: removeMeshes(self, listWidget) Return: None Arguments: self listWidget Optional Arguments: getCurrentMeshes [ MnsBlockBuildUI class method] Constructor: getCurrentMeshes(self, listWidget = None, kwargs) Return: None Arguments: self listWidget ( str ) ; [default: None] kwargs Optional Arguments: echoLog [ MnsBlockBuildUI class method] Constructor: echoLog(self, msg, svr) Return: None Arguments: self msg svr Optional Arguments: meshListWidgetMenu [ MnsBlockBuildUI class method] Constructor: meshListWidgetMenu(self, position) Return: None Arguments: self position Optional Arguments: applyModulePathsChange [ MnsBlockBuildUI class method] 'Apply' (in build tab, module paths) trigger. Write the additional paths entered within the UI in the stor json. Constructor: applyModulePathsChange(self) Return: None Arguments: self Optional Arguments: applyModulePresetPathsChange [ MnsBlockBuildUI class method] 'Apply' (in build tab, module paths) trigger. Write the additional paths entered within the UI in the stor json. Constructor: applyModulePresetPathsChange(self) Return: None Arguments: self Optional Arguments: moduleBuildGuide [ MnsBlockBuildUI class method] Action trigger for any build-module button. This trigger action will be connected procedurally within the 'drawModuleButton' method in blockUtility. Constructor: moduleBuildGuide(self, listWidgetItemName) Return: None Arguments: self listWidgetItemName Optional Arguments: addModulePath [ MnsBlockBuildUI class method] Add a module path line to the 'module paths' tree trigger. Constructor: addModulePath(self) Return: None Arguments: self Optional Arguments: addModulePresetPath [ MnsBlockBuildUI class method] Add a module path line to the 'module paths' tree trigger. Constructor: addModulePresetPath(self) Return: None Arguments: self Optional Arguments: connectSignals [ MnsBlockBuildUI class method] Connect all UI signals. Constructor: connectSignals(self) Return: None Arguments: self Optional Arguments: constructRigInit [ MnsBlockBuildUI class method] Construct trigger. Constructor: constructRigInit(self, kwargs) Return: None Arguments: self kwargs Optional Arguments: deconstructRigInit [ MnsBlockBuildUI class method] Deconstruct trigger. Constructor: deconstructRigInit(self, kwargs) Return: None Arguments: self kwargs Optional Arguments: buildModulesDefine [ MnsBlockBuildUI class method] Define all existing build-modules within a built tab's directory. This mehthod will run for every valid build-module's directory folder, essentially building the actual build-module button in the UI. These will all be stored in the 'buildModulesBtns' attribute of this class. Constructor: buildModulesDefine(self, modParentPath, listWidget) Return: None Arguments: self modParentPath listWidget Optional Arguments: defineBuildParentModules [ MnsBlockBuildUI class method] Define build module tabs, based on the collected valid build-modules directories. If the directory in question is a valid directory for build modules: for every folder containing modules within it, a new tab will be inserted and named based on it. Constructor: defineBuildParentModules(self) Return: None Arguments: self Optional Arguments: extractControlShapes [ MnsBlockBuildUI class method] Extract all control shapes from the current constructed rig, and store them for future re-construction. Constructor: extractControlShapes(self, kwargs) Return: None Arguments: self kwargs Optional Arguments: getCorrespondingModuleButtonForModule [ MnsBlockBuildUI class method] For the given rootGuide object, try to locate its corresponding UI button. Look within this class's 'buildModulesBtns' attribute. Constructor: getCorrespondingModuleButtonForModule(self, rootGuide) Return: MnsBuildModuleBtn Arguments: self rootGuide Optional Arguments: symmetrizeControlShapes [ MnsBlockBuildUI class method] For the selected state, symmetrize all found control shapes. sym Mode: 0: Left to Right 1: Right to Left Constructor: symmetrizeControlShapes(self) Return: None Arguments: self Optional Arguments: gatherAdditionalModulePaths [ MnsBlockBuildUI class method] Gather all existing additional custom patns from the UI. Constructor: gatherAdditionalModulePaths(self) Return: list (Paths) Arguments: self Optional Arguments: gatherAdditionalModulePresetPaths [ MnsBlockBuildUI class method] Gather all existing additional custom patns from the UI. Constructor: gatherAdditionalModulePresetPaths(self) Return: list (Paths) Arguments: self Optional Arguments: getConstructMode [ MnsBlockBuildUI class method] Get current UI radio-buttons construction state (All/Branch/Module). Constructor: getConstructMode(self) Return: int (construction mode) Arguments: self Optional Arguments: getModuleSettings [ MnsBlockBuildUI class method] Get passed in module settings. First get the default settings and values from the build-module directory, then compare against the rootGuide attributes, and return the filtered and altered settings. Constructor: getModuleSettings(self, rootGuide, firstAttempt = True, kwargs) Return: dict,int (optionalArguments, spilt index - for dynUI) Arguments: self rootGuide firstAttempt ( bool ) ; [default: True] kwargs Optional Arguments: initializeAdditionalModulePaths [ MnsBlockBuildUI class method] Initialize any custom build-modules paths that already exist within the data collect json. (Read any paths that were added before, on UI draw). query flag will return the paths only without drawing the items into the UI. Constructor: initializeAdditionalModulePaths(self, kwargs) Return: list (Existing Paths) Arguments: self kwargs Optional Arguments: initializeAdditionalModulePresetsPaths [ MnsBlockBuildUI class method] Initialize any custom build-modules paths that already exist within the data collect json. (Read any paths that were added before, on UI draw). query flag will return the paths only without drawing the items into the UI. Constructor: initializeAdditionalModulePresetsPaths(self, kwargs) Return: list (Existing Paths) Arguments: self kwargs Optional Arguments: initView [ MnsBlockBuildUI class method] Initialize view: - Set icons - Set logger view - Set tab index to 1 - Set-Up CollapsibleWidget view Constructor: initView(self) Return: None Arguments: self Optional Arguments: loadModuleSettings [ MnsBlockBuildUI class method] Load selected module setting trigger. Constructor: loadModuleSettings(self, firstAttempt = True) Return: None Arguments: self firstAttempt ( bool ) ; [default: True] Optional Arguments: loadRigSettings [ MnsBlockBuildUI class method] Load selected rig settings trigger. Constructor: loadRigSettings(self) Return: None Arguments: self Optional Arguments: duplicateModule [ MnsBlockBuildUI class method] Module duplicate. Gather all of the requested module's settings, as well as compare against the module's default settings. Build a new module (same module) using the gathered data, then match all guide positions for the new module guide. Constructor: duplicateModule(self, kwargs) Return: None Arguments: self kwargs Optional Arguments: pureDuplicate [ MnsBlockBuildUI class method] Module duplicate. Gather all of the requested module's settings, as well as compare against the module's default settings. Build a new module (same module) using the gathered data. Constructor: pureDuplicate(self, modRoot, kwargs) Return: MnsBuildModule (New Module) Arguments: self modRoot kwargs Optional Arguments: eventFilter [ MnsBlockBuildUI class method] Override event filter to catch the tear off to override it's event. Constructor: eventFilter(self, source, event) Return: None Arguments: self source event Optional Arguments: removeModelPath [ MnsBlockBuildUI class method] Remove a module path line from the 'module paths' tree trigger. Constructor: removeModelPath(self) Return: None Arguments: self Optional Arguments: removeModulePresetPath [ MnsBlockBuildUI class method] Remove a module path line from the 'module paths' tree trigger. Constructor: removeModulePresetPath(self) Return: None Arguments: self Optional Arguments: removeCustomShapes [ MnsBlockBuildUI class method] Remove all custom control shapes from the current rig. Constructor: removeCustomShapes(self) Return: None Arguments: self Optional Arguments: poseSaveLoadTrigger [ MnsBlockBuildUI class method] Save/Load pose trigger. Simple method to gather pose data and store it, or apply it. Constructor: poseSaveLoadTrigger(self, saveLoadMode = 0) Return: None Arguments: self saveLoadMode ( int ) ; [default: 0] Optional Arguments: loadWindow [ MnsBlockBuildUI class method] Show window method. Constructor: loadWindow(self) Return: None Arguments: self Optional Arguments: getDefaultsMode [ MnsBlockBuildUI class method] Simple method to get the current UI 'defaults' mode. Constructor: getDefaultsMode(self) Return: int (defaults mode) Arguments: self Optional Arguments: symmetrizeModule [ MnsBlockBuildUI class method] Symmetrize module trigger. Exclusive class member process. This method will attempt to symmetrize the requested module guides. Constructor: symmetrizeModule(self) Return: None Arguments: self Optional Arguments: newRigTopTrig [ MnsBlockBuildUI class method] Utils->'New RigTop' trigger. deselect, then initialize a MnsRig class. Constructor: newRigTopTrig(self) Return: None Arguments: self Optional Arguments: orientGuides [ MnsBlockBuildUI class method] orient guides trigger mode 0 = All mode 1 = Branch mode 2 = Module mode 3 = Selection Constructor: orientGuides(self) Return: None Arguments: self Optional Arguments: updateSettings [ MnsBlockBuildUI class method] update setting trigger. This method will apply when a user altered any data within a setting window and chose to apply the changes. The current settings will be validated against the default settings, and in case any data changed, all neccessary actions will be called to apply and store the changes. Constructor: updateSettings(self, kwargs) Return: None Arguments: self kwargs Optional Arguments: Defenitions loadBlock Load the BLOCK UI from globals, avoid UI duplication. Constructor: loadBlock() Return: None Arguments: Keyword Arguments: reloadBlock Constructor: reloadBlock(previousBlockWindow) Return: None Arguments: previousBlockWindow Keyword Arguments:","title":"blockBuildUI"},{"location":"blockBuildUI/#blockbuildui","text":"=== Author: Assaf Ben Zur === MANSUR - BLOCK Main BLOCK UI. This is the main UI for rig building (BLOCK). This is the essence of the entire library. This tool gathers all user actions, and defines triggers for edditing rigs. The main goal of this UI is to collect the available build-modules and draw creation buttons for them. The core module library is defined as the block library, but additionals paths can be inserted into the collect loop. Many UI triggers are available in this UI, but many are kept external to the UI class, to keep things as clean and independent as possible. Most core functionalitites belong to the rig classes in 'buildModules'.","title":"blockBuildUI"},{"location":"blockBuildUI/#classes","text":"","title":"Classes"},{"location":"blockBuildUI/#mnsblockbuildui-class","text":"BLOCK UI Class. Constructor: MnsBlockBuildUI( parent ( str ) ; [default: mnsUIUtils.get_maya_window()]) Inherits from: form_class, base_class Class Members: iconsDir tabIndex buildModulesBtns sidePlaceHolder bmLib bmToolTips mayaSelectCallBack Methods: bmCategoryChangedTrigger [method] copySkin [method] createAllModulesSection [method] getListWidgetFromSender [method] getPickerProjectionMode [method] getPoseMode [method] initializeGuidePresetCb [method] initializePrefDirs [method] plgMatch [method] promoteModule [method] resizeWindowBasedOnLog [method] sceneSelectFromWidgets [method] sortMeshLists [method] toggleProjPerpCam [method] updateMeshWidgetsDict [method] getPickerExportMode [method] loadMeshes [method] getToolTipForModule [method] refreshSelectionState [method] loadSelectionToLineEdit [method] addMeshes [method] removeMeshes [method] getCurrentMeshes [method] echoLog [method] meshListWidgetMenu [method] applyModulePathsChange [method] applyModulePresetPathsChange [method] moduleBuildGuide [method] addModulePath [method] addModulePresetPath [method] connectSignals [method] constructRigInit [method] deconstructRigInit [method] buildModulesDefine [method] defineBuildParentModules [method] extractControlShapes [method] getCorrespondingModuleButtonForModule [method] symmetrizeControlShapes [method] gatherAdditionalModulePaths [method] gatherAdditionalModulePresetPaths [method] getConstructMode [method] getModuleSettings [method] initializeAdditionalModulePaths [method] initializeAdditionalModulePresetsPaths [method] initView [method] loadModuleSettings [method] loadRigSettings [method] duplicateModule [method] pureDuplicate [method] eventFilter [method] removeModelPath [method] removeModulePresetPath [method] removeCustomShapes [method] poseSaveLoadTrigger [method] loadWindow [method] getDefaultsMode [method] symmetrizeModule [method] newRigTopTrig [method] orientGuides [method] updateSettings [method]","title":"MnsBlockBuildUI [Class]"},{"location":"blockBuildUI/#mnsblockbuildui-methods","text":"","title":"MnsBlockBuildUI  methods"},{"location":"blockBuildUI/#defenitions","text":"","title":"Defenitions"},{"location":"blockBuildUI/#loadblock","text":"Load the BLOCK UI from globals, avoid UI duplication. Constructor: loadBlock() Return: None Arguments: Keyword Arguments:","title":"loadBlock"},{"location":"blockBuildUI/#reloadblock","text":"Constructor: reloadBlock(previousBlockWindow) Return: None Arguments: previousBlockWindow Keyword Arguments:","title":"reloadBlock"},{"location":"blockUtility/","text":"blockUtility === Author: Assaf Ben Zur === BLOCK Core Utility Library. This library contains all utility methods used primarily by BLOCK. The objective of this library is mainting most Block-Core abilities external and independent. Classes MnsRigInfo [Class] Mansur - About dialog Constructor: MnsRigInfo( parent ( str ) ; [default: mnsUIUtils.get_maya_window()], rigInfoData ( dict ) ; [default: {}]) Inherits from: QtWidgets.QDialog Class Members: iconsDir close_btn Defenitions addDefaultAttrsToPlg For a newly created plg, create all of it's default predefined attributes. Constructor: addDefaultAttrsToPlg(plg, kwargs) Return: None Arguments: plg kwargs Keyword Arguments: alignPLGuides This is the main 'align' trigger to all 'align tools' in BLOCK. This method will calidate and collect the current scene slection, then align the collected PLG's based on the mode passed in. Constructor: alignPLGuides(border = \"left\", mode = 0) Return: None Arguments: border ( str ) ; [default: \"left\"] mode ( int ) ; [default: 0] Keyword Arguments: attemptModulePathFixForRootGuide Constructor: attemptModulePathFixForRootGuide(guideRoot, existingBtns) Return: None Arguments: guideRoot existingBtns Keyword Arguments: attemptModulePathFixFroRigTop Run through all existing rig component (in rigTop) and validate the module directories against all existing module directories. If a module path was found invalid, attempt to re-find it in the existing modules. Constructor: attemptModulePathFixFroRigTop(rigTop, existingBtns, kwargs) Return: None Arguments: rigTop existingBtns kwargs Keyword Arguments: bakeSlaveControls Constructor: bakeSlaveControls(rigTop = None) Return: None Arguments: rigTop ( str ) ; [default: None] Keyword Arguments: buildShapes This method will be called from a rig construction. This method will look for any contol shapes stored within the given rig (rigTop), and replace the default shapes with any corresponding control shape. Shape replacement method will be done according to the 'mode' flag (relative/absulote). Constructor: buildShapes(ctrls = [], rigTop = None, kwargs) Return: None Arguments: ctrls ( list ) ; [default: []] rigTop ( str ) ; [default: None] kwargs Keyword Arguments: characterizeHumanIK Constructor: characterizeHumanIK(charDefData = {}, mode = 0, kwargs) Return: None Arguments: charDefData ( dict ) ; [default: {}] mode ( int ) ; [default: 0] kwargs Keyword Arguments: collectCtrlRelatives Collect ctrls based on given state: 0: All 1: Modules 2: Selected Constructor: collectCtrlRelatives(mode = 0, kwargs) Return: None Arguments: mode ( int ) ; [default: 0] kwargs Keyword Arguments: collectCtrls Collect ALL related controls for th given rigTop. Constructor: collectCtrls(rigTop = None) Return: None Arguments: rigTop ( str ) ; [default: None] Keyword Arguments: collectGuides Based on the oprional arguments passed in, collect all matching related guides to the input root list. Constructor: collectGuides(roots = pm.ls(sl = 1), kwargs) Return: None Arguments: roots ( str ) ; [default: selection] kwargs Keyword Arguments: collectModuleControls Collect all related controls for the given module. Constructor: collectModuleControls(moduleTop, kwargs) Return: None Arguments: moduleTop kwargs Keyword Arguments: collectModuleRootsBasedOnMode 0: All 1: Branch 2: Module Constructor: collectModuleRootsBasedOnMode(mode = 0) Return: None Arguments: mode ( int ) ; [default: 0] Keyword Arguments: collectPLGuidesToAlign This is the main collect wrapper for all 'align plg' tools in BLOCK. This methods will validate and collect all PLG to align from the current scene selection Constructor: collectPLGuidesToAlign(mode = 0) Return: None Arguments: mode ( int ) ; [default: 0] Keyword Arguments: collectPartialModules This method will collect module root objects based on the input data. If you need to run MnsRig class internal methods, which can operate on partial modules as well as the entire rig, use this method to collect the partial data to be passed into MnsRig class methods. In case fromNodes argument is Null, this method will return data based on the current scene selection. Constructor: collectPartialModules(fromNodes = [], mode = 0) Return: None Arguments: fromNodes ( list ) ; [default: []] mode ( int ) ; [default: 0] Keyword Arguments: collectPartialModulesRoots This method will be called in case a partial build was requested. Using methods within 'blockUtility', this method will collect the requested modules to build based on the UI state. Constructor: collectPartialModulesRoots(mode) Return: None Arguments: mode Keyword Arguments: collectPickerDataForRigTop mode 0 = All mode 1 = Brnach mode 2 = module mode 3 = selected Constructor: collectPickerDataForRigTop(rigTop = None, mode = 0) Return: None Arguments: rigTop ( str ) ; [default: None] mode ( int ) ; [default: 0] Keyword Arguments: collectPlgsBasedOnMode mode 0 = All mode 1 = Brnach mode 2 = module mode 3 = selected Constructor: collectPlgsBasedOnMode(rigTop = None, mode = 0, kwargs) Return: None Arguments: rigTop ( str ) ; [default: None] mode ( int ) ; [default: 0] kwargs Keyword Arguments: collectSlavesFromNdr Collect all slaves related to the passed in 'mnsNodeRelationship' node. Constructor: collectSlavesFromNdr(ndrNode) Return: None Arguments: ndrNode Keyword Arguments: compileCnsCtrlsAttrString Constructor: compileCnsCtrlsAttrString(exsitingCnsCtrlsDict = {}) Return: None Arguments: exsitingCnsCtrlsDict ( dict ) ; [default: {}] Keyword Arguments: connectIfNotConnected Constructor: connectIfNotConnected(attrA, attrB) Return: None Arguments: attrA attrB Keyword Arguments: connectPlgToVisChannel This method handles the vis channel connection of a plg to it's related layoutBase attributes based on it's type. Constructor: connectPlgToVisChannel(plg) Return: None Arguments: plg Keyword Arguments: connectSlaveToDeleteMaster Connect the passed in 'slave' node to the passed in 'master' node using 'mnsNodeRelationship'. This method will be successfull only if the master already has a related 'mnsNodeRelationship' node. Constructor: connectSlaveToDeleteMaster(slave, master) Return: None Arguments: slave master Keyword Arguments: connectTargetSkeleton Constructor: connectTargetSkeleton(defenitionDict = {}, blockNameSpace = \"\", targetNameSpace = \"\") Return: None Arguments: defenitionDict ( dict ) ; [default: {}] blockNameSpace ( str ) ; [default: \"\"] targetNameSpace ( str ) ; [default: \"\"] Keyword Arguments: constrainObjectsToSurface Constructor: constrainObjectsToSurface(MnsBuildModule = None, ctrlMasters = [], jointsToAttach = [], surface = None) Return: None Arguments: MnsBuildModule ( str ) ; [default: None] ctrlMasters ( list ) ; [default: []] jointsToAttach ( list ) ; [default: []] surface ( str ) ; [default: None] Keyword Arguments: constructRig API style scripted construction method. If you wish to construct a rig from an external command instead of Block's UI, use this method. You can pass in a fromNodes argument to specify the rig you wish to construct. In case the fromNodes argument isn't valid, the construction will be selection based. Also, use the mode argument to specify which mode you wish to construct in: mode 0 = ALL mode 1 = Branch mode 2 = Module Constructor: constructRig(fromNodes = [], mode = 0) Return: None Arguments: fromNodes ( list ) ; [default: []] mode ( int ) ; [default: 0] Keyword Arguments: convertInputObjToSpace Constructor: convertInputObjToSpace(obj = None) Return: None Arguments: obj ( str ) ; [default: None] Keyword Arguments: convertModuleAuthorityToSurface Constructor: convertModuleAuthorityToSurface(MnsBuildModule) Return: None Arguments: MnsBuildModule Keyword Arguments: copyShape copy shape utility. This method is operation on selection. Copy the control shape of the first selected component, to the rest of the selection. Constructor: copyShape(source = None, targets = [], reposition = True, kwargs) Return: None Arguments: source ( str ) ; [default: None] targets ( list ) ; [default: []] reposition ( bool ) ; [default: True] kwargs Keyword Arguments: createAndConnectModuleVisChannelsToPuppetRootCtrl This method will create and connect the pedefined visibility graph to a given 'Module Top Group'. The driver attribute will be created within the puppet's 'world control', and the connection graph (using animCurvesUU node) will input into the group's visibility channels. The channels are split (predefined) as follows: Constructor: createAndConnectModuleVisChannelsToPuppetRootCtrl(moduleTopNode = None) Return: None Arguments: moduleTopNode ( str ) ; [default: None] Keyword Arguments: createCnsForCtrls This method is used to create CNS controls/sub-controls for existing puppet controls. In case you need to add extra offset controls in order to constraint them to other components, you can use this method. Pass in a list of controls you want to add sub-controls to, and run. This method is also the one used by the CNS Tool. Constructor: createCnsForCtrls(ctrls = []) Return: None Arguments: ctrls ( list ) ; [default: []] Keyword Arguments: createOffsetSkeleton Constructor: createOffsetSkeleton(rigTop = None) Return: None Arguments: rigTop ( str ) ; [default: None] Keyword Arguments: createPickerLayoutGuide The main creation method for PLG creation. This method will create a new 'Pikcer Layout Guide' based on the passed in parameters. 1. get picker layout base. 2. collect projection position if requested. 3. create and set all attributes Constructor: createPickerLayoutGuide(ctrl, override, rigTop = None, kwargs) Return: None Arguments: ctrl override rigTop ( str ) ; [default: None] kwargs Keyword Arguments: createPickerLayoutGuides Warpper method that handles multiple PLGs creation. Constructor: createPickerLayoutGuides(ctrlsToProject, rigTop, msgPrompt = True, kwargs) Return: None Arguments: ctrlsToProject rigTop msgPrompt ( bool ) ; [default: True] kwargs Keyword Arguments: createPlgBaseVisChannels Constructor: createPlgBaseVisChannels(baseLayoutGuide = None) Return: None Arguments: baseLayoutGuide ( str ) ; [default: None] Keyword Arguments: createVisibilityBridgeMdl This method will check wether the 'target' has a visibility channel connection. In the case the given 'target' has input visibility connection, a 'bridge' multiplyDoubleLinear node will be created. The brigde node will accomidate both sources as an input, instead of replacing the original visibility by simple multiplication. By creating the 'bridge', both old and new sources will be kept as drivers, setting the visibility to 'False' if ANY of the given sources is 'False'. In case there is no connection input to the target's visibility channel, a simple connection will be made using the input source. Constructor: createVisibilityBridgeMdl(source = None, target = None) Return: None Arguments: source ( str ) ; [default: None] target ( str ) ; [default: None] Keyword Arguments: createVolumeJoint Constructor: createVolumeJoint(parentJoint = None, childJoint = None, kwargs) Return: None Arguments: parentJoint ( str ) ; [default: None] childJoint ( str ) ; [default: None] kwargs Keyword Arguments: createVolumeJointForSelection Constructor: createVolumeJointForSelection() Return: None Arguments: Keyword Arguments: ctrlPickerGuideToggle Atempt to toggle between a selection \"control\" and \"PLG\" if possible. Constructor: ctrlPickerGuideToggle( kwargs) Return: None Arguments: kwargs Keyword Arguments: deconstructRig API style scripted deconstruction method. If you wish to construct a rig from an external command instead of Bloxk's UI, use this method. You can pass in a fromNodes argument to specify the rig you wish to construct. In case the fromNodes argument isn't valid, the deconstruction will be selection based. Also, use the mode argument to specify which mode you wish to construct in: mode 0 = ALL mode 1 = Branch mode 2 = Module Constructor: deconstructRig(fromNodes = [], mode = 0) Return: None Arguments: fromNodes ( list ) ; [default: []] mode ( int ) ; [default: 0] Keyword Arguments: deleteDefaultsForCtrl Delete all set custom attributes for the given ctrl. Constructor: deleteDefaultsForCtrl(ctrl) Return: None Arguments: ctrl Keyword Arguments: deleteFreeJntGrpForModule Constructor: deleteFreeJntGrpForModule(guideRoot = None, kwargs) Return: None Arguments: guideRoot ( str ) ; [default: None] kwargs Keyword Arguments: deleteOffsetSekeleton Constructor: deleteOffsetSekeleton(rigTop = None) Return: None Arguments: rigTop ( str ) ; [default: None] Keyword Arguments: deletePoseForGuides Block's delete pose wrapper. Constructor: deletePoseForGuides(guides = [], poseSet = \"T\", kwargs) Return: None Arguments: guides ( list ) ; [default: []] poseSet ( str ) ; [default: \"T\"] kwargs Keyword Arguments: deletePuppetName This method will filter and delete the rigTops' puppet curves title. Constructor: deletePuppetName(rigTop, kwargs) Return: None Arguments: rigTop kwargs Keyword Arguments: deleteRigDefaults Load controls predefined and custom defaults: 0: All 1: Modules 2: Selected Constructor: deleteRigDefaults(mode = 0, kwargs) Return: None Arguments: mode ( int ) ; [default: 0] kwargs Keyword Arguments: detrmineSymmetryDelta Constructor: detrmineSymmetryDelta(sourceA = None, sourceB = None, kwargs) Return: None Arguments: sourceA ( str ) ; [default: None] sourceB ( str ) ; [default: None] kwargs Keyword Arguments: disconnectSlaveFromMaster Disconnect the slave passed in from it's master, if there is one. Constructor: disconnectSlaveFromMaster(slave) Return: None Arguments: slave Keyword Arguments: disconnectTargetSkeleton Constructor: disconnectTargetSkeleton(defenitionDict = {}, blockNameSpace = \"\", targetNameSpace = \"\", kwargs) Return: None Arguments: defenitionDict ( dict ) ; [default: {}] blockNameSpace ( str ) ; [default: \"\"] targetNameSpace ( str ) ; [default: \"\"] kwargs Keyword Arguments: duplicatePlg Block \"PLG duplicate\" trigger. This method will handle PLG validation and duplication. Constructor: duplicatePlg(guide = None) Return: None Arguments: guide ( str ) ; [default: None] Keyword Arguments: duplicatePlgs A simple wrapper mwthod to handle multiple PLG duplication (Based on scene selection). Constructor: duplicatePlgs() Return: None Arguments: Keyword Arguments: executeActionScript Constructor: executeActionScript(plgNode) Return: None Arguments: plgNode Keyword Arguments: exportCtrlShapes mode = 0 - All mode = 1 - Branch mode = 2 - module Constructor: exportCtrlShapes(mode = 0) Return: None Arguments: mode ( int ) ; [default: 0] Keyword Arguments: exportPickerData mode 0 = All mode 1 = Brnach mode 2 = module mode 3 = selected Constructor: exportPickerData(rigTop = None, mode = 0) Return: None Arguments: rigTop ( str ) ; [default: None] mode ( int ) ; [default: 0] Keyword Arguments: extractControlShapes Trigger method for BLOCK - 'extract control shapes' method. This method will extract and store the current state of control shapes within the given rig (rigTop). The extracted shapes will be re-constructed once a rig-rebuild is initiated. In case of any control shape already exists, it will be replaced by default. Constructor: extractControlShapes(ctrls = [], rigTop = None, kwargs) Return: None Arguments: ctrls ( list ) ; [default: []] rigTop ( str ) ; [default: None] kwargs Keyword Arguments: extractSkeleton Constructor: extractSkeleton(rigTop = None, mode = 0, bakeAnim = False, kwargs) Return: None Arguments: rigTop ( str ) ; [default: None] mode ( int ) ; [default: 0] bakeAnim ( bool ) ; [default: False] kwargs Keyword Arguments: filterCreationOnlyFromArgs A simple method to filter out the \"creationOnly\" flag for an argument. This method is called on a dynamicUI creation call if it NOT a \"new creation\" mode in BLOCK. In case any arguments within the list passed in is flagged as \"creationOnly\", it is removed from the list Constructor: filterCreationOnlyFromArgs(argsList) Return: None Arguments: argsList Keyword Arguments: filterSettings Filter all pre-defined settings to their corresponding gathering methods, and re-collect Constructor: filterSettings(fileSettings, node) Return: None Arguments: fileSettings node Keyword Arguments: findNamingIssuesInHierarchy Constructor: findNamingIssuesInHierarchy() Return: None Arguments: Keyword Arguments: gatherAllControlsCustomDefaults Gather custom defaults for all ctrls within the given rig. This method is used on rig deconstruction, to store all set default values, in order to restore them on construction. Constructor: gatherAllControlsCustomDefaults(rigTop) Return: None Arguments: rigTop Keyword Arguments: gatherCustomDefaultDictForCtrl Constructor: gatherCustomDefaultDictForCtrl(ctrl) Return: None Arguments: ctrl Keyword Arguments: gatherMnsRigObject This method will gather an MnsRig class object based on the passed in input, in order to use all of it's methods. If you need to run any method from MnsRig class, use this method to gather the class object, the run any internal method within. Constructor: gatherMnsRigObject() Return: None Arguments: Keyword Arguments: gatherModuleCustomDefaults Gather custom defaults for all ctrls within the given module. This method is used on rig deconstruction, to store all set default values, in order to restore them on construction. Constructor: gatherModuleCustomDefaults(moduleTop) Return: None Arguments: moduleTop Keyword Arguments: getAllCtrlsFromRigTop Get all controls for the given rig top. Constructor: getAllCtrlsFromRigTop(rigTop = None) Return: None Arguments: rigTop ( str ) ; [default: None] Keyword Arguments: getAllGuideRootsForRigTop Gather all guide roots for the passed in rigTop node. Constructor: getAllGuideRootsForRigTop(rigTop) Return: None Arguments: rigTop Keyword Arguments: getAllPlgsForRigTop Collect all 'picker layout guides' from the rig passed in (as rigTop) Constructor: getAllPlgsForRigTop(rigTop) Return: None Arguments: rigTop Keyword Arguments: getAllcolCtrlforRigTop Collect all 'color associated' nodes within the passed in rigTop. All returned nodes are considered 'color associated', meaning they are nodes that all of their shapes need to be directly colored. Constructor: getAllcolCtrlforRigTop(rigTop) Return: None Arguments: rigTop Keyword Arguments: getChildModules Recusrsivly collect all child modules from the given rootGuide's decendents. Constructor: getChildModules(rootGuide) Return: None Arguments: rootGuide Keyword Arguments: getCompundChildren Constructor: getCompundChildren(rootGuide = None) Return: None Arguments: rootGuide ( str ) ; [default: None] Keyword Arguments: getCsGrpFromRigTop Attempt to collect the 'Control Shapes Group' from the passed in rigTop. Constructor: getCsGrpFromRigTop(rigTop = None) Return: None Arguments: rigTop ( str ) ; [default: None] Keyword Arguments: getCtrlAuthFromRootGuide Constructor: getCtrlAuthFromRootGuide(rootGuide = None) Return: None Arguments: rootGuide ( str ) ; [default: None] Keyword Arguments: getCtrlAuthFromRootGuides Constructor: getCtrlAuthFromRootGuides(rGuides = []) Return: None Arguments: rGuides ( list ) ; [default: []] Keyword Arguments: getCtrlCol Get the passed in node's color based on it's type, heirarchy and attributes. Constructor: getCtrlCol(ctrl, rigTop, kwargs) Return: None Arguments: ctrl rigTop kwargs Keyword Arguments: getCtrlShapesForModueRoot Constructor: getCtrlShapesForModueRoot(guideRoot) Return: None Arguments: guideRoot Keyword Arguments: getCtrlsFromModuleRoot Constructor: getCtrlsFromModuleRoot(guideRoot) Return: None Arguments: guideRoot Keyword Arguments: getDeleteMasterFromSlave Collect the delete master from a slave's related 'mnsNodeRelationship' node, if there is one. This method will collect the master connected to the 'deleteMaster' attribute of the node. Constructor: getDeleteMasterFromSlave(slave) Return: None Arguments: slave Keyword Arguments: getExisingCnsCtrlsForRigTop Constructor: getExisingCnsCtrlsForRigTop(rigTop) Return: None Arguments: rigTop Keyword Arguments: getExistingCpomNodeFromSurface Constructor: getExistingCpomNodeFromSurface(surface) Return: None Arguments: surface Keyword Arguments: getExistingSpaceConstraintForControl Collect existing 'spaces' constraints for a passed in (built) control, in order to re-build them in turn, after correct filtering and validation (in case of a partial build for example). Constructor: getExistingSpaceConstraintForControl(ctrl = None) Return: None Arguments: ctrl ( str ) ; [default: None] Keyword Arguments: getExistingSpaceConstraintForControls Wrapper mwthod to collect 'spaces' constraints for multiple controls. Constructor: getExistingSpaceConstraintForControls(controls = []) Return: None Arguments: controls ( list ) ; [default: []] Keyword Arguments: getExistingVolumeJointNodeForJoint Constructor: getExistingVolumeJointNodeForJoint(joint = None) Return: None Arguments: joint ( str ) ; [default: None] Keyword Arguments: getExistingVolumeJointNodeForVolumeJoint Constructor: getExistingVolumeJointNodeForVolumeJoint(joint = None) Return: None Arguments: joint ( str ) ; [default: None] Keyword Arguments: getGlobalScaleAttrFromTransform This method is used to retreive any output decompose matrix node to be used as global scale input connection. If this method fails to retreive such attribute, it creates one and returns it. Constructor: getGlobalScaleAttrFromTransform(transform = None) Return: None Arguments: transform ( str ) ; [default: None] Keyword Arguments: getGuideParent Collect a ctrl type object's 'Guide Authority', or related guide object. Constructor: getGuideParent(objectSel = None) Return: None Arguments: objectSel ( str ) ; [default: None] Keyword Arguments: getJointStructGrpFromRigTop Attempt to collect the 'Picker Title Group' from the passed in rigTop. Constructor: getJointStructGrpFromRigTop(rigTop = None) Return: None Arguments: rigTop ( str ) ; [default: None] Keyword Arguments: getKeyboardModifiersState Constructor: getKeyboardModifiersState() Return: None Arguments: Keyword Arguments: getLimbModuleControls mode 0: fk controls and attrHost mode 1: ik controls and attrHost mode 2: both and attrHost mode 3: attrHost only Constructor: getLimbModuleControls(limbCtrl, mode = 2) Return: None Arguments: limbCtrl mode ( int ) ; [default: 2] Keyword Arguments: getModuleAnimGrp Constructor: getModuleAnimGrp(obj = None) Return: None Arguments: obj ( str ) ; [default: None] Keyword Arguments: getModuleDecendentsWildcard Collect all given module dendents using a 'wild-card' search method. This will collect all relatives using a * search within the root decendents, and return all of the passed in node types. Constructor: getModuleDecendentsWildcard(guideRoot, kwargs) Return: None Arguments: guideRoot kwargs Keyword Arguments: getModuleFromGuide This method will attempt to collect a related PyModule from the given guideRoot passed in. This method will not return the module's methods, only the PyModule as an object. This method also contains override optional arguments to specify a direct path or module name. Constructor: getModuleFromGuide(guideRoot, kwargs) Return: None Arguments: guideRoot kwargs Keyword Arguments: getModuleGuideDecendents Collect all of the root guide module relatives for the passed in moduleRoot (or rootGuide). Constructor: getModuleGuideDecendents(guideRoot) Return: None Arguments: guideRoot Keyword Arguments: getModuleInterpJoints Collect all the given moduleRoot's 'interpolationJoints' relatives. Constructor: getModuleInterpJoints(guideRoot, kwargs) Return: None Arguments: guideRoot kwargs Keyword Arguments: getModuleRoot Attempt to collect the root guide relative from the given node. Constructor: getModuleRoot(objectA) Return: None Arguments: objectA Keyword Arguments: getModuleRootCtrl Constructor: getModuleRootCtrl(obj = None) Return: None Arguments: obj ( str ) ; [default: None] Keyword Arguments: getModuleRootForSel Attempt to collect a 'root guide' relative from the current selection Constructor: getModuleRootForSel() Return: None Arguments: Keyword Arguments: getModuleScale Constructor: getModuleScale(MnsBuildModule) Return: None Arguments: MnsBuildModule Keyword Arguments: getModuleSettings Get passed in module settings. First get the default settings and values from the build-module directory, then compare against the rootGuide attributes, and return the filtered and altered settings. Constructor: getModuleSettings(rootGuide, firstAttempt = True, kwargs) Return: None Arguments: rootGuide firstAttempt ( bool ) ; [default: True] kwargs Keyword Arguments: getModuleTopForCtrl Collect the 'Module Top Group' related to the passed in control. Constructor: getModuleTopForCtrl(ctrl = None, nameMatch = None) Return: None Arguments: ctrl ( str ) ; [default: None] nameMatch ( str ) ; [default: None] Keyword Arguments: getModuleTopFromRootGuide Attempt to collect 'Module Top Group' from a given root guide. Constructor: getModuleTopFromRootGuide(rootGuide = None) Return: None Arguments: rootGuide ( str ) ; [default: None] Keyword Arguments: getNodeRelationshipNodeFromObject Collect the related 'mnsNodeRelationship' node from the given input node. Constructor: getNodeRelationshipNodeFromObject(node) Return: None Arguments: node Keyword Arguments: getOffsetGrpForCtrl Collect the offsetGroup related to the passed in control, if it exists. Constructor: getOffsetGrpForCtrl(ctrl, kwargs) Return: None Arguments: ctrl kwargs Keyword Arguments: getOffsetSkeletonGrpFromRigTop Attempt to collect the 'Picker Title Group' from the passed in rigTop. Constructor: getOffsetSkeletonGrpFromRigTop(rigTop = None) Return: None Arguments: rigTop ( str ) ; [default: None] Keyword Arguments: getOppositeSideControl Attempt to collect the opposite related mns object if it exists. Only non 'ceneter components' will be tested of course. Constructor: getOppositeSideControl(obj = None) Return: None Arguments: obj ( str ) ; [default: None] Keyword Arguments: getPickerGuidesGrpFromRigTop Attempt to collect the 'Picker Guide Group' from the passed in rigTop. Constructor: getPickerGuidesGrpFromRigTop(rigTop = None) Return: None Arguments: rigTop ( str ) ; [default: None] Keyword Arguments: getPickerLayoutBaseFromRigTop Attempt to collect the 'Picker Layout Base guide' from the passed in rigTop. Constructor: getPickerLayoutBaseFromRigTop(rigTop = None) Return: None Arguments: rigTop ( str ) ; [default: None] Keyword Arguments: getPickerLayoutCamFromRigTop Attempt to collect the 'Picker Layout Camera' from the passed in rigTop. Constructor: getPickerLayoutCamFromRigTop(rigTop = None) Return: None Arguments: rigTop ( str ) ; [default: None] Keyword Arguments: getPickerProjectionCamFromRigTop Attempt to collect the 'Picker Projection Camera' from the passed in rigTop. Constructor: getPickerProjectionCamFromRigTop(rigTop = None) Return: None Arguments: rigTop ( str ) ; [default: None] Keyword Arguments: getPickerTitleGrpFromRigTop Attempt to collect the 'Picker Title Group' from the passed in rigTop. Constructor: getPickerTitleGrpFromRigTop(rigTop = None) Return: None Arguments: rigTop ( str ) ; [default: None] Keyword Arguments: getPuppetBaseFromRigTop Attempt to collect the 'puppet group' from the passed in rigTop. Constructor: getPuppetBaseFromRigTop(rigTop = None) Return: None Arguments: rigTop ( str ) ; [default: None] Keyword Arguments: getPuppetRootFromRigTop Attempt to collect the 'Puppet World Control' from the passed in rigTop. Constructor: getPuppetRootFromRigTop(rigTop = None) Return: None Arguments: rigTop ( str ) ; [default: None] Keyword Arguments: getPyModuleFromGuide Attempt to collect a 'Python Module' (or package) related to the given guide node passed in. If a related module was found, this method will return it as a PyModule object not as a directory. This method will also return the module's methods in a dictionary in order to run directly from it. Constructor: getPyModuleFromGuide(guide) Return: None Arguments: guide Keyword Arguments: getRelatedNodeFromObject Collect a related node from the 'messageOut' attribute of the given node's 'mnsNodeRelationship' node. Constructor: getRelatedNodeFromObject(node) Return: None Arguments: node Keyword Arguments: getRelatedVolJntSourcesForSelection Constructor: getRelatedVolJntSourcesForSelection() Return: None Arguments: Keyword Arguments: getRelationMasterFromSlave Collect the delete master from a slave's related 'mnsNodeRelationship' node, if there is one. This method will collect the master connected to the 'masterIn' attribute of the node. Constructor: getRelationMasterFromSlave(slave) Return: None Arguments: slave Keyword Arguments: getRigTop Attempt to get a rigTop node from the passed in node to check. Constructor: getRigTop(objectA) Return: None Arguments: objectA Keyword Arguments: getRigTopAssemblies Constructor: getRigTopAssemblies() Return: None Arguments: Keyword Arguments: getRigTopForSel Attempt to get a rigTop node from current selection Constructor: getRigTopForSel() Return: None Arguments: Keyword Arguments: getRootGuideFromCtrl Attempt to collect the related 'rootGuide' from the given control passed in. Constructor: getRootGuideFromCtrl(obj) Return: None Arguments: obj Keyword Arguments: getRootGuideFromRigTop Attempt to collect the rig's root guide from the passed in rigTop node Constructor: getRootGuideFromRigTop(rigTop = None) Return: None Arguments: rigTop ( str ) ; [default: None] Keyword Arguments: getRootJointsFromModuleRoot Constructor: getRootJointsFromModuleRoot(guideRoot) Return: None Arguments: guideRoot Keyword Arguments: getSettings Get setting for the requested setting path. The settings are being filtered and set according to a node passed in. Constructor: getSettings(settingsPath, node, blkType) Return: None Arguments: settingsPath node blkType Keyword Arguments: getSideModuleBranchRoot For a non \"center\" component passed in, recursively attempt to collect the 'side-branch' root guide. In essence look for the highest rootGuide in the selected 'side' heirarchy that has a 'center' component parent- meaning it's the top of the requested branch. Constructor: getSideModuleBranchRoot(guide = None) Return: None Arguments: guide ( str ) ; [default: None] Keyword Arguments: getSimpleRivetsNodeForMesh Constructor: getSimpleRivetsNodeForMesh(mesh = None) Return: None Arguments: mesh ( str ) ; [default: None] Keyword Arguments: getSymAttrBasedOnSymMapping Constructor: getSymAttrBasedOnSymMapping(attr = None, attrMapping = {}) Return: None Arguments: attr ( str ) ; [default: None] attrMapping ( dict ) ; [default: {}] Keyword Arguments: getSymmetricalVolumeJoint Constructor: getSymmetricalVolumeJoint(vJnt = None, kwargs) Return: None Arguments: vJnt ( str ) ; [default: None] kwargs Keyword Arguments: getVJntSources Constructor: getVJntSources(vJnt = None) Return: None Arguments: vJnt ( str ) ; [default: None] Keyword Arguments: getVJointData Constructor: getVJointData(vJnt) Return: None Arguments: vJnt Keyword Arguments: handleInterpLocsStructureReturn Constructor: handleInterpLocsStructureReturn(rigTop = None, interpLocs = [], guides = [], kwargs) Return: None Arguments: rigTop ( str ) ; [default: None] interpLocs ( list ) ; [default: []] guides ( list ) ; [default: []] kwargs Keyword Arguments: importCtrlShapes Simple import method for control shapes. Constructor: importCtrlShapes() Return: None Arguments: Keyword Arguments: importGuidePreset Constructor: importGuidePreset(presetName = None) Return: None Arguments: presetName ( str ) ; [default: None] Keyword Arguments: importPickerData Constructor: importPickerData( kwargs) Return: None Arguments: kwargs Keyword Arguments: injectPlgPropertiesFromData Constructor: injectPlgPropertiesFromData(plg = None, data = {}) Return: None Arguments: plg ( str ) ; [default: None] data ( dict ) ; [default: {}] Keyword Arguments: insertGuides This method is used primarily through Block UI, to insert guides above/below any guide selection. This will handle all exceptions, as well as re-analyze and re-orgenize each module based on the action performed. Constructor: insertGuides(amount = 0, mode = \"above\", kwargs) Return: None Arguments: amount ( int ) ; [default: 0] mode ( str ) ; [default: \"above\"] kwargs Keyword Arguments: jointRotateToOrientTrigger Constructor: jointRotateToOrientTrigger(rigTop = None) Return: None Arguments: rigTop ( str ) ; [default: None] Keyword Arguments: limbMatchFkIK mode 0 - Match FK to IK mode 1 - Match IK to FK Constructor: limbMatchFkIK(limbCtrl, mode = 0, kwargs) Return: None Arguments: limbCtrl mode ( int ) ; [default: 0] kwargs Keyword Arguments: loadDefaultsForCtrl Load all default attributes for the given control, taking mnsDefaults (custom) into acount Constructor: loadDefaultsForCtrl(ctrl, kwargs) Return: None Arguments: ctrl kwargs Keyword Arguments: loadPerspCam Set Maya's main camera panel, to the default 'persp' camera. Constructor: loadPerspCam() Return: None Arguments: Keyword Arguments: loadPickerProjectionCam Set the main maya camera view to the 'picker projection camera', based on the scene selection (or the related rigTop to selection). Constructor: loadPickerProjectionCam() Return: None Arguments: Keyword Arguments: loadPoseForGuides Block's load pose wrapper. Constructor: loadPoseForGuides(guides = [], poseSet = \"T\", kwargs) Return: None Arguments: guides ( list ) ; [default: []] poseSet ( str ) ; [default: \"T\"] kwargs Keyword Arguments: loadResetValuesForOffsetJoint Constructor: loadResetValuesForOffsetJoint(offsetJnt = None) Return: None Arguments: offsetJnt ( str ) ; [default: None] Keyword Arguments: loadRigDefaults Load controls predefined and custom defaults: 0: All 1: Modules 2: Selected Constructor: loadRigDefaults(mode = 0, kwargs) Return: None Arguments: mode ( int ) ; [default: 0] kwargs Keyword Arguments: loadRigInfo Constructor: loadRigInfo(puppetRoot = None) Return: None Arguments: puppetRoot ( str ) ; [default: None] Keyword Arguments: locateCnsForCtrl Constructor: locateCnsForCtrl(ctrl = None, kwargs) Return: None Arguments: ctrl ( str ) ; [default: None] kwargs Keyword Arguments: locatePLGBaseVisMdNodes Constructor: locatePLGBaseVisMdNodes(baseLayoutGuide = None) Return: None Arguments: baseLayoutGuide ( str ) ; [default: None] Keyword Arguments: matchExtractedSkeletonToBaseSkeleton Constructor: matchExtractedSkeletonToBaseSkeleton() Return: None Arguments: Keyword Arguments: matchGuidesToTargetSkeleton Constructor: matchGuidesToTargetSkeleton(defenitionDict = {}, blockNameSpace = \"\", targetNameSpace = \"\") Return: None Arguments: defenitionDict ( dict ) ; [default: {}] blockNameSpace ( str ) ; [default: \"\"] targetNameSpace ( str ) ; [default: \"\"] Keyword Arguments: matchKeyableAttributes Constructor: matchKeyableAttributes(source = None, target = None) Return: None Arguments: source ( str ) ; [default: None] target ( str ) ; [default: None] Keyword Arguments: mirrorCtrls Constructor: mirrorCtrls(ctrls = [], direction = 0, kwargs) Return: None Arguments: ctrls ( list ) ; [default: []] direction ( int ) ; [default: 0] kwargs Keyword Arguments: missingModuleActionTrigger Action trigger for an invalid module path fix attempt Constructor: missingModuleActionTrigger(rigTop, missingModuleName, existingBtns) Return: None Arguments: rigTop missingModuleName existingBtns Keyword Arguments: muteLocalTransformations Constructor: muteLocalTransformations(ctrl = None, kwargs) Return: None Arguments: ctrl ( str ) ; [default: None] kwargs Keyword Arguments: namePuppet This method is used to create the rig's curves puppet title and connect it to to it's world control as additional shape nodes. Constructor: namePuppet(rigTop, kwargs) Return: None Arguments: rigTop kwargs Keyword Arguments: orientGuides Constructor: orientGuides(guides = [], kwargs) Return: None Arguments: guides ( list ) ; [default: []] kwargs Keyword Arguments: pickerButtonClickAction The global action trigger for any picker UI button click trigger. This method will trigger the \"controls selection\" and the \"action script\" for the passed in QPushButton passed in. Constructor: pickerButtonClickAction(btn, kwargs) Return: None Arguments: btn kwargs Keyword Arguments: pickerLayoutAdjust Load a new Maya panel, with the 'Picker Layout Camera' related to the scene selction. This will also set the panel settings before loading it, based on the rigTop and 'layout base' attributes. Constructor: pickerLayoutAdjust() Return: None Arguments: Keyword Arguments: pickerTitleToggle Toggle between PLG 'control' view, to 'title' view. Constructor: pickerTitleToggle() Return: None Arguments: Keyword Arguments: preCheckNameForUI A simple method to check for argument duplicates within an argument dict Constructor: preCheckNameForUI(arguments, suffix) Return: None Arguments: arguments suffix Keyword Arguments: projectPickerLayout A wrapper method that handles plg projection from scene objects based on mode. mode 0 = selected mode 1 = module mode 2 = branch Constructor: projectPickerLayout(mode = 0, msgPrompt = True) Return: None Arguments: mode ( int ) ; [default: 0] msgPrompt ( bool ) ; [default: True] Keyword Arguments: projectPickerLayoutPos Get the passed in Ctrl PLG position, relative to the rig's 'layoutBase'. This method 'projects' the ctrl position based on the rig's 'Projection Camera' into the layout base space, and returns it's processed position. Constructor: projectPickerLayoutPos(ctrl, cam, layoutBase) Return: None Arguments: ctrl cam layoutBase Keyword Arguments: projectSelectedPickerLayout A wrapper method that handles plg projection from selected scene objects. Constructor: projectSelectedPickerLayout(msgPrompt = True) Return: None Arguments: msgPrompt ( bool ) ; [default: True] Keyword Arguments: rebuildJointStructure modes: 0 = All 1 = Branch 2 = Module Constructor: rebuildJointStructure(mode = 0) Return: None Arguments: mode ( int ) ; [default: 0] Keyword Arguments: recGetModuleTopForCtrl Recursively attempt to collect the 'Module Top Group' related to the ctrl passed in within it's related parents. Constructor: recGetModuleTopForCtrl(ctrl = None) Return: None Arguments: ctrl ( str ) ; [default: None] Keyword Arguments: recGetParentJoint Recursivly attempt to get a parent joint starting with a given root object, scaling up the heirarchy. Constructor: recGetParentJoint(rootObject = None) Return: None Arguments: rootObject ( str ) ; [default: None] Keyword Arguments: recRenameLowerIndex Constructor: recRenameLowerIndex(root = None, moduleGuides = [], moduleJoints = []) Return: None Arguments: root ( str ) ; [default: None] moduleGuides ( list ) ; [default: []] moduleJoints ( list ) ; [default: []] Keyword Arguments: recSearchForGuideRootInParents Recusrsivly look for a 'rootGuide' from the given node's parent relatives. Constructor: recSearchForGuideRootInParents(obj) Return: None Arguments: obj Keyword Arguments: removeAlienMatchesFromList Constructor: removeAlienMatchesFromList(guideRoot, currentMatches = []) Return: None Arguments: guideRoot currentMatches ( list ) ; [default: []] Keyword Arguments: removeAllAuthority This method is used to delete all 'Authority' from the passsed in slave, if there are any. Constructor: removeAllAuthority(slave = None, kwargs) Return: None Arguments: slave ( str ) ; [default: None] kwargs Keyword Arguments: removeCnsFromCtrls This method is used to remove existing CNS controls/sub-controls for existing puppet controls. If you have CNS controls you want to remove, use this method. Pass in a list of controls you want to remove sub-controls from, and run. This method is also the one used by the CNS Tool. Constructor: removeCnsFromCtrls(ctrls = []) Return: None Arguments: ctrls ( list ) ; [default: []] Keyword Arguments: removeGuides Constructor: removeGuides( kwargs) Return: None Arguments: kwargs Keyword Arguments: removeModuleVisAttrFromPuppetTop This method will remove the corresponding \"module vis\" channel from the given puppet base control. This method is used when a 'partial deconstruction' is initiated, keeping only relevant vis channels in place, removing the 'deconstructed' modules vis channels. Constructor: removeModuleVisAttrFromPuppetTop(moduleTopNode = None, puppetTop = None) Return: None Arguments: moduleTopNode ( str ) ; [default: None] puppetTop ( str ) ; [default: None] Keyword Arguments: repositionShape Simple method to re-center a control shape to its natural pivot Constructor: repositionShape(targets = []) Return: None Arguments: targets ( list ) ; [default: []] Keyword Arguments: resetAllControlForRigTop Constructor: resetAllControlForRigTop(rigTop = None, kwargs) Return: None Arguments: rigTop ( str ) ; [default: None] kwargs Keyword Arguments: resetControls reset all keyable attributes to default value. Constructor: resetControls(controls=[], kwargs) Return: None Arguments: controls ( list ) ; [default: []] kwargs Keyword Arguments: resetOffsetSkeleton Constructor: resetOffsetSkeleton(rigTop = None) Return: None Arguments: rigTop ( str ) ; [default: None] Keyword Arguments: saveLoadDagPose mode 0 = Save mode 1 = Load mode 2 = Delete poses: Bind, T, A Constructor: saveLoadDagPose(rootJoint = None, mode = 1, poseName = \"Bind\") Return: None Arguments: rootJoint ( str ) ; [default: None] mode ( int ) ; [default: 1] poseName ( str ) ; [default: \"Bind\"] Keyword Arguments: saveLoadPose This is the main wrapper for all pose 'save & load' triggers of BLOCK. Constructor: saveLoadPose(guides = [], kwargs) Return: None Arguments: guides ( list ) ; [default: []] kwargs Keyword Arguments: savePoseForGuides Block's save pose wrapper. Constructor: savePoseForGuides(guides = [], poseSet = \"T\", msgPrompt = False, kwargs) Return: None Arguments: guides ( list ) ; [default: []] poseSet ( str ) ; [default: \"T\"] msgPrompt ( bool ) ; [default: False] kwargs Keyword Arguments: searchForRootGuideInRelatives Search for a 'guide authority' or 'rootGuide' in the given node's decendents Constructor: searchForRootGuideInRelatives(obj) Return: None Arguments: obj Keyword Arguments: selectAllCtrls Select all controls for the given rig top. Constructor: selectAllCtrls(rigTop = None, kwargs) Return: None Arguments: rigTop ( str ) ; [default: None] kwargs Keyword Arguments: selectRelatedControls Constructor: selectRelatedControls(controlsToSelect, mode = \"replace\") Return: None Arguments: controlsToSelect mode ( str ) ; [default: \"replace\"] Keyword Arguments: selectSlaveControls Constructor: selectSlaveControls(rigTop = None, kwargs) Return: None Arguments: rigTop ( str ) ; [default: None] kwargs Keyword Arguments: setCtrlCol Attempt to collect the passed in node's color (based on its type), and set it if seccessfull. Constructor: setCtrlCol(ctrl, rigTop, kwargs) Return: None Arguments: ctrl rigTop kwargs Keyword Arguments: setCurrentStateAsDefaultForCtrl Set custom defaults for keyable attributes for the given control, based on it's current state. Constructor: setCurrentStateAsDefaultForCtrl(ctrl, kwargs) Return: None Arguments: ctrl kwargs Keyword Arguments: setResetValuesForOffsetJoint Constructor: setResetValuesForOffsetJoint(offsetJnt = None) Return: None Arguments: offsetJnt ( str ) ; [default: None] Keyword Arguments: setRigDefaults Set controls custom defaults based on given state: 0: All 1: Modules 2: Branches Constructor: setRigDefaults(mode = 0, kwargs) Return: None Arguments: mode ( int ) ; [default: 0] kwargs Keyword Arguments: setgCtrlColorForModule For all relevant decendents of the passed in moduleRoot, get and set it's color. Constructor: setgCtrlColorForModule(rigTop, moduleRoot) Return: None Arguments: rigTop moduleRoot Keyword Arguments: setgCtrlColorForRigTop Set ALL relevnt controls within a rigTop, to their color based on their type. Constructor: setgCtrlColorForRigTop(rigTop) Return: None Arguments: rigTop Keyword Arguments: symmetrizeCGShape A simple method to symmetrize custom guides nurbs shapes when aplicable Constructor: symmetrizeCGShape(mode = 0, direction = 0, cGuides = []) Return: None Arguments: mode ( int ) ; [default: 0] direction ( int ) ; [default: 0] cGuides ( list ) ; [default: []] Keyword Arguments: symmetrizePlg Block 'plg symmetrize' button trigger. This method will handle validation and creation of PLG related symmetrical plg. Constructor: symmetrizePlg(guide = None) Return: None Arguments: guide ( str ) ; [default: None] Keyword Arguments: symmetrizePlgs A simple wrapper method to symmetrize multiple PLG's (based on scene selection). Constructor: symmetrizePlgs() Return: None Arguments: Keyword Arguments: symmetrizeVJ Constructor: symmetrizeVJ(vJnt = None, kwargs) Return: None Arguments: vJnt ( str ) ; [default: None] kwargs Keyword Arguments: toggleGuideCtrl Atempt to toggle between a selection guide and main joint if possible. Constructor: toggleGuideCtrl( kwargs) Return: None Arguments: kwargs Keyword Arguments: toggleGuideJoint Atempt to toggle between a selection guide and main joint if possible. Constructor: toggleGuideJoint( kwargs) Return: None Arguments: kwargs Keyword Arguments: togglePickerCtrlBodyFacial Constructor: togglePickerCtrlBodyFacial() Return: None Arguments: Keyword Arguments: transferAuthorityToCtrl This is a very important method used in BLOCK cosntruction. This method will find the current 'guide control' from the given joint slave. and transfer it's authority to a newly created 'control authority'. This method will be called on every module build and it is the main trigger to flag a module construction. The 'authority' attribute for every guide or control is used to distiguish the module state, and jnt state. When transfering an authority to a ctrl, a 'old authority' attr (of sort) is created, in order for the procedural 'deconstruct' to look for and tranfer the jnt authority back to it's orignal guide, before deleting the constructed module. See also parallel: 'transferAuthorityToGuide' Method. Constructor: transferAuthorityToCtrl(slave = None, ctrlMaster = None, kwargs) Return: None Arguments: slave ( str ) ; [default: None] ctrlMaster ( str ) ; [default: None] kwargs Keyword Arguments: transferAuthorityToGuide This is a very important method used in BLOCK de-construction. This method will find the current 'control' from the given joint slave. and transfer it's authority to a it's original 'guide' authority. This method will be called procedurally on any module deconstruction, before deleting the constructed module. See also parallel: 'transferAuthorityToCtrl' Method. Constructor: transferAuthorityToGuide(ctrl = None, kwargs) Return: None Arguments: ctrl ( str ) ; [default: None] kwargs Keyword Arguments: transferAuthorityToOffsetSkeleton Constructor: transferAuthorityToOffsetSkeleton(rigTop = None) Return: None Arguments: rigTop ( str ) ; [default: None] Keyword Arguments: transferAuthorityToPuppet Constructor: transferAuthorityToPuppet(rigTop = None) Return: None Arguments: rigTop ( str ) ; [default: None] Keyword Arguments: upParentAllPlgTrigger OBSELETE. PLG parenting is no longer in use. Constructor: upParentAllPlgTrigger() Return: None Arguments: Keyword Arguments: updateRigStructure Rig structure update required trigger. This method will be called in case any 'jntStructMember' attribute was altered, which means the internal joint structure of the module needs to be rebuilt. This method will locate and filter the existing module related joint structure, destroy it, and re-build it using the updated settings. Constructor: updateRigStructure(softMod = False, kwargs) Return: None Arguments: softMod ( bool ) ; [default: False] kwargs Keyword Arguments: volumeJointAngleSymmetryMapping Constructor: volumeJointAngleSymmetryMapping(symmetryDelta = pm.datatypes.Vector(1.0, 1.0, 1.0)) Return: None Arguments: symmetryDelta ( str ) ; [default: pm.datatypes.Vector(1.0] 1.0 1.0) Keyword Arguments:","title":"blockUtility"},{"location":"blockUtility/#blockutility","text":"=== Author: Assaf Ben Zur === BLOCK Core Utility Library. This library contains all utility methods used primarily by BLOCK. The objective of this library is mainting most Block-Core abilities external and independent.","title":"blockUtility"},{"location":"blockUtility/#classes","text":"","title":"Classes"},{"location":"blockUtility/#mnsriginfo-class","text":"Mansur - About dialog Constructor: MnsRigInfo( parent ( str ) ; [default: mnsUIUtils.get_maya_window()], rigInfoData ( dict ) ; [default: {}]) Inherits from: QtWidgets.QDialog Class Members: iconsDir close_btn","title":"MnsRigInfo [Class]"},{"location":"blockUtility/#defenitions","text":"","title":"Defenitions"},{"location":"blockUtility/#adddefaultattrstoplg","text":"For a newly created plg, create all of it's default predefined attributes. Constructor: addDefaultAttrsToPlg(plg, kwargs) Return: None Arguments: plg kwargs Keyword Arguments:","title":"addDefaultAttrsToPlg"},{"location":"blockUtility/#alignplguides","text":"This is the main 'align' trigger to all 'align tools' in BLOCK. This method will calidate and collect the current scene slection, then align the collected PLG's based on the mode passed in. Constructor: alignPLGuides(border = \"left\", mode = 0) Return: None Arguments: border ( str ) ; [default: \"left\"] mode ( int ) ; [default: 0] Keyword Arguments:","title":"alignPLGuides"},{"location":"blockUtility/#attemptmodulepathfixforrootguide","text":"Constructor: attemptModulePathFixForRootGuide(guideRoot, existingBtns) Return: None Arguments: guideRoot existingBtns Keyword Arguments:","title":"attemptModulePathFixForRootGuide"},{"location":"blockUtility/#attemptmodulepathfixfrorigtop","text":"Run through all existing rig component (in rigTop) and validate the module directories against all existing module directories. If a module path was found invalid, attempt to re-find it in the existing modules. Constructor: attemptModulePathFixFroRigTop(rigTop, existingBtns, kwargs) Return: None Arguments: rigTop existingBtns kwargs Keyword Arguments:","title":"attemptModulePathFixFroRigTop"},{"location":"blockUtility/#bakeslavecontrols","text":"Constructor: bakeSlaveControls(rigTop = None) Return: None Arguments: rigTop ( str ) ; [default: None] Keyword Arguments:","title":"bakeSlaveControls"},{"location":"blockUtility/#buildshapes","text":"This method will be called from a rig construction. This method will look for any contol shapes stored within the given rig (rigTop), and replace the default shapes with any corresponding control shape. Shape replacement method will be done according to the 'mode' flag (relative/absulote). Constructor: buildShapes(ctrls = [], rigTop = None, kwargs) Return: None Arguments: ctrls ( list ) ; [default: []] rigTop ( str ) ; [default: None] kwargs Keyword Arguments:","title":"buildShapes"},{"location":"blockUtility/#characterizehumanik","text":"Constructor: characterizeHumanIK(charDefData = {}, mode = 0, kwargs) Return: None Arguments: charDefData ( dict ) ; [default: {}] mode ( int ) ; [default: 0] kwargs Keyword Arguments:","title":"characterizeHumanIK"},{"location":"blockUtility/#collectctrlrelatives","text":"Collect ctrls based on given state: 0: All 1: Modules 2: Selected Constructor: collectCtrlRelatives(mode = 0, kwargs) Return: None Arguments: mode ( int ) ; [default: 0] kwargs Keyword Arguments:","title":"collectCtrlRelatives"},{"location":"blockUtility/#collectctrls","text":"Collect ALL related controls for th given rigTop. Constructor: collectCtrls(rigTop = None) Return: None Arguments: rigTop ( str ) ; [default: None] Keyword Arguments:","title":"collectCtrls"},{"location":"blockUtility/#collectguides","text":"Based on the oprional arguments passed in, collect all matching related guides to the input root list. Constructor: collectGuides(roots = pm.ls(sl = 1), kwargs) Return: None Arguments: roots ( str ) ; [default: selection] kwargs Keyword Arguments:","title":"collectGuides"},{"location":"blockUtility/#collectmodulecontrols","text":"Collect all related controls for the given module. Constructor: collectModuleControls(moduleTop, kwargs) Return: None Arguments: moduleTop kwargs Keyword Arguments:","title":"collectModuleControls"},{"location":"blockUtility/#collectmodulerootsbasedonmode","text":"0: All 1: Branch 2: Module Constructor: collectModuleRootsBasedOnMode(mode = 0) Return: None Arguments: mode ( int ) ; [default: 0] Keyword Arguments:","title":"collectModuleRootsBasedOnMode"},{"location":"blockUtility/#collectplguidestoalign","text":"This is the main collect wrapper for all 'align plg' tools in BLOCK. This methods will validate and collect all PLG to align from the current scene selection Constructor: collectPLGuidesToAlign(mode = 0) Return: None Arguments: mode ( int ) ; [default: 0] Keyword Arguments:","title":"collectPLGuidesToAlign"},{"location":"blockUtility/#collectpartialmodules","text":"This method will collect module root objects based on the input data. If you need to run MnsRig class internal methods, which can operate on partial modules as well as the entire rig, use this method to collect the partial data to be passed into MnsRig class methods. In case fromNodes argument is Null, this method will return data based on the current scene selection. Constructor: collectPartialModules(fromNodes = [], mode = 0) Return: None Arguments: fromNodes ( list ) ; [default: []] mode ( int ) ; [default: 0] Keyword Arguments:","title":"collectPartialModules"},{"location":"blockUtility/#collectpartialmodulesroots","text":"This method will be called in case a partial build was requested. Using methods within 'blockUtility', this method will collect the requested modules to build based on the UI state. Constructor: collectPartialModulesRoots(mode) Return: None Arguments: mode Keyword Arguments:","title":"collectPartialModulesRoots"},{"location":"blockUtility/#collectpickerdataforrigtop","text":"mode 0 = All mode 1 = Brnach mode 2 = module mode 3 = selected Constructor: collectPickerDataForRigTop(rigTop = None, mode = 0) Return: None Arguments: rigTop ( str ) ; [default: None] mode ( int ) ; [default: 0] Keyword Arguments:","title":"collectPickerDataForRigTop"},{"location":"blockUtility/#collectplgsbasedonmode","text":"mode 0 = All mode 1 = Brnach mode 2 = module mode 3 = selected Constructor: collectPlgsBasedOnMode(rigTop = None, mode = 0, kwargs) Return: None Arguments: rigTop ( str ) ; [default: None] mode ( int ) ; [default: 0] kwargs Keyword Arguments:","title":"collectPlgsBasedOnMode"},{"location":"blockUtility/#collectslavesfromndr","text":"Collect all slaves related to the passed in 'mnsNodeRelationship' node. Constructor: collectSlavesFromNdr(ndrNode) Return: None Arguments: ndrNode Keyword Arguments:","title":"collectSlavesFromNdr"},{"location":"blockUtility/#compilecnsctrlsattrstring","text":"Constructor: compileCnsCtrlsAttrString(exsitingCnsCtrlsDict = {}) Return: None Arguments: exsitingCnsCtrlsDict ( dict ) ; [default: {}] Keyword Arguments:","title":"compileCnsCtrlsAttrString"},{"location":"blockUtility/#connectifnotconnected","text":"Constructor: connectIfNotConnected(attrA, attrB) Return: None Arguments: attrA attrB Keyword Arguments:","title":"connectIfNotConnected"},{"location":"blockUtility/#connectplgtovischannel","text":"This method handles the vis channel connection of a plg to it's related layoutBase attributes based on it's type. Constructor: connectPlgToVisChannel(plg) Return: None Arguments: plg Keyword Arguments:","title":"connectPlgToVisChannel"},{"location":"blockUtility/#connectslavetodeletemaster","text":"Connect the passed in 'slave' node to the passed in 'master' node using 'mnsNodeRelationship'. This method will be successfull only if the master already has a related 'mnsNodeRelationship' node. Constructor: connectSlaveToDeleteMaster(slave, master) Return: None Arguments: slave master Keyword Arguments:","title":"connectSlaveToDeleteMaster"},{"location":"blockUtility/#connecttargetskeleton","text":"Constructor: connectTargetSkeleton(defenitionDict = {}, blockNameSpace = \"\", targetNameSpace = \"\") Return: None Arguments: defenitionDict ( dict ) ; [default: {}] blockNameSpace ( str ) ; [default: \"\"] targetNameSpace ( str ) ; [default: \"\"] Keyword Arguments:","title":"connectTargetSkeleton"},{"location":"blockUtility/#constrainobjectstosurface","text":"Constructor: constrainObjectsToSurface(MnsBuildModule = None, ctrlMasters = [], jointsToAttach = [], surface = None) Return: None Arguments: MnsBuildModule ( str ) ; [default: None] ctrlMasters ( list ) ; [default: []] jointsToAttach ( list ) ; [default: []] surface ( str ) ; [default: None] Keyword Arguments:","title":"constrainObjectsToSurface"},{"location":"blockUtility/#constructrig","text":"API style scripted construction method. If you wish to construct a rig from an external command instead of Block's UI, use this method. You can pass in a fromNodes argument to specify the rig you wish to construct. In case the fromNodes argument isn't valid, the construction will be selection based. Also, use the mode argument to specify which mode you wish to construct in: mode 0 = ALL mode 1 = Branch mode 2 = Module Constructor: constructRig(fromNodes = [], mode = 0) Return: None Arguments: fromNodes ( list ) ; [default: []] mode ( int ) ; [default: 0] Keyword Arguments:","title":"constructRig"},{"location":"blockUtility/#convertinputobjtospace","text":"Constructor: convertInputObjToSpace(obj = None) Return: None Arguments: obj ( str ) ; [default: None] Keyword Arguments:","title":"convertInputObjToSpace"},{"location":"blockUtility/#convertmoduleauthoritytosurface","text":"Constructor: convertModuleAuthorityToSurface(MnsBuildModule) Return: None Arguments: MnsBuildModule Keyword Arguments:","title":"convertModuleAuthorityToSurface"},{"location":"blockUtility/#copyshape","text":"copy shape utility. This method is operation on selection. Copy the control shape of the first selected component, to the rest of the selection. Constructor: copyShape(source = None, targets = [], reposition = True, kwargs) Return: None Arguments: source ( str ) ; [default: None] targets ( list ) ; [default: []] reposition ( bool ) ; [default: True] kwargs Keyword Arguments:","title":"copyShape"},{"location":"blockUtility/#createandconnectmodulevischannelstopuppetrootctrl","text":"This method will create and connect the pedefined visibility graph to a given 'Module Top Group'. The driver attribute will be created within the puppet's 'world control', and the connection graph (using animCurvesUU node) will input into the group's visibility channels. The channels are split (predefined) as follows: Constructor: createAndConnectModuleVisChannelsToPuppetRootCtrl(moduleTopNode = None) Return: None Arguments: moduleTopNode ( str ) ; [default: None] Keyword Arguments:","title":"createAndConnectModuleVisChannelsToPuppetRootCtrl"},{"location":"blockUtility/#createcnsforctrls","text":"This method is used to create CNS controls/sub-controls for existing puppet controls. In case you need to add extra offset controls in order to constraint them to other components, you can use this method. Pass in a list of controls you want to add sub-controls to, and run. This method is also the one used by the CNS Tool. Constructor: createCnsForCtrls(ctrls = []) Return: None Arguments: ctrls ( list ) ; [default: []] Keyword Arguments:","title":"createCnsForCtrls"},{"location":"blockUtility/#createoffsetskeleton","text":"Constructor: createOffsetSkeleton(rigTop = None) Return: None Arguments: rigTop ( str ) ; [default: None] Keyword Arguments:","title":"createOffsetSkeleton"},{"location":"blockUtility/#createpickerlayoutguide","text":"The main creation method for PLG creation. This method will create a new 'Pikcer Layout Guide' based on the passed in parameters. 1. get picker layout base. 2. collect projection position if requested. 3. create and set all attributes Constructor: createPickerLayoutGuide(ctrl, override, rigTop = None, kwargs) Return: None Arguments: ctrl override rigTop ( str ) ; [default: None] kwargs Keyword Arguments:","title":"createPickerLayoutGuide"},{"location":"blockUtility/#createpickerlayoutguides","text":"Warpper method that handles multiple PLGs creation. Constructor: createPickerLayoutGuides(ctrlsToProject, rigTop, msgPrompt = True, kwargs) Return: None Arguments: ctrlsToProject rigTop msgPrompt ( bool ) ; [default: True] kwargs Keyword Arguments:","title":"createPickerLayoutGuides"},{"location":"blockUtility/#createplgbasevischannels","text":"Constructor: createPlgBaseVisChannels(baseLayoutGuide = None) Return: None Arguments: baseLayoutGuide ( str ) ; [default: None] Keyword Arguments:","title":"createPlgBaseVisChannels"},{"location":"blockUtility/#createvisibilitybridgemdl","text":"This method will check wether the 'target' has a visibility channel connection. In the case the given 'target' has input visibility connection, a 'bridge' multiplyDoubleLinear node will be created. The brigde node will accomidate both sources as an input, instead of replacing the original visibility by simple multiplication. By creating the 'bridge', both old and new sources will be kept as drivers, setting the visibility to 'False' if ANY of the given sources is 'False'. In case there is no connection input to the target's visibility channel, a simple connection will be made using the input source. Constructor: createVisibilityBridgeMdl(source = None, target = None) Return: None Arguments: source ( str ) ; [default: None] target ( str ) ; [default: None] Keyword Arguments:","title":"createVisibilityBridgeMdl"},{"location":"blockUtility/#createvolumejoint","text":"Constructor: createVolumeJoint(parentJoint = None, childJoint = None, kwargs) Return: None Arguments: parentJoint ( str ) ; [default: None] childJoint ( str ) ; [default: None] kwargs Keyword Arguments:","title":"createVolumeJoint"},{"location":"blockUtility/#createvolumejointforselection","text":"Constructor: createVolumeJointForSelection() Return: None Arguments: Keyword Arguments:","title":"createVolumeJointForSelection"},{"location":"blockUtility/#ctrlpickerguidetoggle","text":"Atempt to toggle between a selection \"control\" and \"PLG\" if possible. Constructor: ctrlPickerGuideToggle( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"ctrlPickerGuideToggle"},{"location":"blockUtility/#deconstructrig","text":"API style scripted deconstruction method. If you wish to construct a rig from an external command instead of Bloxk's UI, use this method. You can pass in a fromNodes argument to specify the rig you wish to construct. In case the fromNodes argument isn't valid, the deconstruction will be selection based. Also, use the mode argument to specify which mode you wish to construct in: mode 0 = ALL mode 1 = Branch mode 2 = Module Constructor: deconstructRig(fromNodes = [], mode = 0) Return: None Arguments: fromNodes ( list ) ; [default: []] mode ( int ) ; [default: 0] Keyword Arguments:","title":"deconstructRig"},{"location":"blockUtility/#deletedefaultsforctrl","text":"Delete all set custom attributes for the given ctrl. Constructor: deleteDefaultsForCtrl(ctrl) Return: None Arguments: ctrl Keyword Arguments:","title":"deleteDefaultsForCtrl"},{"location":"blockUtility/#deletefreejntgrpformodule","text":"Constructor: deleteFreeJntGrpForModule(guideRoot = None, kwargs) Return: None Arguments: guideRoot ( str ) ; [default: None] kwargs Keyword Arguments:","title":"deleteFreeJntGrpForModule"},{"location":"blockUtility/#deleteoffsetsekeleton","text":"Constructor: deleteOffsetSekeleton(rigTop = None) Return: None Arguments: rigTop ( str ) ; [default: None] Keyword Arguments:","title":"deleteOffsetSekeleton"},{"location":"blockUtility/#deleteposeforguides","text":"Block's delete pose wrapper. Constructor: deletePoseForGuides(guides = [], poseSet = \"T\", kwargs) Return: None Arguments: guides ( list ) ; [default: []] poseSet ( str ) ; [default: \"T\"] kwargs Keyword Arguments:","title":"deletePoseForGuides"},{"location":"blockUtility/#deletepuppetname","text":"This method will filter and delete the rigTops' puppet curves title. Constructor: deletePuppetName(rigTop, kwargs) Return: None Arguments: rigTop kwargs Keyword Arguments:","title":"deletePuppetName"},{"location":"blockUtility/#deleterigdefaults","text":"Load controls predefined and custom defaults: 0: All 1: Modules 2: Selected Constructor: deleteRigDefaults(mode = 0, kwargs) Return: None Arguments: mode ( int ) ; [default: 0] kwargs Keyword Arguments:","title":"deleteRigDefaults"},{"location":"blockUtility/#detrminesymmetrydelta","text":"Constructor: detrmineSymmetryDelta(sourceA = None, sourceB = None, kwargs) Return: None Arguments: sourceA ( str ) ; [default: None] sourceB ( str ) ; [default: None] kwargs Keyword Arguments:","title":"detrmineSymmetryDelta"},{"location":"blockUtility/#disconnectslavefrommaster","text":"Disconnect the slave passed in from it's master, if there is one. Constructor: disconnectSlaveFromMaster(slave) Return: None Arguments: slave Keyword Arguments:","title":"disconnectSlaveFromMaster"},{"location":"blockUtility/#disconnecttargetskeleton","text":"Constructor: disconnectTargetSkeleton(defenitionDict = {}, blockNameSpace = \"\", targetNameSpace = \"\", kwargs) Return: None Arguments: defenitionDict ( dict ) ; [default: {}] blockNameSpace ( str ) ; [default: \"\"] targetNameSpace ( str ) ; [default: \"\"] kwargs Keyword Arguments:","title":"disconnectTargetSkeleton"},{"location":"blockUtility/#duplicateplg","text":"Block \"PLG duplicate\" trigger. This method will handle PLG validation and duplication. Constructor: duplicatePlg(guide = None) Return: None Arguments: guide ( str ) ; [default: None] Keyword Arguments:","title":"duplicatePlg"},{"location":"blockUtility/#duplicateplgs","text":"A simple wrapper mwthod to handle multiple PLG duplication (Based on scene selection). Constructor: duplicatePlgs() Return: None Arguments: Keyword Arguments:","title":"duplicatePlgs"},{"location":"blockUtility/#executeactionscript","text":"Constructor: executeActionScript(plgNode) Return: None Arguments: plgNode Keyword Arguments:","title":"executeActionScript"},{"location":"blockUtility/#exportctrlshapes","text":"mode = 0 - All mode = 1 - Branch mode = 2 - module Constructor: exportCtrlShapes(mode = 0) Return: None Arguments: mode ( int ) ; [default: 0] Keyword Arguments:","title":"exportCtrlShapes"},{"location":"blockUtility/#exportpickerdata","text":"mode 0 = All mode 1 = Brnach mode 2 = module mode 3 = selected Constructor: exportPickerData(rigTop = None, mode = 0) Return: None Arguments: rigTop ( str ) ; [default: None] mode ( int ) ; [default: 0] Keyword Arguments:","title":"exportPickerData"},{"location":"blockUtility/#extractcontrolshapes","text":"Trigger method for BLOCK - 'extract control shapes' method. This method will extract and store the current state of control shapes within the given rig (rigTop). The extracted shapes will be re-constructed once a rig-rebuild is initiated. In case of any control shape already exists, it will be replaced by default. Constructor: extractControlShapes(ctrls = [], rigTop = None, kwargs) Return: None Arguments: ctrls ( list ) ; [default: []] rigTop ( str ) ; [default: None] kwargs Keyword Arguments:","title":"extractControlShapes"},{"location":"blockUtility/#extractskeleton","text":"Constructor: extractSkeleton(rigTop = None, mode = 0, bakeAnim = False, kwargs) Return: None Arguments: rigTop ( str ) ; [default: None] mode ( int ) ; [default: 0] bakeAnim ( bool ) ; [default: False] kwargs Keyword Arguments:","title":"extractSkeleton"},{"location":"blockUtility/#filtercreationonlyfromargs","text":"A simple method to filter out the \"creationOnly\" flag for an argument. This method is called on a dynamicUI creation call if it NOT a \"new creation\" mode in BLOCK. In case any arguments within the list passed in is flagged as \"creationOnly\", it is removed from the list Constructor: filterCreationOnlyFromArgs(argsList) Return: None Arguments: argsList Keyword Arguments:","title":"filterCreationOnlyFromArgs"},{"location":"blockUtility/#filtersettings","text":"Filter all pre-defined settings to their corresponding gathering methods, and re-collect Constructor: filterSettings(fileSettings, node) Return: None Arguments: fileSettings node Keyword Arguments:","title":"filterSettings"},{"location":"blockUtility/#findnamingissuesinhierarchy","text":"Constructor: findNamingIssuesInHierarchy() Return: None Arguments: Keyword Arguments:","title":"findNamingIssuesInHierarchy"},{"location":"blockUtility/#gatherallcontrolscustomdefaults","text":"Gather custom defaults for all ctrls within the given rig. This method is used on rig deconstruction, to store all set default values, in order to restore them on construction. Constructor: gatherAllControlsCustomDefaults(rigTop) Return: None Arguments: rigTop Keyword Arguments:","title":"gatherAllControlsCustomDefaults"},{"location":"blockUtility/#gathercustomdefaultdictforctrl","text":"Constructor: gatherCustomDefaultDictForCtrl(ctrl) Return: None Arguments: ctrl Keyword Arguments:","title":"gatherCustomDefaultDictForCtrl"},{"location":"blockUtility/#gathermnsrigobject","text":"This method will gather an MnsRig class object based on the passed in input, in order to use all of it's methods. If you need to run any method from MnsRig class, use this method to gather the class object, the run any internal method within. Constructor: gatherMnsRigObject() Return: None Arguments: Keyword Arguments:","title":"gatherMnsRigObject"},{"location":"blockUtility/#gathermodulecustomdefaults","text":"Gather custom defaults for all ctrls within the given module. This method is used on rig deconstruction, to store all set default values, in order to restore them on construction. Constructor: gatherModuleCustomDefaults(moduleTop) Return: None Arguments: moduleTop Keyword Arguments:","title":"gatherModuleCustomDefaults"},{"location":"blockUtility/#getallctrlsfromrigtop","text":"Get all controls for the given rig top. Constructor: getAllCtrlsFromRigTop(rigTop = None) Return: None Arguments: rigTop ( str ) ; [default: None] Keyword Arguments:","title":"getAllCtrlsFromRigTop"},{"location":"blockUtility/#getallguiderootsforrigtop","text":"Gather all guide roots for the passed in rigTop node. Constructor: getAllGuideRootsForRigTop(rigTop) Return: None Arguments: rigTop Keyword Arguments:","title":"getAllGuideRootsForRigTop"},{"location":"blockUtility/#getallplgsforrigtop","text":"Collect all 'picker layout guides' from the rig passed in (as rigTop) Constructor: getAllPlgsForRigTop(rigTop) Return: None Arguments: rigTop Keyword Arguments:","title":"getAllPlgsForRigTop"},{"location":"blockUtility/#getallcolctrlforrigtop","text":"Collect all 'color associated' nodes within the passed in rigTop. All returned nodes are considered 'color associated', meaning they are nodes that all of their shapes need to be directly colored. Constructor: getAllcolCtrlforRigTop(rigTop) Return: None Arguments: rigTop Keyword Arguments:","title":"getAllcolCtrlforRigTop"},{"location":"blockUtility/#getchildmodules","text":"Recusrsivly collect all child modules from the given rootGuide's decendents. Constructor: getChildModules(rootGuide) Return: None Arguments: rootGuide Keyword Arguments:","title":"getChildModules"},{"location":"blockUtility/#getcompundchildren","text":"Constructor: getCompundChildren(rootGuide = None) Return: None Arguments: rootGuide ( str ) ; [default: None] Keyword Arguments:","title":"getCompundChildren"},{"location":"blockUtility/#getcsgrpfromrigtop","text":"Attempt to collect the 'Control Shapes Group' from the passed in rigTop. Constructor: getCsGrpFromRigTop(rigTop = None) Return: None Arguments: rigTop ( str ) ; [default: None] Keyword Arguments:","title":"getCsGrpFromRigTop"},{"location":"blockUtility/#getctrlauthfromrootguide","text":"Constructor: getCtrlAuthFromRootGuide(rootGuide = None) Return: None Arguments: rootGuide ( str ) ; [default: None] Keyword Arguments:","title":"getCtrlAuthFromRootGuide"},{"location":"blockUtility/#getctrlauthfromrootguides","text":"Constructor: getCtrlAuthFromRootGuides(rGuides = []) Return: None Arguments: rGuides ( list ) ; [default: []] Keyword Arguments:","title":"getCtrlAuthFromRootGuides"},{"location":"blockUtility/#getctrlcol","text":"Get the passed in node's color based on it's type, heirarchy and attributes. Constructor: getCtrlCol(ctrl, rigTop, kwargs) Return: None Arguments: ctrl rigTop kwargs Keyword Arguments:","title":"getCtrlCol"},{"location":"blockUtility/#getctrlshapesformodueroot","text":"Constructor: getCtrlShapesForModueRoot(guideRoot) Return: None Arguments: guideRoot Keyword Arguments:","title":"getCtrlShapesForModueRoot"},{"location":"blockUtility/#getctrlsfrommoduleroot","text":"Constructor: getCtrlsFromModuleRoot(guideRoot) Return: None Arguments: guideRoot Keyword Arguments:","title":"getCtrlsFromModuleRoot"},{"location":"blockUtility/#getdeletemasterfromslave","text":"Collect the delete master from a slave's related 'mnsNodeRelationship' node, if there is one. This method will collect the master connected to the 'deleteMaster' attribute of the node. Constructor: getDeleteMasterFromSlave(slave) Return: None Arguments: slave Keyword Arguments:","title":"getDeleteMasterFromSlave"},{"location":"blockUtility/#getexisingcnsctrlsforrigtop","text":"Constructor: getExisingCnsCtrlsForRigTop(rigTop) Return: None Arguments: rigTop Keyword Arguments:","title":"getExisingCnsCtrlsForRigTop"},{"location":"blockUtility/#getexistingcpomnodefromsurface","text":"Constructor: getExistingCpomNodeFromSurface(surface) Return: None Arguments: surface Keyword Arguments:","title":"getExistingCpomNodeFromSurface"},{"location":"blockUtility/#getexistingspaceconstraintforcontrol","text":"Collect existing 'spaces' constraints for a passed in (built) control, in order to re-build them in turn, after correct filtering and validation (in case of a partial build for example). Constructor: getExistingSpaceConstraintForControl(ctrl = None) Return: None Arguments: ctrl ( str ) ; [default: None] Keyword Arguments:","title":"getExistingSpaceConstraintForControl"},{"location":"blockUtility/#getexistingspaceconstraintforcontrols","text":"Wrapper mwthod to collect 'spaces' constraints for multiple controls. Constructor: getExistingSpaceConstraintForControls(controls = []) Return: None Arguments: controls ( list ) ; [default: []] Keyword Arguments:","title":"getExistingSpaceConstraintForControls"},{"location":"blockUtility/#getexistingvolumejointnodeforjoint","text":"Constructor: getExistingVolumeJointNodeForJoint(joint = None) Return: None Arguments: joint ( str ) ; [default: None] Keyword Arguments:","title":"getExistingVolumeJointNodeForJoint"},{"location":"blockUtility/#getexistingvolumejointnodeforvolumejoint","text":"Constructor: getExistingVolumeJointNodeForVolumeJoint(joint = None) Return: None Arguments: joint ( str ) ; [default: None] Keyword Arguments:","title":"getExistingVolumeJointNodeForVolumeJoint"},{"location":"blockUtility/#getglobalscaleattrfromtransform","text":"This method is used to retreive any output decompose matrix node to be used as global scale input connection. If this method fails to retreive such attribute, it creates one and returns it. Constructor: getGlobalScaleAttrFromTransform(transform = None) Return: None Arguments: transform ( str ) ; [default: None] Keyword Arguments:","title":"getGlobalScaleAttrFromTransform"},{"location":"blockUtility/#getguideparent","text":"Collect a ctrl type object's 'Guide Authority', or related guide object. Constructor: getGuideParent(objectSel = None) Return: None Arguments: objectSel ( str ) ; [default: None] Keyword Arguments:","title":"getGuideParent"},{"location":"blockUtility/#getjointstructgrpfromrigtop","text":"Attempt to collect the 'Picker Title Group' from the passed in rigTop. Constructor: getJointStructGrpFromRigTop(rigTop = None) Return: None Arguments: rigTop ( str ) ; [default: None] Keyword Arguments:","title":"getJointStructGrpFromRigTop"},{"location":"blockUtility/#getkeyboardmodifiersstate","text":"Constructor: getKeyboardModifiersState() Return: None Arguments: Keyword Arguments:","title":"getKeyboardModifiersState"},{"location":"blockUtility/#getlimbmodulecontrols","text":"mode 0: fk controls and attrHost mode 1: ik controls and attrHost mode 2: both and attrHost mode 3: attrHost only Constructor: getLimbModuleControls(limbCtrl, mode = 2) Return: None Arguments: limbCtrl mode ( int ) ; [default: 2] Keyword Arguments:","title":"getLimbModuleControls"},{"location":"blockUtility/#getmoduleanimgrp","text":"Constructor: getModuleAnimGrp(obj = None) Return: None Arguments: obj ( str ) ; [default: None] Keyword Arguments:","title":"getModuleAnimGrp"},{"location":"blockUtility/#getmoduledecendentswildcard","text":"Collect all given module dendents using a 'wild-card' search method. This will collect all relatives using a * search within the root decendents, and return all of the passed in node types. Constructor: getModuleDecendentsWildcard(guideRoot, kwargs) Return: None Arguments: guideRoot kwargs Keyword Arguments:","title":"getModuleDecendentsWildcard"},{"location":"blockUtility/#getmodulefromguide","text":"This method will attempt to collect a related PyModule from the given guideRoot passed in. This method will not return the module's methods, only the PyModule as an object. This method also contains override optional arguments to specify a direct path or module name. Constructor: getModuleFromGuide(guideRoot, kwargs) Return: None Arguments: guideRoot kwargs Keyword Arguments:","title":"getModuleFromGuide"},{"location":"blockUtility/#getmoduleguidedecendents","text":"Collect all of the root guide module relatives for the passed in moduleRoot (or rootGuide). Constructor: getModuleGuideDecendents(guideRoot) Return: None Arguments: guideRoot Keyword Arguments:","title":"getModuleGuideDecendents"},{"location":"blockUtility/#getmoduleinterpjoints","text":"Collect all the given moduleRoot's 'interpolationJoints' relatives. Constructor: getModuleInterpJoints(guideRoot, kwargs) Return: None Arguments: guideRoot kwargs Keyword Arguments:","title":"getModuleInterpJoints"},{"location":"blockUtility/#getmoduleroot","text":"Attempt to collect the root guide relative from the given node. Constructor: getModuleRoot(objectA) Return: None Arguments: objectA Keyword Arguments:","title":"getModuleRoot"},{"location":"blockUtility/#getmodulerootctrl","text":"Constructor: getModuleRootCtrl(obj = None) Return: None Arguments: obj ( str ) ; [default: None] Keyword Arguments:","title":"getModuleRootCtrl"},{"location":"blockUtility/#getmodulerootforsel","text":"Attempt to collect a 'root guide' relative from the current selection Constructor: getModuleRootForSel() Return: None Arguments: Keyword Arguments:","title":"getModuleRootForSel"},{"location":"blockUtility/#getmodulescale","text":"Constructor: getModuleScale(MnsBuildModule) Return: None Arguments: MnsBuildModule Keyword Arguments:","title":"getModuleScale"},{"location":"blockUtility/#getmodulesettings","text":"Get passed in module settings. First get the default settings and values from the build-module directory, then compare against the rootGuide attributes, and return the filtered and altered settings. Constructor: getModuleSettings(rootGuide, firstAttempt = True, kwargs) Return: None Arguments: rootGuide firstAttempt ( bool ) ; [default: True] kwargs Keyword Arguments:","title":"getModuleSettings"},{"location":"blockUtility/#getmoduletopforctrl","text":"Collect the 'Module Top Group' related to the passed in control. Constructor: getModuleTopForCtrl(ctrl = None, nameMatch = None) Return: None Arguments: ctrl ( str ) ; [default: None] nameMatch ( str ) ; [default: None] Keyword Arguments:","title":"getModuleTopForCtrl"},{"location":"blockUtility/#getmoduletopfromrootguide","text":"Attempt to collect 'Module Top Group' from a given root guide. Constructor: getModuleTopFromRootGuide(rootGuide = None) Return: None Arguments: rootGuide ( str ) ; [default: None] Keyword Arguments:","title":"getModuleTopFromRootGuide"},{"location":"blockUtility/#getnoderelationshipnodefromobject","text":"Collect the related 'mnsNodeRelationship' node from the given input node. Constructor: getNodeRelationshipNodeFromObject(node) Return: None Arguments: node Keyword Arguments:","title":"getNodeRelationshipNodeFromObject"},{"location":"blockUtility/#getoffsetgrpforctrl","text":"Collect the offsetGroup related to the passed in control, if it exists. Constructor: getOffsetGrpForCtrl(ctrl, kwargs) Return: None Arguments: ctrl kwargs Keyword Arguments:","title":"getOffsetGrpForCtrl"},{"location":"blockUtility/#getoffsetskeletongrpfromrigtop","text":"Attempt to collect the 'Picker Title Group' from the passed in rigTop. Constructor: getOffsetSkeletonGrpFromRigTop(rigTop = None) Return: None Arguments: rigTop ( str ) ; [default: None] Keyword Arguments:","title":"getOffsetSkeletonGrpFromRigTop"},{"location":"blockUtility/#getoppositesidecontrol","text":"Attempt to collect the opposite related mns object if it exists. Only non 'ceneter components' will be tested of course. Constructor: getOppositeSideControl(obj = None) Return: None Arguments: obj ( str ) ; [default: None] Keyword Arguments:","title":"getOppositeSideControl"},{"location":"blockUtility/#getpickerguidesgrpfromrigtop","text":"Attempt to collect the 'Picker Guide Group' from the passed in rigTop. Constructor: getPickerGuidesGrpFromRigTop(rigTop = None) Return: None Arguments: rigTop ( str ) ; [default: None] Keyword Arguments:","title":"getPickerGuidesGrpFromRigTop"},{"location":"blockUtility/#getpickerlayoutbasefromrigtop","text":"Attempt to collect the 'Picker Layout Base guide' from the passed in rigTop. Constructor: getPickerLayoutBaseFromRigTop(rigTop = None) Return: None Arguments: rigTop ( str ) ; [default: None] Keyword Arguments:","title":"getPickerLayoutBaseFromRigTop"},{"location":"blockUtility/#getpickerlayoutcamfromrigtop","text":"Attempt to collect the 'Picker Layout Camera' from the passed in rigTop. Constructor: getPickerLayoutCamFromRigTop(rigTop = None) Return: None Arguments: rigTop ( str ) ; [default: None] Keyword Arguments:","title":"getPickerLayoutCamFromRigTop"},{"location":"blockUtility/#getpickerprojectioncamfromrigtop","text":"Attempt to collect the 'Picker Projection Camera' from the passed in rigTop. Constructor: getPickerProjectionCamFromRigTop(rigTop = None) Return: None Arguments: rigTop ( str ) ; [default: None] Keyword Arguments:","title":"getPickerProjectionCamFromRigTop"},{"location":"blockUtility/#getpickertitlegrpfromrigtop","text":"Attempt to collect the 'Picker Title Group' from the passed in rigTop. Constructor: getPickerTitleGrpFromRigTop(rigTop = None) Return: None Arguments: rigTop ( str ) ; [default: None] Keyword Arguments:","title":"getPickerTitleGrpFromRigTop"},{"location":"blockUtility/#getpuppetbasefromrigtop","text":"Attempt to collect the 'puppet group' from the passed in rigTop. Constructor: getPuppetBaseFromRigTop(rigTop = None) Return: None Arguments: rigTop ( str ) ; [default: None] Keyword Arguments:","title":"getPuppetBaseFromRigTop"},{"location":"blockUtility/#getpuppetrootfromrigtop","text":"Attempt to collect the 'Puppet World Control' from the passed in rigTop. Constructor: getPuppetRootFromRigTop(rigTop = None) Return: None Arguments: rigTop ( str ) ; [default: None] Keyword Arguments:","title":"getPuppetRootFromRigTop"},{"location":"blockUtility/#getpymodulefromguide","text":"Attempt to collect a 'Python Module' (or package) related to the given guide node passed in. If a related module was found, this method will return it as a PyModule object not as a directory. This method will also return the module's methods in a dictionary in order to run directly from it. Constructor: getPyModuleFromGuide(guide) Return: None Arguments: guide Keyword Arguments:","title":"getPyModuleFromGuide"},{"location":"blockUtility/#getrelatednodefromobject","text":"Collect a related node from the 'messageOut' attribute of the given node's 'mnsNodeRelationship' node. Constructor: getRelatedNodeFromObject(node) Return: None Arguments: node Keyword Arguments:","title":"getRelatedNodeFromObject"},{"location":"blockUtility/#getrelatedvoljntsourcesforselection","text":"Constructor: getRelatedVolJntSourcesForSelection() Return: None Arguments: Keyword Arguments:","title":"getRelatedVolJntSourcesForSelection"},{"location":"blockUtility/#getrelationmasterfromslave","text":"Collect the delete master from a slave's related 'mnsNodeRelationship' node, if there is one. This method will collect the master connected to the 'masterIn' attribute of the node. Constructor: getRelationMasterFromSlave(slave) Return: None Arguments: slave Keyword Arguments:","title":"getRelationMasterFromSlave"},{"location":"blockUtility/#getrigtop","text":"Attempt to get a rigTop node from the passed in node to check. Constructor: getRigTop(objectA) Return: None Arguments: objectA Keyword Arguments:","title":"getRigTop"},{"location":"blockUtility/#getrigtopassemblies","text":"Constructor: getRigTopAssemblies() Return: None Arguments: Keyword Arguments:","title":"getRigTopAssemblies"},{"location":"blockUtility/#getrigtopforsel","text":"Attempt to get a rigTop node from current selection Constructor: getRigTopForSel() Return: None Arguments: Keyword Arguments:","title":"getRigTopForSel"},{"location":"blockUtility/#getrootguidefromctrl","text":"Attempt to collect the related 'rootGuide' from the given control passed in. Constructor: getRootGuideFromCtrl(obj) Return: None Arguments: obj Keyword Arguments:","title":"getRootGuideFromCtrl"},{"location":"blockUtility/#getrootguidefromrigtop","text":"Attempt to collect the rig's root guide from the passed in rigTop node Constructor: getRootGuideFromRigTop(rigTop = None) Return: None Arguments: rigTop ( str ) ; [default: None] Keyword Arguments:","title":"getRootGuideFromRigTop"},{"location":"blockUtility/#getrootjointsfrommoduleroot","text":"Constructor: getRootJointsFromModuleRoot(guideRoot) Return: None Arguments: guideRoot Keyword Arguments:","title":"getRootJointsFromModuleRoot"},{"location":"blockUtility/#getsettings","text":"Get setting for the requested setting path. The settings are being filtered and set according to a node passed in. Constructor: getSettings(settingsPath, node, blkType) Return: None Arguments: settingsPath node blkType Keyword Arguments:","title":"getSettings"},{"location":"blockUtility/#getsidemodulebranchroot","text":"For a non \"center\" component passed in, recursively attempt to collect the 'side-branch' root guide. In essence look for the highest rootGuide in the selected 'side' heirarchy that has a 'center' component parent- meaning it's the top of the requested branch. Constructor: getSideModuleBranchRoot(guide = None) Return: None Arguments: guide ( str ) ; [default: None] Keyword Arguments:","title":"getSideModuleBranchRoot"},{"location":"blockUtility/#getsimplerivetsnodeformesh","text":"Constructor: getSimpleRivetsNodeForMesh(mesh = None) Return: None Arguments: mesh ( str ) ; [default: None] Keyword Arguments:","title":"getSimpleRivetsNodeForMesh"},{"location":"blockUtility/#getsymattrbasedonsymmapping","text":"Constructor: getSymAttrBasedOnSymMapping(attr = None, attrMapping = {}) Return: None Arguments: attr ( str ) ; [default: None] attrMapping ( dict ) ; [default: {}] Keyword Arguments:","title":"getSymAttrBasedOnSymMapping"},{"location":"blockUtility/#getsymmetricalvolumejoint","text":"Constructor: getSymmetricalVolumeJoint(vJnt = None, kwargs) Return: None Arguments: vJnt ( str ) ; [default: None] kwargs Keyword Arguments:","title":"getSymmetricalVolumeJoint"},{"location":"blockUtility/#getvjntsources","text":"Constructor: getVJntSources(vJnt = None) Return: None Arguments: vJnt ( str ) ; [default: None] Keyword Arguments:","title":"getVJntSources"},{"location":"blockUtility/#getvjointdata","text":"Constructor: getVJointData(vJnt) Return: None Arguments: vJnt Keyword Arguments:","title":"getVJointData"},{"location":"blockUtility/#handleinterplocsstructurereturn","text":"Constructor: handleInterpLocsStructureReturn(rigTop = None, interpLocs = [], guides = [], kwargs) Return: None Arguments: rigTop ( str ) ; [default: None] interpLocs ( list ) ; [default: []] guides ( list ) ; [default: []] kwargs Keyword Arguments:","title":"handleInterpLocsStructureReturn"},{"location":"blockUtility/#importctrlshapes","text":"Simple import method for control shapes. Constructor: importCtrlShapes() Return: None Arguments: Keyword Arguments:","title":"importCtrlShapes"},{"location":"blockUtility/#importguidepreset","text":"Constructor: importGuidePreset(presetName = None) Return: None Arguments: presetName ( str ) ; [default: None] Keyword Arguments:","title":"importGuidePreset"},{"location":"blockUtility/#importpickerdata","text":"Constructor: importPickerData( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"importPickerData"},{"location":"blockUtility/#injectplgpropertiesfromdata","text":"Constructor: injectPlgPropertiesFromData(plg = None, data = {}) Return: None Arguments: plg ( str ) ; [default: None] data ( dict ) ; [default: {}] Keyword Arguments:","title":"injectPlgPropertiesFromData"},{"location":"blockUtility/#insertguides","text":"This method is used primarily through Block UI, to insert guides above/below any guide selection. This will handle all exceptions, as well as re-analyze and re-orgenize each module based on the action performed. Constructor: insertGuides(amount = 0, mode = \"above\", kwargs) Return: None Arguments: amount ( int ) ; [default: 0] mode ( str ) ; [default: \"above\"] kwargs Keyword Arguments:","title":"insertGuides"},{"location":"blockUtility/#jointrotatetoorienttrigger","text":"Constructor: jointRotateToOrientTrigger(rigTop = None) Return: None Arguments: rigTop ( str ) ; [default: None] Keyword Arguments:","title":"jointRotateToOrientTrigger"},{"location":"blockUtility/#limbmatchfkik","text":"mode 0 - Match FK to IK mode 1 - Match IK to FK Constructor: limbMatchFkIK(limbCtrl, mode = 0, kwargs) Return: None Arguments: limbCtrl mode ( int ) ; [default: 0] kwargs Keyword Arguments:","title":"limbMatchFkIK"},{"location":"blockUtility/#loaddefaultsforctrl","text":"Load all default attributes for the given control, taking mnsDefaults (custom) into acount Constructor: loadDefaultsForCtrl(ctrl, kwargs) Return: None Arguments: ctrl kwargs Keyword Arguments:","title":"loadDefaultsForCtrl"},{"location":"blockUtility/#loadperspcam","text":"Set Maya's main camera panel, to the default 'persp' camera. Constructor: loadPerspCam() Return: None Arguments: Keyword Arguments:","title":"loadPerspCam"},{"location":"blockUtility/#loadpickerprojectioncam","text":"Set the main maya camera view to the 'picker projection camera', based on the scene selection (or the related rigTop to selection). Constructor: loadPickerProjectionCam() Return: None Arguments: Keyword Arguments:","title":"loadPickerProjectionCam"},{"location":"blockUtility/#loadposeforguides","text":"Block's load pose wrapper. Constructor: loadPoseForGuides(guides = [], poseSet = \"T\", kwargs) Return: None Arguments: guides ( list ) ; [default: []] poseSet ( str ) ; [default: \"T\"] kwargs Keyword Arguments:","title":"loadPoseForGuides"},{"location":"blockUtility/#loadresetvaluesforoffsetjoint","text":"Constructor: loadResetValuesForOffsetJoint(offsetJnt = None) Return: None Arguments: offsetJnt ( str ) ; [default: None] Keyword Arguments:","title":"loadResetValuesForOffsetJoint"},{"location":"blockUtility/#loadrigdefaults","text":"Load controls predefined and custom defaults: 0: All 1: Modules 2: Selected Constructor: loadRigDefaults(mode = 0, kwargs) Return: None Arguments: mode ( int ) ; [default: 0] kwargs Keyword Arguments:","title":"loadRigDefaults"},{"location":"blockUtility/#loadriginfo","text":"Constructor: loadRigInfo(puppetRoot = None) Return: None Arguments: puppetRoot ( str ) ; [default: None] Keyword Arguments:","title":"loadRigInfo"},{"location":"blockUtility/#locatecnsforctrl","text":"Constructor: locateCnsForCtrl(ctrl = None, kwargs) Return: None Arguments: ctrl ( str ) ; [default: None] kwargs Keyword Arguments:","title":"locateCnsForCtrl"},{"location":"blockUtility/#locateplgbasevismdnodes","text":"Constructor: locatePLGBaseVisMdNodes(baseLayoutGuide = None) Return: None Arguments: baseLayoutGuide ( str ) ; [default: None] Keyword Arguments:","title":"locatePLGBaseVisMdNodes"},{"location":"blockUtility/#matchextractedskeletontobaseskeleton","text":"Constructor: matchExtractedSkeletonToBaseSkeleton() Return: None Arguments: Keyword Arguments:","title":"matchExtractedSkeletonToBaseSkeleton"},{"location":"blockUtility/#matchguidestotargetskeleton","text":"Constructor: matchGuidesToTargetSkeleton(defenitionDict = {}, blockNameSpace = \"\", targetNameSpace = \"\") Return: None Arguments: defenitionDict ( dict ) ; [default: {}] blockNameSpace ( str ) ; [default: \"\"] targetNameSpace ( str ) ; [default: \"\"] Keyword Arguments:","title":"matchGuidesToTargetSkeleton"},{"location":"blockUtility/#matchkeyableattributes","text":"Constructor: matchKeyableAttributes(source = None, target = None) Return: None Arguments: source ( str ) ; [default: None] target ( str ) ; [default: None] Keyword Arguments:","title":"matchKeyableAttributes"},{"location":"blockUtility/#mirrorctrls","text":"Constructor: mirrorCtrls(ctrls = [], direction = 0, kwargs) Return: None Arguments: ctrls ( list ) ; [default: []] direction ( int ) ; [default: 0] kwargs Keyword Arguments:","title":"mirrorCtrls"},{"location":"blockUtility/#missingmoduleactiontrigger","text":"Action trigger for an invalid module path fix attempt Constructor: missingModuleActionTrigger(rigTop, missingModuleName, existingBtns) Return: None Arguments: rigTop missingModuleName existingBtns Keyword Arguments:","title":"missingModuleActionTrigger"},{"location":"blockUtility/#mutelocaltransformations","text":"Constructor: muteLocalTransformations(ctrl = None, kwargs) Return: None Arguments: ctrl ( str ) ; [default: None] kwargs Keyword Arguments:","title":"muteLocalTransformations"},{"location":"blockUtility/#namepuppet","text":"This method is used to create the rig's curves puppet title and connect it to to it's world control as additional shape nodes. Constructor: namePuppet(rigTop, kwargs) Return: None Arguments: rigTop kwargs Keyword Arguments:","title":"namePuppet"},{"location":"blockUtility/#orientguides","text":"Constructor: orientGuides(guides = [], kwargs) Return: None Arguments: guides ( list ) ; [default: []] kwargs Keyword Arguments:","title":"orientGuides"},{"location":"blockUtility/#pickerbuttonclickaction","text":"The global action trigger for any picker UI button click trigger. This method will trigger the \"controls selection\" and the \"action script\" for the passed in QPushButton passed in. Constructor: pickerButtonClickAction(btn, kwargs) Return: None Arguments: btn kwargs Keyword Arguments:","title":"pickerButtonClickAction"},{"location":"blockUtility/#pickerlayoutadjust","text":"Load a new Maya panel, with the 'Picker Layout Camera' related to the scene selction. This will also set the panel settings before loading it, based on the rigTop and 'layout base' attributes. Constructor: pickerLayoutAdjust() Return: None Arguments: Keyword Arguments:","title":"pickerLayoutAdjust"},{"location":"blockUtility/#pickertitletoggle","text":"Toggle between PLG 'control' view, to 'title' view. Constructor: pickerTitleToggle() Return: None Arguments: Keyword Arguments:","title":"pickerTitleToggle"},{"location":"blockUtility/#prechecknameforui","text":"A simple method to check for argument duplicates within an argument dict Constructor: preCheckNameForUI(arguments, suffix) Return: None Arguments: arguments suffix Keyword Arguments:","title":"preCheckNameForUI"},{"location":"blockUtility/#projectpickerlayout","text":"A wrapper method that handles plg projection from scene objects based on mode. mode 0 = selected mode 1 = module mode 2 = branch Constructor: projectPickerLayout(mode = 0, msgPrompt = True) Return: None Arguments: mode ( int ) ; [default: 0] msgPrompt ( bool ) ; [default: True] Keyword Arguments:","title":"projectPickerLayout"},{"location":"blockUtility/#projectpickerlayoutpos","text":"Get the passed in Ctrl PLG position, relative to the rig's 'layoutBase'. This method 'projects' the ctrl position based on the rig's 'Projection Camera' into the layout base space, and returns it's processed position. Constructor: projectPickerLayoutPos(ctrl, cam, layoutBase) Return: None Arguments: ctrl cam layoutBase Keyword Arguments:","title":"projectPickerLayoutPos"},{"location":"blockUtility/#projectselectedpickerlayout","text":"A wrapper method that handles plg projection from selected scene objects. Constructor: projectSelectedPickerLayout(msgPrompt = True) Return: None Arguments: msgPrompt ( bool ) ; [default: True] Keyword Arguments:","title":"projectSelectedPickerLayout"},{"location":"blockUtility/#rebuildjointstructure","text":"modes: 0 = All 1 = Branch 2 = Module Constructor: rebuildJointStructure(mode = 0) Return: None Arguments: mode ( int ) ; [default: 0] Keyword Arguments:","title":"rebuildJointStructure"},{"location":"blockUtility/#recgetmoduletopforctrl","text":"Recursively attempt to collect the 'Module Top Group' related to the ctrl passed in within it's related parents. Constructor: recGetModuleTopForCtrl(ctrl = None) Return: None Arguments: ctrl ( str ) ; [default: None] Keyword Arguments:","title":"recGetModuleTopForCtrl"},{"location":"blockUtility/#recgetparentjoint","text":"Recursivly attempt to get a parent joint starting with a given root object, scaling up the heirarchy. Constructor: recGetParentJoint(rootObject = None) Return: None Arguments: rootObject ( str ) ; [default: None] Keyword Arguments:","title":"recGetParentJoint"},{"location":"blockUtility/#recrenamelowerindex","text":"Constructor: recRenameLowerIndex(root = None, moduleGuides = [], moduleJoints = []) Return: None Arguments: root ( str ) ; [default: None] moduleGuides ( list ) ; [default: []] moduleJoints ( list ) ; [default: []] Keyword Arguments:","title":"recRenameLowerIndex"},{"location":"blockUtility/#recsearchforguiderootinparents","text":"Recusrsivly look for a 'rootGuide' from the given node's parent relatives. Constructor: recSearchForGuideRootInParents(obj) Return: None Arguments: obj Keyword Arguments:","title":"recSearchForGuideRootInParents"},{"location":"blockUtility/#removealienmatchesfromlist","text":"Constructor: removeAlienMatchesFromList(guideRoot, currentMatches = []) Return: None Arguments: guideRoot currentMatches ( list ) ; [default: []] Keyword Arguments:","title":"removeAlienMatchesFromList"},{"location":"blockUtility/#removeallauthority","text":"This method is used to delete all 'Authority' from the passsed in slave, if there are any. Constructor: removeAllAuthority(slave = None, kwargs) Return: None Arguments: slave ( str ) ; [default: None] kwargs Keyword Arguments:","title":"removeAllAuthority"},{"location":"blockUtility/#removecnsfromctrls","text":"This method is used to remove existing CNS controls/sub-controls for existing puppet controls. If you have CNS controls you want to remove, use this method. Pass in a list of controls you want to remove sub-controls from, and run. This method is also the one used by the CNS Tool. Constructor: removeCnsFromCtrls(ctrls = []) Return: None Arguments: ctrls ( list ) ; [default: []] Keyword Arguments:","title":"removeCnsFromCtrls"},{"location":"blockUtility/#removeguides","text":"Constructor: removeGuides( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"removeGuides"},{"location":"blockUtility/#removemodulevisattrfrompuppettop","text":"This method will remove the corresponding \"module vis\" channel from the given puppet base control. This method is used when a 'partial deconstruction' is initiated, keeping only relevant vis channels in place, removing the 'deconstructed' modules vis channels. Constructor: removeModuleVisAttrFromPuppetTop(moduleTopNode = None, puppetTop = None) Return: None Arguments: moduleTopNode ( str ) ; [default: None] puppetTop ( str ) ; [default: None] Keyword Arguments:","title":"removeModuleVisAttrFromPuppetTop"},{"location":"blockUtility/#repositionshape","text":"Simple method to re-center a control shape to its natural pivot Constructor: repositionShape(targets = []) Return: None Arguments: targets ( list ) ; [default: []] Keyword Arguments:","title":"repositionShape"},{"location":"blockUtility/#resetallcontrolforrigtop","text":"Constructor: resetAllControlForRigTop(rigTop = None, kwargs) Return: None Arguments: rigTop ( str ) ; [default: None] kwargs Keyword Arguments:","title":"resetAllControlForRigTop"},{"location":"blockUtility/#resetcontrols","text":"reset all keyable attributes to default value. Constructor: resetControls(controls=[], kwargs) Return: None Arguments: controls ( list ) ; [default: []] kwargs Keyword Arguments:","title":"resetControls"},{"location":"blockUtility/#resetoffsetskeleton","text":"Constructor: resetOffsetSkeleton(rigTop = None) Return: None Arguments: rigTop ( str ) ; [default: None] Keyword Arguments:","title":"resetOffsetSkeleton"},{"location":"blockUtility/#saveloaddagpose","text":"mode 0 = Save mode 1 = Load mode 2 = Delete poses: Bind, T, A Constructor: saveLoadDagPose(rootJoint = None, mode = 1, poseName = \"Bind\") Return: None Arguments: rootJoint ( str ) ; [default: None] mode ( int ) ; [default: 1] poseName ( str ) ; [default: \"Bind\"] Keyword Arguments:","title":"saveLoadDagPose"},{"location":"blockUtility/#saveloadpose","text":"This is the main wrapper for all pose 'save & load' triggers of BLOCK. Constructor: saveLoadPose(guides = [], kwargs) Return: None Arguments: guides ( list ) ; [default: []] kwargs Keyword Arguments:","title":"saveLoadPose"},{"location":"blockUtility/#saveposeforguides","text":"Block's save pose wrapper. Constructor: savePoseForGuides(guides = [], poseSet = \"T\", msgPrompt = False, kwargs) Return: None Arguments: guides ( list ) ; [default: []] poseSet ( str ) ; [default: \"T\"] msgPrompt ( bool ) ; [default: False] kwargs Keyword Arguments:","title":"savePoseForGuides"},{"location":"blockUtility/#searchforrootguideinrelatives","text":"Search for a 'guide authority' or 'rootGuide' in the given node's decendents Constructor: searchForRootGuideInRelatives(obj) Return: None Arguments: obj Keyword Arguments:","title":"searchForRootGuideInRelatives"},{"location":"blockUtility/#selectallctrls","text":"Select all controls for the given rig top. Constructor: selectAllCtrls(rigTop = None, kwargs) Return: None Arguments: rigTop ( str ) ; [default: None] kwargs Keyword Arguments:","title":"selectAllCtrls"},{"location":"blockUtility/#selectrelatedcontrols","text":"Constructor: selectRelatedControls(controlsToSelect, mode = \"replace\") Return: None Arguments: controlsToSelect mode ( str ) ; [default: \"replace\"] Keyword Arguments:","title":"selectRelatedControls"},{"location":"blockUtility/#selectslavecontrols","text":"Constructor: selectSlaveControls(rigTop = None, kwargs) Return: None Arguments: rigTop ( str ) ; [default: None] kwargs Keyword Arguments:","title":"selectSlaveControls"},{"location":"blockUtility/#setctrlcol","text":"Attempt to collect the passed in node's color (based on its type), and set it if seccessfull. Constructor: setCtrlCol(ctrl, rigTop, kwargs) Return: None Arguments: ctrl rigTop kwargs Keyword Arguments:","title":"setCtrlCol"},{"location":"blockUtility/#setcurrentstateasdefaultforctrl","text":"Set custom defaults for keyable attributes for the given control, based on it's current state. Constructor: setCurrentStateAsDefaultForCtrl(ctrl, kwargs) Return: None Arguments: ctrl kwargs Keyword Arguments:","title":"setCurrentStateAsDefaultForCtrl"},{"location":"blockUtility/#setresetvaluesforoffsetjoint","text":"Constructor: setResetValuesForOffsetJoint(offsetJnt = None) Return: None Arguments: offsetJnt ( str ) ; [default: None] Keyword Arguments:","title":"setResetValuesForOffsetJoint"},{"location":"blockUtility/#setrigdefaults","text":"Set controls custom defaults based on given state: 0: All 1: Modules 2: Branches Constructor: setRigDefaults(mode = 0, kwargs) Return: None Arguments: mode ( int ) ; [default: 0] kwargs Keyword Arguments:","title":"setRigDefaults"},{"location":"blockUtility/#setgctrlcolorformodule","text":"For all relevant decendents of the passed in moduleRoot, get and set it's color. Constructor: setgCtrlColorForModule(rigTop, moduleRoot) Return: None Arguments: rigTop moduleRoot Keyword Arguments:","title":"setgCtrlColorForModule"},{"location":"blockUtility/#setgctrlcolorforrigtop","text":"Set ALL relevnt controls within a rigTop, to their color based on their type. Constructor: setgCtrlColorForRigTop(rigTop) Return: None Arguments: rigTop Keyword Arguments:","title":"setgCtrlColorForRigTop"},{"location":"blockUtility/#symmetrizecgshape","text":"A simple method to symmetrize custom guides nurbs shapes when aplicable Constructor: symmetrizeCGShape(mode = 0, direction = 0, cGuides = []) Return: None Arguments: mode ( int ) ; [default: 0] direction ( int ) ; [default: 0] cGuides ( list ) ; [default: []] Keyword Arguments:","title":"symmetrizeCGShape"},{"location":"blockUtility/#symmetrizeplg","text":"Block 'plg symmetrize' button trigger. This method will handle validation and creation of PLG related symmetrical plg. Constructor: symmetrizePlg(guide = None) Return: None Arguments: guide ( str ) ; [default: None] Keyword Arguments:","title":"symmetrizePlg"},{"location":"blockUtility/#symmetrizeplgs","text":"A simple wrapper method to symmetrize multiple PLG's (based on scene selection). Constructor: symmetrizePlgs() Return: None Arguments: Keyword Arguments:","title":"symmetrizePlgs"},{"location":"blockUtility/#symmetrizevj","text":"Constructor: symmetrizeVJ(vJnt = None, kwargs) Return: None Arguments: vJnt ( str ) ; [default: None] kwargs Keyword Arguments:","title":"symmetrizeVJ"},{"location":"blockUtility/#toggleguidectrl","text":"Atempt to toggle between a selection guide and main joint if possible. Constructor: toggleGuideCtrl( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"toggleGuideCtrl"},{"location":"blockUtility/#toggleguidejoint","text":"Atempt to toggle between a selection guide and main joint if possible. Constructor: toggleGuideJoint( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"toggleGuideJoint"},{"location":"blockUtility/#togglepickerctrlbodyfacial","text":"Constructor: togglePickerCtrlBodyFacial() Return: None Arguments: Keyword Arguments:","title":"togglePickerCtrlBodyFacial"},{"location":"blockUtility/#transferauthoritytoctrl","text":"This is a very important method used in BLOCK cosntruction. This method will find the current 'guide control' from the given joint slave. and transfer it's authority to a newly created 'control authority'. This method will be called on every module build and it is the main trigger to flag a module construction. The 'authority' attribute for every guide or control is used to distiguish the module state, and jnt state. When transfering an authority to a ctrl, a 'old authority' attr (of sort) is created, in order for the procedural 'deconstruct' to look for and tranfer the jnt authority back to it's orignal guide, before deleting the constructed module. See also parallel: 'transferAuthorityToGuide' Method. Constructor: transferAuthorityToCtrl(slave = None, ctrlMaster = None, kwargs) Return: None Arguments: slave ( str ) ; [default: None] ctrlMaster ( str ) ; [default: None] kwargs Keyword Arguments:","title":"transferAuthorityToCtrl"},{"location":"blockUtility/#transferauthoritytoguide","text":"This is a very important method used in BLOCK de-construction. This method will find the current 'control' from the given joint slave. and transfer it's authority to a it's original 'guide' authority. This method will be called procedurally on any module deconstruction, before deleting the constructed module. See also parallel: 'transferAuthorityToCtrl' Method. Constructor: transferAuthorityToGuide(ctrl = None, kwargs) Return: None Arguments: ctrl ( str ) ; [default: None] kwargs Keyword Arguments:","title":"transferAuthorityToGuide"},{"location":"blockUtility/#transferauthoritytooffsetskeleton","text":"Constructor: transferAuthorityToOffsetSkeleton(rigTop = None) Return: None Arguments: rigTop ( str ) ; [default: None] Keyword Arguments:","title":"transferAuthorityToOffsetSkeleton"},{"location":"blockUtility/#transferauthoritytopuppet","text":"Constructor: transferAuthorityToPuppet(rigTop = None) Return: None Arguments: rigTop ( str ) ; [default: None] Keyword Arguments:","title":"transferAuthorityToPuppet"},{"location":"blockUtility/#upparentallplgtrigger","text":"OBSELETE. PLG parenting is no longer in use. Constructor: upParentAllPlgTrigger() Return: None Arguments: Keyword Arguments:","title":"upParentAllPlgTrigger"},{"location":"blockUtility/#updaterigstructure","text":"Rig structure update required trigger. This method will be called in case any 'jntStructMember' attribute was altered, which means the internal joint structure of the module needs to be rebuilt. This method will locate and filter the existing module related joint structure, destroy it, and re-build it using the updated settings. Constructor: updateRigStructure(softMod = False, kwargs) Return: None Arguments: softMod ( bool ) ; [default: False] kwargs Keyword Arguments:","title":"updateRigStructure"},{"location":"blockUtility/#volumejointanglesymmetrymapping","text":"Constructor: volumeJointAngleSymmetryMapping(symmetryDelta = pm.datatypes.Vector(1.0, 1.0, 1.0)) Return: None Arguments: symmetryDelta ( str ) ; [default: pm.datatypes.Vector(1.0] 1.0 1.0) Keyword Arguments:","title":"volumeJointAngleSymmetryMapping"},{"location":"buildModules/","text":"buildModules === Author: Assaf Ben Zur === This is the core BLOCK Build-Modules class library. This package contains the three main classes for BLOCK: - MnsBuildModuleBtn - MnsRig - MnsBuildModule Most core function are defined within the classes, although any external functionality is maintained in 'blockUtility' py module. The objective of these classes are mainly effeciant data gathering, constructing and deconstructing modules within a rig group. Classes MnsBuildModule [Class] This class is the data store class for any mns 'build-module'. This class contains the actual creation and deletion of the module, guides and controls. This class will be initialized through the MnsRig class, althogh process functions regarding the modules are store in this class only. This class is purely procedular, and so it should remain. As the main goal of the rig is maintaining dynamic abilities, and easy creation of modules, this class should remain completely independent of any specific build module. Guides creation is partlly procedural, as any \"main-guides\" creation is fully automatic, although custom-guides creation isn't- as it is module specific, hence it is store within the buildModule directory. Interp Joint Structure creation is procedural, although its essence is also defined within each build-module directory, althogh it is not mandatory. As the build modules are very specific and have to be created manually, guide creation is kept independent. This for easily creating modules, not needing to worrie about the handeling of guides, consruction and deconstruction. The actual flow of the build is independent of the modules setup internals. Constructor: MnsBuildModule( MnsBuildModuleButton , **kwargs ) Inherits from: MnsRig Class Members: MnsBuildModuleButton sidePlaceHolder builtGuides rigTop rootGuide isFacial rootCtrl guideControls cGuideControls pureParent attrHostCtrl extraChannelsHost compundModules moduleTop animGrp animStaticGrp rigComponentsGrp moduleSpaceAttrHost extraSpaces defaultSpace pureTops spaceSwitchCtrls internalSpaces controls allControls puppetTopCtrl Methods: constructAttrHostCtrl [method] constructAttrHostSpace [method] createAttrHostCustomGuide [method] createExtraChannels [method] splitControlsBasedOnType [method] collecteModuleSettings [method] filterValidSpacs [method] buildGuideObjects [method] gatherAllDependecies [method] reCollectControlsFromLocals [method] construct [method] createGuides [method] deconstruct [method] buildGuides [method] constructSpaces [method] createModuleTopNode [method] storeCustomDefaults [method] updateCreationArgsToSymmetryMode [method] restoreCustomDefaults [method] gatherRelatedCtrls [method] connectVisChannels [method] gatherRelatedGuides [method] getRigTop [method] MnsBuildModule methods constructAttrHostCtrl [ MnsBuildModule class method] Constructor: constructAttrHostCtrl(self) Return: None Arguments: self Optional Arguments: constructAttrHostSpace [ MnsBuildModule class method] Constructor: constructAttrHostSpace(self) Return: None Arguments: self Optional Arguments: createAttrHostCustomGuide [ MnsBuildModule class method] Constructor: createAttrHostCustomGuide(self) Return: None Arguments: self Optional Arguments: createExtraChannels [ MnsBuildModule class method] Constructor: createExtraChannels(self) Return: None Arguments: self Optional Arguments: splitControlsBasedOnType [ MnsBuildModule class method] Constructor: splitControlsBasedOnType(self) Return: None Arguments: self Optional Arguments: collecteModuleSettings [ MnsBuildModule class method] Constructor: collecteModuleSettings(self, rootGuide = None) Return: None Arguments: self rootGuide ( str ) ; [default: None] Optional Arguments: filterValidSpacs [ MnsBuildModule class method] Constructor: filterValidSpacs(self, sourceSpaces = [], kwargs) Return: None Arguments: self sourceSpaces ( list ) ; [default: []] kwargs Optional Arguments: buildGuideObjects [ MnsBuildModule class method] A simple method to gather the amount of needed guides to create, and calling the creation accordingly. Constructor: buildGuideObjects(self, kwargs) Return: None Arguments: self kwargs Optional Arguments: buildCompound ( bool ) ; [default: True] gatherAllDependecies [ MnsBuildModule class method] Gather all scene object dependecies for the buildModule. A simple wrapper containing 'gatherRelatedGuides' method & gatherRelatedCtrls method. Constructor: gatherAllDependecies(self) Return: None Arguments: self Optional Arguments: reCollectControlsFromLocals [ MnsBuildModule class method] Re-initialize the 'allControls' attribute of this class, based on the current rig state. Constructor: reCollectControlsFromLocals(self) Return: None Arguments: self Optional Arguments: construct [ MnsBuildModule class method] The main construct method. The actual 'Construct' method within the build module directory is being called here. Flow: - make sure the module isn't built - get the puppet root - try and find the related 'construct' method within the build module directory (or package). - construct the module, feeding the construct method with all of the requested module settings. this will transfer the related joints to their new ctrl authority. - connect a vis channel to the new module group created. - re-collect relations for the module (post build). - Set colors for all built controls. - parent the new bm top group in the puppet group. - try restore defaults if there are any. Constructor: construct(self) Return: MnsBuildModule (self, this buildModule class) Arguments: self Optional Arguments: createGuides [ MnsBuildModule class method] This is the main guide creation method. This method contains all the steps needed to gather a module data, and create the guides for it. This method will return the built guides, as well as store it in this class 'builtGuides' attribute. Constructor: createGuides(self, kwargs) Return: list (bbuiltGuides) Arguments: self kwargs Optional Arguments: buildCompound ( bool ) ; [default: True] blkSide ( str ) ; [default: center] body ( str ) ; [default: guideCtrl] alpha ( str ) ; [default: A] alongAxis ( int ) ; [default: 1] moduleScale ( int ) ; [default: 1] isFacial ( bool ) deconstruct [ MnsBuildModule class method] This is the main module deconstruction method. Flow: - Make sure the module is constructed - In case a deconstruvt method (non mandatory method) is found within the build-module's directory, run it. - Transfer all joint authoities back to the guides. - Remove the related vis channel from puppet root (Needed in case a partial deconstruction was called). - Delete the build module. - Set the construction state for the build module. Constructor: deconstruct(self, mnsRig) Return: MnsBuildModule (self, this buildModule class) Arguments: self mnsRig Optional Arguments: buildGuides [ MnsBuildModule class method] This method is the initialize method for new guides creation. This method will be called first (before 'createGuides') and will also load the modules creation settings window if neccessary. Constructor: buildGuides(self, MnsBuildModuleButton, kwargs) Return: None Arguments: self MnsBuildModuleButton kwargs Optional Arguments: skipUI ( bool ) skipGuidesCreation ( bool ) buildCompound ( bool ) ; [default: True] settingsHolder ( str ) ; [default: None] preDefinedSettings ( str ) ; [default: {}] symmetrize ( bool ) constructSpaces [ MnsBuildModule class method] This method is the spaces construction processing. This method is seperated from the main construct method in order to run it after an entire construction. Because the spaces within the module are dependent of other modules, a first loop is run to construct the modules, after, another loop is running through the built modules, calling this method, trying to construct all of it's spaces. Constructor: constructSpaces(self) Return: None Arguments: self Optional Arguments: createModuleTopNode [ MnsBuildModule class method] This method is used to create the genric 'module top group' on module construction. Constructor: createModuleTopNode(self) Return: None Arguments: self Optional Arguments: storeCustomDefaults [ MnsBuildModule class method] This method stores any custom 'defaults' set for the entire module. The collection is stored within the rootGuide node. This is important beacuse when the module is deconstructed, the ctrls containing the 'defaults' attribute are eventually deleted. So, in order to keep the information on deletion, this method runs thorugh the modules controls, and storing the set 'defaults' attribute within the rootGuide, in order to restore them when a reconstruction is called. related method: restoreCustomDefaults Constructor: storeCustomDefaults(self) Return: None Arguments: self Optional Arguments: updateCreationArgsToSymmetryMode [ MnsBuildModule class method] This method will alter the current setting to their symmetry mode, In case the 'symmetrize' flag was passed into the buildGuides method. Altered attributes: - side (or blkSide) - spaces- if a side related space was found, symmetrize the space as well. Constructor: updateCreationArgsToSymmetryMode(self, optArgs) Return: dict (optionalArguments) Arguments: self optArgs Optional Arguments: restoreCustomDefaults [ MnsBuildModule class method] This method will attempt to restore any pre-stored 'defaults' set a newly created control. related method: storeCustomDefaults. Constructor: restoreCustomDefaults(self) Return: None Arguments: self Optional Arguments: gatherRelatedCtrls [ MnsBuildModule class method] This method will collect and store the build-module related control objects from the rig. Constructor: gatherRelatedCtrls(self) Return: None Arguments: self Optional Arguments: connectVisChannels [ MnsBuildModule class method] This method will connect this module into it's related vis channel in the puppet root control. Constructor: connectVisChannels(self) Return: None Arguments: self Optional Arguments: gatherRelatedGuides [ MnsBuildModule class method] This method will gather the buildModules related guides from the rig. collected objects: - rootGuide - guides - customGuides The data collected is stored in their related class attributes: - rootGuide - 'rootGuide' - guides - 'guideControls' - custom guides - 'cGuideControls' Constructor: gatherRelatedGuides(self) Return: None Arguments: self Optional Arguments: getRigTop [ MnsBuildModule class method] get the rigTop nameStd from current selection. If it doesn't exist, initiate a new rig top creation. Constructor: getRigTop(self) Return: MnsNameStd (rigTop) Arguments: self Optional Arguments: MnsBuildModuleBtn [Class] The procedural 'module' button class. This class is being called and constructed procedurally from the file system based on folder contents. The class itself isn't inhereting from QPushButton, as it only exists to contain build location information. The class contains a constuctor only, which initializes the following information: - The full-path to the buildModule - The layout Parent of the button - The group of the button, based on the folder structure of which the bm is located in. - The 'settings' file-path. - Short-Name - The obselete - 'isMayaNative' attribute. This information will be accessed once the related QPushButton will be triggered. Constructor: MnsBuildModuleBtn( path , **kwargs ) Inherits from: object Class Members: path moduleName groupType MnsRig [Class] This is the main 'RIG' data class. This class's constructor will initialize and build all relevant information regarding the 'rig' top top group. As The rig topGrp has pre-defined structure, and many dependencies, all basic information will be checked every time this class is constructed. The essence of this class is first of all to build the predefined rigGroup, then, to store and parse all relevant data from the scene, as well as validating it and rebuilding any sub-components if necessary. The procedural settings UI build will be initiated if a rig top wasn't found in the current scene selection (or if there is no selection). In case a rigTop already exists, it will first be validated, then it's setting will be read and parsed, initiating the the same UI draw, in \"edit\" mode. Constructor: MnsRig( callerSubClass ( str ) ; [default: None], **kwargs ) Inherits from: object Class Members: rigTop rootGuide callerSubClass modules buildModulesBtns puppetBase baseGuide rootJnt iconsDir buildTimer loadSettingsWindow Methods: connectLODs [method] createPredefinedCnsControls [method] createRigInfo [method] failedConstructionCommand [method] setVisChannelsBasedOnCunstructMode [method] cunstructRigSpaces [method] collectBuildModules [method] createPickerLayoutBase [method] createRootGuide [method] createPickerTitleGrp [method] createPickerGuideGrp [method] createNewRigTop [method] createPickerProjectionCam [method] createSubGroupForRigTop [method] createPickerCam [method] createPuppetRootCtrl [method] createVisEnumAndConnect [method] getGlobalConstructionState [method] loadSettingsWindow [method] restorePuppetBaseDefaults [method] setConstructionMode [method] deconstructRig [method] constructRig [method] storePuppetBaseDefaults [method] destroyPuppetRootCtrl [method] createSubGrpsForRigTop [method] executeCustomScripts [method] MnsRig methods connectLODs [ MnsRig class method] Constructor: connectLODs(self) Return: None Arguments: self Optional Arguments: createPredefinedCnsControls [ MnsRig class method] Constructor: createPredefinedCnsControls(self) Return: None Arguments: self Optional Arguments: createRigInfo [ MnsRig class method] Constructor: createRigInfo(self) Return: None Arguments: self Optional Arguments: failedConstructionCommand [ MnsRig class method] A global method to display and return a message dialog whenever a build fails. This method displays 3 options and returns a paraller state: - 0: 'Continue' - 1: 'Abort' - 2: 'Revert-Construction' Constructor: failedConstructionCommand(self, fileName = \"\") Return: int (state/button clicked) Arguments: self fileName ( str ) ; [default: \"\"] Optional Arguments: setVisChannelsBasedOnCunstructMode [ MnsRig class method] A simple method to set the vis mode of the current rig based on it's construction state. The construction mode is read from the rigTop attribues. Construction modes: 0: Guides - guideGrpVis = True, puppetGrpVis = False 1: Intermediate (Partially built rig) - guideGrpVis = True, puppetGrpVis = True 2: Puppet - guideGrpVis = False, puppetGrpVis = True Constructor: setVisChannelsBasedOnCunstructMode(self) Return: None Arguments: self Optional Arguments: cunstructRigSpaces [ MnsRig class method] Attempt to construct spaces for all 'modules' within the rig. Constructor: cunstructRigSpaces(self) Return: None Arguments: self Optional Arguments: collectBuildModules [ MnsRig class method] Collect all build modules guide hierarchy into the 'modules' attribure of this class. This method will run through the rig, and attempt to collect it's guide heirarchy, validating the modules while collecting. Constructor: collectBuildModules(self, kwargs) Return: None Arguments: self kwargs Optional Arguments: createPickerLayoutBase [ MnsRig class method] Create Picker Layout Base control, and construct all of it's predefined attributes. The predefined attributes for the PLG base is the following: - width - Will define the width of the rig's picker window - height- Will define the height of the rig's picker window - titleVis - vis attr for the title-group - titleSize - a global scalar for all mnsAnnotate PLG titles. This group also contains a few vis control channels to allow easier edit for the PLGs: - bodyPrimaries - bodySecondaries - bodyTertiaries - facialPrimaries - facialSecondaries - facialTertiaries These sub-vis channels will be controled by a global toggle attribute: - pickerMode This will dictate the picker's scene vis mode, the toggle is between 'body' and 'facial' modes. As the picker inhabits to tabs - body and facial, these attributes will allow better manipulation of PLG, grouping them according to the actual picker window tab grouping. Constructor: createPickerLayoutBase(self, rigTop, kwargs) Return: MnsNameStd (baseLayoutGuide) Arguments: self rigTop kwargs Optional Arguments: createRootGuide [ MnsRig class method] Create the \"world control guide\", or \"rigRootGuide\". This rootGuide will be locked completely and will define the predefined \"world\" control for the puppet. This entity is mandatory. Constructor: createRootGuide(self, rigTopNameStd, kwargs) Return: MnsNameStd (Root Guide) Arguments: self rigTopNameStd kwargs Optional Arguments: createPickerTitleGrp [ MnsRig class method] Create the Picker Layout 'titles' sub-component. This group contains the mnsAnnotate locators to toggle PLG view between it's shape and it's title. Constructor: createPickerTitleGrp(self, rigTop, pickerLayoutBase, kwargs) Return: MnsNameStd (titleGrp) Arguments: self rigTop pickerLayoutBase kwargs Optional Arguments: createPickerGuideGrp [ MnsRig class method] Create the main Picker-Layout-Guides sub-component. Constructor: createPickerGuideGrp(self, rigTop, pickerLayoutBase, kwargs) Return: MnsNameStd (guidesGrp) Arguments: self rigTop pickerLayoutBase kwargs Optional Arguments: createNewRigTop [ MnsRig class method] Create the main rig group, with all of its sub-Components within. Constructor: createNewRigTop(self, kwargs) Return: None Arguments: self kwargs Optional Arguments: createPickerProjectionCam [ MnsRig class method] Create the predefined \"PLG Projection\" camera within the rig. A dedicated mns node is used here - 'mnsCamreGateRatio': This dedicated node was written in order to control the camera shape 'gateRatio' attribute. Because this attribute isn't connectable (internal callback within the camera shape), mnsCameraGateRatio inserts a custom maya-callback into itself, in-order to refresh the camera-gate in a \"live\" fashion, This will allow the user to edit the width and height of the projection camera, seeing a live feed of it's gate in the view. As the projection is based on the camera gate, it is very important for the user to see the actual gate used, while projecting PLG's. Constructor: createPickerProjectionCam(self, rigTop, pickerLayoutBase) Return: MnsNameStd (Picker Projection Camera) Arguments: self rigTop pickerLayoutBase Optional Arguments: createSubGroupForRigTop [ MnsRig class method] Create the predefined \"guideGrp\" or \"freeJointsGrp\" within the rig. Guides Group - Contains the module main guides. Free Joints Group - Contains the interpLocs intermediate matricies for the interJnts in the main jointStructure Constructor: createSubGroupForRigTop(self, rigTopNameStd, kwargs) Return: MnsNameStd (guideGrp/freeJointsGrp) Arguments: self rigTopNameStd kwargs Optional Arguments: subGrpType ( str ) default ( int ) ; [default: 1] createPickerCam [ MnsRig class method] Create the predefined \"picker Layout View\" camera within the rig. This camera will be used as the view camera when an \"edit picker layout\" trigger was initiated from BlockUI. The camera is orthographic, and will be used in a seperate display (Maya-Panel). This to allow easy view of the picker layout, and easy manipulation of PLG shapes and controls. Constructor: createPickerCam(self, rigTop, pickerLayoutBase, kwargs) Return: MnsNameStd (Picker Layout Camera) Arguments: self rigTop pickerLayoutBase kwargs Optional Arguments: createPuppetRootCtrl [ MnsRig class method] Create the rig's predefined \"puppetRoot\" or \"worldControl\". This depends on the rootGuide of course, and transfer the rigs \"Root-Joint\" Authority from the rootGuide, to the new puppetRoot control. This method will return the new control, as well as store it in the 'puppetTopCtrl' attribute of this class. Constructor: createPuppetRootCtrl(self, rigTop, kwargs) Return: MnsNameStd (Root Guide) Arguments: self rigTop kwargs Optional Arguments: createVisEnumAndConnect [ MnsRig class method] For any given slave MnsNameStd group passed in, create a generic vis channel and connect it. The Enums of the generic vis channels are the following: - hidden - normal - template - reference Constructor: createVisEnumAndConnect(self, masterStd, slaveStd, kwargs) Return: PyAttribute (created attribute) Arguments: self masterStd slaveStd kwargs Optional Arguments: default ( int ) ; [default: 1] getGlobalConstructionState [ MnsRig class method] Gey the current rig construction state from rigTop attributes. Constructor: getGlobalConstructionState(self) Return: int (mode) Arguments: self Optional Arguments: loadSettingsWindow [ MnsRig class method] Load the dynamic \"setting window\" for the current rig. Constructor: loadSettingsWindow(self, kwargs) Return: None Arguments: self kwargs Optional Arguments: restorePuppetBaseDefaults [ MnsRig class method] On reconstruction, attempt to restore the 'defaults' attribute for the puppet root, if there are any. related method: storePuppetBaseDefaults Constructor: restorePuppetBaseDefaults(self) Return: None Arguments: self Optional Arguments: setConstructionMode [ MnsRig class method] Set the construction state attribute of the current rig. Constructor: setConstructionMode(self) Return: None Arguments: self Optional Arguments: deconstructRig [ MnsRig class method] This is the main deconstruction method for the rig. Flow: - Log, and set Timer - Collect all relevant data from the rig - Collect modules to build - Loop through the 'modules' dict attribute of this class: - Initiate the 'Deconstruct' method for every buildModule class within the collection. Constructor: deconstructRig(self, kwargs) Return: None Arguments: self kwargs Optional Arguments: constructRig [ MnsRig class method] This method is the main 'Construction' call for a mnsRig. Flow: - Log, and set Timer - Collect all relevant data from the rig - Collect modules to build - Loop through the 'modules' dict attribute of this class: - Initiate the 'Construct' method for every buildModule class within the collection. Constructor: constructRig(self, kwargs) Return: None Arguments: self kwargs Optional Arguments: storePuppetBaseDefaults [ MnsRig class method] This method is used to store the current 'Defaults' set for the puppet-root control on deconstruction. As deconstruction deletes all the controls, including the puppet-root, if any custom-defaults were set, its essential to store them, in order to re-create them on re-construction. This is a specific case for the root-control, as it isn't a 'build-module' hence, the generic defaults store for the build modules doesn't apply. related method: restorePuppetBaseDefaults Constructor: storePuppetBaseDefaults(self) Return: None Arguments: self Optional Arguments: destroyPuppetRootCtrl [ MnsRig class method] This method will destroy the rig's puppetRoot control, and transfer the rig's root-joint authority back to it's rootGuide. Constructor: destroyPuppetRootCtrl(self) Return: None Arguments: self Optional Arguments: createSubGrpsForRigTop [ MnsRig class method] This wrapper creates all the sub-group components for a given main rigTop group. The sub-groups defenition is the following: - guideGrp - Guides group component - puppetGrp - The Puppet group. - jointStructGrp - Joint Structure group - pickerLayoutGrp - Picker Layout guiides group. - controlShapesGrp - Stored custom shapes group. - freeJointsGrp - \"Free joints\" group, containing interLocs as intermediate objects to the interJoints in the main joint structure. Constructor: createSubGrpsForRigTop(self, rigTop = None) Return: None Arguments: self rigTop ( str ) ; [default: None] Optional Arguments: executeCustomScripts [ MnsRig class method] for the given 'customScripts' attribute: compile the run files, and execute (if set). Constructor: executeCustomScripts(self, attrName = None) Return: bool (Execution success) Arguments: self attrName ( str ) ; [default: None] Optional Arguments: Defenitions createModuleCompound Constructor: createModuleCompound(compoundMaster, moduleName, bmButtonList, parent, settings) Return: None Arguments: compoundMaster moduleName bmButtonList parent settings Keyword Arguments: updateModules Constructor: updateModules(blkWin = None, rigTop = None, buildModulesBtns = [], kwargs) Return: None Arguments: blkWin ( str ) ; [default: None] rigTop ( str ) ; [default: None] buildModulesBtns ( list ) ; [default: []] kwargs Keyword Arguments: updateRig Constructor: updateRig(blkWin = None, buildModulesBtns = [], kwargs) Return: None Arguments: blkWin ( str ) ; [default: None] buildModulesBtns ( list ) ; [default: []] kwargs Keyword Arguments: updateRigTopAttrs Constructor: updateRigTopAttrs(rigTop = None) Return: None Arguments: rigTop ( str ) ; [default: None] Keyword Arguments: updateRigTopStruct Constructor: updateRigTopStruct(rigTop = None, buildModulesBtns = []) Return: None Arguments: rigTop ( str ) ; [default: None] buildModulesBtns ( list ) ; [default: []] Keyword Arguments:","title":"buildModules"},{"location":"buildModules/#buildmodules","text":"=== Author: Assaf Ben Zur === This is the core BLOCK Build-Modules class library. This package contains the three main classes for BLOCK: - MnsBuildModuleBtn - MnsRig - MnsBuildModule Most core function are defined within the classes, although any external functionality is maintained in 'blockUtility' py module. The objective of these classes are mainly effeciant data gathering, constructing and deconstructing modules within a rig group.","title":"buildModules"},{"location":"buildModules/#classes","text":"","title":"Classes"},{"location":"buildModules/#mnsbuildmodule-class","text":"This class is the data store class for any mns 'build-module'. This class contains the actual creation and deletion of the module, guides and controls. This class will be initialized through the MnsRig class, althogh process functions regarding the modules are store in this class only. This class is purely procedular, and so it should remain. As the main goal of the rig is maintaining dynamic abilities, and easy creation of modules, this class should remain completely independent of any specific build module. Guides creation is partlly procedural, as any \"main-guides\" creation is fully automatic, although custom-guides creation isn't- as it is module specific, hence it is store within the buildModule directory. Interp Joint Structure creation is procedural, although its essence is also defined within each build-module directory, althogh it is not mandatory. As the build modules are very specific and have to be created manually, guide creation is kept independent. This for easily creating modules, not needing to worrie about the handeling of guides, consruction and deconstruction. The actual flow of the build is independent of the modules setup internals. Constructor: MnsBuildModule( MnsBuildModuleButton , **kwargs ) Inherits from: MnsRig Class Members: MnsBuildModuleButton sidePlaceHolder builtGuides rigTop rootGuide isFacial rootCtrl guideControls cGuideControls pureParent attrHostCtrl extraChannelsHost compundModules moduleTop animGrp animStaticGrp rigComponentsGrp moduleSpaceAttrHost extraSpaces defaultSpace pureTops spaceSwitchCtrls internalSpaces controls allControls puppetTopCtrl Methods: constructAttrHostCtrl [method] constructAttrHostSpace [method] createAttrHostCustomGuide [method] createExtraChannels [method] splitControlsBasedOnType [method] collecteModuleSettings [method] filterValidSpacs [method] buildGuideObjects [method] gatherAllDependecies [method] reCollectControlsFromLocals [method] construct [method] createGuides [method] deconstruct [method] buildGuides [method] constructSpaces [method] createModuleTopNode [method] storeCustomDefaults [method] updateCreationArgsToSymmetryMode [method] restoreCustomDefaults [method] gatherRelatedCtrls [method] connectVisChannels [method] gatherRelatedGuides [method] getRigTop [method]","title":"MnsBuildModule [Class]"},{"location":"buildModules/#mnsbuildmodule-methods","text":"","title":"MnsBuildModule  methods"},{"location":"buildModules/#mnsbuildmodulebtn-class","text":"The procedural 'module' button class. This class is being called and constructed procedurally from the file system based on folder contents. The class itself isn't inhereting from QPushButton, as it only exists to contain build location information. The class contains a constuctor only, which initializes the following information: - The full-path to the buildModule - The layout Parent of the button - The group of the button, based on the folder structure of which the bm is located in. - The 'settings' file-path. - Short-Name - The obselete - 'isMayaNative' attribute. This information will be accessed once the related QPushButton will be triggered. Constructor: MnsBuildModuleBtn( path , **kwargs ) Inherits from: object Class Members: path moduleName groupType","title":"MnsBuildModuleBtn [Class]"},{"location":"buildModules/#mnsrig-class","text":"This is the main 'RIG' data class. This class's constructor will initialize and build all relevant information regarding the 'rig' top top group. As The rig topGrp has pre-defined structure, and many dependencies, all basic information will be checked every time this class is constructed. The essence of this class is first of all to build the predefined rigGroup, then, to store and parse all relevant data from the scene, as well as validating it and rebuilding any sub-components if necessary. The procedural settings UI build will be initiated if a rig top wasn't found in the current scene selection (or if there is no selection). In case a rigTop already exists, it will first be validated, then it's setting will be read and parsed, initiating the the same UI draw, in \"edit\" mode. Constructor: MnsRig( callerSubClass ( str ) ; [default: None], **kwargs ) Inherits from: object Class Members: rigTop rootGuide callerSubClass modules buildModulesBtns puppetBase baseGuide rootJnt iconsDir buildTimer loadSettingsWindow Methods: connectLODs [method] createPredefinedCnsControls [method] createRigInfo [method] failedConstructionCommand [method] setVisChannelsBasedOnCunstructMode [method] cunstructRigSpaces [method] collectBuildModules [method] createPickerLayoutBase [method] createRootGuide [method] createPickerTitleGrp [method] createPickerGuideGrp [method] createNewRigTop [method] createPickerProjectionCam [method] createSubGroupForRigTop [method] createPickerCam [method] createPuppetRootCtrl [method] createVisEnumAndConnect [method] getGlobalConstructionState [method] loadSettingsWindow [method] restorePuppetBaseDefaults [method] setConstructionMode [method] deconstructRig [method] constructRig [method] storePuppetBaseDefaults [method] destroyPuppetRootCtrl [method] createSubGrpsForRigTop [method] executeCustomScripts [method]","title":"MnsRig [Class]"},{"location":"buildModules/#mnsrig-methods","text":"","title":"MnsRig  methods"},{"location":"buildModules/#defenitions","text":"","title":"Defenitions"},{"location":"buildModules/#createmodulecompound","text":"Constructor: createModuleCompound(compoundMaster, moduleName, bmButtonList, parent, settings) Return: None Arguments: compoundMaster moduleName bmButtonList parent settings Keyword Arguments:","title":"createModuleCompound"},{"location":"buildModules/#updatemodules","text":"Constructor: updateModules(blkWin = None, rigTop = None, buildModulesBtns = [], kwargs) Return: None Arguments: blkWin ( str ) ; [default: None] rigTop ( str ) ; [default: None] buildModulesBtns ( list ) ; [default: []] kwargs Keyword Arguments:","title":"updateModules"},{"location":"buildModules/#updaterig","text":"Constructor: updateRig(blkWin = None, buildModulesBtns = [], kwargs) Return: None Arguments: blkWin ( str ) ; [default: None] buildModulesBtns ( list ) ; [default: []] kwargs Keyword Arguments:","title":"updateRig"},{"location":"buildModules/#updaterigtopattrs","text":"Constructor: updateRigTopAttrs(rigTop = None) Return: None Arguments: rigTop ( str ) ; [default: None] Keyword Arguments:","title":"updateRigTopAttrs"},{"location":"buildModules/#updaterigtopstruct","text":"Constructor: updateRigTopStruct(rigTop = None, buildModulesBtns = []) Return: None Arguments: rigTop ( str ) ; [default: None] buildModulesBtns ( list ) ; [default: []] Keyword Arguments:","title":"updateRigTopStruct"},{"location":"characterDefenitionUI/","text":"characterDefenitionUI === Author: Assaf Ben Zur === This tool was created to assist users in creating humanIK character definitions. Also, in conjunction with Block, create an animation puppet for predifined skeleton templates. Use pre-existing prests, as well as create your own presets, to characterize any skeleton in seconds. Many workflows and scenrios are covered within this tool, please refer to Mansur-Rig's You-Tube channel for a full video guide demonstratig all of them. Classes MnsCharacterDefenitionUI [Class] Main UI Class Constructor: MnsCharacterDefenitionUI( parent ( str ) ; [default: mnsUIUtils.get_maya_window()]) Inherits from: form_class, base_class Class Members: presetsDir charDefPresets charDefData blockNameSpace targetNameSpace Methods: addRowToTable [method] clearCell [method] connectSignals [method] createHIKSlotsMenu [method] clearRow [method] drawData [method] exportPreset [method] gatherCharDefData [method] getNamespaceBasedOnMode [method] importFromFile [method] importPreset [method] initializeUI [method] initView [method] initPresets [method] loadSelectedToCell [method] loadHikSlotToSelectedCells [method] loadNameSpace [method] loadWindow [method] linkHikMenuAction [method] removeRowFromTable [method] resetUI [method] editMenu [method] filterView [method] valueEdit [method] updateNameSpaceVars [method] updateSceneSelectionBasedOnUIState [method] setNameBoxStateBasedOnMode [method] MnsCharacterDefenitionUI methods addRowToTable [ MnsCharacterDefenitionUI class method] Add a new empty row trigger. Constructor: addRowToTable(self) Return: None Arguments: self Optional Arguments: clearCell [ MnsCharacterDefenitionUI class method] Clear cell trigger. Constructor: clearCell(self, position) Return: None Arguments: self position Optional Arguments: connectSignals [ MnsCharacterDefenitionUI class method] Connect all UI signals Constructor: connectSignals(self) Return: None Arguments: self Optional Arguments: createHIKSlotsMenu [ MnsCharacterDefenitionUI class method] Create the predifined HIK context menu structure. Constructor: createHIKSlotsMenu(self, rootMenuItem, position) Return: None Arguments: self rootMenuItem position Optional Arguments: clearRow [ MnsCharacterDefenitionUI class method] Delete Row trigger. Constructor: clearRow(self) Return: None Arguments: self Optional Arguments: drawData [ MnsCharacterDefenitionUI class method] Draw gathered data into the UI. Constructor: drawData(self) Return: None Arguments: self Optional Arguments: exportPreset [ MnsCharacterDefenitionUI class method] Export preset to file trigger. Constructor: exportPreset(self) Return: None Arguments: self Optional Arguments: gatherCharDefData [ MnsCharacterDefenitionUI class method] Gather character definition data from UI into a python dict. Constructor: gatherCharDefData(self) Return: None Arguments: self Optional Arguments: getNamespaceBasedOnMode [ MnsCharacterDefenitionUI class method] Get relevant namespace inpit based on mode. mode 0 = Block name-space mode 1 = Target name-space. Constructor: getNamespaceBasedOnMode(self, mode = 0) Return: None Arguments: self mode ( int ) ; [default: 0] Optional Arguments: importFromFile [ MnsCharacterDefenitionUI class method] Import preset from file trigger. Constructor: importFromFile(self) Return: None Arguments: self Optional Arguments: importPreset [ MnsCharacterDefenitionUI class method] Import preset trigger. Constructor: importPreset(self, kwargs) Return: None Arguments: self kwargs Optional Arguments: initializeUI [ MnsCharacterDefenitionUI class method] Initialize UI Data. Constructor: initializeUI(self) Return: None Arguments: self Optional Arguments: initView [ MnsCharacterDefenitionUI class method] Initialize UI default display state. Constructor: initView(self) Return: None Arguments: self Optional Arguments: initPresets [ MnsCharacterDefenitionUI class method] Initialize existing Mansur-Rig presets that are delivered with the product and update the UI list. Constructor: initPresets(self) Return: None Arguments: self Optional Arguments: loadSelectedToCell [ MnsCharacterDefenitionUI class method] Load scene selection to cell trigger. Constructor: loadSelectedToCell(self, position) Return: None Arguments: self position Optional Arguments: loadHikSlotToSelectedCells [ MnsCharacterDefenitionUI class method] Load selected HIK slot into selected cell trigger. Constructor: loadHikSlotToSelectedCells(self, text, position) Return: None Arguments: self text position Optional Arguments: loadNameSpace [ MnsCharacterDefenitionUI class method] Load selected namespace trigger. Constructor: loadNameSpace(self) Return: None Arguments: self Optional Arguments: loadWindow [ MnsCharacterDefenitionUI class method] Main UI load Constructor: loadWindow(self) Return: None Arguments: self Optional Arguments: linkHikMenuAction [ MnsCharacterDefenitionUI class method] Procedural menu items action linking to action. Constructor: linkHikMenuAction(self, menuItem, position) Return: None Arguments: self menuItem position Optional Arguments: removeRowFromTable [ MnsCharacterDefenitionUI class method] Remove Row trigger. Constructor: removeRowFromTable(self) Return: None Arguments: self Optional Arguments: resetUI [ MnsCharacterDefenitionUI class method] Reset the UI to default state. Constructor: resetUI(self) Return: None Arguments: self Optional Arguments: editMenu [ MnsCharacterDefenitionUI class method] Right-Click/Context Menu open trigger. Create a menu based on the right click position and column, and connect all actions to their related triggers. Constructor: editMenu(self, position) Return: None Arguments: self position Optional Arguments: filterView [ MnsCharacterDefenitionUI class method] Search trigger. Filter the main treeWidget list based on the input filter text. Constructor: filterView(self) Return: None Arguments: self Optional Arguments: valueEdit [ MnsCharacterDefenitionUI class method] TreeWidget Edit trigger Constructor: valueEdit(self, item, column) Return: None Arguments: self item column Optional Arguments: updateNameSpaceVars [ MnsCharacterDefenitionUI class method] Update the class member variables for both namespaces. Constructor: updateNameSpaceVars(self) Return: None Arguments: self Optional Arguments: updateSceneSelectionBasedOnUIState [ MnsCharacterDefenitionUI class method] Update the current Maya scene selection based on the selected items in the UI. In case the \"update selection\" checkbox isn't checked, this will not execute and selection will not be updated. Constructor: updateSceneSelectionBasedOnUIState(self) Return: None Arguments: self Optional Arguments: setNameBoxStateBasedOnMode [ MnsCharacterDefenitionUI class method] set the character name line-edit state base on the current UI state. Constructor: setNameBoxStateBasedOnMode(self) Return: None Arguments: self Optional Arguments: Defenitions loadCharacterDefenitionUI Load the Charecter Definition UI from globals, avoid UI duplication. Constructor: loadCharacterDefenitionUI() Return: None Arguments: Keyword Arguments:","title":"characterDefenitionUI"},{"location":"characterDefenitionUI/#characterdefenitionui","text":"=== Author: Assaf Ben Zur === This tool was created to assist users in creating humanIK character definitions. Also, in conjunction with Block, create an animation puppet for predifined skeleton templates. Use pre-existing prests, as well as create your own presets, to characterize any skeleton in seconds. Many workflows and scenrios are covered within this tool, please refer to Mansur-Rig's You-Tube channel for a full video guide demonstratig all of them.","title":"characterDefenitionUI"},{"location":"characterDefenitionUI/#classes","text":"","title":"Classes"},{"location":"characterDefenitionUI/#mnscharacterdefenitionui-class","text":"Main UI Class Constructor: MnsCharacterDefenitionUI( parent ( str ) ; [default: mnsUIUtils.get_maya_window()]) Inherits from: form_class, base_class Class Members: presetsDir charDefPresets charDefData blockNameSpace targetNameSpace Methods: addRowToTable [method] clearCell [method] connectSignals [method] createHIKSlotsMenu [method] clearRow [method] drawData [method] exportPreset [method] gatherCharDefData [method] getNamespaceBasedOnMode [method] importFromFile [method] importPreset [method] initializeUI [method] initView [method] initPresets [method] loadSelectedToCell [method] loadHikSlotToSelectedCells [method] loadNameSpace [method] loadWindow [method] linkHikMenuAction [method] removeRowFromTable [method] resetUI [method] editMenu [method] filterView [method] valueEdit [method] updateNameSpaceVars [method] updateSceneSelectionBasedOnUIState [method] setNameBoxStateBasedOnMode [method]","title":"MnsCharacterDefenitionUI [Class]"},{"location":"characterDefenitionUI/#mnscharacterdefenitionui-methods","text":"","title":"MnsCharacterDefenitionUI  methods"},{"location":"characterDefenitionUI/#defenitions","text":"","title":"Defenitions"},{"location":"characterDefenitionUI/#loadcharacterdefenitionui","text":"Load the Charecter Definition UI from globals, avoid UI duplication. Constructor: loadCharacterDefenitionUI() Return: None Arguments: Keyword Arguments:","title":"loadCharacterDefenitionUI"},{"location":"chassis/","text":"chassis Author: Asaf Ben-Zur Best used for: chasis This module will yield a four corner controls, which will be avaraged determine the main control's translation and orientation. Defenitions construct Constructor: construct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments: customGuides Constructor: customGuides(mansur, builtGuides) Return: None Arguments: mansur builtGuides Keyword Arguments:","title":"Chassis"},{"location":"chassis/#chassis","text":"Author: Asaf Ben-Zur Best used for: chasis This module will yield a four corner controls, which will be avaraged determine the main control's translation and orientation.","title":"chassis"},{"location":"chassis/#defenitions","text":"","title":"Defenitions"},{"location":"chassis/#construct","text":"Constructor: construct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"construct"},{"location":"chassis/#customguides","text":"Constructor: customGuides(mansur, builtGuides) Return: None Arguments: mansur builtGuides Keyword Arguments:","title":"customGuides"},{"location":"chassis_settings/","text":"chassis Settings Author: Asaf Ben-Zur Best used for: Wheels Attributes GlobalSettings Attribute Name Default Description forwardAxis 2 Forward direction of the vehicle. This will determine the up direction for the slave orientation. pivotsControlShape diamond Chasis pivots control shape slaveControlShape cube Main slave control shape groundControls Attribute Name Default Description doGroundCtrls False Create ground controls groundControlShape arrow ground controls shape","title":"Chassis settings"},{"location":"chassis_settings/#chassis-settings","text":"Author: Asaf Ben-Zur Best used for: Wheels","title":"chassis Settings"},{"location":"chassis_settings/#attributes","text":"","title":"Attributes"},{"location":"chassis_settings/#globalsettings","text":"Attribute Name Default Description forwardAxis 2 Forward direction of the vehicle. This will determine the up direction for the slave orientation. pivotsControlShape diamond Chasis pivots control shape slaveControlShape cube Main slave control shape","title":"GlobalSettings"},{"location":"chassis_settings/#groundcontrols","text":"Attribute Name Default Description doGroundCtrls False Create ground controls groundControlShape arrow ground controls shape","title":"groundControls"},{"location":"cnsTool/","text":"cnsTool === Author: Assaf Ben Zur === Classes MnsCnsTool [Class] Main UI Class Constructor: MnsCnsTool( parent ( str ) ; [default: mnsUIUtils.get_maya_window()]) Inherits from: form_class, base_class Class Members: rigTops existingCnsDict Methods: createCnsForSelection [method] initializeUI [method] removeCnsFromSelection [method] selectCnsFromTree [method] connectSignals [method] loadWindow [method] MnsCnsTool methods createCnsForSelection [ MnsCnsTool class method] Constructor: createCnsForSelection(self) Return: None Arguments: self Optional Arguments: initializeUI [ MnsCnsTool class method] Constructor: initializeUI(self) Return: None Arguments: self Optional Arguments: removeCnsFromSelection [ MnsCnsTool class method] Constructor: removeCnsFromSelection(self) Return: None Arguments: self Optional Arguments: selectCnsFromTree [ MnsCnsTool class method] Constructor: selectCnsFromTree(self) Return: None Arguments: self Optional Arguments: connectSignals [ MnsCnsTool class method] Connect all UI signals Constructor: connectSignals(self) Return: None Arguments: self Optional Arguments: loadWindow [ MnsCnsTool class method] Main UI load Constructor: loadWindow(self) Return: None Arguments: self Optional Arguments: Defenitions loadCnsTool Load the cns tool UI from globals, avoid UI duplication. Constructor: loadCnsTool() Return: None Arguments: Keyword Arguments:","title":"cnsTool"},{"location":"cnsTool/#cnstool","text":"=== Author: Assaf Ben Zur ===","title":"cnsTool"},{"location":"cnsTool/#classes","text":"","title":"Classes"},{"location":"cnsTool/#mnscnstool-class","text":"Main UI Class Constructor: MnsCnsTool( parent ( str ) ; [default: mnsUIUtils.get_maya_window()]) Inherits from: form_class, base_class Class Members: rigTops existingCnsDict Methods: createCnsForSelection [method] initializeUI [method] removeCnsFromSelection [method] selectCnsFromTree [method] connectSignals [method] loadWindow [method]","title":"MnsCnsTool [Class]"},{"location":"cnsTool/#mnscnstool-methods","text":"","title":"MnsCnsTool  methods"},{"location":"cnsTool/#defenitions","text":"","title":"Defenitions"},{"location":"cnsTool/#loadcnstool","text":"Load the cns tool UI from globals, avoid UI duplication. Constructor: loadCnsTool() Return: None Arguments: Keyword Arguments:","title":"loadCnsTool"},{"location":"controlShapes/","text":"controlShapes === Author: Assaf Ben Zur === Core control shapes creation function assembly. A main CtrlCreate function calls a veriaty of pre-defined shape creation, then handles them Defenitions arrowDodecagonShapeCreate Constructor: arrowDodecagonShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: arrowShapeCreate Constructor: arrowShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: arrowSquareShapeCreate Constructor: arrowSquareShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: batchCreateAllControlShapes Constructor: batchCreateAllControlShapes( kwargs) Return: None Arguments: kwargs Keyword Arguments: side ( str ) ; [default: c] color ( tuple ) ; [default: (0.0, 1.0, 0.0)] batchCreateAllControlShapesIcons Constructor: batchCreateAllControlShapesIcons() Return: None Arguments: Keyword Arguments: bubblePinShapeCreate Constructor: bubblePinShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: circleShapeCreate Constructor: circleShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: sections ( int ) ; [default: 8] coneShapeCreate Constructor: coneShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: createMirrorGroup Constructor: createMirrorGroup(nameStd, symmetryType = 0) Return: None Arguments: nameStd symmetryType ( int ) ; [default: 0] Keyword Arguments: createOffsetRigMasterAttrForTransform Constructor: createOffsetRigMasterAttrForTransform(ctrl = None, kwargs) Return: None Arguments: ctrl ( str ) ; [default: None] kwargs Keyword Arguments: offsetRigMaster ( str ) ; [default: None] - If passed in, an attribute connecting the master joint to the control will be created. createRemoteControlStyleCtrl creates a frames ui remote-control style ctrl based on the input params. Constructor: createRemoteControlStyleCtrl( kwargs) Return: None Arguments: kwargs Keyword Arguments: crossShapeCreate Constructor: crossShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: ctrlCreate Main creation function. This function takes user defined parameters and creates a ctrl transform node following the mns naming convention. Based on the choice passed in, a shape node will be created with the shape selected, and will be parented under the transform ceated. Then a color selected will be assigned to it. The ctrl can be set to be created along all axes and in every color. The default color is white when used as standalone, and based on the rig's global color coding defined- based on the side flag. Constructor: ctrlCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: cubeShapeCreate Constructor: cubeShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: curvedFourArrowShapeCreate Constructor: curvedFourArrowShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: cylinderShapeCreate Constructor: cylinderShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: dialRoundShapeCreate Constructor: dialRoundShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: dialShapeCreate Constructor: dialShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: dialSquareShapeCreate Constructor: dialSquareShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: diamondShapeCreate Constructor: diamondShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: directionCircle Constructor: directionCircle( kwargs) Return: None Arguments: kwargs Keyword Arguments: directionCubeShape Constructor: directionCubeShape( kwargs) Return: None Arguments: kwargs Keyword Arguments: directionDiamond Constructor: directionDiamond( kwargs) Return: None Arguments: kwargs Keyword Arguments: directionSphereShape Constructor: directionSphereShape( kwargs) Return: None Arguments: kwargs Keyword Arguments: dodecagonShapeCreate Constructor: dodecagonShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: doubleArrowShapeCreate Constructor: doubleArrowShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: flatDiamondRootShapeCreate Constructor: flatDiamondRootShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: flatDiamondShapeCreate Constructor: flatDiamondShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: fourArrowShapeCreate Constructor: fourArrowShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: guidesRootShape Constructor: guidesRootShape( kwargs) Return: None Arguments: kwargs Keyword Arguments: hexagonShapeCreate Constructor: hexagonShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: lightSphereShapeCreate Constructor: lightSphereShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: octagonShapeCreate Constructor: octagonShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: pickShapeCreate Constructor: pickShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: pinShapeCreate Constructor: pinShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: light ( bool ) ; [default: True] pinchedCircleShapeCreate Constructor: pinchedCircleShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: plusShapeCreate Constructor: plusShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: pointArrowShapeCreate Constructor: pointArrowShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: puppetRootShapeCreate Constructor: puppetRootShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: pyramidShapeCreate Constructor: pyramidShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: sphereShapeCreate Constructor: sphereShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: squareRoundShapeCreate Constructor: squareRoundShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: squareShapeCreate Constructor: squareShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: squareWithMidDividersShapeCreate Constructor: squareWithMidDividersShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: teardropShapeCreate Constructor: teardropShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: textShapeCreate Constructor: textShapeCreate(text = \"\") Return: None Arguments: text ( str ) ; [default: \"\"] Keyword Arguments: triangleShapeCreate Constructor: triangleShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: tripleArrowShapeCreate Constructor: tripleArrowShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"controlShapes"},{"location":"controlShapes/#controlshapes","text":"=== Author: Assaf Ben Zur === Core control shapes creation function assembly. A main CtrlCreate function calls a veriaty of pre-defined shape creation, then handles them","title":"controlShapes"},{"location":"controlShapes/#defenitions","text":"","title":"Defenitions"},{"location":"controlShapes/#arrowdodecagonshapecreate","text":"Constructor: arrowDodecagonShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"arrowDodecagonShapeCreate"},{"location":"controlShapes/#arrowshapecreate","text":"Constructor: arrowShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"arrowShapeCreate"},{"location":"controlShapes/#arrowsquareshapecreate","text":"Constructor: arrowSquareShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"arrowSquareShapeCreate"},{"location":"controlShapes/#batchcreateallcontrolshapes","text":"Constructor: batchCreateAllControlShapes( kwargs) Return: None Arguments: kwargs Keyword Arguments: side ( str ) ; [default: c] color ( tuple ) ; [default: (0.0, 1.0, 0.0)]","title":"batchCreateAllControlShapes"},{"location":"controlShapes/#batchcreateallcontrolshapesicons","text":"Constructor: batchCreateAllControlShapesIcons() Return: None Arguments: Keyword Arguments:","title":"batchCreateAllControlShapesIcons"},{"location":"controlShapes/#bubblepinshapecreate","text":"Constructor: bubblePinShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"bubblePinShapeCreate"},{"location":"controlShapes/#circleshapecreate","text":"Constructor: circleShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: sections ( int ) ; [default: 8]","title":"circleShapeCreate"},{"location":"controlShapes/#coneshapecreate","text":"Constructor: coneShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"coneShapeCreate"},{"location":"controlShapes/#createmirrorgroup","text":"Constructor: createMirrorGroup(nameStd, symmetryType = 0) Return: None Arguments: nameStd symmetryType ( int ) ; [default: 0] Keyword Arguments:","title":"createMirrorGroup"},{"location":"controlShapes/#createoffsetrigmasterattrfortransform","text":"Constructor: createOffsetRigMasterAttrForTransform(ctrl = None, kwargs) Return: None Arguments: ctrl ( str ) ; [default: None] kwargs Keyword Arguments: offsetRigMaster ( str ) ; [default: None] - If passed in, an attribute connecting the master joint to the control will be created.","title":"createOffsetRigMasterAttrForTransform"},{"location":"controlShapes/#createremotecontrolstylectrl","text":"creates a frames ui remote-control style ctrl based on the input params. Constructor: createRemoteControlStyleCtrl( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"createRemoteControlStyleCtrl"},{"location":"controlShapes/#crossshapecreate","text":"Constructor: crossShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"crossShapeCreate"},{"location":"controlShapes/#ctrlcreate","text":"Main creation function. This function takes user defined parameters and creates a ctrl transform node following the mns naming convention. Based on the choice passed in, a shape node will be created with the shape selected, and will be parented under the transform ceated. Then a color selected will be assigned to it. The ctrl can be set to be created along all axes and in every color. The default color is white when used as standalone, and based on the rig's global color coding defined- based on the side flag. Constructor: ctrlCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"ctrlCreate"},{"location":"controlShapes/#cubeshapecreate","text":"Constructor: cubeShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"cubeShapeCreate"},{"location":"controlShapes/#curvedfourarrowshapecreate","text":"Constructor: curvedFourArrowShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"curvedFourArrowShapeCreate"},{"location":"controlShapes/#cylindershapecreate","text":"Constructor: cylinderShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"cylinderShapeCreate"},{"location":"controlShapes/#dialroundshapecreate","text":"Constructor: dialRoundShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"dialRoundShapeCreate"},{"location":"controlShapes/#dialshapecreate","text":"Constructor: dialShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"dialShapeCreate"},{"location":"controlShapes/#dialsquareshapecreate","text":"Constructor: dialSquareShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"dialSquareShapeCreate"},{"location":"controlShapes/#diamondshapecreate","text":"Constructor: diamondShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"diamondShapeCreate"},{"location":"controlShapes/#directioncircle","text":"Constructor: directionCircle( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"directionCircle"},{"location":"controlShapes/#directioncubeshape","text":"Constructor: directionCubeShape( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"directionCubeShape"},{"location":"controlShapes/#directiondiamond","text":"Constructor: directionDiamond( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"directionDiamond"},{"location":"controlShapes/#directionsphereshape","text":"Constructor: directionSphereShape( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"directionSphereShape"},{"location":"controlShapes/#dodecagonshapecreate","text":"Constructor: dodecagonShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"dodecagonShapeCreate"},{"location":"controlShapes/#doublearrowshapecreate","text":"Constructor: doubleArrowShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"doubleArrowShapeCreate"},{"location":"controlShapes/#flatdiamondrootshapecreate","text":"Constructor: flatDiamondRootShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"flatDiamondRootShapeCreate"},{"location":"controlShapes/#flatdiamondshapecreate","text":"Constructor: flatDiamondShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"flatDiamondShapeCreate"},{"location":"controlShapes/#fourarrowshapecreate","text":"Constructor: fourArrowShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"fourArrowShapeCreate"},{"location":"controlShapes/#guidesrootshape","text":"Constructor: guidesRootShape( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"guidesRootShape"},{"location":"controlShapes/#hexagonshapecreate","text":"Constructor: hexagonShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"hexagonShapeCreate"},{"location":"controlShapes/#lightsphereshapecreate","text":"Constructor: lightSphereShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"lightSphereShapeCreate"},{"location":"controlShapes/#octagonshapecreate","text":"Constructor: octagonShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"octagonShapeCreate"},{"location":"controlShapes/#pickshapecreate","text":"Constructor: pickShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"pickShapeCreate"},{"location":"controlShapes/#pinshapecreate","text":"Constructor: pinShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments: light ( bool ) ; [default: True]","title":"pinShapeCreate"},{"location":"controlShapes/#pinchedcircleshapecreate","text":"Constructor: pinchedCircleShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"pinchedCircleShapeCreate"},{"location":"controlShapes/#plusshapecreate","text":"Constructor: plusShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"plusShapeCreate"},{"location":"controlShapes/#pointarrowshapecreate","text":"Constructor: pointArrowShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"pointArrowShapeCreate"},{"location":"controlShapes/#puppetrootshapecreate","text":"Constructor: puppetRootShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"puppetRootShapeCreate"},{"location":"controlShapes/#pyramidshapecreate","text":"Constructor: pyramidShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"pyramidShapeCreate"},{"location":"controlShapes/#sphereshapecreate","text":"Constructor: sphereShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"sphereShapeCreate"},{"location":"controlShapes/#squareroundshapecreate","text":"Constructor: squareRoundShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"squareRoundShapeCreate"},{"location":"controlShapes/#squareshapecreate","text":"Constructor: squareShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"squareShapeCreate"},{"location":"controlShapes/#squarewithmiddividersshapecreate","text":"Constructor: squareWithMidDividersShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"squareWithMidDividersShapeCreate"},{"location":"controlShapes/#teardropshapecreate","text":"Constructor: teardropShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"teardropShapeCreate"},{"location":"controlShapes/#textshapecreate","text":"Constructor: textShapeCreate(text = \"\") Return: None Arguments: text ( str ) ; [default: \"\"] Keyword Arguments:","title":"textShapeCreate"},{"location":"controlShapes/#triangleshapecreate","text":"Constructor: triangleShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"triangleShapeCreate"},{"location":"controlShapes/#triplearrowshapecreate","text":"Constructor: tripleArrowShapeCreate( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"tripleArrowShapeCreate"},{"location":"curveAttachment/","text":"curveAttachment Author: Asaf Ben-Zur Best used for: Sliding doors, curtains This is a simple module that allows a control attachment to a given curve. The attachment can also be created with an offset to current position, as well as some attachment modes and up modes. Use this module in case you need to attach a control or joint to a curve Defenitions construct Constructor: construct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"curveAttachment"},{"location":"curveAttachment/#curveattachment","text":"Author: Asaf Ben-Zur Best used for: Sliding doors, curtains This is a simple module that allows a control attachment to a given curve. The attachment can also be created with an offset to current position, as well as some attachment modes and up modes. Use this module in case you need to attach a control or joint to a curve","title":"curveAttachment"},{"location":"curveAttachment/#defenitions","text":"","title":"Defenitions"},{"location":"curveAttachment/#construct","text":"Constructor: construct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"construct"},{"location":"curveAttachment_settings/","text":"curveAttachment Settings Author: Asaf Ben-Zur Best used for: Sliding doors, curtains This is a simple module that allows a control attachment to a given curve. The attachment can also be created with an offset to current position, as well as some attachment modes and up modes. Use this module in case you need to attach a control or joint to a curve Attributes symmetryType 0 Choose the mirror type for right side controls GlobalSettings Attribute Name Default Description controlShape arrow Control shape attachmentCurve Curve to attach to. attachmentUpCurve Up curve to use. This curve will be used to determine the up vector of the created ctrl. In case this isn't used, global module orient will be used. objectOrientUpAxis 0 In case no up curve is used, this global module rotation axis will be used attachmentMode 0 Curve sampling mode. Please refer to the documentation of mnsPointsOnCurve node to learn more about curve each mode maintainOffset True Whether to maintain control to curve offset of construction. In case this is True, the guide position will be maintained. In case this is False, the ctrl will be created at U0 position of the input attachment curve. channelControl T R S X v v v Y v v v Z v v v Control channel-box settings","title":"curveAttachment settings"},{"location":"curveAttachment_settings/#curveattachment-settings","text":"Author: Asaf Ben-Zur Best used for: Sliding doors, curtains This is a simple module that allows a control attachment to a given curve. The attachment can also be created with an offset to current position, as well as some attachment modes and up modes. Use this module in case you need to attach a control or joint to a curve","title":"curveAttachment Settings"},{"location":"curveAttachment_settings/#attributes","text":"symmetryType 0 Choose the mirror type for right side controls","title":"Attributes"},{"location":"curveAttachment_settings/#globalsettings","text":"Attribute Name Default Description controlShape arrow Control shape attachmentCurve Curve to attach to. attachmentUpCurve Up curve to use. This curve will be used to determine the up vector of the created ctrl. In case this isn't used, global module orient will be used. objectOrientUpAxis 0 In case no up curve is used, this global module rotation axis will be used attachmentMode 0 Curve sampling mode. Please refer to the documentation of mnsPointsOnCurve node to learn more about curve each mode maintainOffset True Whether to maintain control to curve offset of construction. In case this is True, the guide position will be maintained. In case this is False, the ctrl will be created at U0 position of the input attachment curve. channelControl T R S X v v v Y v v v Z v v v Control channel-box settings","title":"GlobalSettings"},{"location":"curveZip/","text":"curveZip Author: Asaf Ben-Zur Best used for: This module is deprecated. Please use CurveZipB. Defenitions connectCustomGuidesToPoc Constructor: connectCustomGuidesToPoc(mansur, guides, cGuides) Return: None Arguments: mansur guides cGuides Keyword Arguments: construct Constructor: construct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments: createBindCurvesFromModuleSettings Constructor: createBindCurvesFromModuleSettings(mansur, rootGuide = None) Return: None Arguments: mansur rootGuide ( str ) ; [default: None] Keyword Arguments: createTangentsForCtrl Constructor: createTangentsForCtrl(mansur, MnsBuildModule, ctrl, btcNode, cornerACtrl, cornerBCtrl, nameID, doCornerTangents, mainCtrl) Return: None Arguments: mansur MnsBuildModule ctrl btcNode cornerACtrl cornerBCtrl nameID doCornerTangents mainCtrl Keyword Arguments: customGuides Constructor: customGuides(mansur, builtGuides) Return: None Arguments: mansur builtGuides Keyword Arguments: deconstruct Constructor: deconstruct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments: getEdgesFromModuleSettings Constructor: getEdgesFromModuleSettings(mansur, rootGuide = None) Return: None Arguments: mansur rootGuide ( str ) ; [default: None] Keyword Arguments: jointStructure Constructor: jointStructure(mansur, guides, mnsBuildModule = None, kwargs) Return: None Arguments: mansur guides mnsBuildModule ( str ) ; [default: None] kwargs Keyword Arguments:","title":"curveZip"},{"location":"curveZip/#curvezip","text":"Author: Asaf Ben-Zur Best used for: This module is deprecated. Please use CurveZipB.","title":"curveZip"},{"location":"curveZip/#defenitions","text":"","title":"Defenitions"},{"location":"curveZip/#connectcustomguidestopoc","text":"Constructor: connectCustomGuidesToPoc(mansur, guides, cGuides) Return: None Arguments: mansur guides cGuides Keyword Arguments:","title":"connectCustomGuidesToPoc"},{"location":"curveZip/#construct","text":"Constructor: construct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"construct"},{"location":"curveZip/#createbindcurvesfrommodulesettings","text":"Constructor: createBindCurvesFromModuleSettings(mansur, rootGuide = None) Return: None Arguments: mansur rootGuide ( str ) ; [default: None] Keyword Arguments:","title":"createBindCurvesFromModuleSettings"},{"location":"curveZip/#createtangentsforctrl","text":"Constructor: createTangentsForCtrl(mansur, MnsBuildModule, ctrl, btcNode, cornerACtrl, cornerBCtrl, nameID, doCornerTangents, mainCtrl) Return: None Arguments: mansur MnsBuildModule ctrl btcNode cornerACtrl cornerBCtrl nameID doCornerTangents mainCtrl Keyword Arguments:","title":"createTangentsForCtrl"},{"location":"curveZip/#customguides","text":"Constructor: customGuides(mansur, builtGuides) Return: None Arguments: mansur builtGuides Keyword Arguments:","title":"customGuides"},{"location":"curveZip/#deconstruct","text":"Constructor: deconstruct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"deconstruct"},{"location":"curveZip/#getedgesfrommodulesettings","text":"Constructor: getEdgesFromModuleSettings(mansur, rootGuide = None) Return: None Arguments: mansur rootGuide ( str ) ; [default: None] Keyword Arguments:","title":"getEdgesFromModuleSettings"},{"location":"curveZip/#jointstructure","text":"Constructor: jointStructure(mansur, guides, mnsBuildModule = None, kwargs) Return: None Arguments: mansur guides mnsBuildModule ( str ) ; [default: None] kwargs Keyword Arguments:","title":"jointStructure"},{"location":"curveZipB/","text":"curveZipB Author: Asaf Ben-Zur Best used for: Eyelids, Eyelashes This facial module was created to allow adavnced control over eyelids and eyelashes. Based on settings, this module will create a very flexible control over eyelids, and if choosen (Attachment Curves) to eyelashes on top of the eyelids as well. The main features of this modules are: Joint positions based on a center matrix (Around the eye), Blink controls, Blink height control, Eyelid tweak controls (dynamic), Zip controls, and much more. The joint structure of this module will be dictated by input vertices on a given mesh. Note: Please select upper and lower vertices along a single closed loop Defenitions connectCustomGuidesToPoc Constructor: connectCustomGuidesToPoc(mansur, guides, cGuides) Return: None Arguments: mansur guides cGuides Keyword Arguments: construct Constructor: construct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments: createBindCurvesFromModuleSettings Constructor: createBindCurvesFromModuleSettings(mansur, rootGuide = None) Return: None Arguments: mansur rootGuide ( str ) ; [default: None] Keyword Arguments: createTangentsForCtrl Constructor: createTangentsForCtrl(mansur, MnsBuildModule, ctrl, btcNode, cornerACtrl, cornerBCtrl, nameID, doCornerTangents, mainCtrl) Return: None Arguments: mansur MnsBuildModule ctrl btcNode cornerACtrl cornerBCtrl nameID doCornerTangents mainCtrl Keyword Arguments: customGuides Constructor: customGuides(mansur, builtGuides) Return: None Arguments: mansur builtGuides Keyword Arguments: deconstruct Constructor: deconstruct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments: getEdgesFromModuleSettings Constructor: getEdgesFromModuleSettings(mansur, rootGuide = None) Return: None Arguments: mansur rootGuide ( str ) ; [default: None] Keyword Arguments: jointStructure Constructor: jointStructure(mansur, guides, mnsBuildModule = None, kwargs) Return: None Arguments: mansur guides mnsBuildModule ( str ) ; [default: None] kwargs Keyword Arguments:","title":"curveZipB"},{"location":"curveZipB/#curvezipb","text":"Author: Asaf Ben-Zur Best used for: Eyelids, Eyelashes This facial module was created to allow adavnced control over eyelids and eyelashes. Based on settings, this module will create a very flexible control over eyelids, and if choosen (Attachment Curves) to eyelashes on top of the eyelids as well. The main features of this modules are: Joint positions based on a center matrix (Around the eye), Blink controls, Blink height control, Eyelid tweak controls (dynamic), Zip controls, and much more. The joint structure of this module will be dictated by input vertices on a given mesh. Note: Please select upper and lower vertices along a single closed loop","title":"curveZipB"},{"location":"curveZipB/#defenitions","text":"","title":"Defenitions"},{"location":"curveZipB/#connectcustomguidestopoc","text":"Constructor: connectCustomGuidesToPoc(mansur, guides, cGuides) Return: None Arguments: mansur guides cGuides Keyword Arguments:","title":"connectCustomGuidesToPoc"},{"location":"curveZipB/#construct","text":"Constructor: construct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"construct"},{"location":"curveZipB/#createbindcurvesfrommodulesettings","text":"Constructor: createBindCurvesFromModuleSettings(mansur, rootGuide = None) Return: None Arguments: mansur rootGuide ( str ) ; [default: None] Keyword Arguments:","title":"createBindCurvesFromModuleSettings"},{"location":"curveZipB/#createtangentsforctrl","text":"Constructor: createTangentsForCtrl(mansur, MnsBuildModule, ctrl, btcNode, cornerACtrl, cornerBCtrl, nameID, doCornerTangents, mainCtrl) Return: None Arguments: mansur MnsBuildModule ctrl btcNode cornerACtrl cornerBCtrl nameID doCornerTangents mainCtrl Keyword Arguments:","title":"createTangentsForCtrl"},{"location":"curveZipB/#customguides","text":"Constructor: customGuides(mansur, builtGuides) Return: None Arguments: mansur builtGuides Keyword Arguments:","title":"customGuides"},{"location":"curveZipB/#deconstruct","text":"Constructor: deconstruct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"deconstruct"},{"location":"curveZipB/#getedgesfrommodulesettings","text":"Constructor: getEdgesFromModuleSettings(mansur, rootGuide = None) Return: None Arguments: mansur rootGuide ( str ) ; [default: None] Keyword Arguments:","title":"getEdgesFromModuleSettings"},{"location":"curveZipB/#jointstructure","text":"Constructor: jointStructure(mansur, guides, mnsBuildModule = None, kwargs) Return: None Arguments: mansur guides mnsBuildModule ( str ) ; [default: None] kwargs Keyword Arguments:","title":"jointStructure"},{"location":"curveZipB_settings/","text":"curveZipB Settings Author: Asaf Ben-Zur Best used for: Eyelids, Eyelashes This facial module was created to allow adavnced control over eyelids and eyelashes. Based on settings, this module will create a very flexible control over eyelids, and if choosen (Attachment Curves) to eyelashes on top of the eyelids as well. The main features of this modules are: Joint positions based on a center matrix (Around the eye), Blink controls, Blink height control, Eyelid tweak controls (dynamic), Zip controls, and much more. The joint structure of this module will be dictated by input vertices on a given mesh. Note: Please select upper and lower vertices along a single closed loop, selecting each section from inner corener to outer corenr. Attributes isFacial True Comment wasn't inserted GlobalSettings Attribute Name Default Description upperEdgeVerts [' '] These verticies will be used to build the joint structure for the upper section. Please select a sequence of vertices along the same loop, starting from the inner corner. First and last vertices should match between the upper and lower section, representing a single closed loop. Corner vertices will be present twice- once on the upper section, once on the lower section lowerEdgeVerts [' '] These verticies will be used to build the joint structure for the lower section. Please select a sequence of vertices along the same loop, starting from the inner corner. First and last vertices should match between the upper and lower section, representing a single closed loop. Corner vertices will be present twice- once on the upper section, once on the lower section upCurveOffset 1.0 Offset value for the up curve generation doBindTweak False This is used to create editable curves at guides state, in order to change the bind position for eyelids. This was designed mainly for a closed eye scenario. If you need to tweak the bind position of your mesh pre-construction, check this attribute on. Pre-Construction, skin your mesh then save a bind pose for this module. Then, tweak the curves to their desired construction pose, and save it T pose for this module. You can move between the bind and t shapes by loading bind or t pose ofr this module. aroundCenter True Around center will normalize the result vectors around a given center matrix (module root in this case). This will provide a better range of motion, tranlating the joints around a sphere (assumed from the center matrix). Place your roog guide at the center of the eye (for example) for this to behave as expected curveResolution 24 Resample curve amount midCurveMode 1 Mid curve generation mode midCurveResolution 5 Mid curve generation sampling amount blinkHeight 0.5 Default value for the Blink height. This dictates the height of the Mid-Meet point between the upper and lower sections postSymmetryJntStruct True Comment wasn't inserted EyelidsControls Attribute Name Default Description raiseRange 0.5 This value dictates the upper and lower controls opposite direction movement range. uiCtrlsScale 0.15 Scale multiplier for the remote control style controls for upper and lower lids uiCtrlsPositionOffset 1.0 Offset value (Pointing away from the root guide) to offset the remote control style controls doZipControls True Create the Zip controls feature TweakCcontrols Attribute Name Default Description doTweakControls True Build the tweak controls feature for this module numTweakControlsPerSection 3 The amount of tweak controls per section (lower and upper) cornersControlShape diamond Tweak corners controls shape tweakersControlShape lightSphere Tweak controls shape tweakCurvesInterpolation 1 Tweak controls interpolation type flipRightX False Comment wasn't inserted flipRightY False Comment wasn't inserted flipRightZ False Comment wasn't inserted FollowRotation Attribute Name Default Description doFollowRotation False This feture is mainly used for eye configurations. Follow rotation will create a new layer of orientation control, allowing the animator th choose the amount follow desired based on the given eye module input. This is commonly known as Fleshy-Eye jntToFollow The joint orientation to follow horizontalFollow 0.05 Horizontal follow default value verticalFollow 0.1 Vertical follow default value UpperAttachmentCrv Attribute Name Default Description doUpperAttachment False This feature is mainly used to create another layer of controls for eyelashes. Since eyelashes should always follow the eyelids outline shape, common tendency is to simply skin them to the eyelid joints. Although in some cases, eyelashes control is required or desired. This feature will create a slave curve based controls layer that will allow for eyelash control, on top of the master eyelid solve that drives the main animation upperJntCount 2 The amount of upper-attachment joints to create LowerAttachmentCrv Attribute Name Default Description doLowerAttachment False This feature is mainly used to create another layer of controls for eyelashes. Since eyelashes should always follow the eyelids outline shape, common tendency is to simply skin them to the eyelid joints. Although in some cases, eyelashes control is required or desired. This feature will create a slave curve based controls layer that will allow for eyelash control, on top of the master eyelid solve that drives the main animation lowerJntCount 2 The amount of lower-attachment joints to create","title":"curveZipB settings"},{"location":"curveZipB_settings/#curvezipb-settings","text":"Author: Asaf Ben-Zur Best used for: Eyelids, Eyelashes This facial module was created to allow adavnced control over eyelids and eyelashes. Based on settings, this module will create a very flexible control over eyelids, and if choosen (Attachment Curves) to eyelashes on top of the eyelids as well. The main features of this modules are: Joint positions based on a center matrix (Around the eye), Blink controls, Blink height control, Eyelid tweak controls (dynamic), Zip controls, and much more. The joint structure of this module will be dictated by input vertices on a given mesh. Note: Please select upper and lower vertices along a single closed loop, selecting each section from inner corener to outer corenr.","title":"curveZipB Settings"},{"location":"curveZipB_settings/#attributes","text":"isFacial True Comment wasn't inserted","title":"Attributes"},{"location":"curveZipB_settings/#globalsettings","text":"Attribute Name Default Description upperEdgeVerts [' '] These verticies will be used to build the joint structure for the upper section. Please select a sequence of vertices along the same loop, starting from the inner corner. First and last vertices should match between the upper and lower section, representing a single closed loop. Corner vertices will be present twice- once on the upper section, once on the lower section lowerEdgeVerts [' '] These verticies will be used to build the joint structure for the lower section. Please select a sequence of vertices along the same loop, starting from the inner corner. First and last vertices should match between the upper and lower section, representing a single closed loop. Corner vertices will be present twice- once on the upper section, once on the lower section upCurveOffset 1.0 Offset value for the up curve generation doBindTweak False This is used to create editable curves at guides state, in order to change the bind position for eyelids. This was designed mainly for a closed eye scenario. If you need to tweak the bind position of your mesh pre-construction, check this attribute on. Pre-Construction, skin your mesh then save a bind pose for this module. Then, tweak the curves to their desired construction pose, and save it T pose for this module. You can move between the bind and t shapes by loading bind or t pose ofr this module. aroundCenter True Around center will normalize the result vectors around a given center matrix (module root in this case). This will provide a better range of motion, tranlating the joints around a sphere (assumed from the center matrix). Place your roog guide at the center of the eye (for example) for this to behave as expected curveResolution 24 Resample curve amount midCurveMode 1 Mid curve generation mode midCurveResolution 5 Mid curve generation sampling amount blinkHeight 0.5 Default value for the Blink height. This dictates the height of the Mid-Meet point between the upper and lower sections postSymmetryJntStruct True Comment wasn't inserted","title":"GlobalSettings"},{"location":"curveZipB_settings/#eyelidscontrols","text":"Attribute Name Default Description raiseRange 0.5 This value dictates the upper and lower controls opposite direction movement range. uiCtrlsScale 0.15 Scale multiplier for the remote control style controls for upper and lower lids uiCtrlsPositionOffset 1.0 Offset value (Pointing away from the root guide) to offset the remote control style controls doZipControls True Create the Zip controls feature","title":"EyelidsControls"},{"location":"curveZipB_settings/#tweakccontrols","text":"Attribute Name Default Description doTweakControls True Build the tweak controls feature for this module numTweakControlsPerSection 3 The amount of tweak controls per section (lower and upper) cornersControlShape diamond Tweak corners controls shape tweakersControlShape lightSphere Tweak controls shape tweakCurvesInterpolation 1 Tweak controls interpolation type flipRightX False Comment wasn't inserted flipRightY False Comment wasn't inserted flipRightZ False Comment wasn't inserted","title":"TweakCcontrols"},{"location":"curveZipB_settings/#followrotation","text":"Attribute Name Default Description doFollowRotation False This feture is mainly used for eye configurations. Follow rotation will create a new layer of orientation control, allowing the animator th choose the amount follow desired based on the given eye module input. This is commonly known as Fleshy-Eye jntToFollow The joint orientation to follow horizontalFollow 0.05 Horizontal follow default value verticalFollow 0.1 Vertical follow default value","title":"FollowRotation"},{"location":"curveZipB_settings/#upperattachmentcrv","text":"Attribute Name Default Description doUpperAttachment False This feature is mainly used to create another layer of controls for eyelashes. Since eyelashes should always follow the eyelids outline shape, common tendency is to simply skin them to the eyelid joints. Although in some cases, eyelashes control is required or desired. This feature will create a slave curve based controls layer that will allow for eyelash control, on top of the master eyelid solve that drives the main animation upperJntCount 2 The amount of upper-attachment joints to create","title":"UpperAttachmentCrv"},{"location":"curveZipB_settings/#lowerattachmentcrv","text":"Attribute Name Default Description doLowerAttachment False This feature is mainly used to create another layer of controls for eyelashes. Since eyelashes should always follow the eyelids outline shape, common tendency is to simply skin them to the eyelid joints. Although in some cases, eyelashes control is required or desired. This feature will create a slave curve based controls layer that will allow for eyelash control, on top of the master eyelid solve that drives the main animation lowerJntCount 2 The amount of lower-attachment joints to create","title":"LowerAttachmentCrv"},{"location":"curveZip_settings/","text":"curveZip Settings Author: Asaf Ben-Zur Best used for: This module is deprecated. Please use CurveZipB. Attributes isFacial True Comment wasn't inserted GlobalSettings Attribute Name Default Description upperEdgeVerts [' '] This module is depreciated, please use curveZipB lowerEdgeVerts [' '] This module is depreciated, please use curveZipB upCurveOffset 1.0 This module is depreciated, please use curveZipB reverseCorners False This module is depreciated, please use curveZipB aroundCenter True This module is depreciated, please use curveZipB curveResolution 24 This module is depreciated, please use curveZipB blinkHeight 0.5 This module is depreciated, please use curveZipB postSymmetryJntStruct True This module is depreciated, please use curveZipB ZipControls Attribute Name Default Description raiseRange 0.5 This module is depreciated, please use curveZipB uiCtrlsScale 0.15 This module is depreciated, please use curveZipB uiCtrlsPositionOffset 0.5 This module is depreciated, please use curveZipB TweakCcontrols Attribute Name Default Description doTweakControls True This module is depreciated, please use curveZipB numTweakControlsPerSection 3 This module is depreciated, please use curveZipB cornersControlShape diamond This module is depreciated, please use curveZipB tweakersControlShape lightSphere This module is depreciated, please use curveZipB tweakCurvesInterpolation 1 This module is depreciated, please use curveZipB offsetX 20.0 This module is depreciated, please use curveZipB offsetZ 0.0 This module is depreciated, please use curveZipB doTweakTangents False This module is depreciated, please use curveZipB doCornerTangents False This module is depreciated, please use curveZipB BlinkTweak Attribute Name Default Description doBlinkTweak True This module is depreciated, please use curveZipB blinkTweakControlShape diamond This module is depreciated, please use curveZipB FollowRotation Attribute Name Default Description doFollowRotation False This module is depreciated, please use curveZipB jntToFollow This module is depreciated, please use curveZipB horizontalFollow 0.05 This module is depreciated, please use curveZipB verticalFollow 0.1 This module is depreciated, please use curveZipB UpperAttachmentCrv Attribute Name Default Description doUpperAttachment False This module is depreciated, please use curveZipB upperJntCount 2 This module is depreciated, please use curveZipB LowerAttachmentCrv Attribute Name Default Description doLowerAttachment False This module is depreciated, please use curveZipB lowerJntCount 2 This module is depreciated, please use curveZipB","title":"curveZip settings"},{"location":"curveZip_settings/#curvezip-settings","text":"Author: Asaf Ben-Zur Best used for: This module is deprecated. Please use CurveZipB.","title":"curveZip Settings"},{"location":"curveZip_settings/#attributes","text":"isFacial True Comment wasn't inserted","title":"Attributes"},{"location":"curveZip_settings/#globalsettings","text":"Attribute Name Default Description upperEdgeVerts [' '] This module is depreciated, please use curveZipB lowerEdgeVerts [' '] This module is depreciated, please use curveZipB upCurveOffset 1.0 This module is depreciated, please use curveZipB reverseCorners False This module is depreciated, please use curveZipB aroundCenter True This module is depreciated, please use curveZipB curveResolution 24 This module is depreciated, please use curveZipB blinkHeight 0.5 This module is depreciated, please use curveZipB postSymmetryJntStruct True This module is depreciated, please use curveZipB","title":"GlobalSettings"},{"location":"curveZip_settings/#zipcontrols","text":"Attribute Name Default Description raiseRange 0.5 This module is depreciated, please use curveZipB uiCtrlsScale 0.15 This module is depreciated, please use curveZipB uiCtrlsPositionOffset 0.5 This module is depreciated, please use curveZipB","title":"ZipControls"},{"location":"curveZip_settings/#tweakccontrols","text":"Attribute Name Default Description doTweakControls True This module is depreciated, please use curveZipB numTweakControlsPerSection 3 This module is depreciated, please use curveZipB cornersControlShape diamond This module is depreciated, please use curveZipB tweakersControlShape lightSphere This module is depreciated, please use curveZipB tweakCurvesInterpolation 1 This module is depreciated, please use curveZipB offsetX 20.0 This module is depreciated, please use curveZipB offsetZ 0.0 This module is depreciated, please use curveZipB doTweakTangents False This module is depreciated, please use curveZipB doCornerTangents False This module is depreciated, please use curveZipB","title":"TweakCcontrols"},{"location":"curveZip_settings/#blinktweak","text":"Attribute Name Default Description doBlinkTweak True This module is depreciated, please use curveZipB blinkTweakControlShape diamond This module is depreciated, please use curveZipB","title":"BlinkTweak"},{"location":"curveZip_settings/#followrotation","text":"Attribute Name Default Description doFollowRotation False This module is depreciated, please use curveZipB jntToFollow This module is depreciated, please use curveZipB horizontalFollow 0.05 This module is depreciated, please use curveZipB verticalFollow 0.1 This module is depreciated, please use curveZipB","title":"FollowRotation"},{"location":"curveZip_settings/#upperattachmentcrv","text":"Attribute Name Default Description doUpperAttachment False This module is depreciated, please use curveZipB upperJntCount 2 This module is depreciated, please use curveZipB","title":"UpperAttachmentCrv"},{"location":"curveZip_settings/#lowerattachmentcrv","text":"Attribute Name Default Description doLowerAttachment False This module is depreciated, please use curveZipB lowerJntCount 2 This module is depreciated, please use curveZipB","title":"LowerAttachmentCrv"},{"location":"defSearch/","text":"defSearch === Author: Assaf Ben Zur === Core MNS Utility UI This UI will allow the user to search though all available function within a given library and build a dynamic UI for it, based on it's arguments and keyword arguments drawen as 'type' QObjects into a new UI window. This UI class will search thorugh the default library (mns), although has functionallity to add any library into the search. IMPORTANT: Any given custom library needs to follow the mns code structure convension in order to work and sraw properly. Please refer to some code examples. The main process of this UI class is: - Load the UI - procedurally look through the given libraries and add any found python defenition into the UI list. - Uppon a 'UI creation' call (via the button or souble-click): - Deconstruct the selected defenition into mandatory arguments and keyword arguments - Build a new UI based on the parameters got. - Uppon a 'Run' call: - Re-construct the function's argument based on the UI fields and recompile into a string - Call the selected function using the complied arguent string Features: - Prefs tab to control the UI's behavior. - Directory addition - Indepentent custom '.py' files add - Library reload - 'Default Prefs restore' - Settings export/import - Function 'pinning' (Global, session independent) - UI features - Search, Case-Sensative display, Pinned view only, clear all pinns - 'dev mode': - When set to False (default) the UI call will create a new UI only if it han't been created before- meaning that the UI objects are kept within the UI class, and when closed will not lose their user-set values. When called again, the UI will simply re-load- not re-create to keep previous set values. The function will not be read again to build. When set to True, instead of re-loading of a previously created UI- it will be deleted- and recreated, READING THE FUNCTION AGAIN. This allows the user to re-read a function every time the UI is called- that means that all previous value set will be lost- as the UI rebuilds it will set all items to default value. This gives a very fast way of developing a function- not needing to re-load maya after edit- The UI will rebuild based on any change made to the defenition code, adding any new items or running a different fuctionallity every run call. Use this feature when writing or developing a new fuction. Classes MnsDefSearch [Class] Main UI Class Constructor: MnsDefSearch( parent ( str ) ; [default: mnsUIUtils.get_maya_window()]) Inherits from: form_class, base_class Class Members: pinnedFilePath Methods: initializePinnedDir [method] clearResults [method] clearPins [method] connectSignals [method] importModules [method] loadWindow [method] updateResults [method] createUI [method] loadList [method] addModuleToResults [method] addPackageToResults [method] pin [method] pinnedOnlyView [method] import_submodules [method] reloadResults [method] MnsDefSearch methods initializePinnedDir [ MnsDefSearch class method] Constructor: initializePinnedDir(self) Return: None Arguments: self Optional Arguments: clearResults [ MnsDefSearch class method] Clear Serach method trigger. Constructor: clearResults(self) Return: None Arguments: self Optional Arguments: clearPins [ MnsDefSearch class method] Clear all pinns method trigger. Constructor: clearPins(self) Return: None Arguments: self Optional Arguments: connectSignals [ MnsDefSearch class method] Connect all UI signals Constructor: connectSignals(self) Return: None Arguments: self Optional Arguments: importModules [ MnsDefSearch class method] Import modules wrapper. Constructor: importModules(self) Return: None Arguments: self Optional Arguments: loadWindow [ MnsDefSearch class method] Main UI load Constructor: loadWindow(self) Return: None Arguments: self Optional Arguments: updateResults [ MnsDefSearch class method] Main UI view update method trigger. The UI list will be updated from this method based on the current UI state and prefs Constructor: updateResults(self) Return: None Arguments: self Optional Arguments: createUI [ MnsDefSearch class method] Main dynamic UI creation method trigger based on current selection. Constructor: createUI(self) Return: None Arguments: self Optional Arguments: loadList [ MnsDefSearch class method] Main list load method. A wrapper to filter all functions based on prefs selected and update the UI. Constructor: loadList(self) Return: None Arguments: self Optional Arguments: addModuleToResults [ MnsDefSearch class method] Module add method trigger. Constructor: addModuleToResults(self, module) Return: None Arguments: self module Optional Arguments: addPackageToResults [ MnsDefSearch class method] Package addition method trigger. Constructor: addPackageToResults(self, package) Return: None Arguments: self package Optional Arguments: pin [ MnsDefSearch class method] Pin call method trigger based on current selection. Constructor: pin(self) Return: None Arguments: self Optional Arguments: pinnedOnlyView [ MnsDefSearch class method] Pinned only view trigger method. Constructor: pinnedOnlyView(self, state) Return: None Arguments: self state Optional Arguments: import_submodules [ MnsDefSearch class method] Recursive method to walk thorugh a given package and sub-packages to store all sub-directories within. Constructor: import_submodules(self, package, recursive=True) Return: dict Arguments: self package recursive ( bool ) ; [default: True] Optional Arguments: reloadResults [ MnsDefSearch class method] Wrapper re-load method. Constructor: reloadResults(self) Return: None Arguments: self Optional Arguments: Defenitions loadDefSearch Load the Def Serach UI from globals, avoid UI duplication. Constructor: loadDefSearch() Return: None Arguments: Keyword Arguments:","title":"defSearch"},{"location":"defSearch/#defsearch","text":"=== Author: Assaf Ben Zur === Core MNS Utility UI This UI will allow the user to search though all available function within a given library and build a dynamic UI for it, based on it's arguments and keyword arguments drawen as 'type' QObjects into a new UI window. This UI class will search thorugh the default library (mns), although has functionallity to add any library into the search. IMPORTANT: Any given custom library needs to follow the mns code structure convension in order to work and sraw properly. Please refer to some code examples. The main process of this UI class is: - Load the UI - procedurally look through the given libraries and add any found python defenition into the UI list. - Uppon a 'UI creation' call (via the button or souble-click): - Deconstruct the selected defenition into mandatory arguments and keyword arguments - Build a new UI based on the parameters got. - Uppon a 'Run' call: - Re-construct the function's argument based on the UI fields and recompile into a string - Call the selected function using the complied arguent string Features: - Prefs tab to control the UI's behavior. - Directory addition - Indepentent custom '.py' files add - Library reload - 'Default Prefs restore' - Settings export/import - Function 'pinning' (Global, session independent) - UI features - Search, Case-Sensative display, Pinned view only, clear all pinns - 'dev mode': - When set to False (default) the UI call will create a new UI only if it han't been created before- meaning that the UI objects are kept within the UI class, and when closed will not lose their user-set values. When called again, the UI will simply re-load- not re-create to keep previous set values. The function will not be read again to build. When set to True, instead of re-loading of a previously created UI- it will be deleted- and recreated, READING THE FUNCTION AGAIN. This allows the user to re-read a function every time the UI is called- that means that all previous value set will be lost- as the UI rebuilds it will set all items to default value. This gives a very fast way of developing a function- not needing to re-load maya after edit- The UI will rebuild based on any change made to the defenition code, adding any new items or running a different fuctionallity every run call. Use this feature when writing or developing a new fuction.","title":"defSearch"},{"location":"defSearch/#classes","text":"","title":"Classes"},{"location":"defSearch/#mnsdefsearch-class","text":"Main UI Class Constructor: MnsDefSearch( parent ( str ) ; [default: mnsUIUtils.get_maya_window()]) Inherits from: form_class, base_class Class Members: pinnedFilePath Methods: initializePinnedDir [method] clearResults [method] clearPins [method] connectSignals [method] importModules [method] loadWindow [method] updateResults [method] createUI [method] loadList [method] addModuleToResults [method] addPackageToResults [method] pin [method] pinnedOnlyView [method] import_submodules [method] reloadResults [method]","title":"MnsDefSearch [Class]"},{"location":"defSearch/#mnsdefsearch-methods","text":"","title":"MnsDefSearch  methods"},{"location":"defSearch/#defenitions","text":"","title":"Defenitions"},{"location":"defSearch/#loaddefsearch","text":"Load the Def Serach UI from globals, avoid UI duplication. Constructor: loadDefSearch() Return: None Arguments: Keyword Arguments:","title":"loadDefSearch"},{"location":"docBuildMansur/","text":"docBuildMansur === Author: Assaf Ben Zur === Core procedural documentation build Process flow: Read a given directory Build a structure based on the os directory given and the folders to filter Filter only .py files For each py file: Extract Header (such as this one) Extract Defenition Extract Def name and constructor Extract Arguments, and Optional Arguments Extract return Extract Classes Extract Header Extract Name and constructor Extract inheritence Extract Class members Extract Methods Extract Header Extract Name and constructor Extract Arguments and Optional Arguments Extract return rebuild the yml file given write the files within the 'docs' directory This procedural approach for a code documentation build ensures an up-to-date documentation based on code commenting. No additional actions are neccessery. This will yeild a readable commented code with will math the documentation 1-to-1. Also, this will yeild a very \"easy to change\" approach for the documentation generator of choice as well as a 100% cohirent documentation throuout. Defenitions appendMayaPluginsToYml Append the Maya-Plugins documentation page into the existing yml struct. Constructor: appendMayaPluginsToYml(ymlPath, parentPageName) Return: None Arguments: ymlPath parentPageName Keyword Arguments: buildDocItems Main dir build recursive function. The function builds only directory items, which in turn will be searched for '.py' files, and will be added to the structure only if in contains a direct '.py' within, or if a directory within comatins one, recursively. Depth independent. Constructor: buildDocItems(dir, rootDir, level, ymlPath, fileLines) Return: None Arguments: dir rootDir level ymlPath fileLines Keyword Arguments: buildDocsForDir Main build wrapper and the yml file writer wrapper function. Calls 'buildDocItems' within which in turn build the actual html files within the 'docs' directory. Finally re-writes the yml file using 'rebuildYmlFile' according to the file structure acquired Constructor: buildDocsForDir(mkDocksYmlPath, parentPageName, directory, folders, level = 0) Return: None Arguments: mkDocksYmlPath parentPageName directory folders level ( int ) ; [default: 0] Keyword Arguments: buildFileDoc Main file def. This is a wrapped def as well as a function one. Compiles all needed documentation from a given file path. Will compile Classes, methods, defenitions (icluding all relevant information for each) Constructor: buildFileDoc(path, ymlPath) Return: None Arguments: path ymlPath Keyword Arguments: buildMansurDocs Main wrapper call for the MANSUR directory doc build. Contains the requested folders within, hard-coded for safety. Constructor: buildMansurDocs() Return: None Arguments: Keyword Arguments: buildModSettingsFileDoc Constructor: buildModSettingsFileDoc(path, ymlPath) Return: None Arguments: path ymlPath Keyword Arguments: buildReleaseNotesPage Constructor: buildReleaseNotesPage(mkDocksYmlPath) Return: None Arguments: mkDocksYmlPath Keyword Arguments: buildSubItemsDir Last level recursive function. This function will call the documentation file build as well as build the last meanu item within the structure. The final pythonLib item is passed in, as well as the root directory and the current level and the yml path in order to write the new yml lines correctly, depending on the file's level position. Constructor: buildSubItemsDir(rootDir, pyLib, level, ymlPath, fileLines) Return: None Arguments: rootDir pyLib level ymlPath fileLines Keyword Arguments: collectHeaderFromCppFile For the given cpp file, extract the header comment. Constructor: collectHeaderFromCppFile(cppFullPath = None) Return: None Arguments: cppFullPath ( str ) ; [default: None] Keyword Arguments: commitAndDeployDocumentation Constructor: commitAndDeployDocumentation(rootDrive = \"d\", relativeDirectory = \"mansurProject\\mansur-docs\", kwargs) Return: None Arguments: rootDrive ( str ) ; [default: \"d\"] relativeDirectory ( str ) ; [default: \"mansurProject\\mansur-docs\"] kwargs Keyword Arguments: createPluginDocFile Create the Maya-Plugins attributes documentation page. Constructor: createPluginDocFile(rootBuildPath = \"D/mansurProject/mayaPlugins\", ymlPath = \"D/mansurProject/mansur-docs/mkdocs.yml\") Return: None Arguments: rootBuildPath ( str ) ; [default: \"D:/mansurProject/mayaPlugins\"] ymlPath ( str ) ; [default: \"D:/mansurProject/mansur-docs/mkdocs.yml\"] Keyword Arguments: extractAttributeDefenitionsFromCppFile From the given cpp path given, extract all attribute information. Constructor: extractAttributeDefenitionsFromCppFile(cppFullPath = None, buildName = None) Return: None Arguments: cppFullPath ( str ) ; [default: None] buildName ( str ) ; [default: None] Keyword Arguments: extractClassMembersFromInitSrc Extracts class members from a Class' init method source as list Constructor: extractClassMembersFromInitSrc(src = []) Return: None Arguments: src ( list ) ; [default: []] Keyword Arguments: extractConstructorValuesForClass Extracts constructor related values from a class source as list. Wrapper def. Extracts both Arguments (flattened) and class members Constructor: extractConstructorValuesForClass(src = []) Return: None Arguments: src ( list ) ; [default: []] Keyword Arguments: extractDocsForClass Wrapped def. Extracts full documentation from a given class source. Constructor: extractDocsForClass(classSrc = []) Return: None Arguments: classSrc ( list ) ; [default: []] Keyword Arguments: extractDocsForDef Wrapper def for a full doc extraction for a given file souce as list. extracts return statement, title, header, arguments and optionalArguments Constructor: extractDocsForDef(defSrc = []) Return: None Arguments: defSrc ( list ) ; [default: []] Keyword Arguments: extractHeaderFromSrc Extracts a header if exsits from a given elemnt src (Class/Def/Method) as list Constructor: extractHeaderFromSrc(src = [], kwargs) Return: None Arguments: src ( list ) ; [default: []] kwargs Keyword Arguments: extractMethodsfromClassSrc Splits a given class source to orginized dict containing it's methods sources Constructor: extractMethodsfromClassSrc(src = []) Return: None Arguments: src ( list ) ; [default: []] Keyword Arguments: extractParametersFromDefSrc Extract parametrs from a given def source as list Extracts arguments and optional arguments Constructor: extractParametersFromDefSrc(src = []) Return: None Arguments: src ( list ) ; [default: []] Keyword Arguments: gatherPluginDocumentation From the build directory given, extract attributes data directly from the cpp files. compile the data into input/uotput lists containing dict info for all attributes. Constructor: gatherPluginDocumentation(rootBuildPath = \"D/mansurProject/mayaPlugins\") Return: None Arguments: rootBuildPath ( str ) ; [default: \"D:/mansurProject/mayaPlugins\"] Keyword Arguments: getParameterForMnsArg Extracts arguments from a given def source lines as list Constructor: getParameterForMnsArg(arg) Return: string (flattened combined arguments) Arguments: arg Keyword Arguments: getPyLibForDir This is a complex recursive function that will assemble a file structure from a given path directory. The assembly will filter ONLY folders that contain at least one '.py' file, and ONLY '.py' files. This function returns a dictionary containing the file and folder structure as keys \"dirs\" and \"files\" respectively. Constructor: getPyLibForDir(root) Return: None Arguments: root Keyword Arguments: rebuildYmlFile yml writer function. Writes the given yml file passed, with the new 'lines' passed. The yml 'parentPageName' is passed as an argument - the new 'lines' build is constructed underneeth. Existing required info is preserved by calculating the parent item indentation level, keeping every item with lower or matching level. Every item under the parent item passed in a higher level is removed or reconstructed. Constructor: rebuildYmlFile(ymlPath, parentPageName, lines) Return: None Arguments: ymlPath parentPageName lines Keyword Arguments:","title":"docBuildMansur"},{"location":"docBuildMansur/#docbuildmansur","text":"=== Author: Assaf Ben Zur === Core procedural documentation build Process flow: Read a given directory Build a structure based on the os directory given and the folders to filter Filter only .py files For each py file: Extract Header (such as this one) Extract Defenition Extract Def name and constructor Extract Arguments, and Optional Arguments Extract return Extract Classes Extract Header Extract Name and constructor Extract inheritence Extract Class members Extract Methods Extract Header Extract Name and constructor Extract Arguments and Optional Arguments Extract return rebuild the yml file given write the files within the 'docs' directory This procedural approach for a code documentation build ensures an up-to-date documentation based on code commenting. No additional actions are neccessery. This will yeild a readable commented code with will math the documentation 1-to-1. Also, this will yeild a very \"easy to change\" approach for the documentation generator of choice as well as a 100% cohirent documentation throuout.","title":"docBuildMansur"},{"location":"docBuildMansur/#defenitions","text":"","title":"Defenitions"},{"location":"docBuildMansur/#appendmayapluginstoyml","text":"Append the Maya-Plugins documentation page into the existing yml struct. Constructor: appendMayaPluginsToYml(ymlPath, parentPageName) Return: None Arguments: ymlPath parentPageName Keyword Arguments:","title":"appendMayaPluginsToYml"},{"location":"docBuildMansur/#builddocitems","text":"Main dir build recursive function. The function builds only directory items, which in turn will be searched for '.py' files, and will be added to the structure only if in contains a direct '.py' within, or if a directory within comatins one, recursively. Depth independent. Constructor: buildDocItems(dir, rootDir, level, ymlPath, fileLines) Return: None Arguments: dir rootDir level ymlPath fileLines Keyword Arguments:","title":"buildDocItems"},{"location":"docBuildMansur/#builddocsfordir","text":"Main build wrapper and the yml file writer wrapper function. Calls 'buildDocItems' within which in turn build the actual html files within the 'docs' directory. Finally re-writes the yml file using 'rebuildYmlFile' according to the file structure acquired Constructor: buildDocsForDir(mkDocksYmlPath, parentPageName, directory, folders, level = 0) Return: None Arguments: mkDocksYmlPath parentPageName directory folders level ( int ) ; [default: 0] Keyword Arguments:","title":"buildDocsForDir"},{"location":"docBuildMansur/#buildfiledoc","text":"Main file def. This is a wrapped def as well as a function one. Compiles all needed documentation from a given file path. Will compile Classes, methods, defenitions (icluding all relevant information for each) Constructor: buildFileDoc(path, ymlPath) Return: None Arguments: path ymlPath Keyword Arguments:","title":"buildFileDoc"},{"location":"docBuildMansur/#buildmansurdocs","text":"Main wrapper call for the MANSUR directory doc build. Contains the requested folders within, hard-coded for safety. Constructor: buildMansurDocs() Return: None Arguments: Keyword Arguments:","title":"buildMansurDocs"},{"location":"docBuildMansur/#buildmodsettingsfiledoc","text":"Constructor: buildModSettingsFileDoc(path, ymlPath) Return: None Arguments: path ymlPath Keyword Arguments:","title":"buildModSettingsFileDoc"},{"location":"docBuildMansur/#buildreleasenotespage","text":"Constructor: buildReleaseNotesPage(mkDocksYmlPath) Return: None Arguments: mkDocksYmlPath Keyword Arguments:","title":"buildReleaseNotesPage"},{"location":"docBuildMansur/#buildsubitemsdir","text":"Last level recursive function. This function will call the documentation file build as well as build the last meanu item within the structure. The final pythonLib item is passed in, as well as the root directory and the current level and the yml path in order to write the new yml lines correctly, depending on the file's level position. Constructor: buildSubItemsDir(rootDir, pyLib, level, ymlPath, fileLines) Return: None Arguments: rootDir pyLib level ymlPath fileLines Keyword Arguments:","title":"buildSubItemsDir"},{"location":"docBuildMansur/#collectheaderfromcppfile","text":"For the given cpp file, extract the header comment. Constructor: collectHeaderFromCppFile(cppFullPath = None) Return: None Arguments: cppFullPath ( str ) ; [default: None] Keyword Arguments:","title":"collectHeaderFromCppFile"},{"location":"docBuildMansur/#commitanddeploydocumentation","text":"Constructor: commitAndDeployDocumentation(rootDrive = \"d\", relativeDirectory = \"mansurProject\\mansur-docs\", kwargs) Return: None Arguments: rootDrive ( str ) ; [default: \"d\"] relativeDirectory ( str ) ; [default: \"mansurProject\\mansur-docs\"] kwargs Keyword Arguments:","title":"commitAndDeployDocumentation"},{"location":"docBuildMansur/#createplugindocfile","text":"Create the Maya-Plugins attributes documentation page. Constructor: createPluginDocFile(rootBuildPath = \"D/mansurProject/mayaPlugins\", ymlPath = \"D/mansurProject/mansur-docs/mkdocs.yml\") Return: None Arguments: rootBuildPath ( str ) ; [default: \"D:/mansurProject/mayaPlugins\"] ymlPath ( str ) ; [default: \"D:/mansurProject/mansur-docs/mkdocs.yml\"] Keyword Arguments:","title":"createPluginDocFile"},{"location":"docBuildMansur/#extractattributedefenitionsfromcppfile","text":"From the given cpp path given, extract all attribute information. Constructor: extractAttributeDefenitionsFromCppFile(cppFullPath = None, buildName = None) Return: None Arguments: cppFullPath ( str ) ; [default: None] buildName ( str ) ; [default: None] Keyword Arguments:","title":"extractAttributeDefenitionsFromCppFile"},{"location":"docBuildMansur/#extractclassmembersfrominitsrc","text":"Extracts class members from a Class' init method source as list Constructor: extractClassMembersFromInitSrc(src = []) Return: None Arguments: src ( list ) ; [default: []] Keyword Arguments:","title":"extractClassMembersFromInitSrc"},{"location":"docBuildMansur/#extractconstructorvaluesforclass","text":"Extracts constructor related values from a class source as list. Wrapper def. Extracts both Arguments (flattened) and class members Constructor: extractConstructorValuesForClass(src = []) Return: None Arguments: src ( list ) ; [default: []] Keyword Arguments:","title":"extractConstructorValuesForClass"},{"location":"docBuildMansur/#extractdocsforclass","text":"Wrapped def. Extracts full documentation from a given class source. Constructor: extractDocsForClass(classSrc = []) Return: None Arguments: classSrc ( list ) ; [default: []] Keyword Arguments:","title":"extractDocsForClass"},{"location":"docBuildMansur/#extractdocsfordef","text":"Wrapper def for a full doc extraction for a given file souce as list. extracts return statement, title, header, arguments and optionalArguments Constructor: extractDocsForDef(defSrc = []) Return: None Arguments: defSrc ( list ) ; [default: []] Keyword Arguments:","title":"extractDocsForDef"},{"location":"docBuildMansur/#extractheaderfromsrc","text":"Extracts a header if exsits from a given elemnt src (Class/Def/Method) as list Constructor: extractHeaderFromSrc(src = [], kwargs) Return: None Arguments: src ( list ) ; [default: []] kwargs Keyword Arguments:","title":"extractHeaderFromSrc"},{"location":"docBuildMansur/#extractmethodsfromclasssrc","text":"Splits a given class source to orginized dict containing it's methods sources Constructor: extractMethodsfromClassSrc(src = []) Return: None Arguments: src ( list ) ; [default: []] Keyword Arguments:","title":"extractMethodsfromClassSrc"},{"location":"docBuildMansur/#extractparametersfromdefsrc","text":"Extract parametrs from a given def source as list Extracts arguments and optional arguments Constructor: extractParametersFromDefSrc(src = []) Return: None Arguments: src ( list ) ; [default: []] Keyword Arguments:","title":"extractParametersFromDefSrc"},{"location":"docBuildMansur/#gatherplugindocumentation","text":"From the build directory given, extract attributes data directly from the cpp files. compile the data into input/uotput lists containing dict info for all attributes. Constructor: gatherPluginDocumentation(rootBuildPath = \"D/mansurProject/mayaPlugins\") Return: None Arguments: rootBuildPath ( str ) ; [default: \"D:/mansurProject/mayaPlugins\"] Keyword Arguments:","title":"gatherPluginDocumentation"},{"location":"docBuildMansur/#getparameterformnsarg","text":"Extracts arguments from a given def source lines as list Constructor: getParameterForMnsArg(arg) Return: string (flattened combined arguments) Arguments: arg Keyword Arguments:","title":"getParameterForMnsArg"},{"location":"docBuildMansur/#getpylibfordir","text":"This is a complex recursive function that will assemble a file structure from a given path directory. The assembly will filter ONLY folders that contain at least one '.py' file, and ONLY '.py' files. This function returns a dictionary containing the file and folder structure as keys \"dirs\" and \"files\" respectively. Constructor: getPyLibForDir(root) Return: None Arguments: root Keyword Arguments:","title":"getPyLibForDir"},{"location":"docBuildMansur/#rebuildymlfile","text":"yml writer function. Writes the given yml file passed, with the new 'lines' passed. The yml 'parentPageName' is passed as an argument - the new 'lines' build is constructed underneeth. Existing required info is preserved by calculating the parent item indentation level, keeping every item with lower or matching level. Every item under the parent item passed in a higher level is removed or reconstructed. Constructor: rebuildYmlFile(ymlPath, parentPageName, lines) Return: None Arguments: ymlPath parentPageName lines Keyword Arguments:","title":"rebuildYmlFile"},{"location":"dynUI/","text":"dynUI === Author: Assaf Ben Zur === Supporting module for the 'defSearch' UI Class. This module build the base UI for any function UI build called from the defSerach UI. The build is based on a .ui base file, constructing an empty UI that will accomedate the dynamic UI elemnts requested. This module also holds the RunCmd. The run command will filter and get any elemnt value based on it's type and recompile an argument string to pass into the function requested. A template icon is created as well as an empty 'title' item to be changed after creation base on the function name requested. Classes MnsDynamicDefUI [Class] Main UI class Constructor: MnsDynamicDefUI( defenition , parent ( str ) ; [default: mnsUIUtils.get_maya_window()], **kwargs ) Inherits from: form_class, base_class Class Members: funObjectCreation closeOnApplyEnabled readOnly defenition arguments optArguments txtFields attrComponentPairing defenitionName title preDefinedArgs sideCB colOverride rigTop split multiTypeEdit batchEdit splitLayout dividerLayout allCollapsible widgetRelationships rootGuide modArgs mainVLayout customRunCommand fullList Methods: destroyUI [method] resetToFactory [method] setCollapsibleWidgetsBehaviour [method] closeEvent [method] keyPressEvent [method] toggleAllCollapsed [method] assembleFeildValues [method] drawUI [method] loadUI [method] runCmd [method] drawTitle [method] MnsDynamicDefUI methods destroyUI [ MnsDynamicDefUI class method] Constructor: destroyUI(self) Return: None Arguments: self Optional Arguments: resetToFactory [ MnsDynamicDefUI class method] Constructor: resetToFactory(self) Return: None Arguments: self Optional Arguments: setCollapsibleWidgetsBehaviour [ MnsDynamicDefUI class method] Constructor: setCollapsibleWidgetsBehaviour(self) Return: None Arguments: self Optional Arguments: closeEvent [ MnsDynamicDefUI class method] Constructor: closeEvent(self, event) Return: None Arguments: self event Optional Arguments: keyPressEvent [ MnsDynamicDefUI class method] Constructor: keyPressEvent(self, event) Return: None Arguments: self event Optional Arguments: toggleAllCollapsed [ MnsDynamicDefUI class method] Constructor: toggleAllCollapsed(self, pressedColWid) Return: None Arguments: self pressedColWid Optional Arguments: assembleFeildValues [ MnsDynamicDefUI class method] Assemble all UI values into a list Constructor: assembleFeildValues(self) Return: list Arguments: self Optional Arguments: drawUI [ MnsDynamicDefUI class method] Main UI draw method. Constructor: drawUI(self) Return: None Arguments: self Optional Arguments: loadUI [ MnsDynamicDefUI class method] Main UI load. Constructor: loadUI(self) Return: None Arguments: self Optional Arguments: runCmd [ MnsDynamicDefUI class method] Main method run command trigger. Constructor: runCmd(self) Return: None Arguments: self Optional Arguments: drawTitle [ MnsDynamicDefUI class method] Title set method. Constructor: drawTitle(self) Return: None Arguments: self Optional Arguments:","title":"dynUI"},{"location":"dynUI/#dynui","text":"=== Author: Assaf Ben Zur === Supporting module for the 'defSearch' UI Class. This module build the base UI for any function UI build called from the defSerach UI. The build is based on a .ui base file, constructing an empty UI that will accomedate the dynamic UI elemnts requested. This module also holds the RunCmd. The run command will filter and get any elemnt value based on it's type and recompile an argument string to pass into the function requested. A template icon is created as well as an empty 'title' item to be changed after creation base on the function name requested.","title":"dynUI"},{"location":"dynUI/#classes","text":"","title":"Classes"},{"location":"dynUI/#mnsdynamicdefui-class","text":"Main UI class Constructor: MnsDynamicDefUI( defenition , parent ( str ) ; [default: mnsUIUtils.get_maya_window()], **kwargs ) Inherits from: form_class, base_class Class Members: funObjectCreation closeOnApplyEnabled readOnly defenition arguments optArguments txtFields attrComponentPairing defenitionName title preDefinedArgs sideCB colOverride rigTop split multiTypeEdit batchEdit splitLayout dividerLayout allCollapsible widgetRelationships rootGuide modArgs mainVLayout customRunCommand fullList Methods: destroyUI [method] resetToFactory [method] setCollapsibleWidgetsBehaviour [method] closeEvent [method] keyPressEvent [method] toggleAllCollapsed [method] assembleFeildValues [method] drawUI [method] loadUI [method] runCmd [method] drawTitle [method]","title":"MnsDynamicDefUI [Class]"},{"location":"dynUI/#mnsdynamicdefui-methods","text":"","title":"MnsDynamicDefUI  methods"},{"location":"foot/","text":"foot Author: Asaf Ben-Zur Best used for: Foot This Module was created for a foot setup mainly. Some of it's main features are FK controls, BK (backward kinematics) controls, Roll control, Bank Controls, Heel and Tip controls, Dynamic pivot control. The best application for this module is placing it under a limb module, which will result in a connected (standard) behaviour. Defenitions construct Constructor: construct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments: createIKMuteForCtrl Constructor: createIKMuteForCtrl(mansur, ctrl, ikFkAttr, kwargs) Return: None Arguments: mansur ctrl ikFkAttr kwargs Keyword Arguments: customGuides Constructor: customGuides(mansur, builtGuides) Return: None Arguments: mansur builtGuides Keyword Arguments: jointStructure Constructor: jointStructure(mansur, guides, mnsBuildModule = None, kwargs) Return: None Arguments: mansur guides mnsBuildModule ( str ) ; [default: None] kwargs Keyword Arguments: postConstruct Constructor: postConstruct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"Foot"},{"location":"foot/#foot","text":"Author: Asaf Ben-Zur Best used for: Foot This Module was created for a foot setup mainly. Some of it's main features are FK controls, BK (backward kinematics) controls, Roll control, Bank Controls, Heel and Tip controls, Dynamic pivot control. The best application for this module is placing it under a limb module, which will result in a connected (standard) behaviour.","title":"foot"},{"location":"foot/#defenitions","text":"","title":"Defenitions"},{"location":"foot/#construct","text":"Constructor: construct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"construct"},{"location":"foot/#createikmuteforctrl","text":"Constructor: createIKMuteForCtrl(mansur, ctrl, ikFkAttr, kwargs) Return: None Arguments: mansur ctrl ikFkAttr kwargs Keyword Arguments:","title":"createIKMuteForCtrl"},{"location":"foot/#customguides","text":"Constructor: customGuides(mansur, builtGuides) Return: None Arguments: mansur builtGuides Keyword Arguments:","title":"customGuides"},{"location":"foot/#jointstructure","text":"Constructor: jointStructure(mansur, guides, mnsBuildModule = None, kwargs) Return: None Arguments: mansur guides mnsBuildModule ( str ) ; [default: None] kwargs Keyword Arguments:","title":"jointStructure"},{"location":"foot/#postconstruct","text":"Constructor: postConstruct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"postConstruct"},{"location":"foot_settings/","text":"foot Settings Author: Asaf Ben-Zur Best used for: Foot This Module was created for a foot setup mainly. Some of it's main features are FK controls, BK (backward kinematics) controls, Roll control, Bank Controls, Heel and Tip controls, Dynamic pivot control. The best application for this module is placing it under a limb module, which will result in a connected (standard) behaviour. Attributes ToesFK Attribute Name Default Description FKControlShape cube Toes FK controls shape FKChannelControl T R S X v v v Y v v v Z v v v Toes FK controls channel-box settings ToesBK Attribute Name Default Description BKControlShape diamond BK (Backward Kinematics) controls shape BKChannelControl T R S X v Y v Z v BK controls channel-box settings BankControls Attribute Name Default Description bankControlShape lightSphere Bank controls shape bankChannelControl T R S X v Y v Z v bank controls channel-box settings RollControl Attribute Name Default Description doRollCtrl True If this is True, a foot Roll control will be created rollControlShape cylinder Roll control channel-box settings rollDefaultMaxAngle 60.0 Default Roll maximum limit angle. The roll control is used to roll the entire foot chain, and using an angle value to limit the roll of each section, before rolling the next section. This value will be used as default straightenDefaultAngle 130.0 Default straighten angle. The foot toes will straighten between the max angle above and this angle. As the angle passes the above angle, along the range up to this angle, the rool angle will decrease- strightening the foot on the up position. DynamicPivotControl Attribute Name Default Description doDynamicPivCtrl True This feature will create a control that will try to trace the desired foot shape with it's pivot when rotating it. When choosing to create this control, use the relevant guide's shape to trace the outline of your foot dynamicPivControlShape lightSphere Dynamic roll control shape mapRotXTo 2 as this feature uses local channels, it is essential to map input values correctly. Please map the correct axes based on the orientation of your guide mapRotYTo 3 as this feature uses local channels, it is essential to map input values correctly. Please map the correct axes based on the orientation of your guide mapRotZTo 6 as this feature uses local channels, it is essential to map input values correctly. Please map the correct axes based on the orientation of your guide distRateMultiplier 5.0 This feature will use the translation of a run-away transform to acquire the best pivot location along the given outline shape. This value will dictate the speed of translation dynamicPivChannelControl T R S X v Y v Z Roll control channel-box settings","title":"Foot settings"},{"location":"foot_settings/#foot-settings","text":"Author: Asaf Ben-Zur Best used for: Foot This Module was created for a foot setup mainly. Some of it's main features are FK controls, BK (backward kinematics) controls, Roll control, Bank Controls, Heel and Tip controls, Dynamic pivot control. The best application for this module is placing it under a limb module, which will result in a connected (standard) behaviour.","title":"foot Settings"},{"location":"foot_settings/#attributes","text":"","title":"Attributes"},{"location":"foot_settings/#toesfk","text":"Attribute Name Default Description FKControlShape cube Toes FK controls shape FKChannelControl T R S X v v v Y v v v Z v v v Toes FK controls channel-box settings","title":"ToesFK"},{"location":"foot_settings/#toesbk","text":"Attribute Name Default Description BKControlShape diamond BK (Backward Kinematics) controls shape BKChannelControl T R S X v Y v Z v BK controls channel-box settings","title":"ToesBK"},{"location":"foot_settings/#bankcontrols","text":"Attribute Name Default Description bankControlShape lightSphere Bank controls shape bankChannelControl T R S X v Y v Z v bank controls channel-box settings","title":"BankControls"},{"location":"foot_settings/#rollcontrol","text":"Attribute Name Default Description doRollCtrl True If this is True, a foot Roll control will be created rollControlShape cylinder Roll control channel-box settings rollDefaultMaxAngle 60.0 Default Roll maximum limit angle. The roll control is used to roll the entire foot chain, and using an angle value to limit the roll of each section, before rolling the next section. This value will be used as default straightenDefaultAngle 130.0 Default straighten angle. The foot toes will straighten between the max angle above and this angle. As the angle passes the above angle, along the range up to this angle, the rool angle will decrease- strightening the foot on the up position.","title":"RollControl"},{"location":"foot_settings/#dynamicpivotcontrol","text":"Attribute Name Default Description doDynamicPivCtrl True This feature will create a control that will try to trace the desired foot shape with it's pivot when rotating it. When choosing to create this control, use the relevant guide's shape to trace the outline of your foot dynamicPivControlShape lightSphere Dynamic roll control shape mapRotXTo 2 as this feature uses local channels, it is essential to map input values correctly. Please map the correct axes based on the orientation of your guide mapRotYTo 3 as this feature uses local channels, it is essential to map input values correctly. Please map the correct axes based on the orientation of your guide mapRotZTo 6 as this feature uses local channels, it is essential to map input values correctly. Please map the correct axes based on the orientation of your guide distRateMultiplier 5.0 This feature will use the translation of a run-away transform to acquire the best pivot location along the given outline shape. This value will dictate the speed of translation dynamicPivChannelControl T R S X v Y v Z Roll control channel-box settings","title":"DynamicPivotControl"},{"location":"freeControl/","text":"freeControl Author: Asaf Ben-Zur Best used for: Free objects, General Control, Mesh Tweaker, Mesh Local Tweaker This Module is a general single control at it's base state. It also contains a Mesh-Tweaker feature that will allow you to create a \"Double Directional\" tweaker- meaning that the control will follow the input Mesh's position (Rivet) and will also be able to affect it. This effect is also commonly knowen as the \"Dorito-Effect\". This feature also includes a \"local\" mode, to tunnel deformations from the control to a local skinCluster, then a blend-shape to the main Mesh, creating multi-layered skinned mesh. All of these features will use the main joint as the effector. Note: When using the \"Mesh-Tweaker\" feture, when needing to affect a mesh that will also be used as the rivet input- make sure \"sameMeshAffector\" is set to ON. Defenitions construct Constructor: construct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments: jointStructure Constructor: jointStructure(mansur, guides, mnsBuildModule = None, kwargs) Return: None Arguments: mansur guides mnsBuildModule ( str ) ; [default: None] kwargs Keyword Arguments: postConstruct Constructor: postConstruct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"freeControl"},{"location":"freeControl/#freecontrol","text":"Author: Asaf Ben-Zur Best used for: Free objects, General Control, Mesh Tweaker, Mesh Local Tweaker This Module is a general single control at it's base state. It also contains a Mesh-Tweaker feature that will allow you to create a \"Double Directional\" tweaker- meaning that the control will follow the input Mesh's position (Rivet) and will also be able to affect it. This effect is also commonly knowen as the \"Dorito-Effect\". This feature also includes a \"local\" mode, to tunnel deformations from the control to a local skinCluster, then a blend-shape to the main Mesh, creating multi-layered skinned mesh. All of these features will use the main joint as the effector. Note: When using the \"Mesh-Tweaker\" feture, when needing to affect a mesh that will also be used as the rivet input- make sure \"sameMeshAffector\" is set to ON.","title":"freeControl"},{"location":"freeControl/#defenitions","text":"","title":"Defenitions"},{"location":"freeControl/#construct","text":"Constructor: construct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"construct"},{"location":"freeControl/#jointstructure","text":"Constructor: jointStructure(mansur, guides, mnsBuildModule = None, kwargs) Return: None Arguments: mansur guides mnsBuildModule ( str ) ; [default: None] kwargs Keyword Arguments:","title":"jointStructure"},{"location":"freeControl/#postconstruct","text":"Constructor: postConstruct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"postConstruct"},{"location":"freeControl_settings/","text":"freeControl Settings Author: Asaf Ben-Zur Best used for: Free objects, General Control, Mesh Tweaker, Mesh Local Tweaker This Module is a general single control at it's base state. It also contains a Mesh-Tweaker feature that will allow you to create a \"Double Directional\" tweaker- meaning that the control will follow the input Mesh's position (Rivet) and will also be able to affect it. This effect is also commonly knowen as the \"Dorito-Effect\". This feature also includes a \"local\" mode, to tunnel deformations from the control to a local skinCluster, then a blend-shape to the main Mesh, creating multi-layered skinned mesh. All of these features will use the main joint as the effector. Note: When using the \"Mesh-Tweaker\" feture, when needing to affect a mesh that will also be used as the rivet input- make sure \"sameMeshAffector\" is set to ON. Attributes symmetryType 0 Choose the mirror type for right side controls GlobalSettings Attribute Name Default Description controlShape circle Control shape channelControl T R S X v v v Y v v v Z v v v Control channel-box settings createJoint True Choose whether to create and attach a joint to this control asTweakerDivider MeshTweaker Comment wasn't inserted asMeshTweaker False This control can aslo act as a live mesh tweaker. This means that you can attach this control to a mesh, having it follow the deformed mesh. In case you want this control to be affected by the mesh (position of the control) and also affect the mesh (using a skinCluster for example), please make sure that you leave sameMeshEffector attribute ON. You do not need to use any other meshes or joints to implement this behaviour rivetToMesh The mesh you want to attach the control to positionMode 0 this will determine the output rivet position mode. doRotation False when off, the rivet will not inherit rotations from the mesh sameMeshAffector True If this is set to False, you will NOT be able to use this control's related joint within the deformation of the above mesh (this will result as a cycle). In case you want the control to follow the mesh as well as have it's related joint within the deformation of the mesh- please leave this ON. In case you want to attach this control to a mesh that will not be affected by the control's related joint, you can safely turn this attribute OFF. isLocal False In some cases, you may wish to use this control's related joint in a different skinCluster layer, channeled into the main mesh as a blendShape. If that is the case, you will need to set this attribute to ON. When set to ON, the related joint will be a part of the joint hierarchy, but will keep it's position at origin so you can you it in a local setup. In case the riveted mesh's deformation is affected by this module's related joint in any way, remember to keep sameMeshEffector ON, even if its not a part of the main skinCluster. This means that even if the joint is controlling a localized skin-cluter, and then channeled as a blend shape into the riveted mesh, sameMeshAffector should be left ON. spring Attribute Name Default Description doSpring False This feature will create a spring node below the control master. This will result in a procedural simple spring action. In case meshTweaker feature was selected, the slave control will not be visible. This feature will NOT be created in case isLocal is set to ON. springX True Comment wasn't inserted springY True Comment wasn't inserted springZ True Comment wasn't inserted defaultStiffness 0.5 Comment wasn't inserted defaultDamping 0.5 Comment wasn't inserted springSlaveControlShape lightSphere Spring slave control shape InterpolatedOrientation Attribute Name Default Description doInterpOrient False Comment wasn't inserted spaceA Comment wasn't inserted spaceB Comment wasn't inserted spaceAWeight 0.5 Comment wasn't inserted doAngleBasedScale False create an angle based scale driver, to scale the target slave joint when the angle changes between the two sources. Originally designed for double-chin setup scaleWhenAngle 0 Comment wasn't inserted maxScale 2.0 Comment wasn't inserted angleMaxRange 180.0 Comment wasn't inserted connectToTargetAxis 1 Comment wasn't inserted","title":"freeControl settings"},{"location":"freeControl_settings/#freecontrol-settings","text":"Author: Asaf Ben-Zur Best used for: Free objects, General Control, Mesh Tweaker, Mesh Local Tweaker This Module is a general single control at it's base state. It also contains a Mesh-Tweaker feature that will allow you to create a \"Double Directional\" tweaker- meaning that the control will follow the input Mesh's position (Rivet) and will also be able to affect it. This effect is also commonly knowen as the \"Dorito-Effect\". This feature also includes a \"local\" mode, to tunnel deformations from the control to a local skinCluster, then a blend-shape to the main Mesh, creating multi-layered skinned mesh. All of these features will use the main joint as the effector. Note: When using the \"Mesh-Tweaker\" feture, when needing to affect a mesh that will also be used as the rivet input- make sure \"sameMeshAffector\" is set to ON.","title":"freeControl Settings"},{"location":"freeControl_settings/#attributes","text":"symmetryType 0 Choose the mirror type for right side controls","title":"Attributes"},{"location":"freeControl_settings/#globalsettings","text":"Attribute Name Default Description controlShape circle Control shape channelControl T R S X v v v Y v v v Z v v v Control channel-box settings createJoint True Choose whether to create and attach a joint to this control asTweakerDivider MeshTweaker Comment wasn't inserted asMeshTweaker False This control can aslo act as a live mesh tweaker. This means that you can attach this control to a mesh, having it follow the deformed mesh. In case you want this control to be affected by the mesh (position of the control) and also affect the mesh (using a skinCluster for example), please make sure that you leave sameMeshEffector attribute ON. You do not need to use any other meshes or joints to implement this behaviour rivetToMesh The mesh you want to attach the control to positionMode 0 this will determine the output rivet position mode. doRotation False when off, the rivet will not inherit rotations from the mesh sameMeshAffector True If this is set to False, you will NOT be able to use this control's related joint within the deformation of the above mesh (this will result as a cycle). In case you want the control to follow the mesh as well as have it's related joint within the deformation of the mesh- please leave this ON. In case you want to attach this control to a mesh that will not be affected by the control's related joint, you can safely turn this attribute OFF. isLocal False In some cases, you may wish to use this control's related joint in a different skinCluster layer, channeled into the main mesh as a blendShape. If that is the case, you will need to set this attribute to ON. When set to ON, the related joint will be a part of the joint hierarchy, but will keep it's position at origin so you can you it in a local setup. In case the riveted mesh's deformation is affected by this module's related joint in any way, remember to keep sameMeshEffector ON, even if its not a part of the main skinCluster. This means that even if the joint is controlling a localized skin-cluter, and then channeled as a blend shape into the riveted mesh, sameMeshAffector should be left ON.","title":"GlobalSettings"},{"location":"freeControl_settings/#spring","text":"Attribute Name Default Description doSpring False This feature will create a spring node below the control master. This will result in a procedural simple spring action. In case meshTweaker feature was selected, the slave control will not be visible. This feature will NOT be created in case isLocal is set to ON. springX True Comment wasn't inserted springY True Comment wasn't inserted springZ True Comment wasn't inserted defaultStiffness 0.5 Comment wasn't inserted defaultDamping 0.5 Comment wasn't inserted springSlaveControlShape lightSphere Spring slave control shape","title":"spring"},{"location":"freeControl_settings/#interpolatedorientation","text":"Attribute Name Default Description doInterpOrient False Comment wasn't inserted spaceA Comment wasn't inserted spaceB Comment wasn't inserted spaceAWeight 0.5 Comment wasn't inserted doAngleBasedScale False create an angle based scale driver, to scale the target slave joint when the angle changes between the two sources. Originally designed for double-chin setup scaleWhenAngle 0 Comment wasn't inserted maxScale 2.0 Comment wasn't inserted angleMaxRange 180.0 Comment wasn't inserted connectToTargetAxis 1 Comment wasn't inserted","title":"InterpolatedOrientation"},{"location":"globals/","text":"globals All top level global variable declaration. Used thoughout the python structure to easily manipulate global settings.","title":"Globals"},{"location":"globals/#globals","text":"All top level global variable declaration. Used thoughout the python structure to easily manipulate global settings.","title":"globals"},{"location":"hindLimb/","text":"hindLimb Author: Asaf Ben-Zur Best used for: Hind-Legs This module was designed to create a generic 4 joint limb control. This module will create both the FK and IK controls, and the standard blend control. On top of the standard behaviour, based on parameters, this module can also include bendy limb controls (as many as you want). Note: When used as a leg, try using the foot module as a direct child of this module to automatically achive a connected behaviour. Defenitions construct Constructor: construct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments: customGuides Constructor: customGuides(mansur, builtGuides) Return: None Arguments: mansur builtGuides Keyword Arguments: deconstruct deconstruct method implementation. Transfer interJoints control back to the main joints. Constructor: deconstruct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments: jointStructure Constructor: jointStructure(mansur, guides, mnsBuildModule = None, kwargs) Return: None Arguments: mansur guides mnsBuildModule ( str ) ; [default: None] kwargs Keyword Arguments: jointStructureSoftMod Constructor: jointStructureSoftMod(mansur, guides, mnsBuildModule = None, kwargs) Return: None Arguments: mansur guides mnsBuildModule ( str ) ; [default: None] kwargs Keyword Arguments:","title":"hindLimb"},{"location":"hindLimb/#hindlimb","text":"Author: Asaf Ben-Zur Best used for: Hind-Legs This module was designed to create a generic 4 joint limb control. This module will create both the FK and IK controls, and the standard blend control. On top of the standard behaviour, based on parameters, this module can also include bendy limb controls (as many as you want). Note: When used as a leg, try using the foot module as a direct child of this module to automatically achive a connected behaviour.","title":"hindLimb"},{"location":"hindLimb/#defenitions","text":"","title":"Defenitions"},{"location":"hindLimb/#construct","text":"Constructor: construct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"construct"},{"location":"hindLimb/#customguides","text":"Constructor: customGuides(mansur, builtGuides) Return: None Arguments: mansur builtGuides Keyword Arguments:","title":"customGuides"},{"location":"hindLimb/#deconstruct","text":"deconstruct method implementation. Transfer interJoints control back to the main joints. Constructor: deconstruct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"deconstruct"},{"location":"hindLimb/#jointstructure","text":"Constructor: jointStructure(mansur, guides, mnsBuildModule = None, kwargs) Return: None Arguments: mansur guides mnsBuildModule ( str ) ; [default: None] kwargs Keyword Arguments:","title":"jointStructure"},{"location":"hindLimb/#jointstructuresoftmod","text":"Constructor: jointStructureSoftMod(mansur, guides, mnsBuildModule = None, kwargs) Return: None Arguments: mansur guides mnsBuildModule ( str ) ; [default: None] kwargs Keyword Arguments:","title":"jointStructureSoftMod"},{"location":"hindLimb_settings/","text":"hindLimb Settings Author: Asaf Ben-Zur Best used for: Arms, Legs This module was designed to create a generic 3 joint limb control. This module will create both the FK and IK controls, and the standard blend control. On top of the standard behaviour, based on parameters, this module can also include bendy limb controls (as many as you want), Arc layer and Sleeve layer. Note: When used as a leg, try using the foot module as a direct child of this module to automatically achive a connected behaviour. Attributes GlobalSettings Attribute Name Default Description interpolationJoints 4 Comment wasn't inserted offsetX 20.0 Up curve X value offset for the interpolation joints offsetZ 0.0 Up curve Z value offset for the interpolation joints FKSymmetryType 0 FK controls symmetry type, in case it needs to differ from the main symmetry type scaleMode 2 Default scale mode. Please refer to the documentation of mnsPointsOnCurve node to learn more about each mode squashMode 0 Default squash mode. Please refer to the documentation of mnsPointsOnCurve node to learn more about each mode ikFkBlendDefault 0.0 Default value for the main IK-FK blend channel. 0 is IK, 1 is FK. IK Attribute Name Default Description stretchLimit 1.0 IK Handle stratch limit default value iKHandleMatchOrient Select a guide to match the IK-Handle's orientation. This will override the native orientation as well as all symmetry options. Main-Ctrl-Shapes Attribute Name Default Description rootControlShape lightSphere Module root control control shape ikHandleControlShape square IK Handle control shape poleVectorControlShape diamond Pole Vector control shape ankleBendControlShape squareRound IK Ankle Bend control shape fkControlShape hexagon FK controls shape tertiariesControlShape flatDiamond Tweak tertiary controls shape tweakers/bendy-Limbs Attribute Name Default Description doTweakers False This feature will create a secondary tweak layer below the main control chain. This is commonly known as Bendy-Limbs tweakersSymmetryType 3 Tweak controls symmetry type, in case it needs to differ from the main symmetry type tweakersPerSection 1 The amount of bendy controls per section. A value of one will create two controls in total - one for the upper section of the limb, on for the lower section createExtraAttributes True If this is set to True, some extra tertiary channel-box control attributes will be added to the attribute-host tweakControlShape dialSquare Tweak controls shape negateOffsetOnSymmetry False If this is set to True, the above offsetX and offsetZ value for the up curve will be negated tweakersChannelControl T R S X v v v Y v v v Z v v v Tweak controls channel-box settings","title":"hindLimb settings"},{"location":"hindLimb_settings/#hindlimb-settings","text":"Author: Asaf Ben-Zur Best used for: Arms, Legs This module was designed to create a generic 3 joint limb control. This module will create both the FK and IK controls, and the standard blend control. On top of the standard behaviour, based on parameters, this module can also include bendy limb controls (as many as you want), Arc layer and Sleeve layer. Note: When used as a leg, try using the foot module as a direct child of this module to automatically achive a connected behaviour.","title":"hindLimb Settings"},{"location":"hindLimb_settings/#attributes","text":"","title":"Attributes"},{"location":"hindLimb_settings/#globalsettings","text":"Attribute Name Default Description interpolationJoints 4 Comment wasn't inserted offsetX 20.0 Up curve X value offset for the interpolation joints offsetZ 0.0 Up curve Z value offset for the interpolation joints FKSymmetryType 0 FK controls symmetry type, in case it needs to differ from the main symmetry type scaleMode 2 Default scale mode. Please refer to the documentation of mnsPointsOnCurve node to learn more about each mode squashMode 0 Default squash mode. Please refer to the documentation of mnsPointsOnCurve node to learn more about each mode ikFkBlendDefault 0.0 Default value for the main IK-FK blend channel. 0 is IK, 1 is FK.","title":"GlobalSettings"},{"location":"hindLimb_settings/#ik","text":"Attribute Name Default Description stretchLimit 1.0 IK Handle stratch limit default value iKHandleMatchOrient Select a guide to match the IK-Handle's orientation. This will override the native orientation as well as all symmetry options.","title":"IK"},{"location":"hindLimb_settings/#main-ctrl-shapes","text":"Attribute Name Default Description rootControlShape lightSphere Module root control control shape ikHandleControlShape square IK Handle control shape poleVectorControlShape diamond Pole Vector control shape ankleBendControlShape squareRound IK Ankle Bend control shape fkControlShape hexagon FK controls shape tertiariesControlShape flatDiamond Tweak tertiary controls shape","title":"Main-Ctrl-Shapes"},{"location":"hindLimb_settings/#tweakersbendy-limbs","text":"Attribute Name Default Description doTweakers False This feature will create a secondary tweak layer below the main control chain. This is commonly known as Bendy-Limbs tweakersSymmetryType 3 Tweak controls symmetry type, in case it needs to differ from the main symmetry type tweakersPerSection 1 The amount of bendy controls per section. A value of one will create two controls in total - one for the upper section of the limb, on for the lower section createExtraAttributes True If this is set to True, some extra tertiary channel-box control attributes will be added to the attribute-host tweakControlShape dialSquare Tweak controls shape negateOffsetOnSymmetry False If this is set to True, the above offsetX and offsetZ value for the up curve will be negated tweakersChannelControl T R S X v v v Y v v v Z v v v Tweak controls channel-box settings","title":"tweakers/bendy-Limbs"},{"location":"hydraulicPiston/","text":"hydraulicPiston Author: Asaf Ben-Zur Best used for: Eyes, Generic Orientation based components This module was written to function as an eye IK (look at setup), but can be used for many other generic components. This module will create a slave control (at root position) which is aim-constraint to custom look-at guide. The slave control will be the control authority for the joint, as the look-at control will control its orientation. Defenitions construct Constructor: construct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"hydraulicPiston"},{"location":"hydraulicPiston/#hydraulicpiston","text":"Author: Asaf Ben-Zur Best used for: Eyes, Generic Orientation based components This module was written to function as an eye IK (look at setup), but can be used for many other generic components. This module will create a slave control (at root position) which is aim-constraint to custom look-at guide. The slave control will be the control authority for the joint, as the look-at control will control its orientation.","title":"hydraulicPiston"},{"location":"hydraulicPiston/#defenitions","text":"","title":"Defenitions"},{"location":"hydraulicPiston/#construct","text":"Constructor: construct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"construct"},{"location":"hydraulicPiston_settings/","text":"hydraulicPiston Settings Author: Asaf Ben-Zur Best used for: Hydraulic Piston, Mechanical Springs Attributes GlobalSettings Attribute Name Default Description slaveControlShape lightSphere Origin slave control shape targetControlShape circle Main control shape upLocalDirection 1 Comment wasn't inserted channelControl T R S X v v v Y v v v Z v v v Main control channel-box settings","title":"hydraulicPiston settings"},{"location":"hydraulicPiston_settings/#hydraulicpiston-settings","text":"Author: Asaf Ben-Zur Best used for: Hydraulic Piston, Mechanical Springs","title":"hydraulicPiston Settings"},{"location":"hydraulicPiston_settings/#attributes","text":"","title":"Attributes"},{"location":"hydraulicPiston_settings/#globalsettings","text":"Attribute Name Default Description slaveControlShape lightSphere Origin slave control shape targetControlShape circle Main control shape upLocalDirection 1 Comment wasn't inserted channelControl T R S X v v v Y v v v Z v v v Main control channel-box settings","title":"GlobalSettings"},{"location":"install/","text":"install Defenitions linux_mnsInstall Constructor: linux_mnsInstall(varValue = \"\", mode = \"install\", varName = \"MAYA_MODULE_PATH\") Return: None Arguments: varValue ( str ) ; [default: \"\"] mode ( str ) ; [default: \"install\"] varName ( str ) ; [default: \"MAYA_MODULE_PATH\"] Keyword Arguments: mnsInstall Constructor: mnsInstall(requestPath = \"\", kwargs) Return: None Arguments: requestPath ( str ) ; [default: \"\"] kwargs Keyword Arguments: win_mnsInstall Constructor: win_mnsInstall(varValue = \"\", mode = \"install\", varName = \"MAYA_MODULE_PATH\") Return: None Arguments: varValue ( str ) ; [default: \"\"] mode ( str ) ; [default: \"install\"] varName ( str ) ; [default: \"MAYA_MODULE_PATH\"] Keyword Arguments:","title":"Install"},{"location":"install/#install","text":"","title":"install"},{"location":"install/#defenitions","text":"","title":"Defenitions"},{"location":"install/#linux_mnsinstall","text":"Constructor: linux_mnsInstall(varValue = \"\", mode = \"install\", varName = \"MAYA_MODULE_PATH\") Return: None Arguments: varValue ( str ) ; [default: \"\"] mode ( str ) ; [default: \"install\"] varName ( str ) ; [default: \"MAYA_MODULE_PATH\"] Keyword Arguments:","title":"linux_mnsInstall"},{"location":"install/#mnsinstall","text":"Constructor: mnsInstall(requestPath = \"\", kwargs) Return: None Arguments: requestPath ( str ) ; [default: \"\"] kwargs Keyword Arguments:","title":"mnsInstall"},{"location":"install/#win_mnsinstall","text":"Constructor: win_mnsInstall(varValue = \"\", mode = \"install\", varName = \"MAYA_MODULE_PATH\") Return: None Arguments: varValue ( str ) ; [default: \"\"] mode ( str ) ; [default: \"install\"] varName ( str ) ; [default: \"MAYA_MODULE_PATH\"] Keyword Arguments:","title":"win_mnsInstall"},{"location":"limb/","text":"limb Author: Asaf Ben-Zur Best used for: Arms, Legs This module was designed to create a generic 3 joint limb control. This module will create both the FK and IK controls, and the standard blend control. On top of the standard behaviour, based on parameters, this module can also include bendy limb controls (as many as you want), Arc layer and Sleeve layer. Note: When used as a leg, try using the foot module as a direct child of this module to automatically achive a connected behaviour. Defenitions construct Constructor: construct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments: customGuides Constructor: customGuides(mansur, builtGuides) Return: None Arguments: mansur builtGuides Keyword Arguments: deconstruct deconstruct method implementation. Transfer interJoints control back to the main joints. Constructor: deconstruct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments: jointStructure Constructor: jointStructure(mansur, guides, mnsBuildModule = None, kwargs) Return: None Arguments: mansur guides mnsBuildModule ( str ) ; [default: None] kwargs Keyword Arguments: jointStructureSoftMod Constructor: jointStructureSoftMod(mansur, guides, mnsBuildModule = None, kwargs) Return: None Arguments: mansur guides mnsBuildModule ( str ) ; [default: None] kwargs Keyword Arguments:","title":"Limb"},{"location":"limb/#limb","text":"Author: Asaf Ben-Zur Best used for: Arms, Legs This module was designed to create a generic 3 joint limb control. This module will create both the FK and IK controls, and the standard blend control. On top of the standard behaviour, based on parameters, this module can also include bendy limb controls (as many as you want), Arc layer and Sleeve layer. Note: When used as a leg, try using the foot module as a direct child of this module to automatically achive a connected behaviour.","title":"limb"},{"location":"limb/#defenitions","text":"","title":"Defenitions"},{"location":"limb/#construct","text":"Constructor: construct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"construct"},{"location":"limb/#customguides","text":"Constructor: customGuides(mansur, builtGuides) Return: None Arguments: mansur builtGuides Keyword Arguments:","title":"customGuides"},{"location":"limb/#deconstruct","text":"deconstruct method implementation. Transfer interJoints control back to the main joints. Constructor: deconstruct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"deconstruct"},{"location":"limb/#jointstructure","text":"Constructor: jointStructure(mansur, guides, mnsBuildModule = None, kwargs) Return: None Arguments: mansur guides mnsBuildModule ( str ) ; [default: None] kwargs Keyword Arguments:","title":"jointStructure"},{"location":"limb/#jointstructuresoftmod","text":"Constructor: jointStructureSoftMod(mansur, guides, mnsBuildModule = None, kwargs) Return: None Arguments: mansur guides mnsBuildModule ( str ) ; [default: None] kwargs Keyword Arguments:","title":"jointStructureSoftMod"},{"location":"limb_settings/","text":"limb Settings Author: Asaf Ben-Zur Best used for: Arms, Legs This module was designed to create a generic 3 joint limb control. This module will create both the FK and IK controls, and the standard blend control. On top of the standard behaviour, based on parameters, this module can also include bendy limb controls (as many as you want), Arc layer and Sleeve layer. Note: When used as a leg, try using the foot module as a direct child of this module to automatically achive a connected behaviour. Attributes GlobalSettings Attribute Name Default Description interpolationJoints 3 Comment wasn't inserted offsetX 20.0 Up curve X value offset for the interpolation joints offsetZ 0.0 Up curve Z value offset for the interpolation joints FKSymmetryType 0 FK controls symmetry type, in case it needs to differ from the main symmetry type scaleMode 2 Default scale mode. Please refer to the documentation of mnsPointsOnCurve node to learn more about each mode squashMode 0 Default squash mode. Please refer to the documentation of mnsPointsOnCurve node to learn more about each mode ikFkBlendDefault 0.0 Default value for the main IK-FK blend channel. 0 is IK, 1 is FK. IK Attribute Name Default Description stretchLimit 1.0 IK Handle stratch limit default value softness 0.0 IK handle softness default value iKHandleMatchOrient Select a guide to match the IK-Handle's orientation. This will override the native orientation as well as all symmetry options. Main-Ctrl-Shapes Attribute Name Default Description rootControlShape lightSphere Module root control control shape ikHandleControlShape square IK Handle control shape poleVectorControlShape diamond Pole Vector control shape fkControlShape hexagon FK controls shape tertiariesControlShape flatDiamond Tweak tertiary controls shape tweakers/bendy-Limbs Attribute Name Default Description doTweakers False This feature will create a secondary tweak layer below the main control chain. This is commonly known as Bendy-Limbs tweakersSymmetryType 3 Tweak controls symmetry type, in case it needs to differ from the main symmetry type tweakersPerSection 1 The amount of bendy controls per section. A value of one will create two controls in total - one for the upper section of the limb, on for the lower section createExtraAttributes True If this is set to True, some extra tertiary channel-box control attributes will be added to the attribute-host tweakControlShape dialSquare Tweak controls shape negateOffsetOnSymmetry False If this is set to True, the above offsetX and offsetZ value for the up curve will be negated tweakersChannelControl T R S X v v v Y v v v Z v v v Tweak controls channel-box settings arc Attribute Name Default Description doArc False This feature will use mnsThreePointArc node to create an automatic arc layer on the final curve output arcDegree 3 Arc's curve degree. Refer to mnsThreePointArc node documentation to learn more about this attribute arcSections 8 The amount of samples used to create the arc. Since three samples will create no effect (the result arc needs more points in between to describe the shape), use a higher value to create an effect. The higher the sample amount, the more precise the arc will be resampleCurveSections 16 Post creation sample amount collinearAction 0 this attribute will be used to dictate what to do when the limb is straight (the collinear case). Input curve will match the input curve plugged into this node (recommended), re-sample will create a new curve based on the node's attributes conformToMidPoint True If this is set to True, the node will attempt to pin the middle origin sample in its place, resulting in a much stabler result. If this is set to False, the middle origin sample might shift while animating the arc value (not recommended) addSwipes True Add swipe channel-channel box attributes to the attribute host sleeve Attribute Name Default Description doSleeve False Do sleeve feature. This feature will create a curbe and controls along the result interpolation joints of this module. This will result in the ability to control a sleeve position along the limb as well as many other features numSleeveJoints 3 The amount of joints to sample along the sleeve curve sleeveControlShape octagon Sleeve control shape sleeveCurveDegree 3 Sleeve curve degree sleeveBuildMode 0 Sleeve curve generation mode","title":"Limb settings"},{"location":"limb_settings/#limb-settings","text":"Author: Asaf Ben-Zur Best used for: Arms, Legs This module was designed to create a generic 3 joint limb control. This module will create both the FK and IK controls, and the standard blend control. On top of the standard behaviour, based on parameters, this module can also include bendy limb controls (as many as you want), Arc layer and Sleeve layer. Note: When used as a leg, try using the foot module as a direct child of this module to automatically achive a connected behaviour.","title":"limb Settings"},{"location":"limb_settings/#attributes","text":"","title":"Attributes"},{"location":"limb_settings/#globalsettings","text":"Attribute Name Default Description interpolationJoints 3 Comment wasn't inserted offsetX 20.0 Up curve X value offset for the interpolation joints offsetZ 0.0 Up curve Z value offset for the interpolation joints FKSymmetryType 0 FK controls symmetry type, in case it needs to differ from the main symmetry type scaleMode 2 Default scale mode. Please refer to the documentation of mnsPointsOnCurve node to learn more about each mode squashMode 0 Default squash mode. Please refer to the documentation of mnsPointsOnCurve node to learn more about each mode ikFkBlendDefault 0.0 Default value for the main IK-FK blend channel. 0 is IK, 1 is FK.","title":"GlobalSettings"},{"location":"limb_settings/#ik","text":"Attribute Name Default Description stretchLimit 1.0 IK Handle stratch limit default value softness 0.0 IK handle softness default value iKHandleMatchOrient Select a guide to match the IK-Handle's orientation. This will override the native orientation as well as all symmetry options.","title":"IK"},{"location":"limb_settings/#main-ctrl-shapes","text":"Attribute Name Default Description rootControlShape lightSphere Module root control control shape ikHandleControlShape square IK Handle control shape poleVectorControlShape diamond Pole Vector control shape fkControlShape hexagon FK controls shape tertiariesControlShape flatDiamond Tweak tertiary controls shape","title":"Main-Ctrl-Shapes"},{"location":"limb_settings/#tweakersbendy-limbs","text":"Attribute Name Default Description doTweakers False This feature will create a secondary tweak layer below the main control chain. This is commonly known as Bendy-Limbs tweakersSymmetryType 3 Tweak controls symmetry type, in case it needs to differ from the main symmetry type tweakersPerSection 1 The amount of bendy controls per section. A value of one will create two controls in total - one for the upper section of the limb, on for the lower section createExtraAttributes True If this is set to True, some extra tertiary channel-box control attributes will be added to the attribute-host tweakControlShape dialSquare Tweak controls shape negateOffsetOnSymmetry False If this is set to True, the above offsetX and offsetZ value for the up curve will be negated tweakersChannelControl T R S X v v v Y v v v Z v v v Tweak controls channel-box settings","title":"tweakers/bendy-Limbs"},{"location":"limb_settings/#arc","text":"Attribute Name Default Description doArc False This feature will use mnsThreePointArc node to create an automatic arc layer on the final curve output arcDegree 3 Arc's curve degree. Refer to mnsThreePointArc node documentation to learn more about this attribute arcSections 8 The amount of samples used to create the arc. Since three samples will create no effect (the result arc needs more points in between to describe the shape), use a higher value to create an effect. The higher the sample amount, the more precise the arc will be resampleCurveSections 16 Post creation sample amount collinearAction 0 this attribute will be used to dictate what to do when the limb is straight (the collinear case). Input curve will match the input curve plugged into this node (recommended), re-sample will create a new curve based on the node's attributes conformToMidPoint True If this is set to True, the node will attempt to pin the middle origin sample in its place, resulting in a much stabler result. If this is set to False, the middle origin sample might shift while animating the arc value (not recommended) addSwipes True Add swipe channel-channel box attributes to the attribute host","title":"arc"},{"location":"limb_settings/#sleeve","text":"Attribute Name Default Description doSleeve False Do sleeve feature. This feature will create a curbe and controls along the result interpolation joints of this module. This will result in the ability to control a sleeve position along the limb as well as many other features numSleeveJoints 3 The amount of joints to sample along the sleeve curve sleeveControlShape octagon Sleeve control shape sleeveCurveDegree 3 Sleeve curve degree sleeveBuildMode 0 Sleeve curve generation mode","title":"sleeve"},{"location":"linkChain/","text":"linkChain Author: Asaf Ben-Zur Best used for: Tank-Treads, Bike-Chains, Ferris-Wheel, Tire, Conveyor-Belt Defenitions construct Constructor: construct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments: createUpCurveFromSamples Constructor: createUpCurveFromSamples(mansur, rootGuide, samples, upCurveOffset) Return: None Arguments: mansur rootGuide samples upCurveOffset Keyword Arguments: customGuides Constructor: customGuides(mansur, builtGuides) Return: None Arguments: mansur builtGuides Keyword Arguments: deconstruct deconstruct method implementation for linkChain. Constructor: deconstruct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments: filterValidShapeTweakers Constructor: filterValidShapeTweakers(tweakersList = [], mansur = None) Return: None Arguments: tweakersList ( list ) ; [default: []] mansur ( str ) ; [default: None] Keyword Arguments: jointStructure Constructor: jointStructure(mansur, guides, mnsBuildModule = None, kwargs) Return: None Arguments: mansur guides mnsBuildModule ( str ) ; [default: None] kwargs Keyword Arguments: jointStructureSoftMod Constructor: jointStructureSoftMod(mansur, guides, mnsBuildModule = None, kwargs) Return: None Arguments: mansur guides mnsBuildModule ( str ) ; [default: None] kwargs Keyword Arguments:","title":"linkChain"},{"location":"linkChain/#linkchain","text":"Author: Asaf Ben-Zur Best used for: Tank-Treads, Bike-Chains, Ferris-Wheel, Tire, Conveyor-Belt","title":"linkChain"},{"location":"linkChain/#defenitions","text":"","title":"Defenitions"},{"location":"linkChain/#construct","text":"Constructor: construct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"construct"},{"location":"linkChain/#createupcurvefromsamples","text":"Constructor: createUpCurveFromSamples(mansur, rootGuide, samples, upCurveOffset) Return: None Arguments: mansur rootGuide samples upCurveOffset Keyword Arguments:","title":"createUpCurveFromSamples"},{"location":"linkChain/#customguides","text":"Constructor: customGuides(mansur, builtGuides) Return: None Arguments: mansur builtGuides Keyword Arguments:","title":"customGuides"},{"location":"linkChain/#deconstruct","text":"deconstruct method implementation for linkChain. Constructor: deconstruct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"deconstruct"},{"location":"linkChain/#filtervalidshapetweakers","text":"Constructor: filterValidShapeTweakers(tweakersList = [], mansur = None) Return: None Arguments: tweakersList ( list ) ; [default: []] mansur ( str ) ; [default: None] Keyword Arguments:","title":"filterValidShapeTweakers"},{"location":"linkChain/#jointstructure","text":"Constructor: jointStructure(mansur, guides, mnsBuildModule = None, kwargs) Return: None Arguments: mansur guides mnsBuildModule ( str ) ; [default: None] kwargs Keyword Arguments:","title":"jointStructure"},{"location":"linkChain/#jointstructuresoftmod","text":"Constructor: jointStructureSoftMod(mansur, guides, mnsBuildModule = None, kwargs) Return: None Arguments: mansur guides mnsBuildModule ( str ) ; [default: None] kwargs Keyword Arguments:","title":"jointStructureSoftMod"},{"location":"linkChain_settings/","text":"linkChain Settings Author: Asaf Ben-Zur Best used for: Wheels Attributes splitOrientSpace True If this is set to True, all space switch attributes for this module will split into two spaces- Translate and Orient, for the animator to be able to set different space for tranlation and orientation. GlobalSettings Attribute Name Default Description numberOfLinks 16 Amount of links in the chain. A joint will be created for every link. reverseOffsetDirection False In case the the rotation post construction is reversed, set this attribute to ON. upCurveOffset 5.0 The offset value to generate the up curve, based on a center matrix- the modules root joint controlShape circle Control shape slaveControlShape dodecagon Control shape wheelDiameter 20.0 Comment wasn't inserted mapRoatationToAxis 0 Comment wasn't inserted rotationMode 0 In case your chain links are connected to one another- it is recommended to use lookAtNext. In case there isn't a connection between your links, curveTangent might be a better choice. slaveChannelControl T R S X v Y v Z v Comment wasn't inserted ShapeTweak Attribute Name Default Description doShapeTweakers False Comment wasn't inserted shapeTweakers [' '] Input guides/joints- In order. A closed nurbs-curve shape will be constructed from the inputs and will be used as a tweak to deform the main shape driving the chain tweakMethod 1 This attribute will determine the shape tweak method. In Direct-Skin mode, the link chain shape will be directly skinned to all input tweakers. In Build-Transforms-Curve mode a new curve will be constructed based on the curve mode selected and input tweakers, which will be used to deform the master shape indirectly. This mode will allow for a better control over the deformation, as it is based on curve re-generation instead of direct curve deformation. Build transforms curve mode will generate a new closed shape curve based on the input tweak transforms, hence it is order sensative. In case you wish to use this mode, make sure you input the tweakers in order which makes sense to generate a closed curve shape. Rebuild-Then-Skin mode will first rebuild the curve based on the input re-build number of spans attribute, then skin the curve and deform the master curve indirectly. rebuildNumOfSpans 16 relevant only on rebuildThenSkin tweak method. This attribute dectates the amount of sections to rebuild the curve to before skinning tweakCurveInterpolaion 1 relevant only on mnsBuildTransformsCurve tweak method tweakCurveDegree 3 relevant only on mnsBuildTransformsCurve, and rebuild then skin tweak methods AutoDrive Attribute Name Default Description doAutoDrive False Comment wasn't inserted autoDriveWheelDiameter 20.0 Comment wasn't inserted gearRatio 1.0 Comment wasn't inserted reverseDirection False Comment wasn't inserted autoDriveDefault 1.0 Comment wasn't inserted","title":"linkChain settings"},{"location":"linkChain_settings/#linkchain-settings","text":"Author: Asaf Ben-Zur Best used for: Wheels","title":"linkChain Settings"},{"location":"linkChain_settings/#attributes","text":"splitOrientSpace True If this is set to True, all space switch attributes for this module will split into two spaces- Translate and Orient, for the animator to be able to set different space for tranlation and orientation.","title":"Attributes"},{"location":"linkChain_settings/#globalsettings","text":"Attribute Name Default Description numberOfLinks 16 Amount of links in the chain. A joint will be created for every link. reverseOffsetDirection False In case the the rotation post construction is reversed, set this attribute to ON. upCurveOffset 5.0 The offset value to generate the up curve, based on a center matrix- the modules root joint controlShape circle Control shape slaveControlShape dodecagon Control shape wheelDiameter 20.0 Comment wasn't inserted mapRoatationToAxis 0 Comment wasn't inserted rotationMode 0 In case your chain links are connected to one another- it is recommended to use lookAtNext. In case there isn't a connection between your links, curveTangent might be a better choice. slaveChannelControl T R S X v Y v Z v Comment wasn't inserted","title":"GlobalSettings"},{"location":"linkChain_settings/#shapetweak","text":"Attribute Name Default Description doShapeTweakers False Comment wasn't inserted shapeTweakers [' '] Input guides/joints- In order. A closed nurbs-curve shape will be constructed from the inputs and will be used as a tweak to deform the main shape driving the chain tweakMethod 1 This attribute will determine the shape tweak method. In Direct-Skin mode, the link chain shape will be directly skinned to all input tweakers. In Build-Transforms-Curve mode a new curve will be constructed based on the curve mode selected and input tweakers, which will be used to deform the master shape indirectly. This mode will allow for a better control over the deformation, as it is based on curve re-generation instead of direct curve deformation. Build transforms curve mode will generate a new closed shape curve based on the input tweak transforms, hence it is order sensative. In case you wish to use this mode, make sure you input the tweakers in order which makes sense to generate a closed curve shape. Rebuild-Then-Skin mode will first rebuild the curve based on the input re-build number of spans attribute, then skin the curve and deform the master curve indirectly. rebuildNumOfSpans 16 relevant only on rebuildThenSkin tweak method. This attribute dectates the amount of sections to rebuild the curve to before skinning tweakCurveInterpolaion 1 relevant only on mnsBuildTransformsCurve tweak method tweakCurveDegree 3 relevant only on mnsBuildTransformsCurve, and rebuild then skin tweak methods","title":"ShapeTweak"},{"location":"linkChain_settings/#autodrive","text":"Attribute Name Default Description doAutoDrive False Comment wasn't inserted autoDriveWheelDiameter 20.0 Comment wasn't inserted gearRatio 1.0 Comment wasn't inserted reverseDirection False Comment wasn't inserted autoDriveDefault 1.0 Comment wasn't inserted","title":"AutoDrive"},{"location":"lips/","text":"lips Author: Asaf Ben-Zur Best used for: Lips This module has been depreciated, please use LipsB module. Defenitions construct Constructor: construct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments: createBindCurvesFromModuleSettings Constructor: createBindCurvesFromModuleSettings(mansur, rootGuide = None) Return: None Arguments: mansur rootGuide ( str ) ; [default: None] Keyword Arguments: customGuides Constructor: customGuides(mansur, builtGuides) Return: None Arguments: mansur builtGuides Keyword Arguments: deconstruct Constructor: deconstruct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments: getEdgesFromModuleSettings Constructor: getEdgesFromModuleSettings(mansur, rootGuide = None) Return: None Arguments: mansur rootGuide ( str ) ; [default: None] Keyword Arguments: jointStructure Constructor: jointStructure(mansur, guides, mnsBuildModule = None, kwargs) Return: None Arguments: mansur guides mnsBuildModule ( str ) ; [default: None] kwargs Keyword Arguments: postConstruct Constructor: postConstruct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"Lips"},{"location":"lips/#lips","text":"Author: Asaf Ben-Zur Best used for: Lips This module has been depreciated, please use LipsB module.","title":"lips"},{"location":"lips/#defenitions","text":"","title":"Defenitions"},{"location":"lips/#construct","text":"Constructor: construct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"construct"},{"location":"lips/#createbindcurvesfrommodulesettings","text":"Constructor: createBindCurvesFromModuleSettings(mansur, rootGuide = None) Return: None Arguments: mansur rootGuide ( str ) ; [default: None] Keyword Arguments:","title":"createBindCurvesFromModuleSettings"},{"location":"lips/#customguides","text":"Constructor: customGuides(mansur, builtGuides) Return: None Arguments: mansur builtGuides Keyword Arguments:","title":"customGuides"},{"location":"lips/#deconstruct","text":"Constructor: deconstruct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"deconstruct"},{"location":"lips/#getedgesfrommodulesettings","text":"Constructor: getEdgesFromModuleSettings(mansur, rootGuide = None) Return: None Arguments: mansur rootGuide ( str ) ; [default: None] Keyword Arguments:","title":"getEdgesFromModuleSettings"},{"location":"lips/#jointstructure","text":"Constructor: jointStructure(mansur, guides, mnsBuildModule = None, kwargs) Return: None Arguments: mansur guides mnsBuildModule ( str ) ; [default: None] kwargs Keyword Arguments:","title":"jointStructure"},{"location":"lips/#postconstruct","text":"Constructor: postConstruct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"postConstruct"},{"location":"lipsB/","text":"lipsB Author: Asaf Ben-Zur Best used for: Lips This module was designed around lips behaviour. This module has a few layers that will allow general as well as extremely fiddle control (based on parameters) over the lips deformation. Some of the main features in this module include: Macro corner controls, Along Surface feature, Around Center Feature, Jaw connections, Global \"Full-Lips\" control, Zip Controls, Curve meet controls, Tweak controls, Cheek Raise connection, and much more. The joint structure of this module will be dictated by input vertices on a given mesh. Defenitions construct Constructor: construct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments: createBindCurvesFromModuleSettings Constructor: createBindCurvesFromModuleSettings(mansur, rootGuide = None) Return: None Arguments: mansur rootGuide ( str ) ; [default: None] Keyword Arguments: customGuides Constructor: customGuides(mansur, builtGuides) Return: None Arguments: mansur builtGuides Keyword Arguments: deconstruct Constructor: deconstruct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments: getEdgesFromModuleSettings Constructor: getEdgesFromModuleSettings(mansur, rootGuide = None) Return: None Arguments: mansur rootGuide ( str ) ; [default: None] Keyword Arguments: jointStructure Constructor: jointStructure(mansur, guides, mnsBuildModule = None, kwargs) Return: None Arguments: mansur guides mnsBuildModule ( str ) ; [default: None] kwargs Keyword Arguments: jointStructureSoftMod Constructor: jointStructureSoftMod(mansur, guides, mnsBuildModule = None, kwargs) Return: None Arguments: mansur guides mnsBuildModule ( str ) ; [default: None] kwargs Keyword Arguments: postConstruct Constructor: postConstruct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"lipsB"},{"location":"lipsB/#lipsb","text":"Author: Asaf Ben-Zur Best used for: Lips This module was designed around lips behaviour. This module has a few layers that will allow general as well as extremely fiddle control (based on parameters) over the lips deformation. Some of the main features in this module include: Macro corner controls, Along Surface feature, Around Center Feature, Jaw connections, Global \"Full-Lips\" control, Zip Controls, Curve meet controls, Tweak controls, Cheek Raise connection, and much more. The joint structure of this module will be dictated by input vertices on a given mesh.","title":"lipsB"},{"location":"lipsB/#defenitions","text":"","title":"Defenitions"},{"location":"lipsB/#construct","text":"Constructor: construct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"construct"},{"location":"lipsB/#createbindcurvesfrommodulesettings","text":"Constructor: createBindCurvesFromModuleSettings(mansur, rootGuide = None) Return: None Arguments: mansur rootGuide ( str ) ; [default: None] Keyword Arguments:","title":"createBindCurvesFromModuleSettings"},{"location":"lipsB/#customguides","text":"Constructor: customGuides(mansur, builtGuides) Return: None Arguments: mansur builtGuides Keyword Arguments:","title":"customGuides"},{"location":"lipsB/#deconstruct","text":"Constructor: deconstruct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"deconstruct"},{"location":"lipsB/#getedgesfrommodulesettings","text":"Constructor: getEdgesFromModuleSettings(mansur, rootGuide = None) Return: None Arguments: mansur rootGuide ( str ) ; [default: None] Keyword Arguments:","title":"getEdgesFromModuleSettings"},{"location":"lipsB/#jointstructure","text":"Constructor: jointStructure(mansur, guides, mnsBuildModule = None, kwargs) Return: None Arguments: mansur guides mnsBuildModule ( str ) ; [default: None] kwargs Keyword Arguments:","title":"jointStructure"},{"location":"lipsB/#jointstructuresoftmod","text":"Constructor: jointStructureSoftMod(mansur, guides, mnsBuildModule = None, kwargs) Return: None Arguments: mansur guides mnsBuildModule ( str ) ; [default: None] kwargs Keyword Arguments:","title":"jointStructureSoftMod"},{"location":"lipsB/#postconstruct","text":"Constructor: postConstruct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"postConstruct"},{"location":"lipsB_settings/","text":"lipsB Settings Author: Asaf Ben-Zur Best used for: Lips This module was designed around lips behaviour. This module has a few layers that will allow general as well as extremely fiddle control (based on parameters) over the lips deformation. Some of the main features in this module include: Macro corner controls, Along Surface feature, Around Center Feature, Jaw connections, Global \"Full-Lips\" control, Zip Controls, Curve meet controls, Tweak controls, Cheek Raise connection, and much more. The joint structure of this module will be dictated by input vertices on a given mesh. Attributes isFacial True Comment wasn't inserted postSymmetryJntStruct True Comment wasn't inserted alongSurface Comment wasn't inserted symmetryType 1 Choose the mirror type for right side controls GlobalSettings Attribute Name Default Description upperEdgeVerts [' '] These verticies will be used to build the joint structure for the upper section. Please select a sequence of vertices along the same loop, starting from the inner corner. First and last vertices should match between the upper and lower section, representing a single closed loop. Corner vertices will be present twice- once on the upper section, once on the lower section lowerEdgeVerts [' '] These verticies will be used to build the joint structure for the lower section. Please select a sequence of vertices along the same loop, starting from the inner corner. First and last vertices should match between the upper and lower section, representing a single closed loop. Corner vertices will be present twice- once on the lower section, once on the lower section midsPosition 0 Main mid controls shape ctrlShapes Attribute Name Default Description cornerControlShape fourArrow Main corenr controls shape upperLowerControlShape squareRound Main upper and lower controls shape midsControlShape circle Main mid controls shape JawConnection Attribute Name Default Description connectJaw True In case this attribute is off, the jaw connection will not be created. jawRootGuide In case this module is used for lips (main use), input the Jaw control root guide. This will implement the Jaw control within the setup and will result in a better behaving setup connectUpMotionRot True In case this attribute is ON, the up rotation of the jaw will affect the upper lip. upMotionRotAxis -x Rotation axis axis to connect the up motion to. This is based on the selected orientation for te jaw. connectUpMotionTran True In case this attribute is ON, the up translation of the jaw will affect the upper lip. upMotionTranAxis y Rotation axis axis to connect the up motion to. This is based on the selected orientation for te jaw. LayerBCtrls Attribute Name Default Description doLayerBCtrls True Second layer tweakers numLayerBCtrlsPerSection 9 Number of tweak controls per section layerBSamplingMode 2 Second layer tweak sampling mode. layerBInterpolation 1 Second layer tweak interpolation type. layerBControlShape cube Second layer tweak controls shape CheekRaise Attribute Name Default Description doCheekRaise False when dealing with joint based facial deformation, and using this module as a lips setup, it is sometimes desired to incorporate another control that represents the cheek to achive a more lively deformation. Use this feature to do just that. Plug in the rootGuide of the cheeck control you wish to drive, then control the raise and push values based on your preferences or requirements l_CheekRaiseRoot Left side cheeck Root Guide r_CheekRaiseRoot Right side cheeck Root Guide raiseValue 0.5 Raise default value connectRaiseToAxis y Raise channel connection axis pushValue 0.5 Push-Out default value connectPushToAxis z Raise channel connection axis","title":"lipsB settings"},{"location":"lipsB_settings/#lipsb-settings","text":"Author: Asaf Ben-Zur Best used for: Lips This module was designed around lips behaviour. This module has a few layers that will allow general as well as extremely fiddle control (based on parameters) over the lips deformation. Some of the main features in this module include: Macro corner controls, Along Surface feature, Around Center Feature, Jaw connections, Global \"Full-Lips\" control, Zip Controls, Curve meet controls, Tweak controls, Cheek Raise connection, and much more. The joint structure of this module will be dictated by input vertices on a given mesh.","title":"lipsB Settings"},{"location":"lipsB_settings/#attributes","text":"isFacial True Comment wasn't inserted postSymmetryJntStruct True Comment wasn't inserted alongSurface Comment wasn't inserted symmetryType 1 Choose the mirror type for right side controls","title":"Attributes"},{"location":"lipsB_settings/#globalsettings","text":"Attribute Name Default Description upperEdgeVerts [' '] These verticies will be used to build the joint structure for the upper section. Please select a sequence of vertices along the same loop, starting from the inner corner. First and last vertices should match between the upper and lower section, representing a single closed loop. Corner vertices will be present twice- once on the upper section, once on the lower section lowerEdgeVerts [' '] These verticies will be used to build the joint structure for the lower section. Please select a sequence of vertices along the same loop, starting from the inner corner. First and last vertices should match between the upper and lower section, representing a single closed loop. Corner vertices will be present twice- once on the lower section, once on the lower section midsPosition 0 Main mid controls shape","title":"GlobalSettings"},{"location":"lipsB_settings/#ctrlshapes","text":"Attribute Name Default Description cornerControlShape fourArrow Main corenr controls shape upperLowerControlShape squareRound Main upper and lower controls shape midsControlShape circle Main mid controls shape","title":"ctrlShapes"},{"location":"lipsB_settings/#jawconnection","text":"Attribute Name Default Description connectJaw True In case this attribute is off, the jaw connection will not be created. jawRootGuide In case this module is used for lips (main use), input the Jaw control root guide. This will implement the Jaw control within the setup and will result in a better behaving setup connectUpMotionRot True In case this attribute is ON, the up rotation of the jaw will affect the upper lip. upMotionRotAxis -x Rotation axis axis to connect the up motion to. This is based on the selected orientation for te jaw. connectUpMotionTran True In case this attribute is ON, the up translation of the jaw will affect the upper lip. upMotionTranAxis y Rotation axis axis to connect the up motion to. This is based on the selected orientation for te jaw.","title":"JawConnection"},{"location":"lipsB_settings/#layerbctrls","text":"Attribute Name Default Description doLayerBCtrls True Second layer tweakers numLayerBCtrlsPerSection 9 Number of tweak controls per section layerBSamplingMode 2 Second layer tweak sampling mode. layerBInterpolation 1 Second layer tweak interpolation type. layerBControlShape cube Second layer tweak controls shape","title":"LayerBCtrls"},{"location":"lipsB_settings/#cheekraise","text":"Attribute Name Default Description doCheekRaise False when dealing with joint based facial deformation, and using this module as a lips setup, it is sometimes desired to incorporate another control that represents the cheek to achive a more lively deformation. Use this feature to do just that. Plug in the rootGuide of the cheeck control you wish to drive, then control the raise and push values based on your preferences or requirements l_CheekRaiseRoot Left side cheeck Root Guide r_CheekRaiseRoot Right side cheeck Root Guide raiseValue 0.5 Raise default value connectRaiseToAxis y Raise channel connection axis pushValue 0.5 Push-Out default value connectPushToAxis z Raise channel connection axis","title":"CheekRaise"},{"location":"lips_settings/","text":"lips Settings Author: Asaf Ben-Zur Best used for: Lips This module was designed around lips behaviour. This module has a few layers that will allow general as well as extremely fiddle control (based on parameters) over the lips deformation. Some of the main features in this module include: Macro corner controls, Along Surface feature, Around Center Feature, Jaw connections, Global \"Full-Lips\" control, Zip Controls, Curve meet controls, Tweak controls, Cheek Raise connection, and much more. The joint structure of this module will be dictated by input vertices on a given mesh. Attributes isFacial True Comment wasn't inserted postSymmetryJntStruct True Comment wasn't inserted alongSurface Comment wasn't inserted GlobalSettings Attribute Name Default Description upperEdgeVerts [' '] These verticies will be used to build the joint structure for the upper section. Please select a sequence of vertices along the same loop, starting from the inner corner. First and last vertices should match between the upper and lower section, representing a single closed loop. Corner vertices will be present twice- once on the upper section, once on the lower section lowerEdgeVerts [' '] These verticies will be used to build the joint structure for the lower section. Please select a sequence of vertices along the same loop, starting from the inner corner. First and last vertices should match between the upper and lower section, representing a single closed loop. Corner vertices will be present twice- once on the lower section, once on the lower section upCurveOffset 1.0 Comment wasn't inserted reverseCorners False Offset value for the up curve generation aroundCenter False Around center will normalize the result vectors around a given center matrix (module root in this case). This will provide a better range of motion, tranlating the joints around a sphere (assumed from the center matrix). This can be changed and animated post-construction curveResolution 24 Resample curve amount midCurveHeight 0.5 This dictates the height of the Mid-Meet point between the upper and lower sections jawRootGuide In case this module is used for lips (main use), input the Jaw control root guide. This will implement the Jaw control within the setup and will result in a better behaving setup AlongSurface Attribute Name Default Description doAlongSurface False In case it is desired, an internal surface(Nurbs)-follow mechanism is built in this module. In some cases, it is desired to model a pre-existing NurbsSurface that describes the range or limits of the joints related to this module. If a valid input is insrted, the setup will be created automatically. Remember that the follow controls will be pinned to the given surface, so remember to skin the surface to parent module which will follow the world position of the guide surface. Freezing transformation on the given setup is essential for this feature to behave as expected inputSurface Input surface (Nurbs) to follow baseSurfaceJointFollow It is recommended to use this attribute in conjunction with the alongSurface module. The alongSurface feature is stabler when a baseSurface is present. In order to create that base surface automatically, Block needs a joint to flood a skin to, in order to follow the world space position of the character. For example, if your input surface is skinned to the head joint and the jaw joint, the recommended input in this attribute will be the head joint. When this attribute is empty or invalid a base surface will not be created. CheekRaise Attribute Name Default Description doCheekRaise False when dealing with joint based facial deformation, and using this module as a lips setup, it is sometimes desired to incorporate another control that represents the cheek to achive a more lively deformation. Use this feature to do just that. Plug in the rootGuide of the cheeck control you wish to drive, then control the raise and push values based on your preferences or requirements l_CheekRaiseRoot Left side cheeck Root Guide r_CheekRaiseRoot Right side cheeck Root Guide raiseValue 0.5 Raise default value connectRaiseToAxis y Raise channel connection axis pushValue 0.5 Push-Out default value connectPushToAxis z Raise channel connection axis TweakControls Attribute Name Default Description doTweakControls True First layer tweakers numTweakControlsPerSection 5 Number of tweak controls per section cornersControlShape diamond Tweak coreners control shape tweakersControlShape lightSphere Tweak controls shape tweakCurvesInterpolation 4 First layer tweaks curve interpolation type LayerBCtrls Attribute Name Default Description doLayerBCtrls False Second layer tweakers numLayerBCtrlsPerSection 9 Number of tweak controls per section layerBControlShape cube Second layer tweak controls shape","title":"Lips settings"},{"location":"lips_settings/#lips-settings","text":"Author: Asaf Ben-Zur Best used for: Lips This module was designed around lips behaviour. This module has a few layers that will allow general as well as extremely fiddle control (based on parameters) over the lips deformation. Some of the main features in this module include: Macro corner controls, Along Surface feature, Around Center Feature, Jaw connections, Global \"Full-Lips\" control, Zip Controls, Curve meet controls, Tweak controls, Cheek Raise connection, and much more. The joint structure of this module will be dictated by input vertices on a given mesh.","title":"lips Settings"},{"location":"lips_settings/#attributes","text":"isFacial True Comment wasn't inserted postSymmetryJntStruct True Comment wasn't inserted alongSurface Comment wasn't inserted","title":"Attributes"},{"location":"lips_settings/#globalsettings","text":"Attribute Name Default Description upperEdgeVerts [' '] These verticies will be used to build the joint structure for the upper section. Please select a sequence of vertices along the same loop, starting from the inner corner. First and last vertices should match between the upper and lower section, representing a single closed loop. Corner vertices will be present twice- once on the upper section, once on the lower section lowerEdgeVerts [' '] These verticies will be used to build the joint structure for the lower section. Please select a sequence of vertices along the same loop, starting from the inner corner. First and last vertices should match between the upper and lower section, representing a single closed loop. Corner vertices will be present twice- once on the lower section, once on the lower section upCurveOffset 1.0 Comment wasn't inserted reverseCorners False Offset value for the up curve generation aroundCenter False Around center will normalize the result vectors around a given center matrix (module root in this case). This will provide a better range of motion, tranlating the joints around a sphere (assumed from the center matrix). This can be changed and animated post-construction curveResolution 24 Resample curve amount midCurveHeight 0.5 This dictates the height of the Mid-Meet point between the upper and lower sections jawRootGuide In case this module is used for lips (main use), input the Jaw control root guide. This will implement the Jaw control within the setup and will result in a better behaving setup","title":"GlobalSettings"},{"location":"lips_settings/#alongsurface","text":"Attribute Name Default Description doAlongSurface False In case it is desired, an internal surface(Nurbs)-follow mechanism is built in this module. In some cases, it is desired to model a pre-existing NurbsSurface that describes the range or limits of the joints related to this module. If a valid input is insrted, the setup will be created automatically. Remember that the follow controls will be pinned to the given surface, so remember to skin the surface to parent module which will follow the world position of the guide surface. Freezing transformation on the given setup is essential for this feature to behave as expected inputSurface Input surface (Nurbs) to follow baseSurfaceJointFollow It is recommended to use this attribute in conjunction with the alongSurface module. The alongSurface feature is stabler when a baseSurface is present. In order to create that base surface automatically, Block needs a joint to flood a skin to, in order to follow the world space position of the character. For example, if your input surface is skinned to the head joint and the jaw joint, the recommended input in this attribute will be the head joint. When this attribute is empty or invalid a base surface will not be created.","title":"AlongSurface"},{"location":"lips_settings/#cheekraise","text":"Attribute Name Default Description doCheekRaise False when dealing with joint based facial deformation, and using this module as a lips setup, it is sometimes desired to incorporate another control that represents the cheek to achive a more lively deformation. Use this feature to do just that. Plug in the rootGuide of the cheeck control you wish to drive, then control the raise and push values based on your preferences or requirements l_CheekRaiseRoot Left side cheeck Root Guide r_CheekRaiseRoot Right side cheeck Root Guide raiseValue 0.5 Raise default value connectRaiseToAxis y Raise channel connection axis pushValue 0.5 Push-Out default value connectPushToAxis z Raise channel connection axis","title":"CheekRaise"},{"location":"lips_settings/#tweakcontrols","text":"Attribute Name Default Description doTweakControls True First layer tweakers numTweakControlsPerSection 5 Number of tweak controls per section cornersControlShape diamond Tweak coreners control shape tweakersControlShape lightSphere Tweak controls shape tweakCurvesInterpolation 4 First layer tweaks curve interpolation type","title":"TweakControls"},{"location":"lips_settings/#layerbctrls","text":"Attribute Name Default Description doLayerBCtrls False Second layer tweakers numLayerBCtrlsPerSection 9 Number of tweak controls per section layerBControlShape cube Second layer tweak controls shape","title":"LayerBCtrls"},{"location":"localClump/","text":"localClump Author: Asaf Ben-Zur Best used for: Clumps of controls. i.e. the first layer of controls in a clump of 5 hair strands (FK chains). This module was developed to allow a local control driver, over clumps of controls. For example, a block rig contains 10 hair strands, controled by 10 FK-Shain modules, with 3 controls each. In some cases it is easier to pose the hair treting it as a single unit instead of indevidual strands. So, a clump-control can be created for each layer of controls (3, 1 for every unit in each chain). The control will be created using local channels in order to not break the FK behaviour of the strands. In case any other method was used (spaces, module parenting), each indevidual strand FK behaviour would have been broken. The clump controls can also be parented under one another to create a layered-FK behaviour. This will result in a main clump-fk chain, treating the hair as a single unit, and FK chains below to tread each strand indevidually. In case you want to mimic a normal parenting behaviour, use the conformPivot attribute, which will conform all local driven controls to the pivot of this master clump control. Leaving conformPivot OFF, will simply connect to the local channels of the slave, leaving its pivots intact. This will result in a slightly different behaviour. You can also use connectToChannelControl attribute to decide which attributes you want to connect to, and the ones you want to leave out. Defenitions construct Constructor: construct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments: filterValidClumpSlaves Constructor: filterValidClumpSlaves(slavesList = [], mansur = None) Return: None Arguments: slavesList ( list ) ; [default: []] mansur ( str ) ; [default: None] Keyword Arguments: jointStructure Constructor: jointStructure(mansur, guides, mnsBuildModule = None, kwargs) Return: None Arguments: mansur guides mnsBuildModule ( str ) ; [default: None] kwargs Keyword Arguments: postConstruct Constructor: postConstruct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"localClump"},{"location":"localClump/#localclump","text":"Author: Asaf Ben-Zur Best used for: Clumps of controls. i.e. the first layer of controls in a clump of 5 hair strands (FK chains). This module was developed to allow a local control driver, over clumps of controls. For example, a block rig contains 10 hair strands, controled by 10 FK-Shain modules, with 3 controls each. In some cases it is easier to pose the hair treting it as a single unit instead of indevidual strands. So, a clump-control can be created for each layer of controls (3, 1 for every unit in each chain). The control will be created using local channels in order to not break the FK behaviour of the strands. In case any other method was used (spaces, module parenting), each indevidual strand FK behaviour would have been broken. The clump controls can also be parented under one another to create a layered-FK behaviour. This will result in a main clump-fk chain, treating the hair as a single unit, and FK chains below to tread each strand indevidually. In case you want to mimic a normal parenting behaviour, use the conformPivot attribute, which will conform all local driven controls to the pivot of this master clump control. Leaving conformPivot OFF, will simply connect to the local channels of the slave, leaving its pivots intact. This will result in a slightly different behaviour. You can also use connectToChannelControl attribute to decide which attributes you want to connect to, and the ones you want to leave out.","title":"localClump"},{"location":"localClump/#defenitions","text":"","title":"Defenitions"},{"location":"localClump/#construct","text":"Constructor: construct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"construct"},{"location":"localClump/#filtervalidclumpslaves","text":"Constructor: filterValidClumpSlaves(slavesList = [], mansur = None) Return: None Arguments: slavesList ( list ) ; [default: []] mansur ( str ) ; [default: None] Keyword Arguments:","title":"filterValidClumpSlaves"},{"location":"localClump/#jointstructure","text":"Constructor: jointStructure(mansur, guides, mnsBuildModule = None, kwargs) Return: None Arguments: mansur guides mnsBuildModule ( str ) ; [default: None] kwargs Keyword Arguments:","title":"jointStructure"},{"location":"localClump/#postconstruct","text":"Constructor: postConstruct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"postConstruct"},{"location":"localClump_settings/","text":"localClump Settings Author: Asaf Ben-Zur Best used for: Clumps of controls. i.e. the first layer of controls in a clump of 5 hair strands (FK chains). This module was developed to allow a local control driver, over clumps of controls. For example, a block rig contains 10 hair strands, controled by 10 FK-Shain modules, with 3 controls each. In some cases it is easier to pose the hair treting it as a single unit instead of indevidual strands. So, a clump-control can be created for each layer of controls (3, 1 for every unit in each chain). The control will be created using local channels in order to not break the FK behaviour of the strands. In case any other method was used (spaces, module parenting), each indevidual strand FK behaviour would have been broken. The clump controls can also be parented under one another to create a layered-FK behaviour. This will result in a main clump-fk chain, treating the hair as a single unit, and FK chains below to tread each strand indevidually. In case you want to mimic a normal parenting behaviour, use the conformPivot attribute, which will conform all local driven controls to the pivot of this master clump control. Leaving conformPivot OFF, will simply connect to the local channels of the slave, leaving its pivots intact. This will result in a slightly different behaviour. You can also use connectToChannelControl attribute to decide which attributes you want to connect to, and the ones you want to leave out. Attributes GlobalSettings Attribute Name Default Description controlShape circle Control shape clumpSlaves [' '] All guides that will be locally controlled by this clump connectToChannelControl T R S X v v v Y v v v Z v v v This will determine which channels or axes will be connected to the slaves. conformPivot True When ON, the pivot of the target slaves will be conformed to the pivot of this master control. When OFF, the original pivots of the slaves will be preserved. createJoint False Choose whether to create and attach a joint to this control channelControl T R S X v v v Y v v v Z v v v Control channel-box settings","title":"localClump settings"},{"location":"localClump_settings/#localclump-settings","text":"Author: Asaf Ben-Zur Best used for: Clumps of controls. i.e. the first layer of controls in a clump of 5 hair strands (FK chains). This module was developed to allow a local control driver, over clumps of controls. For example, a block rig contains 10 hair strands, controled by 10 FK-Shain modules, with 3 controls each. In some cases it is easier to pose the hair treting it as a single unit instead of indevidual strands. So, a clump-control can be created for each layer of controls (3, 1 for every unit in each chain). The control will be created using local channels in order to not break the FK behaviour of the strands. In case any other method was used (spaces, module parenting), each indevidual strand FK behaviour would have been broken. The clump controls can also be parented under one another to create a layered-FK behaviour. This will result in a main clump-fk chain, treating the hair as a single unit, and FK chains below to tread each strand indevidually. In case you want to mimic a normal parenting behaviour, use the conformPivot attribute, which will conform all local driven controls to the pivot of this master clump control. Leaving conformPivot OFF, will simply connect to the local channels of the slave, leaving its pivots intact. This will result in a slightly different behaviour. You can also use connectToChannelControl attribute to decide which attributes you want to connect to, and the ones you want to leave out.","title":"localClump Settings"},{"location":"localClump_settings/#attributes","text":"","title":"Attributes"},{"location":"localClump_settings/#globalsettings","text":"Attribute Name Default Description controlShape circle Control shape clumpSlaves [' '] All guides that will be locally controlled by this clump connectToChannelControl T R S X v v v Y v v v Z v v v This will determine which channels or axes will be connected to the slaves. conformPivot True When ON, the pivot of the target slaves will be conformed to the pivot of this master control. When OFF, the original pivots of the slaves will be preserved. createJoint False Choose whether to create and attach a joint to this control channelControl T R S X v v v Y v v v Z v v v Control channel-box settings","title":"GlobalSettings"},{"location":"log/","text":"log === Author: Assaf Ben Zur === Core mns logger. This module contains the mns logger which will construct a log based on given parametrs. All logs are written to the defined log file dectated by the project globals. In case a log doesn't exists it will be automatically created. Defenitions getCurrentFunctionName Constructor: getCurrentFunctionName() Return: None Arguments: Keyword Arguments: getPreviousFunctionName Constructor: getPreviousFunctionName() Return: None Arguments: Keyword Arguments: log Core logger function. Given a message line and a severity parameter, log the line into the log file. In case the log file doesn't exist, create one. In case the directory doesn't exist, create one. An output message is printed into the consule based on the severity. severities(svr): 0 = log 1 = msg 2 = warning 3 = error 4 = fatal Constructor: log(msg = \"\", kwargs) Return: None Arguments: msg ( str ) ; [default: \"\"] kwargs Keyword Arguments: logCurrentFrame Log the current requested frame. The frame is collected procedurally from the dtack, without needing to pass any arguments into methed. Constructor: logCurrentFrame() Return: None Arguments: Keyword Arguments: validateLogRootDirectory Validate log directory existence within the current project folder. Constructor: validateLogRootDirectory() Return: None Arguments: Keyword Arguments:","title":"Log"},{"location":"log/#log","text":"=== Author: Assaf Ben Zur === Core mns logger. This module contains the mns logger which will construct a log based on given parametrs. All logs are written to the defined log file dectated by the project globals. In case a log doesn't exists it will be automatically created.","title":"log"},{"location":"log/#defenitions","text":"","title":"Defenitions"},{"location":"log/#getcurrentfunctionname","text":"Constructor: getCurrentFunctionName() Return: None Arguments: Keyword Arguments:","title":"getCurrentFunctionName"},{"location":"log/#getpreviousfunctionname","text":"Constructor: getPreviousFunctionName() Return: None Arguments: Keyword Arguments:","title":"getPreviousFunctionName"},{"location":"log/#log_1","text":"Core logger function. Given a message line and a severity parameter, log the line into the log file. In case the log file doesn't exist, create one. In case the directory doesn't exist, create one. An output message is printed into the consule based on the severity. severities(svr): 0 = log 1 = msg 2 = warning 3 = error 4 = fatal Constructor: log(msg = \"\", kwargs) Return: None Arguments: msg ( str ) ; [default: \"\"] kwargs Keyword Arguments:","title":"log"},{"location":"log/#logcurrentframe","text":"Log the current requested frame. The frame is collected procedurally from the dtack, without needing to pass any arguments into methed. Constructor: logCurrentFrame() Return: None Arguments: Keyword Arguments:","title":"logCurrentFrame"},{"location":"log/#validatelogrootdirectory","text":"Validate log directory existence within the current project folder. Constructor: validateLogRootDirectory() Return: None Arguments: Keyword Arguments:","title":"validateLogRootDirectory"},{"location":"lookAtControl/","text":"lookAtControl Author: Asaf Ben-Zur Best used for: Eyes, Generic Orientation based components This module was written to function as an eye IK (look at setup), but can be used for many other generic components. This module will create a slave control (at root position) which is aim-constraint to custom look-at guide. The slave control will be the control authority for the joint, as the look-at control will control its orientation. Defenitions construct Constructor: construct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments: customGuides Constructor: customGuides(mansur, builtGuides) Return: None Arguments: mansur builtGuides Keyword Arguments: postConstruct Constructor: postConstruct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"lookAtControl"},{"location":"lookAtControl/#lookatcontrol","text":"Author: Asaf Ben-Zur Best used for: Eyes, Generic Orientation based components This module was written to function as an eye IK (look at setup), but can be used for many other generic components. This module will create a slave control (at root position) which is aim-constraint to custom look-at guide. The slave control will be the control authority for the joint, as the look-at control will control its orientation.","title":"lookAtControl"},{"location":"lookAtControl/#defenitions","text":"","title":"Defenitions"},{"location":"lookAtControl/#construct","text":"Constructor: construct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"construct"},{"location":"lookAtControl/#customguides","text":"Constructor: customGuides(mansur, builtGuides) Return: None Arguments: mansur builtGuides Keyword Arguments:","title":"customGuides"},{"location":"lookAtControl/#postconstruct","text":"Constructor: postConstruct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"postConstruct"},{"location":"lookAtControl_settings/","text":"lookAtControl Settings Author: Asaf Ben-Zur Best used for: Eyes, Generic Orientation based components This module was written to function as an eye IK (look at setup), but can be used for many other generic components. This module will create a slave control (at root position) which is aim-constraint to custom look-at guide. The slave control will be the control authority for the joint, as the look-at control will control its orientation. Attributes GlobalSettings Attribute Name Default Description slaveControlShape lightSphere Origin slave control shape targetControlShape circle Main control shape upLocalDirection 0 Main control shape channelControl T R S X v v v Y v v v Z v v v Main control channel-box settings InterpolatedOrientation Attribute Name Default Description doInterpOrient False Comment wasn't inserted spaceA Comment wasn't inserted spaceB Comment wasn't inserted spaceAWeight 0.5 Comment wasn't inserted doAngleBasedScale False create an angle based scale driver, to scale the target slave joint when the angle changes between the two sources. Originally designed for double-chin setup scaleWhenAngle 0 Comment wasn't inserted maxScale 2.0 Comment wasn't inserted angleMaxRange 180.0 Comment wasn't inserted connectToTargetAxis 1 Comment wasn't inserted spring Attribute Name Default Description doLookAtSpring False This feature will create a spring node blowe the look-at master. This will result in a rotation-based spring, mostly used for vehicle center suspension to achive secondary motion. defaultStiffness 0.5 Comment wasn't inserted defaultDamping 0.5 Comment wasn't inserted asEyeLook Attribute Name Default Description pupilDilateAttribute Input bland-shape attribute to connect pupil dialation control to pupilContractAttribute Input bland-shape attribute to connect pupil contaction control to irisDilateAttribute Input bland-shape attribute to connect iris dialation control to irisContractAttribute Input bland-shape attribute to connect iris contaction control to combinedAttributeHost If this is set to True, a global attribute for the above pupil and iris controls will be created on the specified attribute host. This feature is mainly to combine two different eye shapes controls into one single control, or moving the location of this attribute to a diffent module in case the eye meshs are combined","title":"lookAtControl settings"},{"location":"lookAtControl_settings/#lookatcontrol-settings","text":"Author: Asaf Ben-Zur Best used for: Eyes, Generic Orientation based components This module was written to function as an eye IK (look at setup), but can be used for many other generic components. This module will create a slave control (at root position) which is aim-constraint to custom look-at guide. The slave control will be the control authority for the joint, as the look-at control will control its orientation.","title":"lookAtControl Settings"},{"location":"lookAtControl_settings/#attributes","text":"","title":"Attributes"},{"location":"lookAtControl_settings/#globalsettings","text":"Attribute Name Default Description slaveControlShape lightSphere Origin slave control shape targetControlShape circle Main control shape upLocalDirection 0 Main control shape channelControl T R S X v v v Y v v v Z v v v Main control channel-box settings","title":"GlobalSettings"},{"location":"lookAtControl_settings/#interpolatedorientation","text":"Attribute Name Default Description doInterpOrient False Comment wasn't inserted spaceA Comment wasn't inserted spaceB Comment wasn't inserted spaceAWeight 0.5 Comment wasn't inserted doAngleBasedScale False create an angle based scale driver, to scale the target slave joint when the angle changes between the two sources. Originally designed for double-chin setup scaleWhenAngle 0 Comment wasn't inserted maxScale 2.0 Comment wasn't inserted angleMaxRange 180.0 Comment wasn't inserted connectToTargetAxis 1 Comment wasn't inserted","title":"InterpolatedOrientation"},{"location":"lookAtControl_settings/#spring","text":"Attribute Name Default Description doLookAtSpring False This feature will create a spring node blowe the look-at master. This will result in a rotation-based spring, mostly used for vehicle center suspension to achive secondary motion. defaultStiffness 0.5 Comment wasn't inserted defaultDamping 0.5 Comment wasn't inserted","title":"spring"},{"location":"lookAtControl_settings/#aseyelook","text":"Attribute Name Default Description pupilDilateAttribute Input bland-shape attribute to connect pupil dialation control to pupilContractAttribute Input bland-shape attribute to connect pupil contaction control to irisDilateAttribute Input bland-shape attribute to connect iris dialation control to irisContractAttribute Input bland-shape attribute to connect iris contaction control to combinedAttributeHost If this is set to True, a global attribute for the above pupil and iris controls will be created on the specified attribute host. This feature is mainly to combine two different eye shapes controls into one single control, or moving the location of this attribute to a diffent module in case the eye meshs are combined","title":"asEyeLook"},{"location":"meshUtility/","text":"meshUtility Defenitions getShapeFromTransform Constructor: getShapeFromTransform(node, inter=False) Return: None Arguments: node inter ( bool ) ; [default: False] Keyword Arguments: getSymDictForMesh Constructor: getSymDictForMesh(meshName = \"\", tolerance = 0.02) Return: None Arguments: meshName ( str ) ; [default: \"\"] tolerance ( float ) ; [default: 0.02] Keyword Arguments:","title":"meshUtility"},{"location":"meshUtility/#meshutility","text":"","title":"meshUtility"},{"location":"meshUtility/#defenitions","text":"","title":"Defenitions"},{"location":"meshUtility/#getshapefromtransform","text":"Constructor: getShapeFromTransform(node, inter=False) Return: None Arguments: node inter ( bool ) ; [default: False] Keyword Arguments:","title":"getShapeFromTransform"},{"location":"meshUtility/#getsymdictformesh","text":"Constructor: getSymDictForMesh(meshName = \"\", tolerance = 0.02) Return: None Arguments: meshName ( str ) ; [default: \"\"] tolerance ( float ) ; [default: 0.02] Keyword Arguments:","title":"getSymDictForMesh"},{"location":"meta/","text":"meta Author: Asaf Ben-Zur Best used for: Metacarpal (Fingers), Metatarsal (Toes) This module will create a control for every root guide position, as well as a few global splay controls for the collection of controls based on settings. The play controls will behave as a global tweaker for the control collection, allowing easier animation. In order to implement \"splayB\" feature, simply parent a FK chain modules under each of the main meta guides. This module construction will try to detect a FK module under each guide, and if any exist, will create the second layer splay control for these FK chains. Defenitions construct Constructor: construct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments: postConstruct Constructor: postConstruct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"Meta"},{"location":"meta/#meta","text":"Author: Asaf Ben-Zur Best used for: Metacarpal (Fingers), Metatarsal (Toes) This module will create a control for every root guide position, as well as a few global splay controls for the collection of controls based on settings. The play controls will behave as a global tweaker for the control collection, allowing easier animation. In order to implement \"splayB\" feature, simply parent a FK chain modules under each of the main meta guides. This module construction will try to detect a FK module under each guide, and if any exist, will create the second layer splay control for these FK chains.","title":"meta"},{"location":"meta/#defenitions","text":"","title":"Defenitions"},{"location":"meta/#construct","text":"Constructor: construct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"construct"},{"location":"meta/#postconstruct","text":"Constructor: postConstruct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"postConstruct"},{"location":"meta_settings/","text":"meta Settings Author: Asaf Ben-Zur Best used for: Metacarpal (Fingers), Metatarsal (Toes) This module will create a control for every root guide position, as well as a few global splay controls for the collection of controls based on settings. The play controls will behave as a global tweaker for the control collection, allowing easier animation. In order to implement \"splayB\" feature, simply parent a FK chain modules under each of the main meta guides. This module construction will try to detect a FK module under each guide, and if any exist, will create the second layer splay control for these FK chains. Attributes GlobalSettings Attribute Name Default Description tweakersControlShape cone Meta main controls shape tweakerChannelControl T R S X v v v Y v v v Z v v v Meta control channel-box settings SplaySettings Attribute Name Default Description doSplayA True Choose if you want to create Splay A control doSplayAMid True Choose if you want to create Splay A Mid control doSplayB True Choose if you want to create Splay B control doSplayBMid True Choose if you want to create Splay B Mid control splayControlShape diamond splay controls shape splayChannelControl T R S X v v Y v v Z v v Splay control channel-box settings CurlSettings Attribute Name Default Description doCurls True Choose if you want to create curl channels","title":"Meta settings"},{"location":"meta_settings/#meta-settings","text":"Author: Asaf Ben-Zur Best used for: Metacarpal (Fingers), Metatarsal (Toes) This module will create a control for every root guide position, as well as a few global splay controls for the collection of controls based on settings. The play controls will behave as a global tweaker for the control collection, allowing easier animation. In order to implement \"splayB\" feature, simply parent a FK chain modules under each of the main meta guides. This module construction will try to detect a FK module under each guide, and if any exist, will create the second layer splay control for these FK chains.","title":"meta Settings"},{"location":"meta_settings/#attributes","text":"","title":"Attributes"},{"location":"meta_settings/#globalsettings","text":"Attribute Name Default Description tweakersControlShape cone Meta main controls shape tweakerChannelControl T R S X v v v Y v v v Z v v v Meta control channel-box settings","title":"GlobalSettings"},{"location":"meta_settings/#splaysettings","text":"Attribute Name Default Description doSplayA True Choose if you want to create Splay A control doSplayAMid True Choose if you want to create Splay A Mid control doSplayB True Choose if you want to create Splay B control doSplayBMid True Choose if you want to create Splay B Mid control splayControlShape diamond splay controls shape splayChannelControl T R S X v v Y v v Z v v Splay control channel-box settings","title":"SplaySettings"},{"location":"meta_settings/#curlsettings","text":"Attribute Name Default Description doCurls True Choose if you want to create curl channels","title":"CurlSettings"},{"location":"mnsSpacesTool/","text":"mnsSpacesTool === Author: Assaf Ben Zur === This simple animation tool was created to allow animators to space switch and IK->FK switch easily. This tool is selection based. Please select controls to enable relevant capabilities. For spaces, simply select the controls you want to act upon, choose your target spaces, and press \"switch\". This will switch the space, while maintaining the controls's transforms, using keys created automatically. For Limbs, simple select any control/s for the limbs that you wish to act upon, and press the relevant button- To-IK or To-FK. This will switch the limb/controls to the selected state. This tool also includes Auto-Key switches, as well as a sequence and bake modes. Classes MnsSpacesTool [Class] Spaces Tool UI Class. Constructor: MnsSpacesTool( parent ( str ) ; [default: mnsUIUtils.get_maya_window()]) Inherits from: form_class, base_class Class Members: mayaSelectCallBack mayaTimeChangedCallBack limbs spaceCtrls Methods: initializeView [method] insertCallbacks [method] removeCallbacks [method] selectIKFKHost [method] setAvailbleLimbs [method] setAvailbleSpaces [method] setIKFKView [method] setSequenceRange [method] setSpacesMode [method] setSpacesView [method] spaceSwitch [method] sceneSelectionChanged [method] getFramesListFromUIState [method] getSpaceEnumIndexByName [method] setAutoKeyMode [method] setSequenceMode [method] connectSignals [method] eventFilter [method] loadWindow [method] fkIKSwitch [method] MnsSpacesTool methods initializeView [ MnsSpacesTool class method] Constructor: initializeView(self) Return: None Arguments: self Optional Arguments: insertCallbacks [ MnsSpacesTool class method] Constructor: insertCallbacks(self) Return: None Arguments: self Optional Arguments: removeCallbacks [ MnsSpacesTool class method] Constructor: removeCallbacks(self) Return: None Arguments: self Optional Arguments: selectIKFKHost [ MnsSpacesTool class method] Constructor: selectIKFKHost(self) Return: None Arguments: self Optional Arguments: setAvailbleLimbs [ MnsSpacesTool class method] Constructor: setAvailbleLimbs(self) Return: None Arguments: self Optional Arguments: setAvailbleSpaces [ MnsSpacesTool class method] Constructor: setAvailbleSpaces(self) Return: None Arguments: self Optional Arguments: setIKFKView [ MnsSpacesTool class method] Constructor: setIKFKView(self) Return: None Arguments: self Optional Arguments: setSequenceRange [ MnsSpacesTool class method] Constructor: setSequenceRange(self) Return: None Arguments: self Optional Arguments: setSpacesMode [ MnsSpacesTool class method] Constructor: setSpacesMode(self) Return: None Arguments: self Optional Arguments: setSpacesView [ MnsSpacesTool class method] Constructor: setSpacesView(self) Return: None Arguments: self Optional Arguments: spaceSwitch [ MnsSpacesTool class method] Constructor: spaceSwitch(self) Return: None Arguments: self Optional Arguments: sceneSelectionChanged [ MnsSpacesTool class method] Constructor: sceneSelectionChanged(self, dummy = None) Return: None Arguments: self dummy ( str ) ; [default: None] Optional Arguments: getFramesListFromUIState [ MnsSpacesTool class method] Constructor: getFramesListFromUIState(self, hostCtrl = None, attrName = \"\") Return: None Arguments: self hostCtrl ( str ) ; [default: None] attrName ( str ) ; [default: \"\"] Optional Arguments: getSpaceEnumIndexByName [ MnsSpacesTool class method] Constructor: getSpaceEnumIndexByName(self, node, attr, targetSpaceName) Return: None Arguments: self node attr targetSpaceName Optional Arguments: setAutoKeyMode [ MnsSpacesTool class method] Constructor: setAutoKeyMode(self, state) Return: None Arguments: self state Optional Arguments: setSequenceMode [ MnsSpacesTool class method] Constructor: setSequenceMode(self, state) Return: None Arguments: self state Optional Arguments: connectSignals [ MnsSpacesTool class method] Connect all UI Signals. Constructor: connectSignals(self) Return: None Arguments: self Optional Arguments: eventFilter [ MnsSpacesTool class method] Override event filter to catch the close trigger to delete the callback Constructor: eventFilter(self, source, event) Return: None Arguments: self source event Optional Arguments: loadWindow [ MnsSpacesTool class method] Show window method. Constructor: loadWindow(self) Return: None Arguments: self Optional Arguments: fkIKSwitch [ MnsSpacesTool class method] mode 0 - Match FK to IK mode 1 - Match IK to FK Constructor: fkIKSwitch(self, mode = 0) Return: None Arguments: self mode ( int ) ; [default: 0] Optional Arguments: Defenitions loadSpacesTool Load the Def Serach UI from globals, avoid UI duplication. Constructor: loadSpacesTool() Return: None Arguments: Keyword Arguments:","title":"mnsSpacesTool"},{"location":"mnsSpacesTool/#mnsspacestool","text":"=== Author: Assaf Ben Zur === This simple animation tool was created to allow animators to space switch and IK->FK switch easily. This tool is selection based. Please select controls to enable relevant capabilities. For spaces, simply select the controls you want to act upon, choose your target spaces, and press \"switch\". This will switch the space, while maintaining the controls's transforms, using keys created automatically. For Limbs, simple select any control/s for the limbs that you wish to act upon, and press the relevant button- To-IK or To-FK. This will switch the limb/controls to the selected state. This tool also includes Auto-Key switches, as well as a sequence and bake modes.","title":"mnsSpacesTool"},{"location":"mnsSpacesTool/#classes","text":"","title":"Classes"},{"location":"mnsSpacesTool/#mnsspacestool-class","text":"Spaces Tool UI Class. Constructor: MnsSpacesTool( parent ( str ) ; [default: mnsUIUtils.get_maya_window()]) Inherits from: form_class, base_class Class Members: mayaSelectCallBack mayaTimeChangedCallBack limbs spaceCtrls Methods: initializeView [method] insertCallbacks [method] removeCallbacks [method] selectIKFKHost [method] setAvailbleLimbs [method] setAvailbleSpaces [method] setIKFKView [method] setSequenceRange [method] setSpacesMode [method] setSpacesView [method] spaceSwitch [method] sceneSelectionChanged [method] getFramesListFromUIState [method] getSpaceEnumIndexByName [method] setAutoKeyMode [method] setSequenceMode [method] connectSignals [method] eventFilter [method] loadWindow [method] fkIKSwitch [method]","title":"MnsSpacesTool [Class]"},{"location":"mnsSpacesTool/#mnsspacestool-methods","text":"","title":"MnsSpacesTool  methods"},{"location":"mnsSpacesTool/#defenitions","text":"","title":"Defenitions"},{"location":"mnsSpacesTool/#loadspacestool","text":"Load the Def Serach UI from globals, avoid UI duplication. Constructor: loadSpacesTool() Return: None Arguments: Keyword Arguments:","title":"loadSpacesTool"},{"location":"mnsSpringTool/","text":"mnsSpringTool === Author: Assaf Ben Zur === Classes MnsGradientWidget [Class] Constructor: MnsGradientWidget( parent ( str ) ; [default: None]) Inherits from: QtWidgets.QWidget Class Members: initialized currentSpringNodes refSpringNode attrName origValues Methods: gatherCurrentValues [method] paintEvent [method] MnsGradientWidget methods gatherCurrentValues [ MnsGradientWidget class method] Constructor: gatherCurrentValues(self) Return: None Arguments: self Optional Arguments: paintEvent [ MnsGradientWidget class method] Constructor: paintEvent(self, event) Return: None Arguments: self event Optional Arguments: MnsSpringTool [Class] Spring Tool UI Class. Constructor: MnsSpringTool( parent ( str ) ; [default: mnsUIUtils.get_maya_window()]) Inherits from: form_class, base_class Class Members: rigTops rigTop puppetRoot namespace springNodes springNodesByIndex currentSpringNodes drawType stifGradCtrl dampingGradCtrl Methods: collectSpringNodes [method] drawCommonAttrsToUi [method] drawCurveSpringNodeToUI [method] drawTransformSpringNodeToUI [method] filterView [method] getCurrentSpringNodes [method] initializeData [method] initializeSprings [method] initializeView [method] setRigTop [method] setSpringNode [method] setValueTrigger [method] getGradientControl [method] connectSignals [method] loadWindow [method] MnsSpringTool methods collectSpringNodes [ MnsSpringTool class method] Constructor: collectSpringNodes(self) Return: None Arguments: self Optional Arguments: drawCommonAttrsToUi [ MnsSpringTool class method] Constructor: drawCommonAttrsToUi(self) Return: None Arguments: self Optional Arguments: drawCurveSpringNodeToUI [ MnsSpringTool class method] Constructor: drawCurveSpringNodeToUI(self) Return: None Arguments: self Optional Arguments: drawTransformSpringNodeToUI [ MnsSpringTool class method] Constructor: drawTransformSpringNodeToUI(self) Return: None Arguments: self Optional Arguments: filterView [ MnsSpringTool class method] Constructor: filterView(self) Return: None Arguments: self Optional Arguments: getCurrentSpringNodes [ MnsSpringTool class method] Constructor: getCurrentSpringNodes(self) Return: None Arguments: self Optional Arguments: initializeData [ MnsSpringTool class method] Constructor: initializeData(self) Return: None Arguments: self Optional Arguments: initializeSprings [ MnsSpringTool class method] Constructor: initializeSprings(self) Return: None Arguments: self Optional Arguments: initializeView [ MnsSpringTool class method] Constructor: initializeView(self) Return: None Arguments: self Optional Arguments: setRigTop [ MnsSpringTool class method] Constructor: setRigTop(self) Return: None Arguments: self Optional Arguments: setSpringNode [ MnsSpringTool class method] Constructor: setSpringNode(self) Return: None Arguments: self Optional Arguments: setValueTrigger [ MnsSpringTool class method] Constructor: setValueTrigger(self, attr, value) Return: None Arguments: self attr value Optional Arguments: getGradientControl [ MnsSpringTool class method] Constructor: getGradientControl(self, attr = None) Return: None Arguments: self attr ( str ) ; [default: None] Optional Arguments: connectSignals [ MnsSpringTool class method] Connect all UI Signals. Constructor: connectSignals(self) Return: None Arguments: self Optional Arguments: loadWindow [ MnsSpringTool class method] Show window method. Constructor: loadWindow(self) Return: None Arguments: self Optional Arguments: Defenitions loadSpringTool Load the Def Serach UI from globals, avoid UI duplication. Constructor: loadSpringTool() Return: None Arguments: Keyword Arguments:","title":"mnsSpringTool"},{"location":"mnsSpringTool/#mnsspringtool","text":"=== Author: Assaf Ben Zur ===","title":"mnsSpringTool"},{"location":"mnsSpringTool/#classes","text":"","title":"Classes"},{"location":"mnsSpringTool/#mnsgradientwidget-class","text":"Constructor: MnsGradientWidget( parent ( str ) ; [default: None]) Inherits from: QtWidgets.QWidget Class Members: initialized currentSpringNodes refSpringNode attrName origValues Methods: gatherCurrentValues [method] paintEvent [method]","title":"MnsGradientWidget [Class]"},{"location":"mnsSpringTool/#mnsgradientwidget-methods","text":"","title":"MnsGradientWidget  methods"},{"location":"mnsSpringTool/#mnsspringtool-class","text":"Spring Tool UI Class. Constructor: MnsSpringTool( parent ( str ) ; [default: mnsUIUtils.get_maya_window()]) Inherits from: form_class, base_class Class Members: rigTops rigTop puppetRoot namespace springNodes springNodesByIndex currentSpringNodes drawType stifGradCtrl dampingGradCtrl Methods: collectSpringNodes [method] drawCommonAttrsToUi [method] drawCurveSpringNodeToUI [method] drawTransformSpringNodeToUI [method] filterView [method] getCurrentSpringNodes [method] initializeData [method] initializeSprings [method] initializeView [method] setRigTop [method] setSpringNode [method] setValueTrigger [method] getGradientControl [method] connectSignals [method] loadWindow [method]","title":"MnsSpringTool [Class]"},{"location":"mnsSpringTool/#mnsspringtool-methods","text":"","title":"MnsSpringTool  methods"},{"location":"mnsSpringTool/#defenitions","text":"","title":"Defenitions"},{"location":"mnsSpringTool/#loadspringtool","text":"Load the Def Serach UI from globals, avoid UI duplication. Constructor: loadSpringTool() Return: None Arguments: Keyword Arguments:","title":"loadSpringTool"},{"location":"modulePresetEditor/","text":"modulePresetEditor === Author: Assaf Ben Zur === This tool was designed to manage module presets. As Mansur-Rig modules comatin many attrbiutes, it is sometimes more convenient to use a predefined preset to speed up the wrokflow. Mansur-Rig includes some module presets, although this was designed mainly to allow usesrs to create their own presets, essentially saving the module settings' state. Classes ExportPresetDialog [Class] Constructor: ExportPresetDialog( parent ( str ) ; [default: None]) Inherits from: QtWidgets.QDialog Class Members: buttonBox layout author_le description_te Methods: getInfo [method] ExportPresetDialog methods getInfo [ ExportPresetDialog class method] Constructor: getInfo(self) Return: None Arguments: self Optional Arguments: MnsModulePresetEditor [Class] Module preset Tool UI Class. Constructor: MnsModulePresetEditor( parent ( str ) ; [default: mnsUIUtils.get_maya_window()]) Inherits from: form_class, base_class Class Members: iconsDir rigTop mnsModulePresetsDir settingsWindowDynUI moduleType presetsDict currentPreset Methods: loadPreset [method] connectSignals [method] exportPreset [method] readCurrentModuleValues [method] importPreset [method] gatherAdditionalModulePresetsPaths [method] initlizeUI [method] readPresetFile [method] readPreset [method] loadWindow [method] initializeView [method] MnsModulePresetEditor methods loadPreset [ MnsModulePresetEditor class method] Apply the selected preset onto the settings window Constructor: loadPreset(self, kwargs) Return: None Arguments: self kwargs Optional Arguments: connectSignals [ MnsModulePresetEditor class method] Connect all UI Signals. Constructor: connectSignals(self) Return: None Arguments: self Optional Arguments: exportPreset [ MnsModulePresetEditor class method] Export current settings window state as a preset. Constructor: exportPreset(self) Return: None Arguments: self Optional Arguments: readCurrentModuleValues [ MnsModulePresetEditor class method] From the current preset, read the current UI state. This method will return a formatted data assembly of all values and fields within the module-settings tab Constructor: readCurrentModuleValues(self) Return: None Arguments: self Optional Arguments: importPreset [ MnsModulePresetEditor class method] Import a preset from file Constructor: importPreset(self) Return: None Arguments: self Optional Arguments: gatherAdditionalModulePresetsPaths [ MnsModulePresetEditor class method] Initialize any custom module presets paths that already exist within the data collect json. Constructor: gatherAdditionalModulePresetsPaths(self, kwargs) Return: None Arguments: self kwargs Optional Arguments: initlizeUI [ MnsModulePresetEditor class method] Initialize the UI display Constructor: initlizeUI(self) Return: None Arguments: self Optional Arguments: readPresetFile [ MnsModulePresetEditor class method] Read a preset from the selected file input Constructor: readPresetFile(self, filePath = \"\") Return: None Arguments: self filePath ( str ) ; [default: \"\"] Optional Arguments: readPreset [ MnsModulePresetEditor class method] Read the curretly selected preset Constructor: readPreset(self) Return: None Arguments: self Optional Arguments: loadWindow [ MnsModulePresetEditor class method] Show window method. Constructor: loadWindow(self) Return: None Arguments: self Optional Arguments: initializeView [ MnsModulePresetEditor class method] initialize data into the UI Constructor: initializeView(self, selection = None) Return: None Arguments: self selection ( str ) ; [default: None] Optional Arguments: Defenitions loadModulePresetEditor Load the module preset window, avoid UI duplication. Constructor: loadModulePresetEditor(parent=mnsUIUtils.get_maya_window()) Return: None Arguments: parent ( str ) ; [default: mnsUIUtils.get_maya_window()] Keyword Arguments:","title":"modulePresetEditor"},{"location":"modulePresetEditor/#modulepreseteditor","text":"=== Author: Assaf Ben Zur === This tool was designed to manage module presets. As Mansur-Rig modules comatin many attrbiutes, it is sometimes more convenient to use a predefined preset to speed up the wrokflow. Mansur-Rig includes some module presets, although this was designed mainly to allow usesrs to create their own presets, essentially saving the module settings' state.","title":"modulePresetEditor"},{"location":"modulePresetEditor/#classes","text":"","title":"Classes"},{"location":"modulePresetEditor/#exportpresetdialog-class","text":"Constructor: ExportPresetDialog( parent ( str ) ; [default: None]) Inherits from: QtWidgets.QDialog Class Members: buttonBox layout author_le description_te Methods: getInfo [method]","title":"ExportPresetDialog [Class]"},{"location":"modulePresetEditor/#exportpresetdialog-methods","text":"","title":"ExportPresetDialog  methods"},{"location":"modulePresetEditor/#mnsmodulepreseteditor-class","text":"Module preset Tool UI Class. Constructor: MnsModulePresetEditor( parent ( str ) ; [default: mnsUIUtils.get_maya_window()]) Inherits from: form_class, base_class Class Members: iconsDir rigTop mnsModulePresetsDir settingsWindowDynUI moduleType presetsDict currentPreset Methods: loadPreset [method] connectSignals [method] exportPreset [method] readCurrentModuleValues [method] importPreset [method] gatherAdditionalModulePresetsPaths [method] initlizeUI [method] readPresetFile [method] readPreset [method] loadWindow [method] initializeView [method]","title":"MnsModulePresetEditor [Class]"},{"location":"modulePresetEditor/#mnsmodulepreseteditor-methods","text":"","title":"MnsModulePresetEditor  methods"},{"location":"modulePresetEditor/#defenitions","text":"","title":"Defenitions"},{"location":"modulePresetEditor/#loadmodulepreseteditor","text":"Load the module preset window, avoid UI duplication. Constructor: loadModulePresetEditor(parent=mnsUIUtils.get_maya_window()) Return: None Arguments: parent ( str ) ; [default: mnsUIUtils.get_maya_window()] Keyword Arguments:","title":"loadModulePresetEditor"},{"location":"moduleVisUI/","text":"moduleVisUI === Author: Assaf Ben Zur === mnsModuleVisUI A simple UI to control puppet's module animation controls visibility. Classes MnsModuleVisUI [Class] Main UI Class Constructor: MnsModuleVisUI( parent ( str ) ; [default: mnsUIUtils.get_maya_window()]) Inherits from: form_class, base_class Class Members: iconDir bodyLOHolder facialLOHolder layoutHolders puppetRootVisChaneCallbackID rigTopSubGrpVisCallbackID puppetRoot rigTop rigTops moduleAttrs btnDict allBtnDict layoutByAttrs Methods: clearLocalVars [method] destroyRigTopTab [method] destroyUI [method] drawUI [method] filterRows [method] getAttrsFromPuppetRoot [method] getUITabState [method] initializeRigTopTab [method] initializeUI [method] refresh [method] setGlobAllTrigger [method] setGlobPrimariesTrigger [method] setGlobSecondariesTrigger [method] setGlobTertiariesTrigger [method] setRowsVisBasedOnState [method] updateRigTopUIState [method] detarmineAttrType [method] drawRigTopBoolRow [method] drawRigTopEnumRow [method] toggleAllStateForRow [method] changeModuleVisState [method] drawModuleRow [method] setRowVisBasedOnState [method] setRigTopBoolAttrState [method] setRigTopBtnState [method] connectSignals [method] loadWindow [method] eventFilter [method] MnsModuleVisUI methods clearLocalVars [ MnsModuleVisUI class method] Constructor: clearLocalVars(self) Return: None Arguments: self Optional Arguments: destroyRigTopTab [ MnsModuleVisUI class method] Constructor: destroyRigTopTab(self) Return: None Arguments: self Optional Arguments: destroyUI [ MnsModuleVisUI class method] Constructor: destroyUI(self) Return: None Arguments: self Optional Arguments: drawUI [ MnsModuleVisUI class method] Constructor: drawUI(self) Return: None Arguments: self Optional Arguments: filterRows [ MnsModuleVisUI class method] Constructor: filterRows(self) Return: None Arguments: self Optional Arguments: getAttrsFromPuppetRoot [ MnsModuleVisUI class method] Constructor: getAttrsFromPuppetRoot(self) Return: None Arguments: self Optional Arguments: getUITabState [ MnsModuleVisUI class method] Constructor: getUITabState(self) Return: None Arguments: self Optional Arguments: initializeRigTopTab [ MnsModuleVisUI class method] Constructor: initializeRigTopTab(self) Return: None Arguments: self Optional Arguments: initializeUI [ MnsModuleVisUI class method] Constructor: initializeUI(self) Return: None Arguments: self Optional Arguments: refresh [ MnsModuleVisUI class method] Constructor: refresh(self) Return: None Arguments: self Optional Arguments: setGlobAllTrigger [ MnsModuleVisUI class method] Constructor: setGlobAllTrigger(self) Return: None Arguments: self Optional Arguments: setGlobPrimariesTrigger [ MnsModuleVisUI class method] Constructor: setGlobPrimariesTrigger(self) Return: None Arguments: self Optional Arguments: setGlobSecondariesTrigger [ MnsModuleVisUI class method] Constructor: setGlobSecondariesTrigger(self) Return: None Arguments: self Optional Arguments: setGlobTertiariesTrigger [ MnsModuleVisUI class method] Constructor: setGlobTertiariesTrigger(self) Return: None Arguments: self Optional Arguments: setRowsVisBasedOnState [ MnsModuleVisUI class method] Constructor: setRowsVisBasedOnState(self) Return: None Arguments: self Optional Arguments: updateRigTopUIState [ MnsModuleVisUI class method] Constructor: updateRigTopUIState(self) Return: None Arguments: self Optional Arguments: detarmineAttrType [ MnsModuleVisUI class method] Constructor: detarmineAttrType(self, attr) Return: None Arguments: self attr Optional Arguments: drawRigTopBoolRow [ MnsModuleVisUI class method] Constructor: drawRigTopBoolRow(self, attr) Return: None Arguments: self attr Optional Arguments: drawRigTopEnumRow [ MnsModuleVisUI class method] Constructor: drawRigTopEnumRow(self, attr) Return: None Arguments: self attr Optional Arguments: toggleAllStateForRow [ MnsModuleVisUI class method] Constructor: toggleAllStateForRow(self, attr) Return: None Arguments: self attr Optional Arguments: changeModuleVisState [ MnsModuleVisUI class method] Constructor: changeModuleVisState(self, attr, dummy) Return: None Arguments: self attr dummy Optional Arguments: drawModuleRow [ MnsModuleVisUI class method] Constructor: drawModuleRow(self, attr = None, layoutParent = None) Return: None Arguments: self attr ( str ) ; [default: None] layoutParent ( str ) ; [default: None] Optional Arguments: setRowVisBasedOnState [ MnsModuleVisUI class method] Constructor: setRowVisBasedOnState(self, attrKey) Return: None Arguments: self attrKey Optional Arguments: setRigTopBoolAttrState [ MnsModuleVisUI class method] Constructor: setRigTopBoolAttrState(self, btn, attr, setCurrentState = False) Return: None Arguments: self btn attr setCurrentState ( bool ) ; [default: False] Optional Arguments: setRigTopBtnState [ MnsModuleVisUI class method] Constructor: setRigTopBtnState(self, visBtn, typeBtn, attr, btnType = 0, setCurrentState = False) Return: None Arguments: self visBtn typeBtn attr btnType ( int ) ; [default: 0] setCurrentState ( bool ) ; [default: False] Optional Arguments: connectSignals [ MnsModuleVisUI class method] Connect all UI signals Constructor: connectSignals(self) Return: None Arguments: self Optional Arguments: loadWindow [ MnsModuleVisUI class method] Main UI load Constructor: loadWindow(self) Return: None Arguments: self Optional Arguments: eventFilter [ MnsModuleVisUI class method] Override event filter to catch the close trigger to delete the callback Constructor: eventFilter(self, source, event) Return: None Arguments: self source event Optional Arguments: Defenitions loadModuleVisUI Load the Def Serach UI from globals, avoid UI duplication. Constructor: loadModuleVisUI() Return: None Arguments: Keyword Arguments: puppetRootVisChangedCB Constructor: puppetRootVisChangedCB(msg, plug, otherPlug, clientData, kwargs) Return: None Arguments: msg plug otherPlug clientData kwargs Keyword Arguments: rigTopSubGrpEnumChangedCB Constructor: rigTopSubGrpEnumChangedCB(msg, plug, otherPlug, clientData, kwargs) Return: None Arguments: msg plug otherPlug clientData kwargs Keyword Arguments:","title":"moduleVisUI"},{"location":"moduleVisUI/#modulevisui","text":"=== Author: Assaf Ben Zur === mnsModuleVisUI A simple UI to control puppet's module animation controls visibility.","title":"moduleVisUI"},{"location":"moduleVisUI/#classes","text":"","title":"Classes"},{"location":"moduleVisUI/#mnsmodulevisui-class","text":"Main UI Class Constructor: MnsModuleVisUI( parent ( str ) ; [default: mnsUIUtils.get_maya_window()]) Inherits from: form_class, base_class Class Members: iconDir bodyLOHolder facialLOHolder layoutHolders puppetRootVisChaneCallbackID rigTopSubGrpVisCallbackID puppetRoot rigTop rigTops moduleAttrs btnDict allBtnDict layoutByAttrs Methods: clearLocalVars [method] destroyRigTopTab [method] destroyUI [method] drawUI [method] filterRows [method] getAttrsFromPuppetRoot [method] getUITabState [method] initializeRigTopTab [method] initializeUI [method] refresh [method] setGlobAllTrigger [method] setGlobPrimariesTrigger [method] setGlobSecondariesTrigger [method] setGlobTertiariesTrigger [method] setRowsVisBasedOnState [method] updateRigTopUIState [method] detarmineAttrType [method] drawRigTopBoolRow [method] drawRigTopEnumRow [method] toggleAllStateForRow [method] changeModuleVisState [method] drawModuleRow [method] setRowVisBasedOnState [method] setRigTopBoolAttrState [method] setRigTopBtnState [method] connectSignals [method] loadWindow [method] eventFilter [method]","title":"MnsModuleVisUI [Class]"},{"location":"moduleVisUI/#mnsmodulevisui-methods","text":"","title":"MnsModuleVisUI  methods"},{"location":"moduleVisUI/#defenitions","text":"","title":"Defenitions"},{"location":"moduleVisUI/#loadmodulevisui","text":"Load the Def Serach UI from globals, avoid UI duplication. Constructor: loadModuleVisUI() Return: None Arguments: Keyword Arguments:","title":"loadModuleVisUI"},{"location":"moduleVisUI/#puppetrootvischangedcb","text":"Constructor: puppetRootVisChangedCB(msg, plug, otherPlug, clientData, kwargs) Return: None Arguments: msg plug otherPlug clientData kwargs Keyword Arguments:","title":"puppetRootVisChangedCB"},{"location":"moduleVisUI/#rigtopsubgrpenumchangedcb","text":"Constructor: rigTopSubGrpEnumChangedCB(msg, plug, otherPlug, clientData, kwargs) Return: None Arguments: msg plug otherPlug clientData kwargs Keyword Arguments:","title":"rigTopSubGrpEnumChangedCB"},{"location":"nodes/","text":"nodes === Author: Assaf Ben Zur === Mns nodes utility module. All node creation functions are covered by this module Defenitions addativeConnectionBridge Constructor: addativeConnectionBridge(attrA, attrB) Return: None Arguments: attrA attrB Keyword Arguments: adlNode Create a new addDoubleLinear node using the given inputs. Constructor: adlNode(input1 = None, input2 = None, output = None, kwargs) Return: None Arguments: input1 ( str ) ; [default: None] input2 ( str ) ; [default: None] output ( str ) ; [default: None] kwargs Keyword Arguments: angleBetweenNode Creates an angleBetween node based on specified parameters and outputs. Constructor: angleBetweenNode( kwargs) Return: None Arguments: kwargs Keyword Arguments: blendColorsNode Create a new multiply devide node using the given inputs. Constructor: blendColorsNode(color1 = None, color2 = None, blender = None, output = None, kwargs) Return: None Arguments: color1 ( str ) ; [default: None] color2 ( str ) ; [default: None] blender ( str ) ; [default: None] output ( str ) ; [default: None] kwargs Keyword Arguments: buildGeoAxisVis Utility aid function: Creates a Axis-Vis geometry object based on parameters Constructor: buildGeoAxisVis( kwargs) Return: None Arguments: kwargs Keyword Arguments: buildGeoAxisVisForParents Utility aid function. Created an Axis-Vis geometry object from each object within the list passed in. Constructor: buildGeoAxisVisForParents( kwargs) Return: None Arguments: kwargs Keyword Arguments: buildVisCubesForPSOCNode Single use function. From a given MnsPointsOnCurve node, create output 'visCubes'. Constructor: buildVisCubesForPSOCNode(node = \"\", kwargs) Return: None Arguments: node ( str ) ; [default: \"\"] kwargs Keyword Arguments: choiceNode Create a new choice node using the given inputs. Constructor: choiceNode(inputs = [], output = None, kwargs) Return: None Arguments: inputs ( list ) ; [default: []] output ( str ) ; [default: None] kwargs Keyword Arguments: clampNode Create a new clamp node using the given inputs. Constructor: clampNode(inputA = [], maxA = [], minA = [], output = [], kwargs) Return: None Arguments: inputA ( list ) ; [default: []] maxA ( list ) ; [default: []] minA ( list ) ; [default: []] output ( list ) ; [default: []] kwargs Keyword Arguments: conditionNode Create a new condition node using the given inputs. Constructor: conditionNode(firstTerm = None, secondTerm = None, colorIfTrue = None, colorIfFalse = None, outColor = None, kwargs) Return: None Arguments: firstTerm ( str ) ; [default: None] secondTerm ( str ) ; [default: None] colorIfTrue ( str ) ; [default: None] colorIfFalse ( str ) ; [default: None] outColor ( str ) ; [default: None] kwargs Keyword Arguments: connectAttrAttempt Attempt to connect the sourceAttr given to the target attribute passed in. Constructor: connectAttrAttempt(attrA, nodeAttr) Return: None Arguments: attrA nodeAttr Keyword Arguments: connectSetAttempt Attemp to connect the values passed in. If a failue status was return, attempt a 'setAttr' next. Constructor: connectSetAttempt(attrA, nodeAttr, valType) Return: None Arguments: attrA nodeAttr valType Keyword Arguments: decomposeMatrixNode Create a new multiplyDoubleLinear node using the given inputs. Constructor: decomposeMatrixNode(inputMatrix = None, outputTranslate = None, outputRotate = None, outputScale = None, kwargs) Return: None Arguments: inputMatrix ( str ) ; [default: None] outputTranslate ( str ) ; [default: None] outputRotate ( str ) ; [default: None] outputScale ( str ) ; [default: None] kwargs Keyword Arguments: distBetweenNode Create a new distanceBetween node using the given inputs. Constructor: distBetweenNode(inMatrix1 = None, inMatrix2 = None, distance = None, kwargs) Return: None Arguments: inMatrix1 ( str ) ; [default: None] inMatrix2 ( str ) ; [default: None] distance ( str ) ; [default: None] kwargs Keyword Arguments: imagePlaneNode Create a new imagePlane node using the given inputs. Constructor: imagePlaneNode(camera = None, kwargs) Return: None Arguments: camera ( str ) ; [default: None] kwargs Keyword Arguments: inverseMatrixNode Create a new inverseMatrix node using the given inputs. Constructor: inverseMatrixNode(inputMatrix = None, outputMatrix = None, kwargs) Return: None Arguments: inputMatrix ( str ) ; [default: None] outputMatrix ( str ) ; [default: None] kwargs Keyword Arguments: mayaConstraint Create a new constraint node using the given inputs. Constructor: mayaConstraint(sources = [], target = None, kwargs) Return: None Arguments: sources ( list ) ; [default: []] target ( str ) ; [default: None] kwargs Keyword Arguments: mdNode Create a new multiply devide node using the given inputs. Constructor: mdNode(input1 = None, input2 = None, output = None, kwargs) Return: None Arguments: input1 ( str ) ; [default: None] input2 ( str ) ; [default: None] output ( str ) ; [default: None] kwargs Keyword Arguments: mdlNode Create a new multiplyDoubleLinear node using the given inputs. Constructor: mdlNode(input1 = None, input2 = None, output = None, kwargs) Return: None Arguments: input1 ( str ) ; [default: None] input2 ( str ) ; [default: None] output ( str ) ; [default: None] kwargs Keyword Arguments: mnsAnnotateNode Creates an mnsAnnotateNode node based on specified parameters and outputs. Input as a node.channel list. Constructor: mnsAnnotateNode( kwargs) Return: None Arguments: kwargs Keyword Arguments: mnsAutoWheelDriveNode Creates an mnsAutoWheelDrive node based on specified parameters and outputs. Constructor: mnsAutoWheelDriveNode( kwargs) Return: None Arguments: kwargs Keyword Arguments: mnsBuildTransformsCurveNode Creates an mnsBuildTransformsCurveNode node based on specified parameters and outputs. Constructor: mnsBuildTransformsCurveNode( kwargs) Return: None Arguments: kwargs Keyword Arguments: mnsCameraGateRatioNode Create a new mnsCameraGateRatio node using the given inputs. Constructor: mnsCameraGateRatioNode( kwargs) Return: None Arguments: kwargs Keyword Arguments: mnsClosestPointsOnMeshNode Creates an mnsClosestPointsOnMesh node based on specified parameters and outputs. Constructor: mnsClosestPointsOnMeshNode( kwargs) Return: None Arguments: kwargs Keyword Arguments: mnsCurveTweakNode Creates an mnsLipZip node based on specified parameters and outputs. A 'buildOutputs' parameter is defaulted to True to build output (of a choice of any mnsType). Constructor: mnsCurveTweakNode( kwargs) Return: None Arguments: kwargs Keyword Arguments: mnsCurveVariableNode Creates an mnsCurveVariable node based on specified parameters and outputs. Constructor: mnsCurveVariableNode( kwargs) Return: None Arguments: kwargs Keyword Arguments: mnsCurveZipNode Creates an mnsPointOnCurve node based on specified parameters and outputs. A 'buildOutputs' parameter is defaulted to True to build output (of a choice of any mnsType). Constructor: mnsCurveZipNode( kwargs) Return: None Arguments: kwargs Keyword Arguments: mnsDynamicPivotNode Constructor: mnsDynamicPivotNode( kwargs) Return: None Arguments: kwargs Keyword Arguments: mnsIKSolver Create a new mnsIkSolver node using the given inputs. Constructor: mnsIKSolver( kwargs) Return: None Arguments: kwargs Keyword Arguments: mnsLipZipNode Creates an mnsLipZip node based on specified parameters and outputs. A 'buildOutputs' parameter is defaulted to True to build output (of a choice of any mnsType). Constructor: mnsLipZipNode( kwargs) Return: None Arguments: kwargs Keyword Arguments: mnsMatrixConstraintNode Creates an mnsMatrixConstraintNode node based on specified parameters and outputs. Constructor: mnsMatrixConstraintNode( kwargs) Return: None Arguments: kwargs Keyword Arguments: mnsNodeRelationshipNode Create a new mnsNodeRelationship node using the given inputs. Constructor: mnsNodeRelationshipNode( kwargs) Return: None Arguments: kwargs Keyword Arguments: mnsPointsOnCurveNode Creates an mnsPointOnCurve node based on specified parameters and outputs. A 'buildOutputs' parameter is defaulted to True to build output (of a choice of any mnsType). Constructor: mnsPointsOnCurveNode( kwargs) Return: None Arguments: kwargs Keyword Arguments: mnsQuatBlendNode Constructor: mnsQuatBlendNode( kwargs) Return: None Arguments: kwargs Keyword Arguments: mnsRemapFloatArrayNode Create a new mnsRemapFlatArray node using the given inputs. Constructor: mnsRemapFloatArrayNode( kwargs) Return: None Arguments: kwargs Keyword Arguments: mnsResampleCurveNode Creates an mnsReampleCurve node based on specified parameters and outputs. Constructor: mnsResampleCurveNode( kwargs) Return: None Arguments: kwargs Keyword Arguments: mnsSimpleRivetsNode Creates an mnsClosestPointsOnMesh node based on specified parameters and outputs. Constructor: mnsSimpleRivetsNode( kwargs) Return: None Arguments: kwargs Keyword Arguments: mnsSimpleSquashNode Constructor: mnsSimpleSquashNode( kwargs) Return: None Arguments: kwargs Keyword Arguments: mnsSphereRollNode Creates an mnsSphereRoll node based on specified parameters and outputs. Constructor: mnsSphereRollNode( kwargs) Return: None Arguments: kwargs Keyword Arguments: mnsSphereVectorPushNode Creates an mnsSphereVectorPush node based on specified parameters and outputs. Constructor: mnsSphereVectorPushNode( kwargs) Return: None Arguments: kwargs Keyword Arguments: mnsSpringCurveNode Creates an mnsSpringCurve node based on specified parameters and outputs. Constructor: mnsSpringCurveNode( kwargs) Return: None Arguments: kwargs Keyword Arguments: mnsThreePointArcNode Creates an mnsReampleCurve node based on specified parameters and outputs. Constructor: mnsThreePointArcNode( kwargs) Return: None Arguments: kwargs Keyword Arguments: mnsTransformSpringNode Creates an mnsAutoWheelDrive node based on specified parameters and outputs. Constructor: mnsTransformSpringNode( kwargs) Return: None Arguments: kwargs Keyword Arguments: mnsVolumeJointNode Creates an mnsClosestPointsOnMesh node based on specified parameters and outputs. Constructor: mnsVolumeJointNode( kwargs) Return: None Arguments: kwargs Keyword Arguments: multMatrixNode Create a new inverseMatrix node using the given inputs. Constructor: multMatrixNode(inputMatricies = [], outputMatrix = None, kwargs) Return: None Arguments: inputMatricies ( list ) ; [default: []] outputMatrix ( str ) ; [default: None] kwargs Keyword Arguments: pmaNode Create a new inverseMatrix node using the given inputs. Constructor: pmaNode(input1Ds = [], input2Ds = [], input3Ds = [], output1D = None, output2D = None, output3D = None, kwargs) Return: None Arguments: input1Ds ( list ) ; [default: []] input2Ds ( list ) ; [default: []] input3Ds ( list ) ; [default: []] output1D ( str ) ; [default: None] output2D ( str ) ; [default: None] output3D ( str ) ; [default: None] kwargs Keyword Arguments: quatSlerpNode Create a new quatSlerp node using the given inputs. Constructor: quatSlerpNode(inputQuatA = None, inputQuatB = None, outputQuat = None, kwargs) Return: None Arguments: inputQuatA ( str ) ; [default: None] inputQuatB ( str ) ; [default: None] outputQuat ( str ) ; [default: None] kwargs Keyword Arguments: quatToEulerNode Create a new quatToEuler node using the given inputs. Constructor: quatToEulerNode(inputQuat = None, outputRotate = None, kwargs) Return: None Arguments: inputQuat ( str ) ; [default: None] outputRotate ( str ) ; [default: None] kwargs Keyword Arguments: reverseCurveNode Constructor: reverseCurveNode(inputCurve = None, outputCurve = None, kwargs) Return: None Arguments: inputCurve ( str ) ; [default: None] outputCurve ( str ) ; [default: None] kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: reverseCurve] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True reverseNode Create a new reverse node using the given inputs. Constructor: reverseNode(inputA = None, output = None, kwargs) Return: None Arguments: inputA ( str ) ; [default: None] output ( str ) ; [default: None] kwargs Keyword Arguments: setAttrAttempt Attempt to set the passed in value into the attribute passed in. Constructor: setAttrAttempt(nodeAttr, value, valType) Return: None Arguments: nodeAttr value valType Keyword Arguments: setRangeNode Create a new setRange node using the given inputs. Constructor: setRangeNode(maxIn = [], minIn = [], oldMax = [], oldMin = [], value = [], outValue = [], kwargs) Return: None Arguments: maxIn ( list ) ; [default: []] minIn ( list ) ; [default: []] oldMax ( list ) ; [default: []] oldMin ( list ) ; [default: []] value ( list ) ; [default: []] outValue ( list ) ; [default: []] kwargs Keyword Arguments:","title":"Nodes"},{"location":"nodes/#nodes","text":"=== Author: Assaf Ben Zur === Mns nodes utility module. All node creation functions are covered by this module","title":"nodes"},{"location":"nodes/#defenitions","text":"","title":"Defenitions"},{"location":"nodes/#addativeconnectionbridge","text":"Constructor: addativeConnectionBridge(attrA, attrB) Return: None Arguments: attrA attrB Keyword Arguments:","title":"addativeConnectionBridge"},{"location":"nodes/#adlnode","text":"Create a new addDoubleLinear node using the given inputs. Constructor: adlNode(input1 = None, input2 = None, output = None, kwargs) Return: None Arguments: input1 ( str ) ; [default: None] input2 ( str ) ; [default: None] output ( str ) ; [default: None] kwargs Keyword Arguments:","title":"adlNode"},{"location":"nodes/#anglebetweennode","text":"Creates an angleBetween node based on specified parameters and outputs. Constructor: angleBetweenNode( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"angleBetweenNode"},{"location":"nodes/#blendcolorsnode","text":"Create a new multiply devide node using the given inputs. Constructor: blendColorsNode(color1 = None, color2 = None, blender = None, output = None, kwargs) Return: None Arguments: color1 ( str ) ; [default: None] color2 ( str ) ; [default: None] blender ( str ) ; [default: None] output ( str ) ; [default: None] kwargs Keyword Arguments:","title":"blendColorsNode"},{"location":"nodes/#buildgeoaxisvis","text":"Utility aid function: Creates a Axis-Vis geometry object based on parameters Constructor: buildGeoAxisVis( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"buildGeoAxisVis"},{"location":"nodes/#buildgeoaxisvisforparents","text":"Utility aid function. Created an Axis-Vis geometry object from each object within the list passed in. Constructor: buildGeoAxisVisForParents( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"buildGeoAxisVisForParents"},{"location":"nodes/#buildviscubesforpsocnode","text":"Single use function. From a given MnsPointsOnCurve node, create output 'visCubes'. Constructor: buildVisCubesForPSOCNode(node = \"\", kwargs) Return: None Arguments: node ( str ) ; [default: \"\"] kwargs Keyword Arguments:","title":"buildVisCubesForPSOCNode"},{"location":"nodes/#choicenode","text":"Create a new choice node using the given inputs. Constructor: choiceNode(inputs = [], output = None, kwargs) Return: None Arguments: inputs ( list ) ; [default: []] output ( str ) ; [default: None] kwargs Keyword Arguments:","title":"choiceNode"},{"location":"nodes/#clampnode","text":"Create a new clamp node using the given inputs. Constructor: clampNode(inputA = [], maxA = [], minA = [], output = [], kwargs) Return: None Arguments: inputA ( list ) ; [default: []] maxA ( list ) ; [default: []] minA ( list ) ; [default: []] output ( list ) ; [default: []] kwargs Keyword Arguments:","title":"clampNode"},{"location":"nodes/#conditionnode","text":"Create a new condition node using the given inputs. Constructor: conditionNode(firstTerm = None, secondTerm = None, colorIfTrue = None, colorIfFalse = None, outColor = None, kwargs) Return: None Arguments: firstTerm ( str ) ; [default: None] secondTerm ( str ) ; [default: None] colorIfTrue ( str ) ; [default: None] colorIfFalse ( str ) ; [default: None] outColor ( str ) ; [default: None] kwargs Keyword Arguments:","title":"conditionNode"},{"location":"nodes/#connectattrattempt","text":"Attempt to connect the sourceAttr given to the target attribute passed in. Constructor: connectAttrAttempt(attrA, nodeAttr) Return: None Arguments: attrA nodeAttr Keyword Arguments:","title":"connectAttrAttempt"},{"location":"nodes/#connectsetattempt","text":"Attemp to connect the values passed in. If a failue status was return, attempt a 'setAttr' next. Constructor: connectSetAttempt(attrA, nodeAttr, valType) Return: None Arguments: attrA nodeAttr valType Keyword Arguments:","title":"connectSetAttempt"},{"location":"nodes/#decomposematrixnode","text":"Create a new multiplyDoubleLinear node using the given inputs. Constructor: decomposeMatrixNode(inputMatrix = None, outputTranslate = None, outputRotate = None, outputScale = None, kwargs) Return: None Arguments: inputMatrix ( str ) ; [default: None] outputTranslate ( str ) ; [default: None] outputRotate ( str ) ; [default: None] outputScale ( str ) ; [default: None] kwargs Keyword Arguments:","title":"decomposeMatrixNode"},{"location":"nodes/#distbetweennode","text":"Create a new distanceBetween node using the given inputs. Constructor: distBetweenNode(inMatrix1 = None, inMatrix2 = None, distance = None, kwargs) Return: None Arguments: inMatrix1 ( str ) ; [default: None] inMatrix2 ( str ) ; [default: None] distance ( str ) ; [default: None] kwargs Keyword Arguments:","title":"distBetweenNode"},{"location":"nodes/#imageplanenode","text":"Create a new imagePlane node using the given inputs. Constructor: imagePlaneNode(camera = None, kwargs) Return: None Arguments: camera ( str ) ; [default: None] kwargs Keyword Arguments:","title":"imagePlaneNode"},{"location":"nodes/#inversematrixnode","text":"Create a new inverseMatrix node using the given inputs. Constructor: inverseMatrixNode(inputMatrix = None, outputMatrix = None, kwargs) Return: None Arguments: inputMatrix ( str ) ; [default: None] outputMatrix ( str ) ; [default: None] kwargs Keyword Arguments:","title":"inverseMatrixNode"},{"location":"nodes/#mayaconstraint","text":"Create a new constraint node using the given inputs. Constructor: mayaConstraint(sources = [], target = None, kwargs) Return: None Arguments: sources ( list ) ; [default: []] target ( str ) ; [default: None] kwargs Keyword Arguments:","title":"mayaConstraint"},{"location":"nodes/#mdnode","text":"Create a new multiply devide node using the given inputs. Constructor: mdNode(input1 = None, input2 = None, output = None, kwargs) Return: None Arguments: input1 ( str ) ; [default: None] input2 ( str ) ; [default: None] output ( str ) ; [default: None] kwargs Keyword Arguments:","title":"mdNode"},{"location":"nodes/#mdlnode","text":"Create a new multiplyDoubleLinear node using the given inputs. Constructor: mdlNode(input1 = None, input2 = None, output = None, kwargs) Return: None Arguments: input1 ( str ) ; [default: None] input2 ( str ) ; [default: None] output ( str ) ; [default: None] kwargs Keyword Arguments:","title":"mdlNode"},{"location":"nodes/#mnsannotatenode","text":"Creates an mnsAnnotateNode node based on specified parameters and outputs. Input as a node.channel list. Constructor: mnsAnnotateNode( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"mnsAnnotateNode"},{"location":"nodes/#mnsautowheeldrivenode","text":"Creates an mnsAutoWheelDrive node based on specified parameters and outputs. Constructor: mnsAutoWheelDriveNode( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"mnsAutoWheelDriveNode"},{"location":"nodes/#mnsbuildtransformscurvenode","text":"Creates an mnsBuildTransformsCurveNode node based on specified parameters and outputs. Constructor: mnsBuildTransformsCurveNode( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"mnsBuildTransformsCurveNode"},{"location":"nodes/#mnscameragaterationode","text":"Create a new mnsCameraGateRatio node using the given inputs. Constructor: mnsCameraGateRatioNode( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"mnsCameraGateRatioNode"},{"location":"nodes/#mnsclosestpointsonmeshnode","text":"Creates an mnsClosestPointsOnMesh node based on specified parameters and outputs. Constructor: mnsClosestPointsOnMeshNode( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"mnsClosestPointsOnMeshNode"},{"location":"nodes/#mnscurvetweaknode","text":"Creates an mnsLipZip node based on specified parameters and outputs. A 'buildOutputs' parameter is defaulted to True to build output (of a choice of any mnsType). Constructor: mnsCurveTweakNode( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"mnsCurveTweakNode"},{"location":"nodes/#mnscurvevariablenode","text":"Creates an mnsCurveVariable node based on specified parameters and outputs. Constructor: mnsCurveVariableNode( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"mnsCurveVariableNode"},{"location":"nodes/#mnscurvezipnode","text":"Creates an mnsPointOnCurve node based on specified parameters and outputs. A 'buildOutputs' parameter is defaulted to True to build output (of a choice of any mnsType). Constructor: mnsCurveZipNode( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"mnsCurveZipNode"},{"location":"nodes/#mnsdynamicpivotnode","text":"Constructor: mnsDynamicPivotNode( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"mnsDynamicPivotNode"},{"location":"nodes/#mnsiksolver","text":"Create a new mnsIkSolver node using the given inputs. Constructor: mnsIKSolver( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"mnsIKSolver"},{"location":"nodes/#mnslipzipnode","text":"Creates an mnsLipZip node based on specified parameters and outputs. A 'buildOutputs' parameter is defaulted to True to build output (of a choice of any mnsType). Constructor: mnsLipZipNode( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"mnsLipZipNode"},{"location":"nodes/#mnsmatrixconstraintnode","text":"Creates an mnsMatrixConstraintNode node based on specified parameters and outputs. Constructor: mnsMatrixConstraintNode( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"mnsMatrixConstraintNode"},{"location":"nodes/#mnsnoderelationshipnode","text":"Create a new mnsNodeRelationship node using the given inputs. Constructor: mnsNodeRelationshipNode( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"mnsNodeRelationshipNode"},{"location":"nodes/#mnspointsoncurvenode","text":"Creates an mnsPointOnCurve node based on specified parameters and outputs. A 'buildOutputs' parameter is defaulted to True to build output (of a choice of any mnsType). Constructor: mnsPointsOnCurveNode( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"mnsPointsOnCurveNode"},{"location":"nodes/#mnsquatblendnode","text":"Constructor: mnsQuatBlendNode( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"mnsQuatBlendNode"},{"location":"nodes/#mnsremapfloatarraynode","text":"Create a new mnsRemapFlatArray node using the given inputs. Constructor: mnsRemapFloatArrayNode( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"mnsRemapFloatArrayNode"},{"location":"nodes/#mnsresamplecurvenode","text":"Creates an mnsReampleCurve node based on specified parameters and outputs. Constructor: mnsResampleCurveNode( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"mnsResampleCurveNode"},{"location":"nodes/#mnssimplerivetsnode","text":"Creates an mnsClosestPointsOnMesh node based on specified parameters and outputs. Constructor: mnsSimpleRivetsNode( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"mnsSimpleRivetsNode"},{"location":"nodes/#mnssimplesquashnode","text":"Constructor: mnsSimpleSquashNode( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"mnsSimpleSquashNode"},{"location":"nodes/#mnssphererollnode","text":"Creates an mnsSphereRoll node based on specified parameters and outputs. Constructor: mnsSphereRollNode( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"mnsSphereRollNode"},{"location":"nodes/#mnsspherevectorpushnode","text":"Creates an mnsSphereVectorPush node based on specified parameters and outputs. Constructor: mnsSphereVectorPushNode( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"mnsSphereVectorPushNode"},{"location":"nodes/#mnsspringcurvenode","text":"Creates an mnsSpringCurve node based on specified parameters and outputs. Constructor: mnsSpringCurveNode( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"mnsSpringCurveNode"},{"location":"nodes/#mnsthreepointarcnode","text":"Creates an mnsReampleCurve node based on specified parameters and outputs. Constructor: mnsThreePointArcNode( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"mnsThreePointArcNode"},{"location":"nodes/#mnstransformspringnode","text":"Creates an mnsAutoWheelDrive node based on specified parameters and outputs. Constructor: mnsTransformSpringNode( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"mnsTransformSpringNode"},{"location":"nodes/#mnsvolumejointnode","text":"Creates an mnsClosestPointsOnMesh node based on specified parameters and outputs. Constructor: mnsVolumeJointNode( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"mnsVolumeJointNode"},{"location":"nodes/#multmatrixnode","text":"Create a new inverseMatrix node using the given inputs. Constructor: multMatrixNode(inputMatricies = [], outputMatrix = None, kwargs) Return: None Arguments: inputMatricies ( list ) ; [default: []] outputMatrix ( str ) ; [default: None] kwargs Keyword Arguments:","title":"multMatrixNode"},{"location":"nodes/#pmanode","text":"Create a new inverseMatrix node using the given inputs. Constructor: pmaNode(input1Ds = [], input2Ds = [], input3Ds = [], output1D = None, output2D = None, output3D = None, kwargs) Return: None Arguments: input1Ds ( list ) ; [default: []] input2Ds ( list ) ; [default: []] input3Ds ( list ) ; [default: []] output1D ( str ) ; [default: None] output2D ( str ) ; [default: None] output3D ( str ) ; [default: None] kwargs Keyword Arguments:","title":"pmaNode"},{"location":"nodes/#quatslerpnode","text":"Create a new quatSlerp node using the given inputs. Constructor: quatSlerpNode(inputQuatA = None, inputQuatB = None, outputQuat = None, kwargs) Return: None Arguments: inputQuatA ( str ) ; [default: None] inputQuatB ( str ) ; [default: None] outputQuat ( str ) ; [default: None] kwargs Keyword Arguments:","title":"quatSlerpNode"},{"location":"nodes/#quattoeulernode","text":"Create a new quatToEuler node using the given inputs. Constructor: quatToEulerNode(inputQuat = None, outputRotate = None, kwargs) Return: None Arguments: inputQuat ( str ) ; [default: None] outputRotate ( str ) ; [default: None] kwargs Keyword Arguments:","title":"quatToEulerNode"},{"location":"nodes/#reversecurvenode","text":"Constructor: reverseCurveNode(inputCurve = None, outputCurve = None, kwargs) Return: None Arguments: inputCurve ( str ) ; [default: None] outputCurve ( str ) ; [default: None] kwargs Keyword Arguments: side ( str ) ; [default: center] - side flag body ( str ) ; [default: reverseCurve] - Node's name body. alpha ( str ) ; [default: A] - Node's Alpha id id ( int ) ; [default: 1] - Node's ID incrementAlpha ( bool ) - Search new node name incrementing Alpha instead of the id if True","title":"reverseCurveNode"},{"location":"nodes/#reversenode","text":"Create a new reverse node using the given inputs. Constructor: reverseNode(inputA = None, output = None, kwargs) Return: None Arguments: inputA ( str ) ; [default: None] output ( str ) ; [default: None] kwargs Keyword Arguments:","title":"reverseNode"},{"location":"nodes/#setattrattempt","text":"Attempt to set the passed in value into the attribute passed in. Constructor: setAttrAttempt(nodeAttr, value, valType) Return: None Arguments: nodeAttr value valType Keyword Arguments:","title":"setAttrAttempt"},{"location":"nodes/#setrangenode","text":"Create a new setRange node using the given inputs. Constructor: setRangeNode(maxIn = [], minIn = [], oldMax = [], oldMin = [], value = [], outValue = [], kwargs) Return: None Arguments: maxIn ( list ) ; [default: []] minIn ( list ) ; [default: []] oldMax ( list ) ; [default: []] oldMin ( list ) ; [default: []] value ( list ) ; [default: []] outValue ( list ) ; [default: []] kwargs Keyword Arguments:","title":"setRangeNode"},{"location":"picker2/","text":"picker2 === Author: Assaf Ben Zur === mnsPicker UI Class This is the UI defenition for the dynamic picker UI build. The picker is essentially defined by the user using scene guides and attributes, this class handles the dynamic drawing of the picker into an actual live UI. - The global width and height attributes of the window is read from the \"Picker Layout Base\" - The picker buttons positions are read and interperted from the rig's 'Picker Layout Guides' - The buttons display settings and actions are drawen from each PLG attributes, which can be editted using the PLG Setting tool. Classes MnsPicker2 [Class] Picker UI Class. Constructor: MnsPicker2( parent ( str ) ; [default: mnsUIUtils.get_maya_window()]) Inherits from: form_class, base_class Class Members: iconsDir currentAttrChangedCallbackID visUpdateInProgress puppetPickersDict currentTabWidget bodyQGV faceQGV pickerWidth pickerHeight rigTops rigTop puppetRoot pickerBase namespace tnPath ctrlCBsToDelete mayaSelectCallBack Methods: displayHowToUseGuide [method] getControllersInView [method] gridToggleTrigger [method] initializeUI [method] refreshButtonVisibility [method] setLocalVarsBasedOnCurrentRigTop [method] setRigTop [method] setThumbnail [method] setWindowSize [method] refreshBtnState [method] connectSignals [method] initializePuppetPicker [method] getPlgPositionandSize [method] eventFilter [method] setBGImages [method] loadWindow [method] drawPlgButton [method] MnsPicker2 methods displayHowToUseGuide [ MnsPicker2 class method] Constructor: displayHowToUseGuide(self) Return: None Arguments: self Optional Arguments: getControllersInView [ MnsPicker2 class method] Constructor: getControllersInView(self) Return: None Arguments: self Optional Arguments: gridToggleTrigger [ MnsPicker2 class method] Constructor: gridToggleTrigger(self) Return: None Arguments: self Optional Arguments: initializeUI [ MnsPicker2 class method] Constructor: initializeUI(self) Return: None Arguments: self Optional Arguments: refreshButtonVisibility [ MnsPicker2 class method] Constructor: refreshButtonVisibility(self) Return: None Arguments: self Optional Arguments: setLocalVarsBasedOnCurrentRigTop [ MnsPicker2 class method] Constructor: setLocalVarsBasedOnCurrentRigTop(self) Return: None Arguments: self Optional Arguments: setRigTop [ MnsPicker2 class method] Constructor: setRigTop(self) Return: None Arguments: self Optional Arguments: setThumbnail [ MnsPicker2 class method] Constructor: setThumbnail(self) Return: None Arguments: self Optional Arguments: setWindowSize [ MnsPicker2 class method] Constructor: setWindowSize(self) Return: None Arguments: self Optional Arguments: refreshBtnState [ MnsPicker2 class method] Constructor: refreshBtnState(self, dummy = None) Return: None Arguments: self dummy ( str ) ; [default: None] Optional Arguments: connectSignals [ MnsPicker2 class method] Connect all UI Signals. Constructor: connectSignals(self) Return: None Arguments: self Optional Arguments: initializePuppetPicker [ MnsPicker2 class method] Main method for the global UI draw. The UI is initialy destroyed, then re-drawen. Constructor: initializePuppetPicker(self) Return: None Arguments: self Optional Arguments: getPlgPositionandSize [ MnsPicker2 class method] Maps a PLG scene position to the UI's local layout position. Since the positions of the PLG within the scene doesn't match the settings of QT, this method maps the passed in plg position, in relation to the main 'Picker Layout Base', and returns the new relative position to the UI layout. This method also retunes the bounding box size of the given plg. Constructor: getPlgPositionandSize(self, plg) Return: list, list (plgPosition(x,y), plgSize (width, height)) Arguments: self plg Optional Arguments: eventFilter [ MnsPicker2 class method] Override event filter to catch the close trigger to delete the callback Constructor: eventFilter(self, source, event) Return: None Arguments: self source event Optional Arguments: setBGImages [ MnsPicker2 class method] Sets the bg image for the UI, in case there is one within the rig-top's attributes. The bg cannot be set to multiple layouts, hence, a 'tab changed' trigger is connected to this method, in order to toggle between the body and facial background images. Constructor: setBGImages(self, bodyQGV = None, faceQGV = None) Return: None Arguments: self bodyQGV ( str ) ; [default: None] faceQGV ( str ) ; [default: None] Optional Arguments: loadWindow [ MnsPicker2 class method] Show window method. Constructor: loadWindow(self) Return: None Arguments: self Optional Arguments: drawPlgButton [ MnsPicker2 class method] This is the main dynamic button draw method. Flow: - Acquire PLG - calculate local space position - gather all relevant settings - draw the button based on the gathered settings and position, and connect it's click signal. Constructor: drawPlgButton(self, plg, bodyQGV, faceQGV) Return: None Arguments: self plg bodyQGV faceQGV Optional Arguments: MnsPickerGraphicViewWidget [Class] Constructor: MnsPickerGraphicViewWidget( parent ( str ) ; [default: mnsUIUtils.get_maya_window()]) Inherits from: QtWidgets.QGraphicsView Class Members: iconsDir bgImage graphicsPixmapItem pickerWindowObj sceneWidth sceneHeight mousePosition isPanActive isZoomActive isRubberBandActive topLeftPosition zoomDelta rubberBandGeometry currentContentRect tabWidget tnPath Methods: determaineSelection [method] getControllersInView [method] getSceneCenterPosition [method] getSelectedItems [method] initializeGraphicsView [method] setBGImage [method] setCurrentStateRect [method] keyPressEvent [method] mouseMoveEvent [method] mousePressEvent [method] mouseReleaseEvent [method] resizeEvent [method] wheelEvent [method] fitContent [method] getContentBoundingRect [method] drawForeground [method] drawConstantFG [method] connectSignals [method] MnsPickerGraphicViewWidget methods determaineSelection [ MnsPickerGraphicViewWidget class method] Constructor: determaineSelection(self) Return: None Arguments: self Optional Arguments: getControllersInView [ MnsPickerGraphicViewWidget class method] Constructor: getControllersInView(self) Return: None Arguments: self Optional Arguments: getSceneCenterPosition [ MnsPickerGraphicViewWidget class method] Constructor: getSceneCenterPosition(self) Return: None Arguments: self Optional Arguments: getSelectedItems [ MnsPickerGraphicViewWidget class method] Constructor: getSelectedItems(self) Return: None Arguments: self Optional Arguments: initializeGraphicsView [ MnsPickerGraphicViewWidget class method] Constructor: initializeGraphicsView(self) Return: None Arguments: self Optional Arguments: setBGImage [ MnsPickerGraphicViewWidget class method] Constructor: setBGImage(self) Return: None Arguments: self Optional Arguments: setCurrentStateRect [ MnsPickerGraphicViewWidget class method] Constructor: setCurrentStateRect(self) Return: None Arguments: self Optional Arguments: keyPressEvent [ MnsPickerGraphicViewWidget class method] Constructor: keyPressEvent(self, event) Return: None Arguments: self event Optional Arguments: mouseMoveEvent [ MnsPickerGraphicViewWidget class method] Constructor: mouseMoveEvent(self, event) Return: None Arguments: self event Optional Arguments: mousePressEvent [ MnsPickerGraphicViewWidget class method] Constructor: mousePressEvent(self, event) Return: None Arguments: self event Optional Arguments: mouseReleaseEvent [ MnsPickerGraphicViewWidget class method] Constructor: mouseReleaseEvent(self, event) Return: None Arguments: self event Optional Arguments: resizeEvent [ MnsPickerGraphicViewWidget class method] Constructor: resizeEvent(self, event) Return: None Arguments: self event Optional Arguments: wheelEvent [ MnsPickerGraphicViewWidget class method] Constructor: wheelEvent(self, event) Return: None Arguments: self event Optional Arguments: fitContent [ MnsPickerGraphicViewWidget class method] Constructor: fitContent(self, fromSel = False) Return: None Arguments: self fromSel ( bool ) ; [default: False] Optional Arguments: getContentBoundingRect [ MnsPickerGraphicViewWidget class method] Constructor: getContentBoundingRect(self, fromSel = False) Return: None Arguments: self fromSel ( bool ) ; [default: False] Optional Arguments: drawForeground [ MnsPickerGraphicViewWidget class method] Constructor: drawForeground(self, painter, rect) Return: None Arguments: self painter rect Optional Arguments: drawConstantFG [ MnsPickerGraphicViewWidget class method] Constructor: drawConstantFG(self, painter, rect, kwargs) Return: None Arguments: self painter rect kwargs Optional Arguments: connectSignals [ MnsPickerGraphicViewWidget class method] Connect all UI Signals. Constructor: connectSignals(self) Return: None Arguments: self Optional Arguments: MnsPickerGraphicsScene [Class] Constructor: MnsPickerGraphicsScene( parent ( str ) ; [default: mnsUIUtils.get_maya_window()], **kwargs ) Inherits from: QtWidgets.QGraphicsScene Class Members: sceneWidth sceneHeight picker2QPushButton [Class] A simple QPushButton re-implementation. This reimplementation is used to control the button's mouse events, used in 'Edit' mode. Constructor: picker2QPushButton( parent ( str ) ; [default: None], plgNode ( str ) ; [default: None], **kwargs ) Inherits from: QtWidgets.QPushButton Class Members: pickerWin plgNode connectedControls directConnectedCtrl isFacial last plgColor textColor text isBold isItalic isUnderline fontSize positionH positionV scaleH scaleV visChangedCB Methods: connectSignals [method] filterConnectedControls [method] rightClickedTrigger [method] setButtonStyle [method] setButtonVis [method] setPositionAndScale [method] mouseDoubleClickEvent [method] pickerButtonClickAction [method] btnDoubleClickedTrigger [method] picker2QPushButton methods connectSignals [ picker2QPushButton class method] Constructor: connectSignals(self) Return: None Arguments: self Optional Arguments: filterConnectedControls [ picker2QPushButton class method] Constructor: filterConnectedControls(self) Return: None Arguments: self Optional Arguments: rightClickedTrigger [ picker2QPushButton class method] Constructor: rightClickedTrigger(self) Return: None Arguments: self Optional Arguments: setButtonStyle [ picker2QPushButton class method] Constructor: setButtonStyle(self) Return: None Arguments: self Optional Arguments: setButtonVis [ picker2QPushButton class method] Constructor: setButtonVis(self) Return: None Arguments: self Optional Arguments: setPositionAndScale [ picker2QPushButton class method] Constructor: setPositionAndScale(self) Return: None Arguments: self Optional Arguments: mouseDoubleClickEvent [ picker2QPushButton class method] Constructor: mouseDoubleClickEvent(self, QMouseEvent) Return: None Arguments: self QMouseEvent Optional Arguments: pickerButtonClickAction [ picker2QPushButton class method] The global action trigger for any picker UI button click trigger. This method will trigger the \"controls selection\" and the \"action script\" for the passed in QPushButton passed in. Constructor: pickerButtonClickAction(self) Return: None Arguments: self Optional Arguments: btnDoubleClickedTrigger [ picker2QPushButton class method] The global action trigger for any picker UI button double click trigger. This method will trigger the \"hierarchy selection\" and the \"action script\" for the passed in QPushButton passed in. Constructor: btnDoubleClickedTrigger(self, clickMode = \"select\") Return: None Arguments: self clickMode ( str ) ; [default: \"select\"] Optional Arguments: Defenitions btnVisChangedCB Constructor: btnVisChangedCB(msg, plug, otherPlug, clientData, kwargs) Return: None Arguments: msg plug otherPlug clientData kwargs Keyword Arguments: loadPicker Load the Def Serach UI from globals, avoid UI duplication. Constructor: loadPicker() Return: None Arguments: Keyword Arguments: visibilityChangedCB Constructor: visibilityChangedCB(msg, plug, otherPlug, clientData, kwargs) Return: None Arguments: msg plug otherPlug clientData kwargs Keyword Arguments:","title":"Picker2"},{"location":"picker2/#picker2","text":"=== Author: Assaf Ben Zur === mnsPicker UI Class This is the UI defenition for the dynamic picker UI build. The picker is essentially defined by the user using scene guides and attributes, this class handles the dynamic drawing of the picker into an actual live UI. - The global width and height attributes of the window is read from the \"Picker Layout Base\" - The picker buttons positions are read and interperted from the rig's 'Picker Layout Guides' - The buttons display settings and actions are drawen from each PLG attributes, which can be editted using the PLG Setting tool.","title":"picker2"},{"location":"picker2/#classes","text":"","title":"Classes"},{"location":"picker2/#mnspicker2-class","text":"Picker UI Class. Constructor: MnsPicker2( parent ( str ) ; [default: mnsUIUtils.get_maya_window()]) Inherits from: form_class, base_class Class Members: iconsDir currentAttrChangedCallbackID visUpdateInProgress puppetPickersDict currentTabWidget bodyQGV faceQGV pickerWidth pickerHeight rigTops rigTop puppetRoot pickerBase namespace tnPath ctrlCBsToDelete mayaSelectCallBack Methods: displayHowToUseGuide [method] getControllersInView [method] gridToggleTrigger [method] initializeUI [method] refreshButtonVisibility [method] setLocalVarsBasedOnCurrentRigTop [method] setRigTop [method] setThumbnail [method] setWindowSize [method] refreshBtnState [method] connectSignals [method] initializePuppetPicker [method] getPlgPositionandSize [method] eventFilter [method] setBGImages [method] loadWindow [method] drawPlgButton [method]","title":"MnsPicker2 [Class]"},{"location":"picker2/#mnspicker2-methods","text":"","title":"MnsPicker2  methods"},{"location":"picker2/#mnspickergraphicviewwidget-class","text":"Constructor: MnsPickerGraphicViewWidget( parent ( str ) ; [default: mnsUIUtils.get_maya_window()]) Inherits from: QtWidgets.QGraphicsView Class Members: iconsDir bgImage graphicsPixmapItem pickerWindowObj sceneWidth sceneHeight mousePosition isPanActive isZoomActive isRubberBandActive topLeftPosition zoomDelta rubberBandGeometry currentContentRect tabWidget tnPath Methods: determaineSelection [method] getControllersInView [method] getSceneCenterPosition [method] getSelectedItems [method] initializeGraphicsView [method] setBGImage [method] setCurrentStateRect [method] keyPressEvent [method] mouseMoveEvent [method] mousePressEvent [method] mouseReleaseEvent [method] resizeEvent [method] wheelEvent [method] fitContent [method] getContentBoundingRect [method] drawForeground [method] drawConstantFG [method] connectSignals [method]","title":"MnsPickerGraphicViewWidget [Class]"},{"location":"picker2/#mnspickergraphicviewwidget-methods","text":"","title":"MnsPickerGraphicViewWidget  methods"},{"location":"picker2/#mnspickergraphicsscene-class","text":"Constructor: MnsPickerGraphicsScene( parent ( str ) ; [default: mnsUIUtils.get_maya_window()], **kwargs ) Inherits from: QtWidgets.QGraphicsScene Class Members: sceneWidth sceneHeight","title":"MnsPickerGraphicsScene [Class]"},{"location":"picker2/#picker2qpushbutton-class","text":"A simple QPushButton re-implementation. This reimplementation is used to control the button's mouse events, used in 'Edit' mode. Constructor: picker2QPushButton( parent ( str ) ; [default: None], plgNode ( str ) ; [default: None], **kwargs ) Inherits from: QtWidgets.QPushButton Class Members: pickerWin plgNode connectedControls directConnectedCtrl isFacial last plgColor textColor text isBold isItalic isUnderline fontSize positionH positionV scaleH scaleV visChangedCB Methods: connectSignals [method] filterConnectedControls [method] rightClickedTrigger [method] setButtonStyle [method] setButtonVis [method] setPositionAndScale [method] mouseDoubleClickEvent [method] pickerButtonClickAction [method] btnDoubleClickedTrigger [method]","title":"picker2QPushButton [Class]"},{"location":"picker2/#picker2qpushbutton-methods","text":"","title":"picker2QPushButton  methods"},{"location":"picker2/#defenitions","text":"","title":"Defenitions"},{"location":"picker2/#btnvischangedcb","text":"Constructor: btnVisChangedCB(msg, plug, otherPlug, clientData, kwargs) Return: None Arguments: msg plug otherPlug clientData kwargs Keyword Arguments:","title":"btnVisChangedCB"},{"location":"picker2/#loadpicker","text":"Load the Def Serach UI from globals, avoid UI duplication. Constructor: loadPicker() Return: None Arguments: Keyword Arguments:","title":"loadPicker"},{"location":"picker2/#visibilitychangedcb","text":"Constructor: visibilityChangedCB(msg, plug, otherPlug, clientData, kwargs) Return: None Arguments: msg plug otherPlug clientData kwargs Keyword Arguments:","title":"visibilityChangedCB"},{"location":"plgSettings/","text":"plgSettings === Author: Assaf Ben Zur === mnsPickerSettings UI Class This is simple UI class built to handle user manipulation to PLG settings easily. The settings window (at freest state) handles: - Color - Side - Control goruping (body/facial) - scaleX, scaleY - Button text - font size, color - font bold, italic, underline - controls select - Action script (pre/post) Classes MnsPLGSettingsUI [Class] mnsPickerSettings UI Class. Constructor: MnsPLGSettingsUI( parent ( str ) ; [default: mnsUIUtils.get_maya_window()]) Inherits from: form_class, base_class Class Members: iconsDir pickerWin relatedButton currentPlgNode Methods: clearScript [method] clearControls [method] createAndLoadPlg [method] runScript [method] acquirePickerWin [method] acquireRelatedButtonForPlg [method] addSceneSelectedControls [method] updateControlsSelect [method] updateActionScript [method] updateButtonColor [method] updateCtrlGroup [method] updatePre [method] updateScale [method] updateSide [method] updateButtonText [method] updateButtonTextColor [method] updateButtonFont [method] updateButtonFontSize [method] connectSignals [method] refreshPickerWindow [method] initView [method] loadSelection [method] removeSceneSelectedControls [method] replaceControls [method] selectControls [method] loadWindow [method] clearView [method] MnsPLGSettingsUI methods clearScript [ MnsPLGSettingsUI class method] 'Clear' (ActionScript) button trigger. Constructor: clearScript(self) Return: None Arguments: self Optional Arguments: clearControls [ MnsPLGSettingsUI class method] 'Clear' (Controls Select) button trigger. Constructor: clearControls(self) Return: None Arguments: self Optional Arguments: createAndLoadPlg [ MnsPLGSettingsUI class method] 'Create PLG' button trigger. A simple wrapper to create a new free plg, then selecting it and loading it into the UI. Constructor: createAndLoadPlg(self) Return: None Arguments: self Optional Arguments: runScript [ MnsPLGSettingsUI class method] 'Run Script' button trigger. Constructor: runScript(self) Return: None Arguments: self Optional Arguments: acquirePickerWin [ MnsPLGSettingsUI class method] A simple method to acquire a 'Picker' UI from global if exists. This is done to manipultae a live picker in turn, instead of needing to refresh the picker. Constructor: acquirePickerWin(self) Return: None Arguments: self Optional Arguments: acquireRelatedButtonForPlg [ MnsPLGSettingsUI class method] Acquire the related button to plg from a picker UI, if it exists. Constructor: acquireRelatedButtonForPlg(self, plg) Return: None Arguments: self plg Optional Arguments: addSceneSelectedControls [ MnsPLGSettingsUI class method] Add current scene selection into the controls to select list. Constructor: addSceneSelectedControls(self) Return: None Arguments: self Optional Arguments: updateControlsSelect [ MnsPLGSettingsUI class method] Button 'controls select' update requested trigger. Constructor: updateControlsSelect(self) Return: None Arguments: self Optional Arguments: updateActionScript [ MnsPLGSettingsUI class method] Button Action-script update requested trigger. Constructor: updateActionScript(self) Return: None Arguments: self Optional Arguments: updateButtonColor [ MnsPLGSettingsUI class method] Button color update requested trigger. Constructor: updateButtonColor(self) Return: None Arguments: self Optional Arguments: updateCtrlGroup [ MnsPLGSettingsUI class method] Button group update requested trigger. Constructor: updateCtrlGroup(self) Return: None Arguments: self Optional Arguments: updatePre [ MnsPLGSettingsUI class method] Button pre checkbox update requested trigger. Constructor: updatePre(self) Return: None Arguments: self Optional Arguments: updateScale [ MnsPLGSettingsUI class method] Button scale update requested trigger. Constructor: updateScale(self, size, kwargs) Return: None Arguments: self size kwargs Optional Arguments: updateSide [ MnsPLGSettingsUI class method] Button side update requested trigger. Constructor: updateSide(self) Return: None Arguments: self Optional Arguments: updateButtonText [ MnsPLGSettingsUI class method] Button text update requested trigger. Constructor: updateButtonText(self) Return: None Arguments: self Optional Arguments: updateButtonTextColor [ MnsPLGSettingsUI class method] Button text-color update requested trigger. Constructor: updateButtonTextColor(self) Return: None Arguments: self Optional Arguments: updateButtonFont [ MnsPLGSettingsUI class method] Button text-font update requested trigger. Constructor: updateButtonFont(self) Return: None Arguments: self Optional Arguments: updateButtonFontSize [ MnsPLGSettingsUI class method] Button text-size update requested trigger. Constructor: updateButtonFontSize(self, size) Return: None Arguments: self size Optional Arguments: connectSignals [ MnsPLGSettingsUI class method] Connect all UI signals. Constructor: connectSignals(self) Return: None Arguments: self Optional Arguments: refreshPickerWindow [ MnsPLGSettingsUI class method] In case a picker window is aquired, call it's 'refresh' method. Constructor: refreshPickerWindow(self) Return: None Arguments: self Optional Arguments: initView [ MnsPLGSettingsUI class method] Initialize view: - Set title - Set Icons - Initialize sides comboBox Constructor: initView(self) Return: None Arguments: self Optional Arguments: loadSelection [ MnsPLGSettingsUI class method] Main UI method- load current selection into the UI. This method will handle reading, and acquiring all settings into the UI from the selected PLG (only it is a plg type). Constructor: loadSelection(self, kwargs) Return: None Arguments: self kwargs Optional Arguments: removeSceneSelectedControls [ MnsPLGSettingsUI class method] Remove current selection from the controls list. Constructor: removeSceneSelectedControls(self) Return: None Arguments: self Optional Arguments: replaceControls [ MnsPLGSettingsUI class method] Replace current 'controls list' with the current scene selection. Constructor: replaceControls(self) Return: None Arguments: self Optional Arguments: selectControls [ MnsPLGSettingsUI class method] Select current controls list btn trigger. Constructor: selectControls(self) Return: None Arguments: self Optional Arguments: loadWindow [ MnsPLGSettingsUI class method] Show windoe method. Constructor: loadWindow(self) Return: None Arguments: self Optional Arguments: clearView [ MnsPLGSettingsUI class method] This method clears all setting from the UI, and restores 'empty' state. Constructor: clearView(self) Return: None Arguments: self Optional Arguments: Defenitions loadPlgSettings Load the PLG Settings UI from globals, avoid UI duplication. Constructor: loadPlgSettings() Return: None Arguments: Keyword Arguments:","title":"plgSettings"},{"location":"plgSettings/#plgsettings","text":"=== Author: Assaf Ben Zur === mnsPickerSettings UI Class This is simple UI class built to handle user manipulation to PLG settings easily. The settings window (at freest state) handles: - Color - Side - Control goruping (body/facial) - scaleX, scaleY - Button text - font size, color - font bold, italic, underline - controls select - Action script (pre/post)","title":"plgSettings"},{"location":"plgSettings/#classes","text":"","title":"Classes"},{"location":"plgSettings/#mnsplgsettingsui-class","text":"mnsPickerSettings UI Class. Constructor: MnsPLGSettingsUI( parent ( str ) ; [default: mnsUIUtils.get_maya_window()]) Inherits from: form_class, base_class Class Members: iconsDir pickerWin relatedButton currentPlgNode Methods: clearScript [method] clearControls [method] createAndLoadPlg [method] runScript [method] acquirePickerWin [method] acquireRelatedButtonForPlg [method] addSceneSelectedControls [method] updateControlsSelect [method] updateActionScript [method] updateButtonColor [method] updateCtrlGroup [method] updatePre [method] updateScale [method] updateSide [method] updateButtonText [method] updateButtonTextColor [method] updateButtonFont [method] updateButtonFontSize [method] connectSignals [method] refreshPickerWindow [method] initView [method] loadSelection [method] removeSceneSelectedControls [method] replaceControls [method] selectControls [method] loadWindow [method] clearView [method]","title":"MnsPLGSettingsUI [Class]"},{"location":"plgSettings/#mnsplgsettingsui-methods","text":"","title":"MnsPLGSettingsUI  methods"},{"location":"plgSettings/#defenitions","text":"","title":"Defenitions"},{"location":"plgSettings/#loadplgsettings","text":"Load the PLG Settings UI from globals, avoid UI duplication. Constructor: loadPlgSettings() Return: None Arguments: Keyword Arguments:","title":"loadPlgSettings"},{"location":"pluginRelease/","text":"pluginRelease PluginRelease UI Class. === Author: Assaf Ben Zur === This admin util is used to procedurally release the mnsPlugins library and version control it. The UI will find c++ projects based on a directory (which can be changed), and will allow the user (admin) to add it to the next build. On top of that, the UI will find the latest released version and extract the existing library within it, and update the release colums accordingly. In case a plugin build exists in the latest version, but it's build project isn't available, the plugin will add to the release option with a flag \"[version]\"- This means that the plugin can only be copied from the version selected to the next release- it cannot bild. Of course this behaviour means that the internal version of the plugin will not change (expected behaviour) to inform the user of the ACTUAL plugin version. This Tool is meant to BUILD the project on each release as opposed to getting a copy of n .mll file. This means that the VS project will have to be maintained (expected) in order to be released- hence keeping up to date with maya's releases. The tool contains a version release choice between patch/minor/major and none. All mnsReleases, including this tool will mark a version with a suffix of the path version . a dateTime stamp. This tool also includes a maya version choice for release which will access a different build configuration within the VS project. The tool accesses the version parameter using a custom macro inserted into the VS project- which will be written with the user version choice- in order for the user to see the correct version when using the plugin-manager \"info\". Classes MnsPluginBuild [Class] MnsPluginBuild Class. A conviniency class. This class will contain eixsting plugin builds. Should contain a plugin name, directory, buildAvailable (bool), and a prevVerDirectory if a build is not available\" Used to access information in a clean manner. Constructor: MnsPluginBuild( name ( str ) ; [default: \"\"], direct ( str ) ; [default: \"\"], buildAvailable ( bool ) ; [default: False], prevVerDirectory ( str ) ; [default: \"\"]) Inherits from: object Class Members: pluginName pluginDirectory buildAvailable prevVerDirectory MnsPluginRelease [Class] pluginRelease UI class Constructor: MnsPluginRelease( parent ( str ) ; [default: mnsUIUtils.get_maya_window()]) Inherits from: form_class, base_class Class Members: pluginBuilds existingPluginNames existingVersionsFoundNames latestVersionPath Methods: getCMakeBaseDir [method] buildPlugin [method] linux_mnsLicDigest_addExtraCMakeLines [method] selectDevDir [method] selectRelDir [method] connectSignals [method] getNewVerString [method] getVersionsForBuild [method] getLastestReleaseVer [method] initExistingDirs [method] releasePluginVer [method] releasePluginVer_legacy [method] loadWindow [method] sortLists [method] dirChanged [method] splitVerStringToList [method] MnsPluginRelease methods getCMakeBaseDir [ MnsPluginRelease class method] Constructor: getCMakeBaseDir(self) Return: None Arguments: self Optional Arguments: buildPlugin [ MnsPluginRelease class method] Constructor: buildPlugin(self, MnsPluginBuild = None, cMakeDir = None, newVersionRootDir = None, plat = \"win\", versionString = None) Return: None Arguments: self MnsPluginBuild ( str ) ; [default: None] cMakeDir ( str ) ; [default: None] newVersionRootDir ( str ) ; [default: None] plat ( str ) ; [default: \"win\"] versionString ( str ) ; [default: None] Optional Arguments: linux_mnsLicDigest_addExtraCMakeLines [ MnsPluginRelease class method] Constructor: linux_mnsLicDigest_addExtraCMakeLines(self, cmakeListsFile = None) Return: None Arguments: self cmakeListsFile ( str ) ; [default: None] Optional Arguments: selectDevDir [ MnsPluginRelease class method] Change dev directory trigger action. Prompts a directory-select dialog for the user to change the dev directory. A directory change will trigger a 'text-changed' signal emit. Constructor: selectDevDir(self) Return: None Arguments: self Optional Arguments: selectRelDir [ MnsPluginRelease class method] Change release directory trigger action. Prompts a directory-select dialog for the user to change the release directory. A directory change will trigger a 'text-changed' signal emit. Constructor: selectRelDir(self) Return: None Arguments: self Optional Arguments: connectSignals [ MnsPluginRelease class method] Connect all the UI signals Constructor: connectSignals(self) Return: None Arguments: self Optional Arguments: getNewVerString [ MnsPluginRelease class method] Get a new vesrtion string based on user version element upgrade. Return as a string. Constructor: getNewVerString(self) Return: string (new version id as string) Arguments: self Optional Arguments: getVersionsForBuild [ MnsPluginRelease class method] Get all valid maya versions for the plugin build directory passed. Constructor: getVersionsForBuild(self, buildDir) Return: list (compatibleVersions) Arguments: self buildDir Optional Arguments: getLastestReleaseVer [ MnsPluginRelease class method] Get the latest version for the build directory Constructor: getLastestReleaseVer(self) Return: None Arguments: self Optional Arguments: initExistingDirs [ MnsPluginRelease class method] Initialize existing directory. Find all available builds for the selected directory. Constructor: initExistingDirs(self) Return: None Arguments: self Optional Arguments: releasePluginVer [ MnsPluginRelease class method] Main version release button trigger. Compiles all needed information based on user UI slections, and triggers a new version build. Constructor: releasePluginVer(self) Return: None Arguments: self Optional Arguments: releasePluginVer_legacy [ MnsPluginRelease class method] Main version release button trigger. Compiles all needed information based on user UI slections, and triggers a new version build. Constructor: releasePluginVer_legacy(self) Return: None Arguments: self Optional Arguments: loadWindow [ MnsPluginRelease class method] Main window load Constructor: loadWindow(self) Return: None Arguments: self Optional Arguments: sortLists [ MnsPluginRelease class method] Simple function to re-sort both culomn items. Used Throughout to simply update the display Constructor: sortLists(self) Return: None Arguments: self Optional Arguments: dirChanged [ MnsPluginRelease class method] User directory changed trigger action Constructor: dirChanged(self) Return: None Arguments: self Optional Arguments: splitVerStringToList [ MnsPluginRelease class method] split version string to a path/minor/major/timestamp elements Constructor: splitVerStringToList(self, versionString) Return: list (versionString) Arguments: self versionString Optional Arguments: Defenitions loadPluginRelease Load the plugin Release UI from globals, avoid UI duplication. Constructor: loadPluginRelease() Return: None Arguments: Keyword Arguments:","title":"pluginRelease"},{"location":"pluginRelease/#pluginrelease","text":"PluginRelease UI Class. === Author: Assaf Ben Zur === This admin util is used to procedurally release the mnsPlugins library and version control it. The UI will find c++ projects based on a directory (which can be changed), and will allow the user (admin) to add it to the next build. On top of that, the UI will find the latest released version and extract the existing library within it, and update the release colums accordingly. In case a plugin build exists in the latest version, but it's build project isn't available, the plugin will add to the release option with a flag \"[version]\"- This means that the plugin can only be copied from the version selected to the next release- it cannot bild. Of course this behaviour means that the internal version of the plugin will not change (expected behaviour) to inform the user of the ACTUAL plugin version. This Tool is meant to BUILD the project on each release as opposed to getting a copy of n .mll file. This means that the VS project will have to be maintained (expected) in order to be released- hence keeping up to date with maya's releases. The tool contains a version release choice between patch/minor/major and none. All mnsReleases, including this tool will mark a version with a suffix of the path version . a dateTime stamp. This tool also includes a maya version choice for release which will access a different build configuration within the VS project. The tool accesses the version parameter using a custom macro inserted into the VS project- which will be written with the user version choice- in order for the user to see the correct version when using the plugin-manager \"info\".","title":"pluginRelease"},{"location":"pluginRelease/#classes","text":"","title":"Classes"},{"location":"pluginRelease/#mnspluginbuild-class","text":"MnsPluginBuild Class. A conviniency class. This class will contain eixsting plugin builds. Should contain a plugin name, directory, buildAvailable (bool), and a prevVerDirectory if a build is not available\" Used to access information in a clean manner. Constructor: MnsPluginBuild( name ( str ) ; [default: \"\"], direct ( str ) ; [default: \"\"], buildAvailable ( bool ) ; [default: False], prevVerDirectory ( str ) ; [default: \"\"]) Inherits from: object Class Members: pluginName pluginDirectory buildAvailable prevVerDirectory","title":"MnsPluginBuild [Class]"},{"location":"pluginRelease/#mnspluginrelease-class","text":"pluginRelease UI class Constructor: MnsPluginRelease( parent ( str ) ; [default: mnsUIUtils.get_maya_window()]) Inherits from: form_class, base_class Class Members: pluginBuilds existingPluginNames existingVersionsFoundNames latestVersionPath Methods: getCMakeBaseDir [method] buildPlugin [method] linux_mnsLicDigest_addExtraCMakeLines [method] selectDevDir [method] selectRelDir [method] connectSignals [method] getNewVerString [method] getVersionsForBuild [method] getLastestReleaseVer [method] initExistingDirs [method] releasePluginVer [method] releasePluginVer_legacy [method] loadWindow [method] sortLists [method] dirChanged [method] splitVerStringToList [method]","title":"MnsPluginRelease [Class]"},{"location":"pluginRelease/#mnspluginrelease-methods","text":"","title":"MnsPluginRelease  methods"},{"location":"pluginRelease/#defenitions","text":"","title":"Defenitions"},{"location":"pluginRelease/#loadpluginrelease","text":"Load the plugin Release UI from globals, avoid UI duplication. Constructor: loadPluginRelease() Return: None Arguments: Keyword Arguments:","title":"loadPluginRelease"},{"location":"prefixSuffix/","text":"prefixSuffix === Author: Assaf Ben Zur === All global prefix and suffix declerations. All global Mns pre-defined dictionaries creation (i.e. mnsTypeDict/mnsSidesDict/mnsBuildObjectTypes) This module also holds the MnsTypeStd class and the MnsNameStd class. This module holds any global dict creation defenitions used in MNS. Classes MnsNameStd [Class] This class holds simple attributes to extend pythos's 'node' object in order to preserve additional information regarding a node. Any name related methods are held by this class. Constructor: MnsNameStd( **kwargs ) Inherits from: object Class Members: node side body type id alpha suffix name namespace comment Methods: setNodeName [method] buildName [method] findNextAlphaIncrement [method] findNextIncrement [method] splitName [method] splitDefinedName [method] MnsNameStd methods setNodeName [ MnsNameStd class method] Constructor: setNodeName(self) Return: None Arguments: self Optional Arguments: buildName [ MnsNameStd class method] Build the instance's name based on the current class members defenitions. Constructor: buildName(self) Return: None Arguments: self Optional Arguments: findNextAlphaIncrement [ MnsNameStd class method] Recursive. Find next available Alpha id increment Constructor: findNextAlphaIncrement(self) Return: None Arguments: self Optional Arguments: findNextIncrement [ MnsNameStd class method] Recursive. Find next available id increment Constructor: findNextIncrement(self) Return: None Arguments: self Optional Arguments: splitName [ MnsNameStd class method] This function splits a given node name as string into an MnsNameStd object Constructor: splitName(self) Return: None Arguments: self Optional Arguments: splitDefinedName [ MnsNameStd class method] This function splits a given object name as string into an MnsNameStd object Constructor: splitDefinedName(self) Return: None Arguments: self Optional Arguments: MnsTypeStd [Class] This class holds simple attributes to extend pythos's 'type' object in order to preserve additional information regarding a node's type. Constructor: MnsTypeStd( **kwargs ) Inherits from: object Class Members: name suffix createName comment Defenitions buildMultKeysDict Build a multy key dict for the given item list Constructor: buildMultKeysDict(items = []) Return: None Arguments: items ( list ) ; [default: []] Keyword Arguments: buildOptionArrayFromDict Construct an option list from the given dictionary Constructor: buildOptionArrayFromDict(dict = {}, kwargs) Return: None Arguments: dict ( dict ) ; [default: {}] kwargs Keyword Arguments: buildTypeDict Build a dictionary for a given list, adding index (int) key and an index (string) key for each item Constructor: buildTypeDict(namesArray = []) Return: None Arguments: namesArray ( list ) ; [default: []] Keyword Arguments:","title":"prefixSuffix"},{"location":"prefixSuffix/#prefixsuffix","text":"=== Author: Assaf Ben Zur === All global prefix and suffix declerations. All global Mns pre-defined dictionaries creation (i.e. mnsTypeDict/mnsSidesDict/mnsBuildObjectTypes) This module also holds the MnsTypeStd class and the MnsNameStd class. This module holds any global dict creation defenitions used in MNS.","title":"prefixSuffix"},{"location":"prefixSuffix/#classes","text":"","title":"Classes"},{"location":"prefixSuffix/#mnsnamestd-class","text":"This class holds simple attributes to extend pythos's 'node' object in order to preserve additional information regarding a node. Any name related methods are held by this class. Constructor: MnsNameStd( **kwargs ) Inherits from: object Class Members: node side body type id alpha suffix name namespace comment Methods: setNodeName [method] buildName [method] findNextAlphaIncrement [method] findNextIncrement [method] splitName [method] splitDefinedName [method]","title":"MnsNameStd [Class]"},{"location":"prefixSuffix/#mnsnamestd-methods","text":"","title":"MnsNameStd  methods"},{"location":"prefixSuffix/#mnstypestd-class","text":"This class holds simple attributes to extend pythos's 'type' object in order to preserve additional information regarding a node's type. Constructor: MnsTypeStd( **kwargs ) Inherits from: object Class Members: name suffix createName comment","title":"MnsTypeStd [Class]"},{"location":"prefixSuffix/#defenitions","text":"","title":"Defenitions"},{"location":"prefixSuffix/#buildmultkeysdict","text":"Build a multy key dict for the given item list Constructor: buildMultKeysDict(items = []) Return: None Arguments: items ( list ) ; [default: []] Keyword Arguments:","title":"buildMultKeysDict"},{"location":"prefixSuffix/#buildoptionarrayfromdict","text":"Construct an option list from the given dictionary Constructor: buildOptionArrayFromDict(dict = {}, kwargs) Return: None Arguments: dict ( dict ) ; [default: {}] kwargs Keyword Arguments:","title":"buildOptionArrayFromDict"},{"location":"prefixSuffix/#buildtypedict","text":"Build a dictionary for a given list, adding index (int) key and an index (string) key for each item Constructor: buildTypeDict(namesArray = []) Return: None Arguments: namesArray ( list ) ; [default: []] Keyword Arguments:","title":"buildTypeDict"},{"location":"productRelease/","text":"productRelease === Author: Assaf Ben Zur === Classes MnsProductRelease [Class] Main UI class Constructor: MnsProductRelease( parent ( str ) ; [default: mnsUIUtils.get_maya_window()]) Inherits from: form_class, base_class Class Members: iconsDir pluginReleaseDir existingPluginVerLib releaseRootDir existingProductVerLib latestVerList releaseExclustions Methods: gatherExistingPluginVersions [method] gatherExistingProductVersions [method] getNextReleaseVersion [method] releaseVersion [method] createCopyrightHeaderInPythonFile [method] loadWindow [method] connectSignals [method] MnsProductRelease methods gatherExistingPluginVersions [ MnsProductRelease class method] Constructor: gatherExistingPluginVersions(self) Return: None Arguments: self Optional Arguments: gatherExistingProductVersions [ MnsProductRelease class method] Constructor: gatherExistingProductVersions(self) Return: None Arguments: self Optional Arguments: getNextReleaseVersion [ MnsProductRelease class method] Constructor: getNextReleaseVersion(self) Return: None Arguments: self Optional Arguments: releaseVersion [ MnsProductRelease class method] Constructor: releaseVersion(self) Return: None Arguments: self Optional Arguments: createCopyrightHeaderInPythonFile [ MnsProductRelease class method] Constructor: createCopyrightHeaderInPythonFile(self, filePath = None) Return: None Arguments: self filePath ( str ) ; [default: None] Optional Arguments: loadWindow [ MnsProductRelease class method] Main window load. Constructor: loadWindow(self) Return: None Arguments: self Optional Arguments: connectSignals [ MnsProductRelease class method] Connect all the UI signals Constructor: connectSignals(self) Return: None Arguments: self Optional Arguments: Defenitions loadProductRelease Load the Log Viewer UI from globals, avoid UI duplication. Constructor: loadProductRelease() Return: None Arguments: Keyword Arguments:","title":"productRelease"},{"location":"productRelease/#productrelease","text":"=== Author: Assaf Ben Zur ===","title":"productRelease"},{"location":"productRelease/#classes","text":"","title":"Classes"},{"location":"productRelease/#mnsproductrelease-class","text":"Main UI class Constructor: MnsProductRelease( parent ( str ) ; [default: mnsUIUtils.get_maya_window()]) Inherits from: form_class, base_class Class Members: iconsDir pluginReleaseDir existingPluginVerLib releaseRootDir existingProductVerLib latestVerList releaseExclustions Methods: gatherExistingPluginVersions [method] gatherExistingProductVersions [method] getNextReleaseVersion [method] releaseVersion [method] createCopyrightHeaderInPythonFile [method] loadWindow [method] connectSignals [method]","title":"MnsProductRelease [Class]"},{"location":"productRelease/#mnsproductrelease-methods","text":"","title":"MnsProductRelease  methods"},{"location":"productRelease/#defenitions","text":"","title":"Defenitions"},{"location":"productRelease/#loadproductrelease","text":"Load the Log Viewer UI from globals, avoid UI duplication. Constructor: loadProductRelease() Return: None Arguments: Keyword Arguments:","title":"loadProductRelease"},{"location":"simpleSquash/","text":"simpleSquash Author: Asaf Ben-Zur Best used for: Head Squash, Nose, any general squash behaviour This module will create a squash behaviour to it's slave joint. Any child modules under this module will inherit the squash behaviour. The squash behaviour can be set by the module's settings, and can also be adjusted and keyed post construction. Defenitions construct Constructor: construct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments: customGuides Constructor: customGuides(mansur, builtGuides) Return: None Arguments: mansur builtGuides Keyword Arguments:","title":"simpleSquash"},{"location":"simpleSquash/#simplesquash","text":"Author: Asaf Ben-Zur Best used for: Head Squash, Nose, any general squash behaviour This module will create a squash behaviour to it's slave joint. Any child modules under this module will inherit the squash behaviour. The squash behaviour can be set by the module's settings, and can also be adjusted and keyed post construction.","title":"simpleSquash"},{"location":"simpleSquash/#defenitions","text":"","title":"Defenitions"},{"location":"simpleSquash/#construct","text":"Constructor: construct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"construct"},{"location":"simpleSquash/#customguides","text":"Constructor: customGuides(mansur, builtGuides) Return: None Arguments: mansur builtGuides Keyword Arguments:","title":"customGuides"},{"location":"simpleSquash_settings/","text":"simpleSquash Settings Author: Asaf Ben-Zur Best used for: Head Squash, Nose, any general squash behaviour This module will create a squash behaviour to it's slave joint. Any child modules under this module will inherit the squash behaviour. The squash behaviour can be set by the module's settings, and can also be adjusted and keyed post construction. Attributes GlobalSettings Attribute Name Default Description controlShape arrow Main control shape upLocalDirection 0 Comment wasn't inserted Squash Attribute Name Default Description squashFactor 0.5 Squash Factor default value squashMin 0.8 Squash Minimum scale value squashMax 1.2 Squash Maximum scale value Stretch Attribute Name Default Description stretchFactor 0.5 Stretch Factor default value stretchMin 0.8 Stretch Minimum scale value stretchMax 1.2 Comment wasn't inserted ChanControl Attribute Name Default Description channelControl T R S X v Y v Z v Squash control channel-box settings SlaveControl Attribute Name Default Description slaveControlShape lightSphere Slave control shape slaveChannelControl T R S X v v v Y v v v Z v v v Squash slave control channel-box settings","title":"simpleSquash settings"},{"location":"simpleSquash_settings/#simplesquash-settings","text":"Author: Asaf Ben-Zur Best used for: Head Squash, Nose, any general squash behaviour This module will create a squash behaviour to it's slave joint. Any child modules under this module will inherit the squash behaviour. The squash behaviour can be set by the module's settings, and can also be adjusted and keyed post construction.","title":"simpleSquash Settings"},{"location":"simpleSquash_settings/#attributes","text":"","title":"Attributes"},{"location":"simpleSquash_settings/#globalsettings","text":"Attribute Name Default Description controlShape arrow Main control shape upLocalDirection 0 Comment wasn't inserted","title":"GlobalSettings"},{"location":"simpleSquash_settings/#squash","text":"Attribute Name Default Description squashFactor 0.5 Squash Factor default value squashMin 0.8 Squash Minimum scale value squashMax 1.2 Squash Maximum scale value","title":"Squash"},{"location":"simpleSquash_settings/#stretch","text":"Attribute Name Default Description stretchFactor 0.5 Stretch Factor default value stretchMin 0.8 Stretch Minimum scale value stretchMax 1.2 Comment wasn't inserted","title":"Stretch"},{"location":"simpleSquash_settings/#chancontrol","text":"Attribute Name Default Description channelControl T R S X v Y v Z v Squash control channel-box settings","title":"ChanControl"},{"location":"simpleSquash_settings/#slavecontrol","text":"Attribute Name Default Description slaveControlShape lightSphere Slave control shape slaveChannelControl T R S X v v v Y v v v Z v v v Squash slave control channel-box settings","title":"SlaveControl"},{"location":"skinUtility/","text":"skinUtility === Author: Assaf Ben Zur === Defenitions copySkin Constructor: copySkin(sourceMeshes = [], targetMeshes = [], kwargs) Return: None Arguments: sourceMeshes ( list ) ; [default: []] targetMeshes ( list ) ; [default: []] kwargs Keyword Arguments: createCombinedSkinProxyFromMeshes Constructor: createCombinedSkinProxyFromMeshes(sourceMeshes = []) Return: None Arguments: sourceMeshes ( list ) ; [default: []] Keyword Arguments: exportSkin Constructor: exportSkin(nodes = []) Return: None Arguments: nodes ( list ) ; [default: []] Keyword Arguments: filterValidMeshesFromList Constructor: filterValidMeshesFromList(meshTransforms = [], skinnedOnly = False, notSkinnedOnly = False) Return: None Arguments: meshTransforms ( list ) ; [default: []] skinnedOnly ( bool ) ; [default: False] notSkinnedOnly ( bool ) ; [default: False] Keyword Arguments: gatherBlendWeights Constructor: gatherBlendWeights(dagPath, components, skinClusterFn) Return: None Arguments: dagPath components skinClusterFn Keyword Arguments: gatherDataFromSkinCluster Constructor: gatherDataFromSkinCluster(skinClusterNode = None) Return: None Arguments: skinClusterNode ( str ) ; [default: None] Keyword Arguments: gatherInfluenceJointsFromMesh Constructor: gatherInfluenceJointsFromMesh(skinnedMesh = None) Return: None Arguments: skinnedMesh ( str ) ; [default: None] Keyword Arguments: gatherInfluenceJointsFromMeshes Constructor: gatherInfluenceJointsFromMeshes(sourceMeshes = None) Return: None Arguments: sourceMeshes ( str ) ; [default: None] Keyword Arguments: gatherInfluenceWeights Constructor: gatherInfluenceWeights(dagPath, components, skinClusterFn) Return: None Arguments: dagPath components skinClusterFn Keyword Arguments: gatherSkinData Constructor: gatherSkinData(nodes = []) Return: None Arguments: nodes ( list ) ; [default: []] Keyword Arguments: gatherSkinDataFromFile Constructor: gatherSkinDataFromFile(filePath = None) Return: None Arguments: filePath ( str ) ; [default: None] Keyword Arguments: getAllSkinClustersFromJointStructure Constructor: getAllSkinClustersFromJointStructure(rigTop = None) Return: None Arguments: rigTop ( str ) ; [default: None] Keyword Arguments: getCurrentWeights Constructor: getCurrentWeights(dagPath, components, skinClusterFn) Return: None Arguments: dagPath components skinClusterFn Keyword Arguments: getGeometryComponents Constructor: getGeometryComponents(skinClusterFn = None, skinClusterNode = None) Return: None Arguments: skinClusterFn ( str ) ; [default: None] skinClusterNode ( str ) ; [default: None] Keyword Arguments: getGeometryComponentsFromTagExpression Constructor: getGeometryComponentsFromTagExpression(skinCls, tag=\" \") Return: None Arguments: skinCls tag ( str ) ; [default: \" \"] Keyword Arguments: getMeshesFromData Constructor: getMeshesFromData(skinsData = None) Return: None Arguments: skinsData ( str ) ; [default: None] Keyword Arguments: getSkinClusterFromMeshTransform Constructor: getSkinClusterFromMeshTransform(meshTransform = None) Return: None Arguments: meshTransform ( str ) ; [default: None] Keyword Arguments: getSkinClustersFromJoints Constructor: getSkinClustersFromJoints(sourceJoints = []) Return: None Arguments: sourceJoints ( list ) ; [default: []] Keyword Arguments: getSkinningJointsFromSelection Constructor: getSkinningJointsFromSelection(mode = 1, kwargs) Return: None Arguments: mode ( int ) ; [default: 1] kwargs Keyword Arguments: importSkin Constructor: importSkin(filePath = None, kwargs) Return: None Arguments: filePath ( str ) ; [default: None] kwargs Keyword Arguments: injectSkinClusterNodeToMfn Constructor: injectSkinClusterNodeToMfn(skinClusterNode = None) Return: None Arguments: skinClusterNode ( str ) ; [default: None] Keyword Arguments: mirrorSkinToDetachedComponent Constructor: mirrorSkinToDetachedComponent(source = None, target = None) Return: None Arguments: source ( str ) ; [default: None] target ( str ) ; [default: None] Keyword Arguments: rebind Constructor: rebind(sourceMeshes = []) Return: None Arguments: sourceMeshes ( list ) ; [default: []] Keyword Arguments: setBlendWeights Constructor: setBlendWeights(dagPath, components, scFn, skinData) Return: None Arguments: dagPath components scFn skinData Keyword Arguments: setInfluenceWeights Constructor: setInfluenceWeights(dagPath, components, scFn, skinData) Return: None Arguments: dagPath components scFn skinData Keyword Arguments: setSkinData Constructor: setSkinData(skinClusterNode = None, skinData = None) Return: None Arguments: skinClusterNode ( str ) ; [default: None] skinData ( str ) ; [default: None] Keyword Arguments: unbind Constructor: unbind(sourceMeshes = []) Return: None Arguments: sourceMeshes ( list ) ; [default: []] Keyword Arguments:","title":"skinUtility"},{"location":"skinUtility/#skinutility","text":"=== Author: Assaf Ben Zur ===","title":"skinUtility"},{"location":"skinUtility/#defenitions","text":"","title":"Defenitions"},{"location":"skinUtility/#copyskin","text":"Constructor: copySkin(sourceMeshes = [], targetMeshes = [], kwargs) Return: None Arguments: sourceMeshes ( list ) ; [default: []] targetMeshes ( list ) ; [default: []] kwargs Keyword Arguments:","title":"copySkin"},{"location":"skinUtility/#createcombinedskinproxyfrommeshes","text":"Constructor: createCombinedSkinProxyFromMeshes(sourceMeshes = []) Return: None Arguments: sourceMeshes ( list ) ; [default: []] Keyword Arguments:","title":"createCombinedSkinProxyFromMeshes"},{"location":"skinUtility/#exportskin","text":"Constructor: exportSkin(nodes = []) Return: None Arguments: nodes ( list ) ; [default: []] Keyword Arguments:","title":"exportSkin"},{"location":"skinUtility/#filtervalidmeshesfromlist","text":"Constructor: filterValidMeshesFromList(meshTransforms = [], skinnedOnly = False, notSkinnedOnly = False) Return: None Arguments: meshTransforms ( list ) ; [default: []] skinnedOnly ( bool ) ; [default: False] notSkinnedOnly ( bool ) ; [default: False] Keyword Arguments:","title":"filterValidMeshesFromList"},{"location":"skinUtility/#gatherblendweights","text":"Constructor: gatherBlendWeights(dagPath, components, skinClusterFn) Return: None Arguments: dagPath components skinClusterFn Keyword Arguments:","title":"gatherBlendWeights"},{"location":"skinUtility/#gatherdatafromskincluster","text":"Constructor: gatherDataFromSkinCluster(skinClusterNode = None) Return: None Arguments: skinClusterNode ( str ) ; [default: None] Keyword Arguments:","title":"gatherDataFromSkinCluster"},{"location":"skinUtility/#gatherinfluencejointsfrommesh","text":"Constructor: gatherInfluenceJointsFromMesh(skinnedMesh = None) Return: None Arguments: skinnedMesh ( str ) ; [default: None] Keyword Arguments:","title":"gatherInfluenceJointsFromMesh"},{"location":"skinUtility/#gatherinfluencejointsfrommeshes","text":"Constructor: gatherInfluenceJointsFromMeshes(sourceMeshes = None) Return: None Arguments: sourceMeshes ( str ) ; [default: None] Keyword Arguments:","title":"gatherInfluenceJointsFromMeshes"},{"location":"skinUtility/#gatherinfluenceweights","text":"Constructor: gatherInfluenceWeights(dagPath, components, skinClusterFn) Return: None Arguments: dagPath components skinClusterFn Keyword Arguments:","title":"gatherInfluenceWeights"},{"location":"skinUtility/#gatherskindata","text":"Constructor: gatherSkinData(nodes = []) Return: None Arguments: nodes ( list ) ; [default: []] Keyword Arguments:","title":"gatherSkinData"},{"location":"skinUtility/#gatherskindatafromfile","text":"Constructor: gatherSkinDataFromFile(filePath = None) Return: None Arguments: filePath ( str ) ; [default: None] Keyword Arguments:","title":"gatherSkinDataFromFile"},{"location":"skinUtility/#getallskinclustersfromjointstructure","text":"Constructor: getAllSkinClustersFromJointStructure(rigTop = None) Return: None Arguments: rigTop ( str ) ; [default: None] Keyword Arguments:","title":"getAllSkinClustersFromJointStructure"},{"location":"skinUtility/#getcurrentweights","text":"Constructor: getCurrentWeights(dagPath, components, skinClusterFn) Return: None Arguments: dagPath components skinClusterFn Keyword Arguments:","title":"getCurrentWeights"},{"location":"skinUtility/#getgeometrycomponents","text":"Constructor: getGeometryComponents(skinClusterFn = None, skinClusterNode = None) Return: None Arguments: skinClusterFn ( str ) ; [default: None] skinClusterNode ( str ) ; [default: None] Keyword Arguments:","title":"getGeometryComponents"},{"location":"skinUtility/#getgeometrycomponentsfromtagexpression","text":"Constructor: getGeometryComponentsFromTagExpression(skinCls, tag=\" \") Return: None Arguments: skinCls tag ( str ) ; [default: \" \"] Keyword Arguments:","title":"getGeometryComponentsFromTagExpression"},{"location":"skinUtility/#getmeshesfromdata","text":"Constructor: getMeshesFromData(skinsData = None) Return: None Arguments: skinsData ( str ) ; [default: None] Keyword Arguments:","title":"getMeshesFromData"},{"location":"skinUtility/#getskinclusterfrommeshtransform","text":"Constructor: getSkinClusterFromMeshTransform(meshTransform = None) Return: None Arguments: meshTransform ( str ) ; [default: None] Keyword Arguments:","title":"getSkinClusterFromMeshTransform"},{"location":"skinUtility/#getskinclustersfromjoints","text":"Constructor: getSkinClustersFromJoints(sourceJoints = []) Return: None Arguments: sourceJoints ( list ) ; [default: []] Keyword Arguments:","title":"getSkinClustersFromJoints"},{"location":"skinUtility/#getskinningjointsfromselection","text":"Constructor: getSkinningJointsFromSelection(mode = 1, kwargs) Return: None Arguments: mode ( int ) ; [default: 1] kwargs Keyword Arguments:","title":"getSkinningJointsFromSelection"},{"location":"skinUtility/#importskin","text":"Constructor: importSkin(filePath = None, kwargs) Return: None Arguments: filePath ( str ) ; [default: None] kwargs Keyword Arguments:","title":"importSkin"},{"location":"skinUtility/#injectskinclusternodetomfn","text":"Constructor: injectSkinClusterNodeToMfn(skinClusterNode = None) Return: None Arguments: skinClusterNode ( str ) ; [default: None] Keyword Arguments:","title":"injectSkinClusterNodeToMfn"},{"location":"skinUtility/#mirrorskintodetachedcomponent","text":"Constructor: mirrorSkinToDetachedComponent(source = None, target = None) Return: None Arguments: source ( str ) ; [default: None] target ( str ) ; [default: None] Keyword Arguments:","title":"mirrorSkinToDetachedComponent"},{"location":"skinUtility/#rebind","text":"Constructor: rebind(sourceMeshes = []) Return: None Arguments: sourceMeshes ( list ) ; [default: []] Keyword Arguments:","title":"rebind"},{"location":"skinUtility/#setblendweights","text":"Constructor: setBlendWeights(dagPath, components, scFn, skinData) Return: None Arguments: dagPath components scFn skinData Keyword Arguments:","title":"setBlendWeights"},{"location":"skinUtility/#setinfluenceweights","text":"Constructor: setInfluenceWeights(dagPath, components, scFn, skinData) Return: None Arguments: dagPath components scFn skinData Keyword Arguments:","title":"setInfluenceWeights"},{"location":"skinUtility/#setskindata","text":"Constructor: setSkinData(skinClusterNode = None, skinData = None) Return: None Arguments: skinClusterNode ( str ) ; [default: None] skinData ( str ) ; [default: None] Keyword Arguments:","title":"setSkinData"},{"location":"skinUtility/#unbind","text":"Constructor: unbind(sourceMeshes = []) Return: None Arguments: sourceMeshes ( list ) ; [default: []] Keyword Arguments:","title":"unbind"},{"location":"sphereRoll/","text":"sphereRoll Author: Asaf Ben-Zur Best used for: Free objects, General Control, Mesh Tweaker, Mesh Local Tweaker This Module is a general single control at it's base state. It also contains a Mesh-Tweaker feature that will allow you to create a \"Double Directional\" tweaker- meaning that the control will follow the input Mesh's position (Rivet) and will also be able to affect it. This effect is also commonly knowen as the \"Dorito-Effect\". This feature also includes a \"local\" mode, to tunnel deformations from the control to a local skinCluster, then a blend-shape to the main Mesh, creating multi-layered skinned mesh. All of these features will use the main joint as the effector. Note: When using the \"Mesh-Tweaker\" feture, when needing to affect a mesh that will also be used as the rivet input- make sure \"sameMeshAffector\" is set to ON. Defenitions construct Constructor: construct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments: customGuides Constructor: customGuides(mansur, builtGuides) Return: None Arguments: mansur builtGuides Keyword Arguments:","title":"sphereRoll"},{"location":"sphereRoll/#sphereroll","text":"Author: Asaf Ben-Zur Best used for: Free objects, General Control, Mesh Tweaker, Mesh Local Tweaker This Module is a general single control at it's base state. It also contains a Mesh-Tweaker feature that will allow you to create a \"Double Directional\" tweaker- meaning that the control will follow the input Mesh's position (Rivet) and will also be able to affect it. This effect is also commonly knowen as the \"Dorito-Effect\". This feature also includes a \"local\" mode, to tunnel deformations from the control to a local skinCluster, then a blend-shape to the main Mesh, creating multi-layered skinned mesh. All of these features will use the main joint as the effector. Note: When using the \"Mesh-Tweaker\" feture, when needing to affect a mesh that will also be used as the rivet input- make sure \"sameMeshAffector\" is set to ON.","title":"sphereRoll"},{"location":"sphereRoll/#defenitions","text":"","title":"Defenitions"},{"location":"sphereRoll/#construct","text":"Constructor: construct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"construct"},{"location":"sphereRoll/#customguides","text":"Constructor: customGuides(mansur, builtGuides) Return: None Arguments: mansur builtGuides Keyword Arguments:","title":"customGuides"},{"location":"sphereRoll_settings/","text":"sphereRoll Settings Author: Asaf Ben-Zur Best used for: Balls, BB-8 Attributes splitOrientSpace True Comment wasn't inserted GlobalSettings Attribute Name Default Description controlShape lightSphere Control shape channelControl T R S X v v v Y v v v Z v v v Control channel-box settings sphereRadius 20.0 Comment wasn't inserted autoRollDefault 1.0 Comment wasn't inserted","title":"sphereRoll settings"},{"location":"sphereRoll_settings/#sphereroll-settings","text":"Author: Asaf Ben-Zur Best used for: Balls, BB-8","title":"sphereRoll Settings"},{"location":"sphereRoll_settings/#attributes","text":"splitOrientSpace True Comment wasn't inserted","title":"Attributes"},{"location":"sphereRoll_settings/#globalsettings","text":"Attribute Name Default Description controlShape lightSphere Control shape channelControl T R S X v v v Y v v v Z v v v Control channel-box settings sphereRadius 20.0 Comment wasn't inserted autoRollDefault 1.0 Comment wasn't inserted","title":"GlobalSettings"},{"location":"string/","text":"string === Author: Assaf Ben Zur === This module covers all custom string operations used in MNS Defenitions camelCaseSplit Split input string into array based on the 'camel-casing' rule. Constructor: camelCaseSplit(ccString) Return: None Arguments: ccString Keyword Arguments: combineStringList Combine the given string array, into a single string, using the 'separatorS' string input as a seperator. Constructor: combineStringList(stringList = [], separatorS = \" \") Return: None Arguments: stringList ( list ) ; [default: []] separatorS ( str ) ; [default: \"\"] Keyword Arguments: extractHeaderFromPythonFile For the given python file, extract the header comment. Constructor: extractHeaderFromPythonFile(filePath = None) Return: None Arguments: filePath ( str ) ; [default: None] Keyword Arguments: flattenArray Flatten a given list into a single string, seperated by commas Constructor: flattenArray(array = []) Return: None Arguments: array ( list ) ; [default: []] Keyword Arguments: flattenArrayColon Flatten a given list into a single string, seperated by colons Constructor: flattenArrayColon(array = []) Return: None Arguments: array ( list ) ; [default: []] Keyword Arguments: flattenArrayKeepBracets Flatten a given list into a single string, seperated by commas, adding the open and close square brackets as string. Constructor: flattenArrayKeepBracets(array = []) Return: None Arguments: array ( list ) ; [default: []] Keyword Arguments: flattenArrayKeepBracetsAndStrings Flatten a given list into a single string, seperated by commas, adding the open and close square brackets as string as well as add the \" into the actual string elements. Constructor: flattenArrayKeepBracetsAndStrings(array = []) Return: None Arguments: array ( list ) ; [default: []] Keyword Arguments: flattenArraySpace Flatten a given list into a single string, seperated by spaces Constructor: flattenArraySpace(array = []) Return: None Arguments: array ( list ) ; [default: []] Keyword Arguments: splitStringToArray Split the given string into a formatted array, using a \",\" split. Constructor: splitStringToArray(stringSplit = \"\") Return: None Arguments: stringSplit ( str ) ; [default: \"\"] Keyword Arguments: stringConvertToString convert the input provided to a string, regardless of its type. Constructor: stringConvertToString(var) Return: None Arguments: var Keyword Arguments: stringMultiReplaceBySingle Replace all given string characters by the 'replaceBy' string given. Constructor: stringMultiReplaceBySingle(element = \"\", replaceStrings = [], replaceBy = \"\") Return: None Arguments: element ( str ) ; [default: \"\"] replaceStrings ( list ) ; [default: []] replaceBy ( str ) ; [default: \"\"] Keyword Arguments:","title":"String"},{"location":"string/#string","text":"=== Author: Assaf Ben Zur === This module covers all custom string operations used in MNS","title":"string"},{"location":"string/#defenitions","text":"","title":"Defenitions"},{"location":"string/#camelcasesplit","text":"Split input string into array based on the 'camel-casing' rule. Constructor: camelCaseSplit(ccString) Return: None Arguments: ccString Keyword Arguments:","title":"camelCaseSplit"},{"location":"string/#combinestringlist","text":"Combine the given string array, into a single string, using the 'separatorS' string input as a seperator. Constructor: combineStringList(stringList = [], separatorS = \" \") Return: None Arguments: stringList ( list ) ; [default: []] separatorS ( str ) ; [default: \"\"] Keyword Arguments:","title":"combineStringList"},{"location":"string/#extractheaderfrompythonfile","text":"For the given python file, extract the header comment. Constructor: extractHeaderFromPythonFile(filePath = None) Return: None Arguments: filePath ( str ) ; [default: None] Keyword Arguments:","title":"extractHeaderFromPythonFile"},{"location":"string/#flattenarray","text":"Flatten a given list into a single string, seperated by commas Constructor: flattenArray(array = []) Return: None Arguments: array ( list ) ; [default: []] Keyword Arguments:","title":"flattenArray"},{"location":"string/#flattenarraycolon","text":"Flatten a given list into a single string, seperated by colons Constructor: flattenArrayColon(array = []) Return: None Arguments: array ( list ) ; [default: []] Keyword Arguments:","title":"flattenArrayColon"},{"location":"string/#flattenarraykeepbracets","text":"Flatten a given list into a single string, seperated by commas, adding the open and close square brackets as string. Constructor: flattenArrayKeepBracets(array = []) Return: None Arguments: array ( list ) ; [default: []] Keyword Arguments:","title":"flattenArrayKeepBracets"},{"location":"string/#flattenarraykeepbracetsandstrings","text":"Flatten a given list into a single string, seperated by commas, adding the open and close square brackets as string as well as add the \" into the actual string elements. Constructor: flattenArrayKeepBracetsAndStrings(array = []) Return: None Arguments: array ( list ) ; [default: []] Keyword Arguments:","title":"flattenArrayKeepBracetsAndStrings"},{"location":"string/#flattenarrayspace","text":"Flatten a given list into a single string, seperated by spaces Constructor: flattenArraySpace(array = []) Return: None Arguments: array ( list ) ; [default: []] Keyword Arguments:","title":"flattenArraySpace"},{"location":"string/#splitstringtoarray","text":"Split the given string into a formatted array, using a \",\" split. Constructor: splitStringToArray(stringSplit = \"\") Return: None Arguments: stringSplit ( str ) ; [default: \"\"] Keyword Arguments:","title":"splitStringToArray"},{"location":"string/#stringconverttostring","text":"convert the input provided to a string, regardless of its type. Constructor: stringConvertToString(var) Return: None Arguments: var Keyword Arguments:","title":"stringConvertToString"},{"location":"string/#stringmultireplacebysingle","text":"Replace all given string characters by the 'replaceBy' string given. Constructor: stringMultiReplaceBySingle(element = \"\", replaceStrings = [], replaceBy = \"\") Return: None Arguments: element ( str ) ; [default: \"\"] replaceStrings ( list ) ; [default: []] replaceBy ( str ) ; [default: \"\"] Keyword Arguments:","title":"stringMultiReplaceBySingle"},{"location":"utility/","text":"utility === Author: Assaf Ben Zur === Global Core MNS utility module. This module holds any 'global' function used within MNS. A 'misc' style module. Defenitions addAttrToObj A global conditioned wrapper for adding attributes to object/objects Exceptions: 1. Object to add attr to was found non-existing or invalid. Abort. 2. The 'replace' flag wasn't set, and the attribute already exists. Abort. 3. Attr name wasn't passed in. Abort. 4. The attribute type passed doesn't match the attribute value passed. Abort. 5. min/max values were passed in, although the attr type is not an Int or a Float. Skip min/max values. 6. min/max values were passed, and the attr type is Int or Float, although the min/max values passed arn't matching the data type. Skip min/max. 7. The replace flag was set to True, but the attribute doesn't exist. Ignore replace flag. Constructor: addAttrToObj(objects = [], kwargs) Return: None Arguments: objects ( list ) ; [default: []] kwargs Keyword Arguments: addBlockClasIDToObj Add a 'blkClassId' Attribute to the given input. Constructor: addBlockClasIDToObj(objectA, kwargs) Return: None Arguments: objectA kwargs Keyword Arguments: applyChennelControlAttributesToTransform This method applies a 'channelControl' dict attributes into the given transform. Constructor: applyChennelControlAttributesToTransform(transform = None, ccDict = {}) Return: None Arguments: transform ( str ) ; [default: None] ccDict ( dict ) ; [default: {}] Keyword Arguments: autoLoadMnsPlugins Constructor: autoLoadMnsPlugins() Return: None Arguments: Keyword Arguments: checkForInternetConnection check for a valid internet connection. Constructor: checkForInternetConnection(host=\"8.8.8.8\", port=53, timeout=3) Return: None Arguments: host ( str ) ; [default: \"8.8.8.8\"] port ( int ) ; [default: 53] timeout ( int ) ; [default: 3] Keyword Arguments: checkForVersionUpdates This method will compare the current mns version against the latest available. Return False if the current version is the latest version Return True if the current version isn't the latest version Constructor: checkForVersionUpdates() Return: None Arguments: Keyword Arguments: checkFunctionRedundencyForPackage Constructor: checkFunctionRedundencyForPackage(package, printRedundentOnly = True) Return: None Arguments: package printRedundentOnly ( bool ) ; [default: True] Keyword Arguments: checkIfObjExistsAndSet For the object passed in- three main cases: 1. If it is a 'PyNode' object, set it as the object to check. 2. If it is an MnsNameStd object,set it's .node property as the object to check. 3. If it is a string, assign it into a 'PyNode' obhect and set it as the object to check. Check whether the object exists in the current scene and valid. If so, return it. Else return None. Constructor: checkIfObjExistsAndSet(objB = None, kwargs) Return: None Arguments: objB ( str ) ; [default: None] kwargs Keyword Arguments: checkLocalAxisPairing This method will check and return local axis pairing. Main use is for pre-connection check for pocNode and curveVarNode tweakers (inputs), in order to link local axes correctly, avoiding the need to check aim and up axes, as well as the offset axes. Constructor: checkLocalAxisPairing(origin = None, target = None) Return: None Arguments: origin ( str ) ; [default: None] target ( str ) ; [default: None] Keyword Arguments: connectShapeColorRGB Constructor: connectShapeColorRGB(source = None, target = None) Return: None Arguments: source ( str ) ; [default: None] target ( str ) ; [default: None] Keyword Arguments: convertAlphaToInt Recursive. Convert an Alpha input into an Int ID. Infinite. Constructor: convertAlphaToInt(alpha = \"A\") Return: None Arguments: alpha ( str ) ; [default: \"A\"] Keyword Arguments: convertIntToAlpha Recursive. Convert an Int input into an Alpha ID. Infinite. Constructor: convertIntToAlpha(intA = 0) Return: None Arguments: intA ( int ) ; [default: 0] Keyword Arguments: convertNodeToNameStd Attempt to convert a given node into a MnsNameStd object. Constructor: convertNodeToNameStd(node) Return: None Arguments: node Keyword Arguments: createAxisLamberts An axes colored lambert shaders creation function. Constructor: createAxisLamberts( kwargs) Return: None Arguments: kwargs Keyword Arguments: createFreeOffsetGroup For the given transform, create a free offset group transform parent. Constructor: createFreeOffsetGroup(transformObject) Return: None Arguments: transformObject Keyword Arguments: createMnsDefaultPrefs This method is called whenever a pref read is being called. In case this method fails to locate local prefs for the current user, it creates it from the defualt prefs file. Also, this method contains the \"restore\" flag, which will create a new prefs local file from the default file regardless of any other choice. This is used as a \"restore factory defaults\" option. Constructor: createMnsDefaultPrefs( kwargs) Return: None Arguments: kwargs Keyword Arguments: createNodeReturnNameStd A core major MNS function. This function creates a new node, based on it's type passed in, and it's name parameters passed in, and returns it as a MnsNameStd object. Constructor: createNodeReturnNameStd( kwargs) Return: None Arguments: kwargs Keyword Arguments: createOffsetGroup For the given transform, create a predefined offset group transform parent. Constructor: createOffsetGroup(transformObject, kwargs) Return: None Arguments: transformObject kwargs Keyword Arguments: deleteFile A delete file global function that includes a pre-defined log write. Constructor: deleteFile(file) Return: None Arguments: file Keyword Arguments: deleteUnusedShapeNodes Constructor: deleteUnusedShapeNodes(obj = None) Return: None Arguments: obj ( str ) ; [default: None] Keyword Arguments: distBetween Measure the distance between to maya transforms. Constructor: distBetween(transformA = None, transformB = None) Return: None Arguments: transformA ( str ) ; [default: None] transformB ( str ) ; [default: None] Keyword Arguments: duplicateNameStd Simple method to duplicate a node embedded within a NameStd object. This method will duuplicate the node, and rename it by the nameStd rules. Constructor: duplicateNameStd(nameStd = None, kwargs) Return: None Arguments: nameStd ( str ) ; [default: None] kwargs Keyword Arguments: extractHeaderFromPath Constructor: extractHeaderFromPath(fullPath) Return: None Arguments: fullPath Keyword Arguments: findAndReplaceInFile This is a simple method to replace the pattern given with a substitute string within a file, Then overriting the original file with new lines. Constructor: findAndReplaceInFile(file_path, pattern, subst) Return: None Arguments: file_path pattern subst Keyword Arguments: fixShapesName Simple shape name fix function based on parent's name. Constructor: fixShapesName(objects = []) Return: None Arguments: objects ( list ) ; [default: []] Keyword Arguments: getCurrentVersion Get the current mansur product version based on this file directory Constructor: getCurrentVersion() Return: None Arguments: Keyword Arguments: getFirstLevelParentForObject Get the top level parent for a given object. Constructor: getFirstLevelParentForObject(obj) Return: pyNode (top level parent) Arguments: obj Keyword Arguments: getMObjectFromObjName Constructor: getMObjectFromObjName(name) Return: None Arguments: name Keyword Arguments: getMansurPrefs This method retrives all of the current prefrences. In case the 'returnFileDirectory' flag is set to true, this will return the path of the prefs file, instead of the preferences as a dict. Constructor: getMansurPrefs( kwargs) Return: None Arguments: kwargs Keyword Arguments: getNumLinesForDir Constructor: getNumLinesForDir(directory = \"D/mansurProject/mansurRig/scripts/mansur\") Return: None Arguments: directory ( str ) ; [default: \"D:/mansurProject/mansurRig/scripts/mansur\"] Keyword Arguments: getSideFromNode Attempt to collect the given input's side. Constructor: getSideFromNode(node) Return: None Arguments: node Keyword Arguments: getTopParentForObj Recursively attempt to fet the top node of the maya heirarchy, from the given input upwards. Constructor: getTopParentForObj(obj) Return: None Arguments: obj Keyword Arguments: getTopParentForSel get the top node of the current selected object's maya heirarchy. Constructor: getTopParentForSel() Return: None Arguments: Keyword Arguments: importModuleFromPath Attempt to import the given path as a python package into the global scope. Constructor: importModuleFromPath(path) Return: None Arguments: path Keyword Arguments: isPluginLoaded Constructor: isPluginLoaded(pluginName = None) Return: None Arguments: pluginName ( str ) ; [default: None] Keyword Arguments: jointOrientToRotation Transfer all jointOrient attributes for the jnt hirerchy to rotations. Essentially bake the joint orient attributes for the joints. Constructor: jointOrientToRotation(topNode = None) Return: None Arguments: topNode ( str ) ; [default: None] Keyword Arguments: jointRotationToOrient Transfer all jointOrient attributes for the jnt hirerchy to rotations. Essentially bake the joint orient attributes for the joints. Constructor: jointRotationToOrient(topNode = None) Return: None Arguments: topNode ( str ) ; [default: None] Keyword Arguments: locatePreferencesDirectory This method is used across to locate the prefs directory for the current user. Constructor: locatePreferencesDirectory() Return: None Arguments: Keyword Arguments: lockAndHideAllTransforms Lock and hide all of the given node's attributes. Override flags can be inserted to skip requested channels. Constructor: lockAndHideAllTransforms(node = None, kwargs) Return: None Arguments: node ( str ) ; [default: None] kwargs Keyword Arguments: lockAndHideTransforms Based on the given flags, lock/unlock, hide/unhide attributes for the given node. Constructor: lockAndHideTransforms(node = None, kwargs) Return: None Arguments: node ( str ) ; [default: None] kwargs Keyword Arguments: mnsLicStatusCheck modes: 0 = Available for all 1 = Available for edit only Constructor: mnsLicStatusCheck(mode = 0) Return: None Arguments: mode ( int ) ; [default: 0] Keyword Arguments: objectArrayValidExistsCheckReturn MNS core object array validity check. Two main Cases for the mode parameter: 1. trueOnlyIfAllValid - Run through the objects and only if ALL of them are found existing and valid, return the array back to the caller. If a single item failed- Return None. 2. trueIfSomeValid - Check all the objects and return any or all of them based on validity. Constructor: objectArrayValidExistsCheckReturn( kwargs) Return: None Arguments: kwargs Keyword Arguments: readJson Read the input json path into formatted python variables. Constructor: readJson(fullPath) Return: None Arguments: fullPath Keyword Arguments: readSetteingFromFile Read mns setting from a given file and collect into a dict. Constructor: readSetteingFromFile(settingsPath) Return: None Arguments: settingsPath Keyword Arguments: reloadLib Constructor: reloadLib() Return: None Arguments: Keyword Arguments: removeNamespaceFromString Constructor: removeNamespaceFromString(value) Return: None Arguments: value Keyword Arguments: returnIndexFromSideDict Return the corresponding index from the pre-defined input dictionary, for the given input elenment. Constructor: returnIndexFromSideDict(dict, searchElement) Return: None Arguments: dict searchElement Keyword Arguments: returnKeyFromElementTypeDict Constructor: returnKeyFromElementTypeDict(dict, searchElement) Return: None Arguments: dict searchElement Keyword Arguments: returnNameStdChangeElement global MnsNameStd utility- Use this function to change any elemnt within a given MnsNameStd object based on keyword args given Constructor: returnNameStdChangeElement(nameStd = None, kwargs) Return: None Arguments: nameStd ( str ) ; [default: None] kwargs Keyword Arguments: setAttr mns set attr. Simple method to set attributes. two cases: 1. attribute isn't locked - set the value 2. attribute is locked - unlock the attribute, set it's value, and re-lock the attribute. Constructor: setAttr(attr, value) Return: None Arguments: attr value Keyword Arguments: setCtrlColorIdx Global utility function: Change the shape color override to index type, and set to the input value index Constructor: setCtrlColorIdx(objects = [], colorIdx = 0) Return: None Arguments: objects ( list ) ; [default: []] colorIdx ( int ) ; [default: 0] Keyword Arguments: setCtrlColorRGB Global utility function: Change the shape color override to RGB type, and set to the input value RGB Constructor: setCtrlColorRGB(objects = [], color = (1,1,1)) Return: None Arguments: objects ( list ) ; [default: []] color ( str ) ; [default: (1] 1 1) Keyword Arguments: sortNameStdArrayByID Attempt to sort the given array based on it's content ID's. Constructor: sortNameStdArrayByID(nameStdArray) Return: None Arguments: nameStdArray Keyword Arguments: sorted_alphanumeric returns an alphanumeric ordered data from input given Constructor: sorted_alphanumeric(data) Return: None Arguments: data Keyword Arguments: splitDateTimeStringToList Split a 'dateTime' string to a major/minor/patch/timestemp list Constructor: splitDateTimeStringToList(dateTime = \"\") Return: None Arguments: dateTime ( str ) ; [default: \"\"] Keyword Arguments: splitEnumAttrToChannelControlList Split a pre-defined 'channel-control' enum attribute into a formatted python dict. Constructor: splitEnumAttrToChannelControlList(enumAttrName, node, kwargs) Return: None Arguments: enumAttrName node kwargs Keyword Arguments: splitEnumAttrToColorSchemeFloatTupleList Constructor: splitEnumAttrToColorSchemeFloatTupleList(enumAttrName, node) Return: None Arguments: enumAttrName node Keyword Arguments: splitEnumToStringList Split the given enum attribute is a formated python list. Constructor: splitEnumToStringList(enumAttrName, node) Return: None Arguments: enumAttrName node Keyword Arguments: splitNameStringToNameStd Split a given string object and return a MnsNameStd based on it's structure. Constructor: splitNameStringToNameStd(nameString = \"\") Return: None Arguments: nameString ( str ) ; [default: \"\"] Keyword Arguments: validateAttrAndGet For the given transform (or nameStd)- check whether the given attr exists. If the attr exist, get it and return it. Constructor: validateAttrAndGet(transform = None, attrName = \"\", default = None, kwargs) Return: None Arguments: transform ( str ) ; [default: None] attrName ( str ) ; [default: \"\"] default ( str ) ; [default: None] kwargs Keyword Arguments: validateNameStd For any input - string/PyNode/MnsNameStd - Validate it and attempt to convert it into a MnsNameStd Object. Constructor: validateNameStd(objectA) Return: None Arguments: objectA Keyword Arguments: writeJson Write the input data into the input json file path. Constructor: writeJson(directory, fileName, data = {}, kwargs) Return: None Arguments: directory fileName data ( dict ) ; [default: {}] kwargs Keyword Arguments: writeJsonFullPath Write the input data into the input json file path. Constructor: writeJsonFullPath(fullPath, data) Return: None Arguments: fullPath data Keyword Arguments: writeJsonPath Write the input data into the input json file path. Constructor: writeJsonPath(path = None, data = {}) Return: None Arguments: path ( str ) ; [default: None] data ( dict ) ; [default: {}] Keyword Arguments: zeroJointOrient Zero all jointOrient attributes for the jnt hirerchy to rotations. Constructor: zeroJointOrient(topNode = None) Return: None Arguments: topNode ( str ) ; [default: None] Keyword Arguments: zeroTransforms Zero all available transforms for the given object passed in. Constructor: zeroTransforms(transform = \"\") Return: None Arguments: transform ( str ) ; [default: \"\"] Keyword Arguments:","title":"Utility"},{"location":"utility/#utility","text":"=== Author: Assaf Ben Zur === Global Core MNS utility module. This module holds any 'global' function used within MNS. A 'misc' style module.","title":"utility"},{"location":"utility/#defenitions","text":"","title":"Defenitions"},{"location":"utility/#addattrtoobj","text":"A global conditioned wrapper for adding attributes to object/objects Exceptions: 1. Object to add attr to was found non-existing or invalid. Abort. 2. The 'replace' flag wasn't set, and the attribute already exists. Abort. 3. Attr name wasn't passed in. Abort. 4. The attribute type passed doesn't match the attribute value passed. Abort. 5. min/max values were passed in, although the attr type is not an Int or a Float. Skip min/max values. 6. min/max values were passed, and the attr type is Int or Float, although the min/max values passed arn't matching the data type. Skip min/max. 7. The replace flag was set to True, but the attribute doesn't exist. Ignore replace flag. Constructor: addAttrToObj(objects = [], kwargs) Return: None Arguments: objects ( list ) ; [default: []] kwargs Keyword Arguments:","title":"addAttrToObj"},{"location":"utility/#addblockclasidtoobj","text":"Add a 'blkClassId' Attribute to the given input. Constructor: addBlockClasIDToObj(objectA, kwargs) Return: None Arguments: objectA kwargs Keyword Arguments:","title":"addBlockClasIDToObj"},{"location":"utility/#applychennelcontrolattributestotransform","text":"This method applies a 'channelControl' dict attributes into the given transform. Constructor: applyChennelControlAttributesToTransform(transform = None, ccDict = {}) Return: None Arguments: transform ( str ) ; [default: None] ccDict ( dict ) ; [default: {}] Keyword Arguments:","title":"applyChennelControlAttributesToTransform"},{"location":"utility/#autoloadmnsplugins","text":"Constructor: autoLoadMnsPlugins() Return: None Arguments: Keyword Arguments:","title":"autoLoadMnsPlugins"},{"location":"utility/#checkforinternetconnection","text":"check for a valid internet connection. Constructor: checkForInternetConnection(host=\"8.8.8.8\", port=53, timeout=3) Return: None Arguments: host ( str ) ; [default: \"8.8.8.8\"] port ( int ) ; [default: 53] timeout ( int ) ; [default: 3] Keyword Arguments:","title":"checkForInternetConnection"},{"location":"utility/#checkforversionupdates","text":"This method will compare the current mns version against the latest available. Return False if the current version is the latest version Return True if the current version isn't the latest version Constructor: checkForVersionUpdates() Return: None Arguments: Keyword Arguments:","title":"checkForVersionUpdates"},{"location":"utility/#checkfunctionredundencyforpackage","text":"Constructor: checkFunctionRedundencyForPackage(package, printRedundentOnly = True) Return: None Arguments: package printRedundentOnly ( bool ) ; [default: True] Keyword Arguments:","title":"checkFunctionRedundencyForPackage"},{"location":"utility/#checkifobjexistsandset","text":"For the object passed in- three main cases: 1. If it is a 'PyNode' object, set it as the object to check. 2. If it is an MnsNameStd object,set it's .node property as the object to check. 3. If it is a string, assign it into a 'PyNode' obhect and set it as the object to check. Check whether the object exists in the current scene and valid. If so, return it. Else return None. Constructor: checkIfObjExistsAndSet(objB = None, kwargs) Return: None Arguments: objB ( str ) ; [default: None] kwargs Keyword Arguments:","title":"checkIfObjExistsAndSet"},{"location":"utility/#checklocalaxispairing","text":"This method will check and return local axis pairing. Main use is for pre-connection check for pocNode and curveVarNode tweakers (inputs), in order to link local axes correctly, avoiding the need to check aim and up axes, as well as the offset axes. Constructor: checkLocalAxisPairing(origin = None, target = None) Return: None Arguments: origin ( str ) ; [default: None] target ( str ) ; [default: None] Keyword Arguments:","title":"checkLocalAxisPairing"},{"location":"utility/#connectshapecolorrgb","text":"Constructor: connectShapeColorRGB(source = None, target = None) Return: None Arguments: source ( str ) ; [default: None] target ( str ) ; [default: None] Keyword Arguments:","title":"connectShapeColorRGB"},{"location":"utility/#convertalphatoint","text":"Recursive. Convert an Alpha input into an Int ID. Infinite. Constructor: convertAlphaToInt(alpha = \"A\") Return: None Arguments: alpha ( str ) ; [default: \"A\"] Keyword Arguments:","title":"convertAlphaToInt"},{"location":"utility/#convertinttoalpha","text":"Recursive. Convert an Int input into an Alpha ID. Infinite. Constructor: convertIntToAlpha(intA = 0) Return: None Arguments: intA ( int ) ; [default: 0] Keyword Arguments:","title":"convertIntToAlpha"},{"location":"utility/#convertnodetonamestd","text":"Attempt to convert a given node into a MnsNameStd object. Constructor: convertNodeToNameStd(node) Return: None Arguments: node Keyword Arguments:","title":"convertNodeToNameStd"},{"location":"utility/#createaxislamberts","text":"An axes colored lambert shaders creation function. Constructor: createAxisLamberts( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"createAxisLamberts"},{"location":"utility/#createfreeoffsetgroup","text":"For the given transform, create a free offset group transform parent. Constructor: createFreeOffsetGroup(transformObject) Return: None Arguments: transformObject Keyword Arguments:","title":"createFreeOffsetGroup"},{"location":"utility/#createmnsdefaultprefs","text":"This method is called whenever a pref read is being called. In case this method fails to locate local prefs for the current user, it creates it from the defualt prefs file. Also, this method contains the \"restore\" flag, which will create a new prefs local file from the default file regardless of any other choice. This is used as a \"restore factory defaults\" option. Constructor: createMnsDefaultPrefs( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"createMnsDefaultPrefs"},{"location":"utility/#createnodereturnnamestd","text":"A core major MNS function. This function creates a new node, based on it's type passed in, and it's name parameters passed in, and returns it as a MnsNameStd object. Constructor: createNodeReturnNameStd( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"createNodeReturnNameStd"},{"location":"utility/#createoffsetgroup","text":"For the given transform, create a predefined offset group transform parent. Constructor: createOffsetGroup(transformObject, kwargs) Return: None Arguments: transformObject kwargs Keyword Arguments:","title":"createOffsetGroup"},{"location":"utility/#deletefile","text":"A delete file global function that includes a pre-defined log write. Constructor: deleteFile(file) Return: None Arguments: file Keyword Arguments:","title":"deleteFile"},{"location":"utility/#deleteunusedshapenodes","text":"Constructor: deleteUnusedShapeNodes(obj = None) Return: None Arguments: obj ( str ) ; [default: None] Keyword Arguments:","title":"deleteUnusedShapeNodes"},{"location":"utility/#distbetween","text":"Measure the distance between to maya transforms. Constructor: distBetween(transformA = None, transformB = None) Return: None Arguments: transformA ( str ) ; [default: None] transformB ( str ) ; [default: None] Keyword Arguments:","title":"distBetween"},{"location":"utility/#duplicatenamestd","text":"Simple method to duplicate a node embedded within a NameStd object. This method will duuplicate the node, and rename it by the nameStd rules. Constructor: duplicateNameStd(nameStd = None, kwargs) Return: None Arguments: nameStd ( str ) ; [default: None] kwargs Keyword Arguments:","title":"duplicateNameStd"},{"location":"utility/#extractheaderfrompath","text":"Constructor: extractHeaderFromPath(fullPath) Return: None Arguments: fullPath Keyword Arguments:","title":"extractHeaderFromPath"},{"location":"utility/#findandreplaceinfile","text":"This is a simple method to replace the pattern given with a substitute string within a file, Then overriting the original file with new lines. Constructor: findAndReplaceInFile(file_path, pattern, subst) Return: None Arguments: file_path pattern subst Keyword Arguments:","title":"findAndReplaceInFile"},{"location":"utility/#fixshapesname","text":"Simple shape name fix function based on parent's name. Constructor: fixShapesName(objects = []) Return: None Arguments: objects ( list ) ; [default: []] Keyword Arguments:","title":"fixShapesName"},{"location":"utility/#getcurrentversion","text":"Get the current mansur product version based on this file directory Constructor: getCurrentVersion() Return: None Arguments: Keyword Arguments:","title":"getCurrentVersion"},{"location":"utility/#getfirstlevelparentforobject","text":"Get the top level parent for a given object. Constructor: getFirstLevelParentForObject(obj) Return: pyNode (top level parent) Arguments: obj Keyword Arguments:","title":"getFirstLevelParentForObject"},{"location":"utility/#getmobjectfromobjname","text":"Constructor: getMObjectFromObjName(name) Return: None Arguments: name Keyword Arguments:","title":"getMObjectFromObjName"},{"location":"utility/#getmansurprefs","text":"This method retrives all of the current prefrences. In case the 'returnFileDirectory' flag is set to true, this will return the path of the prefs file, instead of the preferences as a dict. Constructor: getMansurPrefs( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"getMansurPrefs"},{"location":"utility/#getnumlinesfordir","text":"Constructor: getNumLinesForDir(directory = \"D/mansurProject/mansurRig/scripts/mansur\") Return: None Arguments: directory ( str ) ; [default: \"D:/mansurProject/mansurRig/scripts/mansur\"] Keyword Arguments:","title":"getNumLinesForDir"},{"location":"utility/#getsidefromnode","text":"Attempt to collect the given input's side. Constructor: getSideFromNode(node) Return: None Arguments: node Keyword Arguments:","title":"getSideFromNode"},{"location":"utility/#gettopparentforobj","text":"Recursively attempt to fet the top node of the maya heirarchy, from the given input upwards. Constructor: getTopParentForObj(obj) Return: None Arguments: obj Keyword Arguments:","title":"getTopParentForObj"},{"location":"utility/#gettopparentforsel","text":"get the top node of the current selected object's maya heirarchy. Constructor: getTopParentForSel() Return: None Arguments: Keyword Arguments:","title":"getTopParentForSel"},{"location":"utility/#importmodulefrompath","text":"Attempt to import the given path as a python package into the global scope. Constructor: importModuleFromPath(path) Return: None Arguments: path Keyword Arguments:","title":"importModuleFromPath"},{"location":"utility/#ispluginloaded","text":"Constructor: isPluginLoaded(pluginName = None) Return: None Arguments: pluginName ( str ) ; [default: None] Keyword Arguments:","title":"isPluginLoaded"},{"location":"utility/#jointorienttorotation","text":"Transfer all jointOrient attributes for the jnt hirerchy to rotations. Essentially bake the joint orient attributes for the joints. Constructor: jointOrientToRotation(topNode = None) Return: None Arguments: topNode ( str ) ; [default: None] Keyword Arguments:","title":"jointOrientToRotation"},{"location":"utility/#jointrotationtoorient","text":"Transfer all jointOrient attributes for the jnt hirerchy to rotations. Essentially bake the joint orient attributes for the joints. Constructor: jointRotationToOrient(topNode = None) Return: None Arguments: topNode ( str ) ; [default: None] Keyword Arguments:","title":"jointRotationToOrient"},{"location":"utility/#locatepreferencesdirectory","text":"This method is used across to locate the prefs directory for the current user. Constructor: locatePreferencesDirectory() Return: None Arguments: Keyword Arguments:","title":"locatePreferencesDirectory"},{"location":"utility/#lockandhidealltransforms","text":"Lock and hide all of the given node's attributes. Override flags can be inserted to skip requested channels. Constructor: lockAndHideAllTransforms(node = None, kwargs) Return: None Arguments: node ( str ) ; [default: None] kwargs Keyword Arguments:","title":"lockAndHideAllTransforms"},{"location":"utility/#lockandhidetransforms","text":"Based on the given flags, lock/unlock, hide/unhide attributes for the given node. Constructor: lockAndHideTransforms(node = None, kwargs) Return: None Arguments: node ( str ) ; [default: None] kwargs Keyword Arguments:","title":"lockAndHideTransforms"},{"location":"utility/#mnslicstatuscheck","text":"modes: 0 = Available for all 1 = Available for edit only Constructor: mnsLicStatusCheck(mode = 0) Return: None Arguments: mode ( int ) ; [default: 0] Keyword Arguments:","title":"mnsLicStatusCheck"},{"location":"utility/#objectarrayvalidexistscheckreturn","text":"MNS core object array validity check. Two main Cases for the mode parameter: 1. trueOnlyIfAllValid - Run through the objects and only if ALL of them are found existing and valid, return the array back to the caller. If a single item failed- Return None. 2. trueIfSomeValid - Check all the objects and return any or all of them based on validity. Constructor: objectArrayValidExistsCheckReturn( kwargs) Return: None Arguments: kwargs Keyword Arguments:","title":"objectArrayValidExistsCheckReturn"},{"location":"utility/#readjson","text":"Read the input json path into formatted python variables. Constructor: readJson(fullPath) Return: None Arguments: fullPath Keyword Arguments:","title":"readJson"},{"location":"utility/#readsetteingfromfile","text":"Read mns setting from a given file and collect into a dict. Constructor: readSetteingFromFile(settingsPath) Return: None Arguments: settingsPath Keyword Arguments:","title":"readSetteingFromFile"},{"location":"utility/#reloadlib","text":"Constructor: reloadLib() Return: None Arguments: Keyword Arguments:","title":"reloadLib"},{"location":"utility/#removenamespacefromstring","text":"Constructor: removeNamespaceFromString(value) Return: None Arguments: value Keyword Arguments:","title":"removeNamespaceFromString"},{"location":"utility/#returnindexfromsidedict","text":"Return the corresponding index from the pre-defined input dictionary, for the given input elenment. Constructor: returnIndexFromSideDict(dict, searchElement) Return: None Arguments: dict searchElement Keyword Arguments:","title":"returnIndexFromSideDict"},{"location":"utility/#returnkeyfromelementtypedict","text":"Constructor: returnKeyFromElementTypeDict(dict, searchElement) Return: None Arguments: dict searchElement Keyword Arguments:","title":"returnKeyFromElementTypeDict"},{"location":"utility/#returnnamestdchangeelement","text":"global MnsNameStd utility- Use this function to change any elemnt within a given MnsNameStd object based on keyword args given Constructor: returnNameStdChangeElement(nameStd = None, kwargs) Return: None Arguments: nameStd ( str ) ; [default: None] kwargs Keyword Arguments:","title":"returnNameStdChangeElement"},{"location":"utility/#setattr","text":"mns set attr. Simple method to set attributes. two cases: 1. attribute isn't locked - set the value 2. attribute is locked - unlock the attribute, set it's value, and re-lock the attribute. Constructor: setAttr(attr, value) Return: None Arguments: attr value Keyword Arguments:","title":"setAttr"},{"location":"utility/#setctrlcoloridx","text":"Global utility function: Change the shape color override to index type, and set to the input value index Constructor: setCtrlColorIdx(objects = [], colorIdx = 0) Return: None Arguments: objects ( list ) ; [default: []] colorIdx ( int ) ; [default: 0] Keyword Arguments:","title":"setCtrlColorIdx"},{"location":"utility/#setctrlcolorrgb","text":"Global utility function: Change the shape color override to RGB type, and set to the input value RGB Constructor: setCtrlColorRGB(objects = [], color = (1,1,1)) Return: None Arguments: objects ( list ) ; [default: []] color ( str ) ; [default: (1] 1 1) Keyword Arguments:","title":"setCtrlColorRGB"},{"location":"utility/#sortnamestdarraybyid","text":"Attempt to sort the given array based on it's content ID's. Constructor: sortNameStdArrayByID(nameStdArray) Return: None Arguments: nameStdArray Keyword Arguments:","title":"sortNameStdArrayByID"},{"location":"utility/#sorted_alphanumeric","text":"returns an alphanumeric ordered data from input given Constructor: sorted_alphanumeric(data) Return: None Arguments: data Keyword Arguments:","title":"sorted_alphanumeric"},{"location":"utility/#splitdatetimestringtolist","text":"Split a 'dateTime' string to a major/minor/patch/timestemp list Constructor: splitDateTimeStringToList(dateTime = \"\") Return: None Arguments: dateTime ( str ) ; [default: \"\"] Keyword Arguments:","title":"splitDateTimeStringToList"},{"location":"utility/#splitenumattrtochannelcontrollist","text":"Split a pre-defined 'channel-control' enum attribute into a formatted python dict. Constructor: splitEnumAttrToChannelControlList(enumAttrName, node, kwargs) Return: None Arguments: enumAttrName node kwargs Keyword Arguments:","title":"splitEnumAttrToChannelControlList"},{"location":"utility/#splitenumattrtocolorschemefloattuplelist","text":"Constructor: splitEnumAttrToColorSchemeFloatTupleList(enumAttrName, node) Return: None Arguments: enumAttrName node Keyword Arguments:","title":"splitEnumAttrToColorSchemeFloatTupleList"},{"location":"utility/#splitenumtostringlist","text":"Split the given enum attribute is a formated python list. Constructor: splitEnumToStringList(enumAttrName, node) Return: None Arguments: enumAttrName node Keyword Arguments:","title":"splitEnumToStringList"},{"location":"utility/#splitnamestringtonamestd","text":"Split a given string object and return a MnsNameStd based on it's structure. Constructor: splitNameStringToNameStd(nameString = \"\") Return: None Arguments: nameString ( str ) ; [default: \"\"] Keyword Arguments:","title":"splitNameStringToNameStd"},{"location":"utility/#validateattrandget","text":"For the given transform (or nameStd)- check whether the given attr exists. If the attr exist, get it and return it. Constructor: validateAttrAndGet(transform = None, attrName = \"\", default = None, kwargs) Return: None Arguments: transform ( str ) ; [default: None] attrName ( str ) ; [default: \"\"] default ( str ) ; [default: None] kwargs Keyword Arguments:","title":"validateAttrAndGet"},{"location":"utility/#validatenamestd","text":"For any input - string/PyNode/MnsNameStd - Validate it and attempt to convert it into a MnsNameStd Object. Constructor: validateNameStd(objectA) Return: None Arguments: objectA Keyword Arguments:","title":"validateNameStd"},{"location":"utility/#writejson","text":"Write the input data into the input json file path. Constructor: writeJson(directory, fileName, data = {}, kwargs) Return: None Arguments: directory fileName data ( dict ) ; [default: {}] kwargs Keyword Arguments:","title":"writeJson"},{"location":"utility/#writejsonfullpath","text":"Write the input data into the input json file path. Constructor: writeJsonFullPath(fullPath, data) Return: None Arguments: fullPath data Keyword Arguments:","title":"writeJsonFullPath"},{"location":"utility/#writejsonpath","text":"Write the input data into the input json file path. Constructor: writeJsonPath(path = None, data = {}) Return: None Arguments: path ( str ) ; [default: None] data ( dict ) ; [default: {}] Keyword Arguments:","title":"writeJsonPath"},{"location":"utility/#zerojointorient","text":"Zero all jointOrient attributes for the jnt hirerchy to rotations. Constructor: zeroJointOrient(topNode = None) Return: None Arguments: topNode ( str ) ; [default: None] Keyword Arguments:","title":"zeroJointOrient"},{"location":"utility/#zerotransforms","text":"Zero all available transforms for the given object passed in. Constructor: zeroTransforms(transform = \"\") Return: None Arguments: transform ( str ) ; [default: \"\"] Keyword Arguments:","title":"zeroTransforms"},{"location":"volumeJointsUI/","text":"volumeJointsUI === Author: Assaf Ben Zur === Classes DragDoubleSpinBox [Class] Constructor: DragDoubleSpinBox( parent ( str ) ; [default: None]) Inherits from: QtWidgets.QDoubleSpinBox Class Members: mouseStartPosX startValue inDrag le Methods: mouseDrag [method] mouseDragEnd [method] mouseDragStart [method] eventFilter [method] DragDoubleSpinBox methods mouseDrag [ DragDoubleSpinBox class method] Constructor: mouseDrag(self, event) Return: None Arguments: self event Optional Arguments: mouseDragEnd [ DragDoubleSpinBox class method] Constructor: mouseDragEnd(self, event) Return: None Arguments: self event Optional Arguments: mouseDragStart [ DragDoubleSpinBox class method] Constructor: mouseDragStart(self, event) Return: None Arguments: self event Optional Arguments: eventFilter [ DragDoubleSpinBox class method] Override event filter to catch the close trigger to delete the callback Constructor: eventFilter(self, source, event) Return: None Arguments: self source event Optional Arguments: MnsVolumeJointsUI [Class] Main UI Class Constructor: MnsVolumeJointsUI( parent ( str ) ; [default: mnsUIUtils.get_maya_window()]) Inherits from: form_class, base_class Class Members: allCollapsible allEditableWidgets mayaSelectCallBack blockSceneSelectCallback cbxSBRelations currentVJnt currentVJntNode currentIndex currentVJntSym currentVJntNodeSym currentIndexSym symmetryDelta attrMapping Methods: createVJnt [method] deleteVJnt [method] duplicateVJnt [method] initializeUI [method] setCollapsibleWidgetsBehaviour [method] setRestPoseForAll [method] symmetrizeAllTrigger [method] symmetrizeVJTrigger [method] updateAllEditValues [method] updateAnglesState [method] drawAngleSection [method] drawGeneralSection [method] refreshView [method] selectionChangedTrigger [method] setCurrentStateAsRestPose [method] setSymmetryVars [method] sceneSelectionChangedTrigger [method] toggleAllCollapsed [method] setCurrentSBToMinOrMax [method] allEditTriggers [method] connectSignals [method] loadWindow [method] eventFilter [method] MnsVolumeJointsUI methods createVJnt [ MnsVolumeJointsUI class method] Constructor: createVJnt(self) Return: None Arguments: self Optional Arguments: deleteVJnt [ MnsVolumeJointsUI class method] Constructor: deleteVJnt(self) Return: None Arguments: self Optional Arguments: duplicateVJnt [ MnsVolumeJointsUI class method] Constructor: duplicateVJnt(self) Return: None Arguments: self Optional Arguments: initializeUI [ MnsVolumeJointsUI class method] Constructor: initializeUI(self) Return: None Arguments: self Optional Arguments: setCollapsibleWidgetsBehaviour [ MnsVolumeJointsUI class method] Constructor: setCollapsibleWidgetsBehaviour(self) Return: None Arguments: self Optional Arguments: setRestPoseForAll [ MnsVolumeJointsUI class method] Constructor: setRestPoseForAll(self) Return: None Arguments: self Optional Arguments: symmetrizeAllTrigger [ MnsVolumeJointsUI class method] Constructor: symmetrizeAllTrigger(self) Return: None Arguments: self Optional Arguments: symmetrizeVJTrigger [ MnsVolumeJointsUI class method] Constructor: symmetrizeVJTrigger(self) Return: None Arguments: self Optional Arguments: updateAllEditValues [ MnsVolumeJointsUI class method] Constructor: updateAllEditValues(self) Return: None Arguments: self Optional Arguments: updateAnglesState [ MnsVolumeJointsUI class method] Constructor: updateAnglesState(self) Return: None Arguments: self Optional Arguments: drawAngleSection [ MnsVolumeJointsUI class method] Constructor: drawAngleSection(self, kwargs) Return: None Arguments: self kwargs Optional Arguments: drawGeneralSection [ MnsVolumeJointsUI class method] Constructor: drawGeneralSection(self, kwargs) Return: None Arguments: self kwargs Optional Arguments: refreshView [ MnsVolumeJointsUI class method] Constructor: refreshView(self, kwargs) Return: None Arguments: self kwargs Optional Arguments: selectionChangedTrigger [ MnsVolumeJointsUI class method] Constructor: selectionChangedTrigger(self, kwargs) Return: None Arguments: self kwargs Optional Arguments: setCurrentStateAsRestPose [ MnsVolumeJointsUI class method] Constructor: setCurrentStateAsRestPose(self, kwargs) Return: None Arguments: self kwargs Optional Arguments: setSymmetryVars [ MnsVolumeJointsUI class method] Constructor: setSymmetryVars(self, kwargs) Return: None Arguments: self kwargs Optional Arguments: sceneSelectionChangedTrigger [ MnsVolumeJointsUI class method] Constructor: sceneSelectionChangedTrigger(self, dummy = None) Return: None Arguments: self dummy ( str ) ; [default: None] Optional Arguments: toggleAllCollapsed [ MnsVolumeJointsUI class method] Constructor: toggleAllCollapsed(self, pressedColWid) Return: None Arguments: self pressedColWid Optional Arguments: setCurrentSBToMinOrMax [ MnsVolumeJointsUI class method] Constructor: setCurrentSBToMinOrMax(self, sourceWidget, targetWidget) Return: None Arguments: self sourceWidget targetWidget Optional Arguments: allEditTriggers [ MnsVolumeJointsUI class method] Constructor: allEditTriggers(self, widget = None, value = None) Return: None Arguments: self widget ( str ) ; [default: None] value ( str ) ; [default: None] Optional Arguments: connectSignals [ MnsVolumeJointsUI class method] Connect all UI signals Constructor: connectSignals(self) Return: None Arguments: self Optional Arguments: loadWindow [ MnsVolumeJointsUI class method] Main UI load Constructor: loadWindow(self) Return: None Arguments: self Optional Arguments: eventFilter [ MnsVolumeJointsUI class method] Override event filter to catch the close trigger to delete the callback Constructor: eventFilter(self, source, event) Return: None Arguments: self source event Optional Arguments: Defenitions loadVolumeJointsUI Load the cns tool UI from globals, avoid UI duplication. Constructor: loadVolumeJointsUI() Return: None Arguments: Keyword Arguments: volJointStateChangedCB Constructor: volJointStateChangedCB(msg, plug, otherPlug, clientData, kwargs) Return: None Arguments: msg plug otherPlug clientData kwargs Keyword Arguments:","title":"volumeJointsUI"},{"location":"volumeJointsUI/#volumejointsui","text":"=== Author: Assaf Ben Zur ===","title":"volumeJointsUI"},{"location":"volumeJointsUI/#classes","text":"","title":"Classes"},{"location":"volumeJointsUI/#dragdoublespinbox-class","text":"Constructor: DragDoubleSpinBox( parent ( str ) ; [default: None]) Inherits from: QtWidgets.QDoubleSpinBox Class Members: mouseStartPosX startValue inDrag le Methods: mouseDrag [method] mouseDragEnd [method] mouseDragStart [method] eventFilter [method]","title":"DragDoubleSpinBox [Class]"},{"location":"volumeJointsUI/#dragdoublespinbox-methods","text":"","title":"DragDoubleSpinBox  methods"},{"location":"volumeJointsUI/#mnsvolumejointsui-class","text":"Main UI Class Constructor: MnsVolumeJointsUI( parent ( str ) ; [default: mnsUIUtils.get_maya_window()]) Inherits from: form_class, base_class Class Members: allCollapsible allEditableWidgets mayaSelectCallBack blockSceneSelectCallback cbxSBRelations currentVJnt currentVJntNode currentIndex currentVJntSym currentVJntNodeSym currentIndexSym symmetryDelta attrMapping Methods: createVJnt [method] deleteVJnt [method] duplicateVJnt [method] initializeUI [method] setCollapsibleWidgetsBehaviour [method] setRestPoseForAll [method] symmetrizeAllTrigger [method] symmetrizeVJTrigger [method] updateAllEditValues [method] updateAnglesState [method] drawAngleSection [method] drawGeneralSection [method] refreshView [method] selectionChangedTrigger [method] setCurrentStateAsRestPose [method] setSymmetryVars [method] sceneSelectionChangedTrigger [method] toggleAllCollapsed [method] setCurrentSBToMinOrMax [method] allEditTriggers [method] connectSignals [method] loadWindow [method] eventFilter [method]","title":"MnsVolumeJointsUI [Class]"},{"location":"volumeJointsUI/#mnsvolumejointsui-methods","text":"","title":"MnsVolumeJointsUI  methods"},{"location":"volumeJointsUI/#defenitions","text":"","title":"Defenitions"},{"location":"volumeJointsUI/#loadvolumejointsui","text":"Load the cns tool UI from globals, avoid UI duplication. Constructor: loadVolumeJointsUI() Return: None Arguments: Keyword Arguments:","title":"loadVolumeJointsUI"},{"location":"volumeJointsUI/#voljointstatechangedcb","text":"Constructor: volJointStateChangedCB(msg, plug, otherPlug, clientData, kwargs) Return: None Arguments: msg plug otherPlug clientData kwargs Keyword Arguments:","title":"volJointStateChangedCB"},{"location":"wheel/","text":"wheel Author: Asaf Ben-Zur Best used for: Free objects, General Control, Mesh Tweaker, Mesh Local Tweaker This Module is a general single control at it's base state. It also contains a Mesh-Tweaker feature that will allow you to create a \"Double Directional\" tweaker- meaning that the control will follow the input Mesh's position (Rivet) and will also be able to affect it. This effect is also commonly knowen as the \"Dorito-Effect\". This feature also includes a \"local\" mode, to tunnel deformations from the control to a local skinCluster, then a blend-shape to the main Mesh, creating multi-layered skinned mesh. All of these features will use the main joint as the effector. Note: When using the \"Mesh-Tweaker\" feture, when needing to affect a mesh that will also be used as the rivet input- make sure \"sameMeshAffector\" is set to ON. Defenitions construct Constructor: construct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments: customGuides Constructor: customGuides(mansur, builtGuides) Return: None Arguments: mansur builtGuides Keyword Arguments:","title":"Wheel"},{"location":"wheel/#wheel","text":"Author: Asaf Ben-Zur Best used for: Free objects, General Control, Mesh Tweaker, Mesh Local Tweaker This Module is a general single control at it's base state. It also contains a Mesh-Tweaker feature that will allow you to create a \"Double Directional\" tweaker- meaning that the control will follow the input Mesh's position (Rivet) and will also be able to affect it. This effect is also commonly knowen as the \"Dorito-Effect\". This feature also includes a \"local\" mode, to tunnel deformations from the control to a local skinCluster, then a blend-shape to the main Mesh, creating multi-layered skinned mesh. All of these features will use the main joint as the effector. Note: When using the \"Mesh-Tweaker\" feture, when needing to affect a mesh that will also be used as the rivet input- make sure \"sameMeshAffector\" is set to ON.","title":"wheel"},{"location":"wheel/#defenitions","text":"","title":"Defenitions"},{"location":"wheel/#construct","text":"Constructor: construct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"construct"},{"location":"wheel/#customguides","text":"Constructor: customGuides(mansur, builtGuides) Return: None Arguments: mansur builtGuides Keyword Arguments:","title":"customGuides"},{"location":"wheel_settings/","text":"wheel Settings Author: Asaf Ben-Zur Best used for: Wheels Attributes GlobalSettings Attribute Name Default Description controlShape circle Control shape channelControl T R S X v v v Y v v v Z v v v Control channel-box settings wheelDiameter 20.0 Comment wasn't inserted gearRatio 1.0 Comment wasn't inserted mapRoatationToAxis 0 Comment wasn't inserted reverseDirection False Comment wasn't inserted autoDriveDefault 1.0 Comment wasn't inserted","title":"Wheel settings"},{"location":"wheel_settings/#wheel-settings","text":"Author: Asaf Ben-Zur Best used for: Wheels","title":"wheel Settings"},{"location":"wheel_settings/#attributes","text":"","title":"Attributes"},{"location":"wheel_settings/#globalsettings","text":"Attribute Name Default Description controlShape circle Control shape channelControl T R S X v v v Y v v v Z v v v Control channel-box settings wheelDiameter 20.0 Comment wasn't inserted gearRatio 1.0 Comment wasn't inserted mapRoatationToAxis 0 Comment wasn't inserted reverseDirection False Comment wasn't inserted autoDriveDefault 1.0 Comment wasn't inserted","title":"GlobalSettings"},{"location":"wing/","text":"wing Author: Asaf Ben-Zur Best used for: Bird Wings This module is designed for birds (feathered) wings. This is a compound module. The main module is based on the limb module, including most of it's features. On top of the main limb module, there is a compound FK chain modules extending from each of the main modules main guides, to create a global feathers silhouette control. Out of these compounds, a grid of interp-joints is created to control the shape's deformation, using mnsPointOnCuveNode as a driver. As a bird wing is incredibly complex, controlling it precisely is incredibly difficult. With that in mind, the grid of interp joints is designed to control the overall shape of the feathers as a group, mid-controls to curl them as a group, as well as control each feather row individually. Use featherJoints attribute to define the number of feathers along the wings main skeleton. Post joint-struct creation, use the custom position adjustment attribute on the root-guide to adjust the position of the joint grid to match your needs. This module also contains multiple features to make animation even better: Feathers spring, global wave control, individual feather control, bendy limbs, extension-to-look-at for easy wing fold control. Defenitions attempFeatherParamAdjustRemap Constructor: attempFeatherParamAdjustRemap(mansur, rootGuide = None, previousValues = {}) Return: None Arguments: mansur rootGuide ( str ) ; [default: None] previousValues ( dict ) ; [default: {}] Keyword Arguments: collectFeathParamAdjustValues Constructor: collectFeathParamAdjustValues(rootGuide) Return: None Arguments: rootGuide Keyword Arguments: construct Constructor: construct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments: customGuides Constructor: customGuides(mansur, builtGuides) Return: None Arguments: mansur builtGuides Keyword Arguments: deconstruct deconstruct method implementation. Transfer interJoints control back to the main joints. Constructor: deconstruct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments: deleteUnusedMnsNodesFromRootGuide Constructor: deleteUnusedMnsNodesFromRootGuide(rootNode = None) Return: None Arguments: rootNode ( str ) ; [default: None] Keyword Arguments: getNumSections Constructor: getNumSections(tweakersPerSection, doTweakers = False) Return: None Arguments: tweakersPerSection doTweakers ( bool ) ; [default: False] Keyword Arguments: jointStructure Constructor: jointStructure(mansur, guides, mnsBuildModule = None, kwargs) Return: None Arguments: mansur guides mnsBuildModule ( str ) ; [default: None] kwargs Keyword Arguments: jointStructureSoftMod Constructor: jointStructureSoftMod(mansur, guides, mnsBuildModule = None, kwargs) Return: None Arguments: mansur guides mnsBuildModule ( str ) ; [default: None] kwargs Keyword Arguments: moduleCompound Constructor: moduleCompound(mansur, bmButtonList, guides, mnsBuildModule = None, kwargs) Return: None Arguments: mansur bmButtonList guides mnsBuildModule ( str ) ; [default: None] kwargs Keyword Arguments: postConstruct Constructor: postConstruct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"Wing"},{"location":"wing/#wing","text":"Author: Asaf Ben-Zur Best used for: Bird Wings This module is designed for birds (feathered) wings. This is a compound module. The main module is based on the limb module, including most of it's features. On top of the main limb module, there is a compound FK chain modules extending from each of the main modules main guides, to create a global feathers silhouette control. Out of these compounds, a grid of interp-joints is created to control the shape's deformation, using mnsPointOnCuveNode as a driver. As a bird wing is incredibly complex, controlling it precisely is incredibly difficult. With that in mind, the grid of interp joints is designed to control the overall shape of the feathers as a group, mid-controls to curl them as a group, as well as control each feather row individually. Use featherJoints attribute to define the number of feathers along the wings main skeleton. Post joint-struct creation, use the custom position adjustment attribute on the root-guide to adjust the position of the joint grid to match your needs. This module also contains multiple features to make animation even better: Feathers spring, global wave control, individual feather control, bendy limbs, extension-to-look-at for easy wing fold control.","title":"wing"},{"location":"wing/#defenitions","text":"","title":"Defenitions"},{"location":"wing/#attempfeatherparamadjustremap","text":"Constructor: attempFeatherParamAdjustRemap(mansur, rootGuide = None, previousValues = {}) Return: None Arguments: mansur rootGuide ( str ) ; [default: None] previousValues ( dict ) ; [default: {}] Keyword Arguments:","title":"attempFeatherParamAdjustRemap"},{"location":"wing/#collectfeathparamadjustvalues","text":"Constructor: collectFeathParamAdjustValues(rootGuide) Return: None Arguments: rootGuide Keyword Arguments:","title":"collectFeathParamAdjustValues"},{"location":"wing/#construct","text":"Constructor: construct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"construct"},{"location":"wing/#customguides","text":"Constructor: customGuides(mansur, builtGuides) Return: None Arguments: mansur builtGuides Keyword Arguments:","title":"customGuides"},{"location":"wing/#deconstruct","text":"deconstruct method implementation. Transfer interJoints control back to the main joints. Constructor: deconstruct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"deconstruct"},{"location":"wing/#deleteunusedmnsnodesfromrootguide","text":"Constructor: deleteUnusedMnsNodesFromRootGuide(rootNode = None) Return: None Arguments: rootNode ( str ) ; [default: None] Keyword Arguments:","title":"deleteUnusedMnsNodesFromRootGuide"},{"location":"wing/#getnumsections","text":"Constructor: getNumSections(tweakersPerSection, doTweakers = False) Return: None Arguments: tweakersPerSection doTweakers ( bool ) ; [default: False] Keyword Arguments:","title":"getNumSections"},{"location":"wing/#jointstructure","text":"Constructor: jointStructure(mansur, guides, mnsBuildModule = None, kwargs) Return: None Arguments: mansur guides mnsBuildModule ( str ) ; [default: None] kwargs Keyword Arguments:","title":"jointStructure"},{"location":"wing/#jointstructuresoftmod","text":"Constructor: jointStructureSoftMod(mansur, guides, mnsBuildModule = None, kwargs) Return: None Arguments: mansur guides mnsBuildModule ( str ) ; [default: None] kwargs Keyword Arguments:","title":"jointStructureSoftMod"},{"location":"wing/#modulecompound","text":"Constructor: moduleCompound(mansur, bmButtonList, guides, mnsBuildModule = None, kwargs) Return: None Arguments: mansur bmButtonList guides mnsBuildModule ( str ) ; [default: None] kwargs Keyword Arguments:","title":"moduleCompound"},{"location":"wing/#postconstruct","text":"Constructor: postConstruct(mansur, MnsBuildModule, kwargs) Return: None Arguments: mansur MnsBuildModule kwargs Keyword Arguments:","title":"postConstruct"},{"location":"wing_settings/","text":"wing Settings Author: Asaf Ben-Zur Best used for: Bird Wings This module is designed for birds (feathered) wings. This is a compound module. The main module is based on the limb module, including most of it's features. On top of the main limb module, there is a compound FK chain modules extending from each of the main modules main guides, to create a global feathers silhouette control. Out of these compounds, a grid of interp-joints is created to control the shape's deformation, using mnsPointOnCuveNode as a driver. As a bird wing is incredibly complex, controlling it precisely is incredibly difficult. With that in mind, the grid of interp joints is designed to control the overall shape of the feathers as a group, mid-controls to curl them as a group, as well as control each feather row individually. Use featherJoints attribute to define the number of feathers along the wings main skeleton. Post joint-struct creation, use the custom position adjustment attribute on the root-guide to adjust the position of the joint grid to match your needs. This module also contains multiple features to make animation even better: Feathers spring, global wave control, individual feather control, bendy limbs, extension-to-look-at for easy wing fold control. Attributes GlobalSettings Attribute Name Default Description interpolationJoints 5 Comment wasn't inserted offsetX 20.0 Up curve X value offset for the interpolation joints offsetZ 0.0 Up curve Z value offset for the interpolation joints FKSymmetryType 0 FK controls symmetry type, in case it needs to differ from the main symmetry type scaleMode 2 Default scale mode. Please refer to the documentation of mnsPointsOnCurve node to learn more about each mode squashMode 4 Default squash mode. Please refer to the documentation of mnsPointsOnCurve node to learn more about each mode ikFkBlendDefault 1.0 Default value for the main IK-FK blend channel. 0 is IK, 1 is FK. FeathersSettings Attribute Name Default Description featherJoints 15 Comment wasn't inserted featherFKSections 3 Comment wasn't inserted doFeathersSpring True Comment wasn't inserted doFeatherIsolatedCtrls True Comment wasn't inserted featherFKControlShape cube Comment wasn't inserted featherIsolatedControlShape square Comment wasn't inserted extensionLookAtControlShape lightPin Comment wasn't inserted IK Attribute Name Default Description stretchLimit 1.0 IK Handle stratch limit default value softness 0.0 IK handle softness default value iKHandleMatchOrient Select a guide to match the IK-Handle's orientation. This will override the native orientation as well as all symmetry options. Main-Ctrl-Shapes Attribute Name Default Description rootControlShape plus Module root control control shape ikHandleControlShape square IK Handle control shape poleVectorControlShape diamond Pole Vector control shape fkControlShape cylinder FK controls shape tertiariesControlShape flatDiamond Tweak tertiary controls shape tweakers/bendy-Limbs Attribute Name Default Description doTweakers False This feature will create a secondary tweak layer below the main control chain. This is commonly known as Bendy-Limbs tweakersSymmetryType 3 Tweak controls symmetry type, in case it needs to differ from the main symmetry type tweakersPerSection 1 The amount of bendy controls per section. A value of one will create two controls in total - one for the upper section of the limb, on for the lower section createExtraAttributes True If this is set to True, some extra tertiary channel-box control attributes will be added to the attribute-host tweakControlShape dialSquare Tweak controls shape negateOffsetOnSymmetry False If this is set to True, the above offsetX and offsetZ value for the up curve will be negated tweakersChannelControl T R S X v v v Y v v v Z v v v Tweak controls channel-box settings","title":"Wing settings"},{"location":"wing_settings/#wing-settings","text":"Author: Asaf Ben-Zur Best used for: Bird Wings This module is designed for birds (feathered) wings. This is a compound module. The main module is based on the limb module, including most of it's features. On top of the main limb module, there is a compound FK chain modules extending from each of the main modules main guides, to create a global feathers silhouette control. Out of these compounds, a grid of interp-joints is created to control the shape's deformation, using mnsPointOnCuveNode as a driver. As a bird wing is incredibly complex, controlling it precisely is incredibly difficult. With that in mind, the grid of interp joints is designed to control the overall shape of the feathers as a group, mid-controls to curl them as a group, as well as control each feather row individually. Use featherJoints attribute to define the number of feathers along the wings main skeleton. Post joint-struct creation, use the custom position adjustment attribute on the root-guide to adjust the position of the joint grid to match your needs. This module also contains multiple features to make animation even better: Feathers spring, global wave control, individual feather control, bendy limbs, extension-to-look-at for easy wing fold control.","title":"wing Settings"},{"location":"wing_settings/#attributes","text":"","title":"Attributes"},{"location":"wing_settings/#globalsettings","text":"Attribute Name Default Description interpolationJoints 5 Comment wasn't inserted offsetX 20.0 Up curve X value offset for the interpolation joints offsetZ 0.0 Up curve Z value offset for the interpolation joints FKSymmetryType 0 FK controls symmetry type, in case it needs to differ from the main symmetry type scaleMode 2 Default scale mode. Please refer to the documentation of mnsPointsOnCurve node to learn more about each mode squashMode 4 Default squash mode. Please refer to the documentation of mnsPointsOnCurve node to learn more about each mode ikFkBlendDefault 1.0 Default value for the main IK-FK blend channel. 0 is IK, 1 is FK.","title":"GlobalSettings"},{"location":"wing_settings/#featherssettings","text":"Attribute Name Default Description featherJoints 15 Comment wasn't inserted featherFKSections 3 Comment wasn't inserted doFeathersSpring True Comment wasn't inserted doFeatherIsolatedCtrls True Comment wasn't inserted featherFKControlShape cube Comment wasn't inserted featherIsolatedControlShape square Comment wasn't inserted extensionLookAtControlShape lightPin Comment wasn't inserted","title":"FeathersSettings"},{"location":"wing_settings/#ik","text":"Attribute Name Default Description stretchLimit 1.0 IK Handle stratch limit default value softness 0.0 IK handle softness default value iKHandleMatchOrient Select a guide to match the IK-Handle's orientation. This will override the native orientation as well as all symmetry options.","title":"IK"},{"location":"wing_settings/#main-ctrl-shapes","text":"Attribute Name Default Description rootControlShape plus Module root control control shape ikHandleControlShape square IK Handle control shape poleVectorControlShape diamond Pole Vector control shape fkControlShape cylinder FK controls shape tertiariesControlShape flatDiamond Tweak tertiary controls shape","title":"Main-Ctrl-Shapes"},{"location":"wing_settings/#tweakersbendy-limbs","text":"Attribute Name Default Description doTweakers False This feature will create a secondary tweak layer below the main control chain. This is commonly known as Bendy-Limbs tweakersSymmetryType 3 Tweak controls symmetry type, in case it needs to differ from the main symmetry type tweakersPerSection 1 The amount of bendy controls per section. A value of one will create two controls in total - one for the upper section of the limb, on for the lower section createExtraAttributes True If this is set to True, some extra tertiary channel-box control attributes will be added to the attribute-host tweakControlShape dialSquare Tweak controls shape negateOffsetOnSymmetry False If this is set to True, the above offsetX and offsetZ value for the up curve will be negated tweakersChannelControl T R S X v v v Y v v v Z v v v Tweak controls channel-box settings","title":"tweakers/bendy-Limbs"},{"location":"releaseNotes/v1.1.0/","text":"Mansur-Rig 1.1.0 Mansur-Rig is a python modular rig-builder for Autodesk-Maya, equipped with a full custom rigging nodes-library to fill all of your Rigging needs in one place. What's new in Version 1.1.0 features Construct and Deconstruct performance improvements Block UI picker tab update createFreePlg will now create facial/body plg based on picker layout base state, instead of \"body\" type default lookAtControl module- added combinedAttributeHost to allow single combined attribute to control multiple modules dilate/contract within a single channel lips module- added cheeckRaise feature (dropdown). A new implementation to create a relationship between a lip corner control and an external cheek module ctrl, driving raise and push values to the slave cheek controls from the main lips corners controls. Bug fixes Version manager - version order was reversed to display the latest version on top, and the oldest version at the bottom. freeControl module - jumps/twitches bug related to mesh tweakers were fixed. Mesh tweaker local ctrl was transitioned to a techCtrl type to avoid getting any keys. Keys on the local control were causing the issue. Construction and deconstruction attribute connect warnings in the script editor were removed #33 - Foot not building in version 1.0.14 - fixed. Foot module should now build properly. #34 - Simple squash deconstruction issues - resolved. simpleSquash should now be stable on construction and deconstruction. #35 - Can't create freeControl with no attributes- fixed. Any module with all channel control attributes set to OFF should build with ease. mnsMayaPlugins v 1.0.0.17","title":"V1.1.0"},{"location":"releaseNotes/v1.1.0/#mansur-rig-110","text":"Mansur-Rig is a python modular rig-builder for Autodesk-Maya, equipped with a full custom rigging nodes-library to fill all of your Rigging needs in one place.","title":"Mansur-Rig 1.1.0"},{"location":"releaseNotes/v1.1.0/#whats-new-in-version-110","text":"","title":"What's new in Version 1.1.0"},{"location":"releaseNotes/v1.1.0/#features","text":"Construct and Deconstruct performance improvements Block UI picker tab update createFreePlg will now create facial/body plg based on picker layout base state, instead of \"body\" type default lookAtControl module- added combinedAttributeHost to allow single combined attribute to control multiple modules dilate/contract within a single channel lips module- added cheeckRaise feature (dropdown). A new implementation to create a relationship between a lip corner control and an external cheek module ctrl, driving raise and push values to the slave cheek controls from the main lips corners controls.","title":"features"},{"location":"releaseNotes/v1.1.0/#bug-fixes","text":"Version manager - version order was reversed to display the latest version on top, and the oldest version at the bottom. freeControl module - jumps/twitches bug related to mesh tweakers were fixed. Mesh tweaker local ctrl was transitioned to a techCtrl type to avoid getting any keys. Keys on the local control were causing the issue. Construction and deconstruction attribute connect warnings in the script editor were removed #33 - Foot not building in version 1.0.14 - fixed. Foot module should now build properly. #34 - Simple squash deconstruction issues - resolved. simpleSquash should now be stable on construction and deconstruction. #35 - Can't create freeControl with no attributes- fixed. Any module with all channel control attributes set to OFF should build with ease.","title":"Bug fixes"},{"location":"releaseNotes/v1.1.0/#mnsmayaplugins-v-10017","text":"","title":"mnsMayaPlugins v 1.0.0.17"},{"location":"releaseNotes/v1.1.1/","text":"Mansur-Rig 1.1.1 Mansur-Rig is a python modular rig-builder for Autodesk-Maya, equipped with a full custom rigging nodes-library to fill all of your Rigging needs in one place. What's new in Version 1.1.1 features #37 - Added \"Select Main joints\" button to Block UI (deformation tab) that will select all main joints ignoring interpolation joints. #40 - Default values save/load will now include world control's modules vis state attributes as well Bug fixes #38 - Simple Squash control shape not extracting - Fixed. #39 - Add guides/remove guides related bugs - Fixed. These should now be fully funstional again. #41 - Sleeve for limb module was construction outside the rig-top hierarchy - Fixed. CurveZipB module - interp joints where not inhereting global orientation properly - Fixed. Depreciated unused moduleRootVis attribute from puppet root. limb softMod related errors - Fixed. mnsMayaPlugins v 1.0.0.17","title":"V1.1.1"},{"location":"releaseNotes/v1.1.1/#mansur-rig-111","text":"Mansur-Rig is a python modular rig-builder for Autodesk-Maya, equipped with a full custom rigging nodes-library to fill all of your Rigging needs in one place.","title":"Mansur-Rig 1.1.1"},{"location":"releaseNotes/v1.1.1/#whats-new-in-version-111","text":"","title":"What's new in Version 1.1.1"},{"location":"releaseNotes/v1.1.1/#features","text":"#37 - Added \"Select Main joints\" button to Block UI (deformation tab) that will select all main joints ignoring interpolation joints. #40 - Default values save/load will now include world control's modules vis state attributes as well","title":"features"},{"location":"releaseNotes/v1.1.1/#bug-fixes","text":"#38 - Simple Squash control shape not extracting - Fixed. #39 - Add guides/remove guides related bugs - Fixed. These should now be fully funstional again. #41 - Sleeve for limb module was construction outside the rig-top hierarchy - Fixed. CurveZipB module - interp joints where not inhereting global orientation properly - Fixed. Depreciated unused moduleRootVis attribute from puppet root. limb softMod related errors - Fixed.","title":"Bug fixes"},{"location":"releaseNotes/v1.1.1/#mnsmayaplugins-v-10017","text":"","title":"mnsMayaPlugins v 1.0.0.17"},{"location":"releaseNotes/v1.1.2/","text":"Mansur-Rig 1.1.2 Mansur-Rig is a python modular rig-builder for Autodesk-Maya, equipped with a full custom rigging nodes-library to fill all of your Rigging needs in one place. What's new in Version 1.1.2 features Comments/Tooltips were written and inserted to all modules and all attributes Bug fixes limb module twist issues resolved (please rebuild you puppets) mnsMayaPlugins v 1.0.0.17","title":"V1.1.2"},{"location":"releaseNotes/v1.1.2/#mansur-rig-112","text":"Mansur-Rig is a python modular rig-builder for Autodesk-Maya, equipped with a full custom rigging nodes-library to fill all of your Rigging needs in one place.","title":"Mansur-Rig 1.1.2"},{"location":"releaseNotes/v1.1.2/#whats-new-in-version-112","text":"","title":"What's new in Version 1.1.2"},{"location":"releaseNotes/v1.1.2/#features","text":"Comments/Tooltips were written and inserted to all modules and all attributes","title":"features"},{"location":"releaseNotes/v1.1.2/#bug-fixes","text":"limb module twist issues resolved (please rebuild you puppets)","title":"Bug fixes"},{"location":"releaseNotes/v1.1.2/#mnsmayaplugins-v-10017","text":"","title":"mnsMayaPlugins v 1.0.0.17"},{"location":"releaseNotes/v1.1.3/","text":"Mansur-Rig 1.1.3 Mansur-Rig is a python modular rig-builder for Autodesk-Maya, equipped with a full custom rigging nodes-library to fill all of your Rigging needs in one place. What's new in Version 1.1.3 features Module description was implemented in Block UI, as well as the documentation page. Module settings was implemented in the documentation Bug fixes #36 - FKChains still need to have attrHosts - This bug was found and fixed and should now display the space switch attribute on the appropriate control in FKChain Module #42 - sleeve issue - Sleeve feature unstable behaviour on construction and deconstruction iterations is now fixed. Control shapes list in any UI is now sorted alphabetically Control shapes extraction action will now display correct log once completed Reference and Template modes for the puppet group is now removed, both in Rig-Top creation and Module-Vis UI mnsMayaPlugins v 1.0.0.17","title":"V1.1.3"},{"location":"releaseNotes/v1.1.3/#mansur-rig-113","text":"Mansur-Rig is a python modular rig-builder for Autodesk-Maya, equipped with a full custom rigging nodes-library to fill all of your Rigging needs in one place.","title":"Mansur-Rig 1.1.3"},{"location":"releaseNotes/v1.1.3/#whats-new-in-version-113","text":"","title":"What's new in Version 1.1.3"},{"location":"releaseNotes/v1.1.3/#features","text":"Module description was implemented in Block UI, as well as the documentation page. Module settings was implemented in the documentation","title":"features"},{"location":"releaseNotes/v1.1.3/#bug-fixes","text":"#36 - FKChains still need to have attrHosts - This bug was found and fixed and should now display the space switch attribute on the appropriate control in FKChain Module #42 - sleeve issue - Sleeve feature unstable behaviour on construction and deconstruction iterations is now fixed. Control shapes list in any UI is now sorted alphabetically Control shapes extraction action will now display correct log once completed Reference and Template modes for the puppet group is now removed, both in Rig-Top creation and Module-Vis UI","title":"Bug fixes"},{"location":"releaseNotes/v1.1.3/#mnsmayaplugins-v-10017","text":"","title":"mnsMayaPlugins v 1.0.0.17"},{"location":"releaseNotes/v1.1.4/","text":"Mansur-Rig 1.1.4 Mansur-Rig is a python modular rig-builder for Autodesk-Maya, equipped with a full custom rigging nodes-library to fill all of your Rigging needs in one place. What's new in Version 1.1.4 features Core module settings was added to the documentation Construct & deconstruct auto module path fix. Now when you get an external rig, you don't need to use \"fix module paths\" utility, the fix will happen automatically once you construct or deconstruct All new mnsTransformSpring node! Using the new node, added a spring feature to Look-At module. This can be used to create dynamic spring vehicle suspention behaviour! Bug fixes #46 - limb interJoints attribute missplaced is now fixed Module symmetry and duplicate error when using an emoty channel control is now fixed. Module mirror attribute read was missing from simple squash construction Added right side flip options for the tweakers is CurveZipB Module mnsMayaPlugins v 1.0.1.2","title":"V1.1.4"},{"location":"releaseNotes/v1.1.4/#mansur-rig-114","text":"Mansur-Rig is a python modular rig-builder for Autodesk-Maya, equipped with a full custom rigging nodes-library to fill all of your Rigging needs in one place.","title":"Mansur-Rig 1.1.4"},{"location":"releaseNotes/v1.1.4/#whats-new-in-version-114","text":"","title":"What's new in Version 1.1.4"},{"location":"releaseNotes/v1.1.4/#features","text":"Core module settings was added to the documentation Construct & deconstruct auto module path fix. Now when you get an external rig, you don't need to use \"fix module paths\" utility, the fix will happen automatically once you construct or deconstruct All new mnsTransformSpring node! Using the new node, added a spring feature to Look-At module. This can be used to create dynamic spring vehicle suspention behaviour!","title":"features"},{"location":"releaseNotes/v1.1.4/#bug-fixes","text":"#46 - limb interJoints attribute missplaced is now fixed Module symmetry and duplicate error when using an emoty channel control is now fixed. Module mirror attribute read was missing from simple squash construction Added right side flip options for the tweakers is CurveZipB Module","title":"Bug fixes"},{"location":"releaseNotes/v1.1.4/#mnsmayaplugins-v-1012","text":"","title":"mnsMayaPlugins v 1.0.1.2"},{"location":"releaseNotes/v1.1.5/","text":"Mansur-Rig 1.1.5 Mansur-Rig is a python modular rig-builder for Autodesk-Maya, equipped with a full custom rigging nodes-library to fill all of your Rigging needs in one place. What's new in Version 1.1.5 features #49 - A new attribute on Puppet-Root-Ctrl - Hide Controls On Playback. When animating, you can now set this attribute to True, to automatically hide controls when playing your animation. Bug fixes Attribute host creation position was always at origin. This has now been fixed and attribute host locator creation position will be the module's root guide Rig renaming was broken (renaming after creation). This has now been resolved. #47 - Problems with interpolation joints after promoting modules is ow resolved. #48 - FKChain's Variable FK was forcing joint structure uniform mode only at construction. This attribute is now marked as a jointStructSoftMod now, and will force a UNIFORM curve sampling on joint structure on guides state. This was added to the attribute's comment and the documentation. mnsMayaPlugins v 1.0.1.2","title":"V1.1.5"},{"location":"releaseNotes/v1.1.5/#mansur-rig-115","text":"Mansur-Rig is a python modular rig-builder for Autodesk-Maya, equipped with a full custom rigging nodes-library to fill all of your Rigging needs in one place.","title":"Mansur-Rig 1.1.5"},{"location":"releaseNotes/v1.1.5/#whats-new-in-version-115","text":"","title":"What's new in Version 1.1.5"},{"location":"releaseNotes/v1.1.5/#features","text":"#49 - A new attribute on Puppet-Root-Ctrl - Hide Controls On Playback. When animating, you can now set this attribute to True, to automatically hide controls when playing your animation.","title":"features"},{"location":"releaseNotes/v1.1.5/#bug-fixes","text":"Attribute host creation position was always at origin. This has now been fixed and attribute host locator creation position will be the module's root guide Rig renaming was broken (renaming after creation). This has now been resolved. #47 - Problems with interpolation joints after promoting modules is ow resolved. #48 - FKChain's Variable FK was forcing joint structure uniform mode only at construction. This attribute is now marked as a jointStructSoftMod now, and will force a UNIFORM curve sampling on joint structure on guides state. This was added to the attribute's comment and the documentation.","title":"Bug fixes"},{"location":"releaseNotes/v1.1.5/#mnsmayaplugins-v-1012","text":"","title":"mnsMayaPlugins v 1.0.1.2"},{"location":"releaseNotes/v1.1.6/","text":"Mansur-Rig 1.1.6 Mansur-Rig is a python modular rig-builder for Autodesk-Maya, equipped with a full custom rigging nodes-library to fill all of your Rigging needs in one place. What's new in Version 1.1.6 features #49 - A new attribute on Puppet-Root-Ctrl - Hide Controls On Playback. When animating, you can now set this attribute to True, to automatically hide controls when playing your animation. Bug fixes Attribute host creation position was always at origin. This has now been fixed and attribute host locator creation position will be the module's root guide Rig renaming was broken (renaming after creation). This has now been resolved. #47 - Problems with interpolation joints after promoting modules is ow resolved. #48 - FKChain's Variable FK was forcing joint structure uniform mode only at construction. This attribute is now marked as a jointStructSoftMod now, and will force a UNIFORM curve sampling on joint structure on guides state. This was added to the attribute's comment and the documentation. mnsMayaPlugins v 1.0.1.2","title":"V1.1.6"},{"location":"releaseNotes/v1.1.6/#mansur-rig-116","text":"Mansur-Rig is a python modular rig-builder for Autodesk-Maya, equipped with a full custom rigging nodes-library to fill all of your Rigging needs in one place.","title":"Mansur-Rig 1.1.6"},{"location":"releaseNotes/v1.1.6/#whats-new-in-version-116","text":"","title":"What's new in Version 1.1.6"},{"location":"releaseNotes/v1.1.6/#features","text":"#49 - A new attribute on Puppet-Root-Ctrl - Hide Controls On Playback. When animating, you can now set this attribute to True, to automatically hide controls when playing your animation.","title":"features"},{"location":"releaseNotes/v1.1.6/#bug-fixes","text":"Attribute host creation position was always at origin. This has now been fixed and attribute host locator creation position will be the module's root guide Rig renaming was broken (renaming after creation). This has now been resolved. #47 - Problems with interpolation joints after promoting modules is ow resolved. #48 - FKChain's Variable FK was forcing joint structure uniform mode only at construction. This attribute is now marked as a jointStructSoftMod now, and will force a UNIFORM curve sampling on joint structure on guides state. This was added to the attribute's comment and the documentation.","title":"Bug fixes"},{"location":"releaseNotes/v1.1.6/#mnsmayaplugins-v-1012","text":"","title":"mnsMayaPlugins v 1.0.1.2"},{"location":"releaseNotes/v1.1.7/","text":"Mansur-Rig 1.1.7 Mansur-Rig is a python modular rig-builder for Autodesk-Maya, equipped with a full custom rigging nodes-library to fill all of your Rigging needs in one place. What's new in Version 1.1.7 Depreciation CurveZip module depreciated. Please use CurveZipB. Bug fixes FK shain's \"IK secondaries\" weren't being collected to the build module contstruct and display as \"primaries\"- Fixed. #50 - Module Visibility UI Parenting issues resolved. #53 - Installation with existing MAYA_MODULE_PATH variable whould break the syntax, and the variable - Fixed. mnsMayaPlugins v 1.0.2","title":"V1.1.7"},{"location":"releaseNotes/v1.1.7/#mansur-rig-117","text":"Mansur-Rig is a python modular rig-builder for Autodesk-Maya, equipped with a full custom rigging nodes-library to fill all of your Rigging needs in one place.","title":"Mansur-Rig 1.1.7"},{"location":"releaseNotes/v1.1.7/#whats-new-in-version-117","text":"","title":"What's new in Version 1.1.7"},{"location":"releaseNotes/v1.1.7/#depreciation","text":"CurveZip module depreciated. Please use CurveZipB.","title":"Depreciation"},{"location":"releaseNotes/v1.1.7/#bug-fixes","text":"FK shain's \"IK secondaries\" weren't being collected to the build module contstruct and display as \"primaries\"- Fixed. #50 - Module Visibility UI Parenting issues resolved. #53 - Installation with existing MAYA_MODULE_PATH variable whould break the syntax, and the variable - Fixed.","title":"Bug fixes"},{"location":"releaseNotes/v1.1.7/#mnsmayaplugins-v-102","text":"","title":"mnsMayaPlugins v 1.0.2"},{"location":"releaseNotes/v1.1.9/","text":"Mansur-Rig 1.1.9 Released 25 Mar 2021 What's new in Version 1.1.9 Features Linux support! Bug fixes #57 - CurveZipB- BlinkHeight module setting value wasn't updated correctly on construction mnsMayaPlugins v 1.0.4","title":"V1.1.9"},{"location":"releaseNotes/v1.1.9/#mansur-rig-119","text":"Released 25 Mar 2021","title":"Mansur-Rig 1.1.9"},{"location":"releaseNotes/v1.1.9/#whats-new-in-version-119","text":"","title":"What's new in Version 1.1.9"},{"location":"releaseNotes/v1.1.9/#features","text":"Linux support!","title":"Features"},{"location":"releaseNotes/v1.1.9/#bug-fixes","text":"#57 - CurveZipB- BlinkHeight module setting value wasn't updated correctly on construction","title":"Bug fixes"},{"location":"releaseNotes/v1.1.9/#mnsmayaplugins-v-104","text":"","title":"mnsMayaPlugins v 1.0.4"},{"location":"releaseNotes/v1.2.0/","text":"Mansur-Rig 1.2.0 Released 1 Apr 2021 What's new in Version 1.2.0 Maya 2017-2022 Compatibility for both Windows and Linux Features Bug fixes mnsMayaPlugins v 1.0.5","title":"V1.2.0"},{"location":"releaseNotes/v1.2.0/#mansur-rig-120","text":"Released 1 Apr 2021","title":"Mansur-Rig 1.2.0"},{"location":"releaseNotes/v1.2.0/#whats-new-in-version-120","text":"Maya 2017-2022 Compatibility for both Windows and Linux","title":"What's new in Version 1.2.0"},{"location":"releaseNotes/v1.2.0/#features","text":"","title":"Features"},{"location":"releaseNotes/v1.2.0/#bug-fixes","text":"","title":"Bug fixes"},{"location":"releaseNotes/v1.2.0/#mnsmayaplugins-v-105","text":"","title":"mnsMayaPlugins v 1.0.5"},{"location":"releaseNotes/v1.2.1/","text":"Mansur-Rig 1.2.1 Released 11 Apr 2021 What's new in Version 1.2.1 Picker upgrades and maintenance Features #63 - Implemented default text attributes for plg creation. These new preferences are located in Mansur->Preferences->Picker Bug fixes PLG settings facial/body attribute change will now affect all controls within the changed module Non-Free PLG ctrl list and buttons re-locked Free PLG creation color will be dictated by the rig's color-scheme FKChain interpolation mode wasn't changing on construction- Fixed. Changed Block main window min/max values to allow further window adjustments in 4K monitors Removed redundant Qt libs from main code library mnsMayaPlugins v 1.0.6","title":"V1.2.1"},{"location":"releaseNotes/v1.2.1/#mansur-rig-121","text":"Released 11 Apr 2021","title":"Mansur-Rig 1.2.1"},{"location":"releaseNotes/v1.2.1/#whats-new-in-version-121","text":"Picker upgrades and maintenance","title":"What's new in Version 1.2.1"},{"location":"releaseNotes/v1.2.1/#features","text":"#63 - Implemented default text attributes for plg creation. These new preferences are located in Mansur->Preferences->Picker","title":"Features"},{"location":"releaseNotes/v1.2.1/#bug-fixes","text":"PLG settings facial/body attribute change will now affect all controls within the changed module Non-Free PLG ctrl list and buttons re-locked Free PLG creation color will be dictated by the rig's color-scheme FKChain interpolation mode wasn't changing on construction- Fixed. Changed Block main window min/max values to allow further window adjustments in 4K monitors Removed redundant Qt libs from main code library","title":"Bug fixes"},{"location":"releaseNotes/v1.2.1/#mnsmayaplugins-v-106","text":"","title":"mnsMayaPlugins v 1.0.6"},{"location":"releaseNotes/v1.2.2/","text":"Mansur-Rig 1.2.2 Released 15 Apr 2021 What's new in Version 1.2.2 Bug fixes Features Bug fixes Issues with module names that share the same prefix - fixed #65 - Mansur-Rig's install blocking main maya menus (file, edit) in Maya 2022 - Fixed #66 - Issues with module color overrides - Fixed FK Chain module- Construction fails when IK secondaries layer is ON, but the amount of controls selected is less then the amount of Primary FK controls - Fixed, and added to the attribute description and the documentation accordingly. mnsMayaPlugins v 1.0.6","title":"V1.2.2"},{"location":"releaseNotes/v1.2.2/#mansur-rig-122","text":"Released 15 Apr 2021","title":"Mansur-Rig 1.2.2"},{"location":"releaseNotes/v1.2.2/#whats-new-in-version-122","text":"Bug fixes","title":"What's new in Version 1.2.2"},{"location":"releaseNotes/v1.2.2/#features","text":"","title":"Features"},{"location":"releaseNotes/v1.2.2/#bug-fixes","text":"Issues with module names that share the same prefix - fixed #65 - Mansur-Rig's install blocking main maya menus (file, edit) in Maya 2022 - Fixed #66 - Issues with module color overrides - Fixed FK Chain module- Construction fails when IK secondaries layer is ON, but the amount of controls selected is less then the amount of Primary FK controls - Fixed, and added to the attribute description and the documentation accordingly.","title":"Bug fixes"},{"location":"releaseNotes/v1.2.2/#mnsmayaplugins-v-106","text":"","title":"mnsMayaPlugins v 1.0.6"},{"location":"releaseNotes/v1.2.3/","text":"Mansur-Rig 1.2.3 Released 7 May 2021 What's new in Version 1.2.3 Many bug fixes and few new features Features Block - New Guide/Joint toggle button in main tab. IK-FK blend default value attribute added to Limb-Module. Default symmetry mode for freeControl module was changes to- None. #72 - Custom script execution faliure will now display the error stack-trace in the errro dialog as well as print into maya's console. Added new sub-groups to rig-top. All of these sub groups were added for the cleanest setup possible - the objective is for the top group to contain the entire rig data, including the model, so when adding it as a reference, a single transform will contain everything related to the rig in the outliner. oSkelGrp - offset-skeleton-group, to contain the offset skeleton in the future extSetupGrp - extra setup group, to contain any manual setups mdlGrp - model group, to contain the model Accordingly, a new \"Check/Update Rig Top Structure\" Utility was added to Block's Utility tab, to update rig-tops created with previous Mansur-Rig versions. Bug fixes #68 - Once any channel-control related checkboxes were set to off by the user, they became permanently off- Fixed. #68 - Embedded IK construction was failing in case the user selected to turn off the rotation channels in the channel-control - Fixed. #71 - Updated error message in \"Copy-Skin\" failure. The message was not very informative, it is now updated to suggest possible fixes. Module Setting button press in Block was resulting in an error in case there was no selection- Fixed. FK Chain IK-Secondaries and Variable-FK attribute description typos fix. Transition Log In case you ned to update from a previous version of Mansur-Rig, please use the new \"Check/Update Rig Top Structure\" in Block's Utility tab to update your rig-top structure. mnsMayaPlugins v 1.0.6","title":"V1.2.3"},{"location":"releaseNotes/v1.2.3/#mansur-rig-123","text":"Released 7 May 2021","title":"Mansur-Rig 1.2.3"},{"location":"releaseNotes/v1.2.3/#whats-new-in-version-123","text":"Many bug fixes and few new features","title":"What's new in Version 1.2.3"},{"location":"releaseNotes/v1.2.3/#features","text":"Block - New Guide/Joint toggle button in main tab. IK-FK blend default value attribute added to Limb-Module. Default symmetry mode for freeControl module was changes to- None. #72 - Custom script execution faliure will now display the error stack-trace in the errro dialog as well as print into maya's console. Added new sub-groups to rig-top. All of these sub groups were added for the cleanest setup possible - the objective is for the top group to contain the entire rig data, including the model, so when adding it as a reference, a single transform will contain everything related to the rig in the outliner. oSkelGrp - offset-skeleton-group, to contain the offset skeleton in the future extSetupGrp - extra setup group, to contain any manual setups mdlGrp - model group, to contain the model Accordingly, a new \"Check/Update Rig Top Structure\" Utility was added to Block's Utility tab, to update rig-tops created with previous Mansur-Rig versions.","title":"Features"},{"location":"releaseNotes/v1.2.3/#bug-fixes","text":"#68 - Once any channel-control related checkboxes were set to off by the user, they became permanently off- Fixed. #68 - Embedded IK construction was failing in case the user selected to turn off the rotation channels in the channel-control - Fixed. #71 - Updated error message in \"Copy-Skin\" failure. The message was not very informative, it is now updated to suggest possible fixes. Module Setting button press in Block was resulting in an error in case there was no selection- Fixed. FK Chain IK-Secondaries and Variable-FK attribute description typos fix.","title":"Bug fixes"},{"location":"releaseNotes/v1.2.3/#transition-log","text":"In case you ned to update from a previous version of Mansur-Rig, please use the new \"Check/Update Rig Top Structure\" in Block's Utility tab to update your rig-top structure.","title":"Transition Log"},{"location":"releaseNotes/v1.2.3/#mnsmayaplugins-v-106","text":"","title":"mnsMayaPlugins v 1.0.6"},{"location":"releaseNotes/v1.3.0/","text":"Mansur-Rig 1.3.0 Released 15 May 2021 Features New centralized \"Update Rig\" utility in Block's utility tab. This method now consists of all previous update-related methods. This method will now execute all of the following processes: Update the rig-top structure in case it was changed. Fix module paths for all existing modules within the rig. Update all module attributes based on the currrent version settings. Update-Rig Utility Module name changes will now automatically update all module space lists that consist of the given module. i.e. all space attributes will be updated with the module's new name automatically. Read-Only mode was introduced into dynUI. Now, instead of blocking a module-settings-load in puppet state, the settings window will now load, but in read-only mode. You can now view your settings in puppet state instead of needing to deconstruct, although editting the settings remains locked. Control-Shape Icons - All control shape related attributes now include icons! Control-Shapes Icons CNS/Sub-Controls creation and deletion methods were detached from the CNS-Tool's class in order to allow creating CNS/Sub-Controls using custom-scripts. Please use this example to use as a post-construction custom script: Python #import Mansur-Rig's Block-Utility python module, to access the method from mansur.block.core import blockUtility as blkUtils #Using implicit control-names list blkUtils . createCnsForCtrls ([ \"c_cog_A001_ctrl\" , \"c_head_A001_ctrl\" ]) #Using a simple right/left loop for efficiency and ease of use for side in \"rl\" : blkUtils . createCnsForCtrls ( side + \"_armIkTarget_A001_ctrl\" ) limb module - Added a \"IK-Handle Orientation Match\" feature by request. Using this feature you can now choose to override the native orientation of the IK-Handle control. You can now input a guide into this attribute to align the orientation to, and this orientation will override any other orientation related attribute. This was requested in order to fully align all IK handles orientations. IK-Handle Match Orient Attribute freeControl - Spring layer! You can now easily create a simple spring action for your free-controls. Create a procedural secondary motion in seconds! freeControl spring layer Space attribute re-ordering guide was inserted into the attribute's description. Please use drag-drop within the list to change spaces order. Deformation tab was updated with icons. curveZipB - New mid-curve generation feature was introduced into the module. Please see mnsCurveZipB notes below. curveZipB - Attachment curves feature stabilized. Please see mnsBuildTransformsCurve node notes below. Bug fixes #74- Copy-Skin related issues resolved. This method is now fully stabilized. freeControl \"meshTweaker\" section attrbiute descriptions were updated and clarified. Transition Log Please use the new centralized \"Update Rig\" utility button in Block's utility tab to update rigs built with previous versions of Mansur-Rig mnsMayaPlugins v 1.0.7 mnsBuildTransformsCurve- Upgraded. Added \"centerMatrix\" attribute and offset curve build based on it. This was done in order to stablize the attachment curves feature in curveZipB module. Now the attachments offset curves will be built using the module's root guide as a center matrix which will result in a much stabler behaviour. mnsCurveZipB - Upgraded. Added a new Mid-Curve-Generation support, in order to smooth the meet mid curve for all related \"mid\" attrbiutes. The new addition is the \"midCurveGenerationMode\" and \"midCurveResolution\" attributes. In case \"regenerate\" mode is choosen for the mid curve generation, a new mid-curve will be constructed given the resulotion instead of using the input curves' resolution. This will result in a much nicer and smoother mid-curve. mnsSphereVectorPush Node released!","title":"V1.3.0"},{"location":"releaseNotes/v1.3.0/#mansur-rig-130","text":"Released 15 May 2021","title":"Mansur-Rig 1.3.0"},{"location":"releaseNotes/v1.3.0/#features","text":"New centralized \"Update Rig\" utility in Block's utility tab. This method now consists of all previous update-related methods. This method will now execute all of the following processes: Update the rig-top structure in case it was changed. Fix module paths for all existing modules within the rig. Update all module attributes based on the currrent version settings. Update-Rig Utility Module name changes will now automatically update all module space lists that consist of the given module. i.e. all space attributes will be updated with the module's new name automatically. Read-Only mode was introduced into dynUI. Now, instead of blocking a module-settings-load in puppet state, the settings window will now load, but in read-only mode. You can now view your settings in puppet state instead of needing to deconstruct, although editting the settings remains locked. Control-Shape Icons - All control shape related attributes now include icons! Control-Shapes Icons CNS/Sub-Controls creation and deletion methods were detached from the CNS-Tool's class in order to allow creating CNS/Sub-Controls using custom-scripts. Please use this example to use as a post-construction custom script: Python #import Mansur-Rig's Block-Utility python module, to access the method from mansur.block.core import blockUtility as blkUtils #Using implicit control-names list blkUtils . createCnsForCtrls ([ \"c_cog_A001_ctrl\" , \"c_head_A001_ctrl\" ]) #Using a simple right/left loop for efficiency and ease of use for side in \"rl\" : blkUtils . createCnsForCtrls ( side + \"_armIkTarget_A001_ctrl\" ) limb module - Added a \"IK-Handle Orientation Match\" feature by request. Using this feature you can now choose to override the native orientation of the IK-Handle control. You can now input a guide into this attribute to align the orientation to, and this orientation will override any other orientation related attribute. This was requested in order to fully align all IK handles orientations. IK-Handle Match Orient Attribute freeControl - Spring layer! You can now easily create a simple spring action for your free-controls. Create a procedural secondary motion in seconds! freeControl spring layer Space attribute re-ordering guide was inserted into the attribute's description. Please use drag-drop within the list to change spaces order. Deformation tab was updated with icons. curveZipB - New mid-curve generation feature was introduced into the module. Please see mnsCurveZipB notes below. curveZipB - Attachment curves feature stabilized. Please see mnsBuildTransformsCurve node notes below.","title":"Features"},{"location":"releaseNotes/v1.3.0/#bug-fixes","text":"#74- Copy-Skin related issues resolved. This method is now fully stabilized. freeControl \"meshTweaker\" section attrbiute descriptions were updated and clarified.","title":"Bug fixes"},{"location":"releaseNotes/v1.3.0/#transition-log","text":"Please use the new centralized \"Update Rig\" utility button in Block's utility tab to update rigs built with previous versions of Mansur-Rig","title":"Transition Log"},{"location":"releaseNotes/v1.3.0/#mnsmayaplugins-v-107","text":"mnsBuildTransformsCurve- Upgraded. Added \"centerMatrix\" attribute and offset curve build based on it. This was done in order to stablize the attachment curves feature in curveZipB module. Now the attachments offset curves will be built using the module's root guide as a center matrix which will result in a much stabler behaviour. mnsCurveZipB - Upgraded. Added a new Mid-Curve-Generation support, in order to smooth the meet mid curve for all related \"mid\" attrbiutes. The new addition is the \"midCurveGenerationMode\" and \"midCurveResolution\" attributes. In case \"regenerate\" mode is choosen for the mid curve generation, a new mid-curve will be constructed given the resulotion instead of using the input curves' resolution. This will result in a much nicer and smoother mid-curve. mnsSphereVectorPush Node released!","title":"mnsMayaPlugins v 1.0.7"},{"location":"releaseNotes/v1.3.1/","text":"Mansur-Rig 1.3.1 Released 04 Jun 2021 Features New mnsSphereVectorPushNode method to be used in the Synamic UI Creator tool. FKChain Module - Added \"doPrimariesSpaceSwitch\" feature to allow IK mode using FK chain. This feature, when on, will create an FK heirarchy using constraints, instead of a direct heirarchy. With that, all primary FK controls will receive a space switch, which is defaulted to it's native parent, to create the FK behaviour.This will allow to break the FK heirarchy if needed by setting the primary controls to any space we choose, creating the IK behaviour. New Extra Channels feature! At the bottom of the core module settings tab, there is a new drop-down called extra channels. This feature was created mainly with blend shape targets in mind. If ever you are confused about what this feature is, check out the info box tooltip- there is a full explanation there. Any row within this list will create a custom attribute with the selected name on the given module main control, and connect to the given attribute. This feature is assuming that the target attribute range is 0-1. Once again mainly with blend-shape targets in mind. Use the direction column to choose the channel's control direction. Negative direction will be revesed to the 0 to 1 range when connected. For example, in case you have 2 shapes, one for expantion and one for contraction, you can create 2 rows with the same attrbiute name, one in the positive direction- connected to the expantion shape, and one in the negative direction- connected to the contraction shape. This will result in a single attribute that ranges between -1 and +1, while 0 to -1 will control the contraction shape, and 0 to +1 will control the expantion shape. You can Use dividers as well to group attributes in case you need to. All attributes will be created in the same order they are listed in Extra-Channels Feature Lip-Curls introduced in lips Module! Please re-create your module from previous versions of Mansur-Rig. Now, the Lips module will create 2 new extra custom guides, to choose the upper and lower lip curl pivots. These will then be added into the setup using the main upper and lower lip controls rotation to curl the lips from the selected pivots. Lip Curls Implemented argument disable ability in DynUI. Block- Module symmetry will now work on multiple module selection. CurveZipB Follow feature will now except rootGuides as input as well as joints, and convert on construcion. Foot module - Foot roll behaviour upgraded. A new Channel \"strighten-Angle\" was introduced, to choose the range to straighten the toes back when exceeding the roll Max-Angle to achive more realistic results. Please reconstruct your puppets to get this feature created. New Foot Roll Bug fixes Block - deformation tab- left mesh list was not working at all- Fixed. FKChain- Using \"secondary-ik\" layer in combination with \"isolate-poles\" feature, was breaking the module on deconstruction- Fixed. Block - Module symmetry was not handeling set space defaults correctly- fixed. #77 - Block wasn't loading when the preferences directory was not found for some reason- Fixed. #79 - CurveZipB - Mid Curve Regeneration minimum was decreased to 1 by request. Callback errors on Picker load - fixed. CurveZipB - Construction faliure when there are no vertex inputs- fixed. All annoying warning: \"Warning: pymel.core.general : Could not create desired MFn. Defaulting to MFnDagNode.\" where removed. Bug found at origin and fixed. Transition Log Please use the new centralized \"Update Rig\" utility button in Block's utility tab to update rigs built with previous versions of Mansur-Rig To get the new foot roll, please reconstruct. To update lip module- please delete it and re-create. mnsMayaPlugins v 1.0.8 mnzLipZip - Added lip curls feature.","title":"V1.3.1"},{"location":"releaseNotes/v1.3.1/#mansur-rig-131","text":"Released 04 Jun 2021","title":"Mansur-Rig 1.3.1"},{"location":"releaseNotes/v1.3.1/#features","text":"New mnsSphereVectorPushNode method to be used in the Synamic UI Creator tool. FKChain Module - Added \"doPrimariesSpaceSwitch\" feature to allow IK mode using FK chain. This feature, when on, will create an FK heirarchy using constraints, instead of a direct heirarchy. With that, all primary FK controls will receive a space switch, which is defaulted to it's native parent, to create the FK behaviour.This will allow to break the FK heirarchy if needed by setting the primary controls to any space we choose, creating the IK behaviour. New Extra Channels feature! At the bottom of the core module settings tab, there is a new drop-down called extra channels. This feature was created mainly with blend shape targets in mind. If ever you are confused about what this feature is, check out the info box tooltip- there is a full explanation there. Any row within this list will create a custom attribute with the selected name on the given module main control, and connect to the given attribute. This feature is assuming that the target attribute range is 0-1. Once again mainly with blend-shape targets in mind. Use the direction column to choose the channel's control direction. Negative direction will be revesed to the 0 to 1 range when connected. For example, in case you have 2 shapes, one for expantion and one for contraction, you can create 2 rows with the same attrbiute name, one in the positive direction- connected to the expantion shape, and one in the negative direction- connected to the contraction shape. This will result in a single attribute that ranges between -1 and +1, while 0 to -1 will control the contraction shape, and 0 to +1 will control the expantion shape. You can Use dividers as well to group attributes in case you need to. All attributes will be created in the same order they are listed in Extra-Channels Feature Lip-Curls introduced in lips Module! Please re-create your module from previous versions of Mansur-Rig. Now, the Lips module will create 2 new extra custom guides, to choose the upper and lower lip curl pivots. These will then be added into the setup using the main upper and lower lip controls rotation to curl the lips from the selected pivots. Lip Curls Implemented argument disable ability in DynUI. Block- Module symmetry will now work on multiple module selection. CurveZipB Follow feature will now except rootGuides as input as well as joints, and convert on construcion. Foot module - Foot roll behaviour upgraded. A new Channel \"strighten-Angle\" was introduced, to choose the range to straighten the toes back when exceeding the roll Max-Angle to achive more realistic results. Please reconstruct your puppets to get this feature created. New Foot Roll","title":"Features"},{"location":"releaseNotes/v1.3.1/#bug-fixes","text":"Block - deformation tab- left mesh list was not working at all- Fixed. FKChain- Using \"secondary-ik\" layer in combination with \"isolate-poles\" feature, was breaking the module on deconstruction- Fixed. Block - Module symmetry was not handeling set space defaults correctly- fixed. #77 - Block wasn't loading when the preferences directory was not found for some reason- Fixed. #79 - CurveZipB - Mid Curve Regeneration minimum was decreased to 1 by request. Callback errors on Picker load - fixed. CurveZipB - Construction faliure when there are no vertex inputs- fixed. All annoying warning: \"Warning: pymel.core.general : Could not create desired MFn. Defaulting to MFnDagNode.\" where removed. Bug found at origin and fixed.","title":"Bug fixes"},{"location":"releaseNotes/v1.3.1/#transition-log","text":"Please use the new centralized \"Update Rig\" utility button in Block's utility tab to update rigs built with previous versions of Mansur-Rig To get the new foot roll, please reconstruct. To update lip module- please delete it and re-create.","title":"Transition Log"},{"location":"releaseNotes/v1.3.1/#mnsmayaplugins-v-108","text":"mnzLipZip - Added lip curls feature.","title":"mnsMayaPlugins v 1.0.8"},{"location":"releaseNotes/v1.3.2/","text":"Mansur-Rig 1.3.2 Released 20 Jun 2021 Features New Ctrl/Guide toggle in Block Ctrl/Guide Toggle Bug fixes Maya 2022 installation bugs (#84)- Fixed. Installation in Maya 2022 and all fuctionallities is now fully available in Maya 2022 Main Joint Structure Joints- Previously, all transform channels were hidden from the channel box which made them unavailable for animation bake. From this point on, joint transforms will be only locked, but visible in the channel box. This will make the entire skeleton availble for animation baking. Please use the \"Update Rig\" Utility, in Block's \"Utility\" Tab to fix previously built rigs. #85 - isFacial tag wasn't inherited correctly, when choosing to create a new module under a parent that isn't a root-guide- Fixed. Limb Module - IK-Softness was re-implemented. This feature wasn't working well, as well as wasn't very clear. Softness attribute within the Limb Module (located on the main IK control) was normalized to 0 to 1 range. 1 = As soft as possible (dependent on the angle at rest pose. More \"bend\" in the knee at rest pose = higher soft range), 0 = No softness. The softness feature was re-written within the mnsIkSolver node, and should now behave correctly (in combination with stretch as well). Please reconstruct your puppet for this change to take affect. Ctrl/Guide Toggle Transition Log Please use the new centralized \"Update Rig\" utility button in Block's utility tab to update rigs built with previous versions of Mansur-Rig. This will now unhide all joint transforms, for them to be accessible for animation baking. mnsMayaPlugins v 1.0.9 mnsIkSolver - IK Softness re-implemented.","title":"V1.3.2"},{"location":"releaseNotes/v1.3.2/#mansur-rig-132","text":"Released 20 Jun 2021","title":"Mansur-Rig 1.3.2"},{"location":"releaseNotes/v1.3.2/#features","text":"New Ctrl/Guide toggle in Block Ctrl/Guide Toggle","title":"Features"},{"location":"releaseNotes/v1.3.2/#bug-fixes","text":"Maya 2022 installation bugs (#84)- Fixed. Installation in Maya 2022 and all fuctionallities is now fully available in Maya 2022 Main Joint Structure Joints- Previously, all transform channels were hidden from the channel box which made them unavailable for animation bake. From this point on, joint transforms will be only locked, but visible in the channel box. This will make the entire skeleton availble for animation baking. Please use the \"Update Rig\" Utility, in Block's \"Utility\" Tab to fix previously built rigs. #85 - isFacial tag wasn't inherited correctly, when choosing to create a new module under a parent that isn't a root-guide- Fixed. Limb Module - IK-Softness was re-implemented. This feature wasn't working well, as well as wasn't very clear. Softness attribute within the Limb Module (located on the main IK control) was normalized to 0 to 1 range. 1 = As soft as possible (dependent on the angle at rest pose. More \"bend\" in the knee at rest pose = higher soft range), 0 = No softness. The softness feature was re-written within the mnsIkSolver node, and should now behave correctly (in combination with stretch as well). Please reconstruct your puppet for this change to take affect. Ctrl/Guide Toggle","title":"Bug fixes"},{"location":"releaseNotes/v1.3.2/#transition-log","text":"Please use the new centralized \"Update Rig\" utility button in Block's utility tab to update rigs built with previous versions of Mansur-Rig. This will now unhide all joint transforms, for them to be accessible for animation baking.","title":"Transition Log"},{"location":"releaseNotes/v1.3.2/#mnsmayaplugins-v-109","text":"mnsIkSolver - IK Softness re-implemented.","title":"mnsMayaPlugins v 1.0.9"},{"location":"releaseNotes/v1.3.4/","text":"Mansur-Rig 1.3.4 Released 04 Jul 2021 Features New Interpolated/Weighted orientation in lookAt module. This feature is used to create a weighted split orientation. When you need to create a weighted orientation for a control between two spaces, use this feature. Angle-based scale driver feature within the weighted orient feature. Create an angle-based scale driver, to scale the target slave joint when the angle changes between the two sources. Originally designed for double-chin setup Weighted Orientation & Angle Based Scale Driver Bug fixes Added reverseRightSideBindCurves for curveZipB module. In Some cases, the right side symmetrical vertices are in a reversed order. If that is the case, check this new attribute on to fix it. Controls default values deletion was not deleting defaults foe the global world control- fixed. Added custom defaults save & load on UI-Style control's offset groups. This will allow placing the UI-style control offset groups individually- saving default will now recognize the UI-style controls and save defaults for their offset group parent as well, which will restore the position set by the user. Construction was failing when only one FK-Chain was placed under the meta module - Fixed. Limb module had an issue with joints changing position on construction. The was a calculation error in the number of segments input to mnsBuildTransformsCurve node which is now fixed. Limb module also had some twisting issues when rotating the shoulder, which is now resolved as well. Transition Log Please use the centralized \"Update Rig\" utility button in Block's utility tab to update rigs built with previous versions of Mansur-Rig. mnsMayaPlugins v 1.0.9","title":"V1.3.4"},{"location":"releaseNotes/v1.3.4/#mansur-rig-134","text":"Released 04 Jul 2021","title":"Mansur-Rig 1.3.4"},{"location":"releaseNotes/v1.3.4/#features","text":"New Interpolated/Weighted orientation in lookAt module. This feature is used to create a weighted split orientation. When you need to create a weighted orientation for a control between two spaces, use this feature. Angle-based scale driver feature within the weighted orient feature. Create an angle-based scale driver, to scale the target slave joint when the angle changes between the two sources. Originally designed for double-chin setup Weighted Orientation & Angle Based Scale Driver","title":"Features"},{"location":"releaseNotes/v1.3.4/#bug-fixes","text":"Added reverseRightSideBindCurves for curveZipB module. In Some cases, the right side symmetrical vertices are in a reversed order. If that is the case, check this new attribute on to fix it. Controls default values deletion was not deleting defaults foe the global world control- fixed. Added custom defaults save & load on UI-Style control's offset groups. This will allow placing the UI-style control offset groups individually- saving default will now recognize the UI-style controls and save defaults for their offset group parent as well, which will restore the position set by the user. Construction was failing when only one FK-Chain was placed under the meta module - Fixed. Limb module had an issue with joints changing position on construction. The was a calculation error in the number of segments input to mnsBuildTransformsCurve node which is now fixed. Limb module also had some twisting issues when rotating the shoulder, which is now resolved as well.","title":"Bug fixes"},{"location":"releaseNotes/v1.3.4/#transition-log","text":"Please use the centralized \"Update Rig\" utility button in Block's utility tab to update rigs built with previous versions of Mansur-Rig.","title":"Transition Log"},{"location":"releaseNotes/v1.3.4/#mnsmayaplugins-v-109","text":"","title":"mnsMayaPlugins v 1.0.9"},{"location":"releaseNotes/v1.3.5/","text":"Mansur-Rig 1.3.5 Released 24 Jul 2021 Features New Curl feature in meta module. Meta module now includes curl channels foe detacted FKChain children on top of the splays. Curl Channels Bug fixes About window wasn't loading on Maya 2022- Fixed World Ctrl plg creation bugs fixed Limb flip issues improvements Transition Log Please use the centralized \"Update Rig\" utility button in Block's utility tab to update rigs built with previous versions of Mansur-Rig. mnsMayaPlugins v 1.0.10","title":"V1.3.5"},{"location":"releaseNotes/v1.3.5/#mansur-rig-135","text":"Released 24 Jul 2021","title":"Mansur-Rig 1.3.5"},{"location":"releaseNotes/v1.3.5/#features","text":"New Curl feature in meta module. Meta module now includes curl channels foe detacted FKChain children on top of the splays. Curl Channels","title":"Features"},{"location":"releaseNotes/v1.3.5/#bug-fixes","text":"About window wasn't loading on Maya 2022- Fixed World Ctrl plg creation bugs fixed Limb flip issues improvements","title":"Bug fixes"},{"location":"releaseNotes/v1.3.5/#transition-log","text":"Please use the centralized \"Update Rig\" utility button in Block's utility tab to update rigs built with previous versions of Mansur-Rig.","title":"Transition Log"},{"location":"releaseNotes/v1.3.5/#mnsmayaplugins-v-1010","text":"","title":"mnsMayaPlugins v 1.0.10"},{"location":"releaseNotes/v1.3.6/","text":"Mansur-Rig 1.3.6 Released 05 Aug 2021 Features Bug fixes LipZip Module - Added Base-Surface related attributes to solve follow issues when the surface is skinned/deforming. Transition Log Please use the centralized \"Update Rig\" utility button in Block's utility tab to update rigs built with previous versions of Mansur-Rig. mnsMayaPlugins v 1.0.11 mnsLipZip - Added bind/base syrface as well as functionallity. This to solve follow issues when the surface is skinned/deforming","title":"V1.3.6"},{"location":"releaseNotes/v1.3.6/#mansur-rig-136","text":"Released 05 Aug 2021","title":"Mansur-Rig 1.3.6"},{"location":"releaseNotes/v1.3.6/#features","text":"","title":"Features"},{"location":"releaseNotes/v1.3.6/#bug-fixes","text":"LipZip Module - Added Base-Surface related attributes to solve follow issues when the surface is skinned/deforming.","title":"Bug fixes"},{"location":"releaseNotes/v1.3.6/#transition-log","text":"Please use the centralized \"Update Rig\" utility button in Block's utility tab to update rigs built with previous versions of Mansur-Rig.","title":"Transition Log"},{"location":"releaseNotes/v1.3.6/#mnsmayaplugins-v-1011","text":"mnsLipZip - Added bind/base syrface as well as functionallity. This to solve follow issues when the surface is skinned/deforming","title":"mnsMayaPlugins v 1.0.11"},{"location":"releaseNotes/v1.4.0/","text":"Mansur-Rig 1.4.0 Released 05 Sep 2021 Features Mocap/Game Tools released! See the full documentation here Mocap Retarget Example A new picker! See the full documentation here Mocap Retarget Example Progress-Bar indication for all Block main tab actions ModuleVisUI- UI is will now update automatically based on visibility changes made in the scene Bug fixes Maya 2022 Block deformation tab bugs Maya 2022 About bug White-Spaces in my account inputs will now be disregarded Some License validation issues in Maya 2019 and above are now fixed #99 - matrixNodes.mll - Maya plugin was added to Mansur-Rig's auto load list, as it is required for Block to function proporly. Transition Log Please use the centralized \"Update Rig\" utility button in Block's utility tab to update rigs built with previous versions of Mansur-Rig. In order to use the new Mocap tools feature, please recustruct rigs made with previous versions of Mansur-Rig. mnsMayaPlugins v 1.0.11","title":"V1.4.0"},{"location":"releaseNotes/v1.4.0/#mansur-rig-140","text":"Released 05 Sep 2021","title":"Mansur-Rig 1.4.0"},{"location":"releaseNotes/v1.4.0/#features","text":"Mocap/Game Tools released! See the full documentation here Mocap Retarget Example A new picker! See the full documentation here Mocap Retarget Example Progress-Bar indication for all Block main tab actions ModuleVisUI- UI is will now update automatically based on visibility changes made in the scene","title":"Features"},{"location":"releaseNotes/v1.4.0/#bug-fixes","text":"Maya 2022 Block deformation tab bugs Maya 2022 About bug White-Spaces in my account inputs will now be disregarded Some License validation issues in Maya 2019 and above are now fixed #99 - matrixNodes.mll - Maya plugin was added to Mansur-Rig's auto load list, as it is required for Block to function proporly.","title":"Bug fixes"},{"location":"releaseNotes/v1.4.0/#transition-log","text":"Please use the centralized \"Update Rig\" utility button in Block's utility tab to update rigs built with previous versions of Mansur-Rig. In order to use the new Mocap tools feature, please recustruct rigs made with previous versions of Mansur-Rig.","title":"Transition Log"},{"location":"releaseNotes/v1.4.0/#mnsmayaplugins-v-1011","text":"","title":"mnsMayaPlugins v 1.0.11"},{"location":"releaseNotes/v1.4.1/","text":"Mansur-Rig 1.4.1 Released 27 Sep 2021 Features Module Batch edit settings- edit multiple modules using the same settings window. If case you choose multiple modules of the same type, all settings will be vailable for edit. In case you choose mutiple modules of different types, only common settings tab will be available. Module Setting Batch Edit Module \"Factory-Reset\" implemented. This feature isn't available in batch edit mode Factory reset button in module settings window #75 - Esc Key interuption during construction/deconstruction API-Style Construction/Deconstruction support. See the full documentation here Construction/Deconstruction Maya help line progress bar implemented. Picker data import/export implementation Picker Data Import Eport PLG Projection utility was extended to Module and Barnch modes PLG Projection Section New Translation/Scale mathching utilities in the picker tab. New match buttons in Picker tab Implemented double-right-click in picker- This will \"reset hierarchy\" New Guides-Orient ability Orient-Guides Section Bug fixes Maya 2022 Skin Utilities fixed Picker double-click fixed Maya 2022 Version-Manager Downalod bug fixed Maya 2022 Installation from path with white-spaces issues fixed Menu title name changed to \"Mansur-Rig\" Block's main tab layout was converted to a scroll area to accomedate all widgets in case all drop-down menus are collapsed Squash Module- Missing slave-control added #103 - Offset Skeleton wasn't working well with freeControl module as tweaker. Fixed- Please reconstruct. Transition Log Please use the centralized \"Update Rig\" utility button in Block's utility tab to update rigs built with previous versions of Mansur-Rig. mnsMayaPlugins v 1.0.11","title":"V1.4.1"},{"location":"releaseNotes/v1.4.1/#mansur-rig-141","text":"Released 27 Sep 2021","title":"Mansur-Rig 1.4.1"},{"location":"releaseNotes/v1.4.1/#features","text":"Module Batch edit settings- edit multiple modules using the same settings window. If case you choose multiple modules of the same type, all settings will be vailable for edit. In case you choose mutiple modules of different types, only common settings tab will be available. Module Setting Batch Edit Module \"Factory-Reset\" implemented. This feature isn't available in batch edit mode Factory reset button in module settings window #75 - Esc Key interuption during construction/deconstruction API-Style Construction/Deconstruction support. See the full documentation here Construction/Deconstruction Maya help line progress bar implemented. Picker data import/export implementation Picker Data Import Eport PLG Projection utility was extended to Module and Barnch modes PLG Projection Section New Translation/Scale mathching utilities in the picker tab. New match buttons in Picker tab Implemented double-right-click in picker- This will \"reset hierarchy\" New Guides-Orient ability Orient-Guides Section","title":"Features"},{"location":"releaseNotes/v1.4.1/#bug-fixes","text":"Maya 2022 Skin Utilities fixed Picker double-click fixed Maya 2022 Version-Manager Downalod bug fixed Maya 2022 Installation from path with white-spaces issues fixed Menu title name changed to \"Mansur-Rig\" Block's main tab layout was converted to a scroll area to accomedate all widgets in case all drop-down menus are collapsed Squash Module- Missing slave-control added #103 - Offset Skeleton wasn't working well with freeControl module as tweaker. Fixed- Please reconstruct.","title":"Bug fixes"},{"location":"releaseNotes/v1.4.1/#transition-log","text":"Please use the centralized \"Update Rig\" utility button in Block's utility tab to update rigs built with previous versions of Mansur-Rig.","title":"Transition Log"},{"location":"releaseNotes/v1.4.1/#mnsmayaplugins-v-1011","text":"","title":"mnsMayaPlugins v 1.0.11"},{"location":"releaseNotes/v1.4.2/","text":"Mansur-Rig 1.4.2 Released 17 Oct 2021 Features A completly new and very powerful feature- Mns-Volume-Joints! You can now create volume joints to refine and enhence you deformations. These joints are driven by 2 parent+child joints. Using the new UI, you can choose actions (translation/scale) to take for every angle direction between the 2 joint drivers. Please see the full documentation here for full info. Volume Joints Demo Volume Joints UI New much stabler and more intuative Embedded-IK mode in FK Chain Free Control- Mesh tweakers can now be rotation controlled as well. Now, in case you cohose so, the mesh tweaker control will not only follow the mesh's position, it will also follow it's rotation. New position river mode in Mesh-Tweaker section- new ability to rivet to the closest-vertex as well as the original closest face center. New \"Rebuild Joint-Structure\" utility in Block. Rebuild Joint-Structure button New control shapes utilities- Copy Shape & Reposition. Copy will allow you to copy a shape from a different control, or create a whole new control shape from scratch and copy it to a Block-control. Reposition will simply center control shape based on the objects-pivot. Control-Shapes Utilities New \"Text Control Shape\" feature added as a core ability. You can now select to create a Nurbs-Curve text control shape. This is mainly useful for Attribute-Host controls, in case you want to make them extra distict by setting their control shapes to \"Vis\", \"UI\" or \"FK/IK\" for example. Text Control-Shapes #100- Attribute Host space- You can now set a space for the attribute-host control. This space will be the parent space for the host to follow. This cannot be changed post contruction. Attribute-Host Space Bug fixes Transition Log Please use the centralized \"Update Rig\" utility button in Block's utility tab to update rigs built with previous versions of Mansur-Rig. mnsMayaPlugins v 1.0.12 new mnsVolumeJoint node added rotation solve to mnsSimpleRivets","title":"V1.4.2"},{"location":"releaseNotes/v1.4.2/#mansur-rig-142","text":"Released 17 Oct 2021","title":"Mansur-Rig 1.4.2"},{"location":"releaseNotes/v1.4.2/#features","text":"A completly new and very powerful feature- Mns-Volume-Joints! You can now create volume joints to refine and enhence you deformations. These joints are driven by 2 parent+child joints. Using the new UI, you can choose actions (translation/scale) to take for every angle direction between the 2 joint drivers. Please see the full documentation here for full info. Volume Joints Demo Volume Joints UI New much stabler and more intuative Embedded-IK mode in FK Chain Free Control- Mesh tweakers can now be rotation controlled as well. Now, in case you cohose so, the mesh tweaker control will not only follow the mesh's position, it will also follow it's rotation. New position river mode in Mesh-Tweaker section- new ability to rivet to the closest-vertex as well as the original closest face center. New \"Rebuild Joint-Structure\" utility in Block. Rebuild Joint-Structure button New control shapes utilities- Copy Shape & Reposition. Copy will allow you to copy a shape from a different control, or create a whole new control shape from scratch and copy it to a Block-control. Reposition will simply center control shape based on the objects-pivot. Control-Shapes Utilities New \"Text Control Shape\" feature added as a core ability. You can now select to create a Nurbs-Curve text control shape. This is mainly useful for Attribute-Host controls, in case you want to make them extra distict by setting their control shapes to \"Vis\", \"UI\" or \"FK/IK\" for example. Text Control-Shapes #100- Attribute Host space- You can now set a space for the attribute-host control. This space will be the parent space for the host to follow. This cannot be changed post contruction. Attribute-Host Space","title":"Features"},{"location":"releaseNotes/v1.4.2/#bug-fixes","text":"","title":"Bug fixes"},{"location":"releaseNotes/v1.4.2/#transition-log","text":"Please use the centralized \"Update Rig\" utility button in Block's utility tab to update rigs built with previous versions of Mansur-Rig.","title":"Transition Log"},{"location":"releaseNotes/v1.4.2/#mnsmayaplugins-v-1012","text":"new mnsVolumeJoint node added rotation solve to mnsSimpleRivets","title":"mnsMayaPlugins v 1.0.12"},{"location":"releaseNotes/v1.4.3/","text":"Mansur-Rig 1.4.3 Released 31 Oct 2021 Features Hind Limb Module- A new module to handle quadruped hind limbs. New Volume Joints Utils Round-Square control shape added globally into the system. Volume Joints UI Utilities Set Rest Pose For All - Set rest pose as current for all volume joints. Duplicate Volume Joint- Duplicate selected colume joint New Volume Joints Utils Volume Joints UI - Update UI selection based on viewport selection added Bug fixes Volume joints UI icons Control shape reposition method undo not working well #102 - Character definition UI not parented to main window Transition Log Please use the centralized \"Update Rig\" utility button in Block's utility tab to update rigs built with previous versions of Mansur-Rig. mnsMayaPlugins v 1.0.12","title":"V1.4.3"},{"location":"releaseNotes/v1.4.3/#mansur-rig-143","text":"Released 31 Oct 2021","title":"Mansur-Rig 1.4.3"},{"location":"releaseNotes/v1.4.3/#features","text":"Hind Limb Module- A new module to handle quadruped hind limbs. New Volume Joints Utils Round-Square control shape added globally into the system. Volume Joints UI Utilities Set Rest Pose For All - Set rest pose as current for all volume joints. Duplicate Volume Joint- Duplicate selected colume joint New Volume Joints Utils Volume Joints UI - Update UI selection based on viewport selection added","title":"Features"},{"location":"releaseNotes/v1.4.3/#bug-fixes","text":"Volume joints UI icons Control shape reposition method undo not working well #102 - Character definition UI not parented to main window","title":"Bug fixes"},{"location":"releaseNotes/v1.4.3/#transition-log","text":"Please use the centralized \"Update Rig\" utility button in Block's utility tab to update rigs built with previous versions of Mansur-Rig.","title":"Transition Log"},{"location":"releaseNotes/v1.4.3/#mnsmayaplugins-v-1012","text":"","title":"mnsMayaPlugins v 1.0.12"},{"location":"releaseNotes/v1.4.4/","text":"Mansur-Rig 1.4.4 Released 07 Nov 2021 Bug fixes Turn off display overrides after extracting a skeleton Transfer Skin To Extracted Skeleton doesn't work on a referenced rig Baking doesn't work for referenced rigs that have a namespace #106- Eyelids joint structure isn't built correctly based on input vertices mnsMayaPlugins v 1.0.12","title":"V1.4.4"},{"location":"releaseNotes/v1.4.4/#mansur-rig-144","text":"Released 07 Nov 2021","title":"Mansur-Rig 1.4.4"},{"location":"releaseNotes/v1.4.4/#bug-fixes","text":"Turn off display overrides after extracting a skeleton Transfer Skin To Extracted Skeleton doesn't work on a referenced rig Baking doesn't work for referenced rigs that have a namespace #106- Eyelids joint structure isn't built correctly based on input vertices","title":"Bug fixes"},{"location":"releaseNotes/v1.4.4/#mnsmayaplugins-v-1012","text":"","title":"mnsMayaPlugins v 1.0.12"},{"location":"releaseNotes/v1.4.5/","text":"Mansur-Rig 1.4.5 Released 20 Nov 2021 Features Spring Tool - Please see the full documentation here for full info. Spring Tool UI Free-Control Module- Added interpolated orientation feature Free-Control- Interpolated Orientation Direct-Connection method was added to skeleton extraction utility. Skeleton-Extraction- Direct Connection Bug fixes Picker-Images - JPG image type support is now fixed Module Symmetry- A global behaviour was inserted into the system to mirror all attributes that contain a Block node name(i.e. \"eyeFollowJnt\" in curveZipB module) Picker2 - Callbacks optimized to avoid unnecessary duplicate actions Picker2 - Control specific visibility changes weren't handled correctly in the picker UI- fixed. mnsMayaPlugins v 1.0.12","title":"V1.4.5"},{"location":"releaseNotes/v1.4.5/#mansur-rig-145","text":"Released 20 Nov 2021","title":"Mansur-Rig 1.4.5"},{"location":"releaseNotes/v1.4.5/#features","text":"Spring Tool - Please see the full documentation here for full info. Spring Tool UI Free-Control Module- Added interpolated orientation feature Free-Control- Interpolated Orientation Direct-Connection method was added to skeleton extraction utility. Skeleton-Extraction- Direct Connection","title":"Features"},{"location":"releaseNotes/v1.4.5/#bug-fixes","text":"Picker-Images - JPG image type support is now fixed Module Symmetry- A global behaviour was inserted into the system to mirror all attributes that contain a Block node name(i.e. \"eyeFollowJnt\" in curveZipB module) Picker2 - Callbacks optimized to avoid unnecessary duplicate actions Picker2 - Control specific visibility changes weren't handled correctly in the picker UI- fixed.","title":"Bug fixes"},{"location":"releaseNotes/v1.4.5/#mnsmayaplugins-v-1012","text":"","title":"mnsMayaPlugins v 1.0.12"},{"location":"releaseNotes/v1.4.6/","text":"Mansur-Rig 1.4.6 Released 10 Dec 2021 Features Spaces & FK-IK Tool - Please see the full documentation here for full info. Spaces Tool UI Bug fixes #108 - Lip and module isn't behaving as expected in small scales - Fixed. #108- lip module joint struct issues in small scales - Fixed. mnsMayaPlugins v 1.0.12","title":"V1.4.6"},{"location":"releaseNotes/v1.4.6/#mansur-rig-146","text":"Released 10 Dec 2021","title":"Mansur-Rig 1.4.6"},{"location":"releaseNotes/v1.4.6/#features","text":"Spaces & FK-IK Tool - Please see the full documentation here for full info. Spaces Tool UI","title":"Features"},{"location":"releaseNotes/v1.4.6/#bug-fixes","text":"#108 - Lip and module isn't behaving as expected in small scales - Fixed. #108- lip module joint struct issues in small scales - Fixed.","title":"Bug fixes"},{"location":"releaseNotes/v1.4.6/#mnsmayaplugins-v-1012","text":"","title":"mnsMayaPlugins v 1.0.12"},{"location":"releaseNotes/v1.5.0/","text":"Mansur-Rig 1.5.0 Released 14 Jan 2022 Features LODs Tool \"Update Rig\" Method is now connected to the main progress bar. Limb modules- added new Mute-Root-Twist attribute. You can now choose whether you want to root interpolation to twist with the shoulder root or not, and anywhere in between. New \"leave settings window open\" value in preferences, to choose not to close the module settings window when pressing \"update\". The preferences value affects the default value for the new checkbox added in the settings window. Control-Shapes import/export CNS Tool Documentation added Predefined CNS Ctrls Added to rig top attributes. Often it is needed to create CNS controls for animators. As it is slightly inconvenient to do so manually or using custom scripts, a new predefined-CNS controls attribute was added. A CNS control will be created automatically post-construction for every input control within the new attribute list. Update-Rig utility was added to Block's main static section as well as the old location in Utility tab. Custom-Scripts relative paths- In some cases, relative paths for custom scripts can be very useful. When working in a non-production environment, it is sometimes useful to point to a custom script using a relative path to the Maya Project root directory. In case the selected custom script path is within the current Maya Project directory, a new pop-up question window will load, allowing users to choose to convert the selected path to a relative path format. This new relative path will be re-converted to the absolute path dynamically pre-execution. Bug fixes Twisting Issues with upper limb up node are now resolved. In previous versions, there were a few scenarios where the shoulder flipped. This has been resolved both in Limb & Hind-Limb modules, and the upper section of the limb is now fully stable. Errors when trying to batch render a scene with a Block-Rig present- Fixed. Batch rendering with a Block rig within the scene is now fully supported. Squash module decendents behaviour- Squash module decentent behaviour was fully stabalized and will now yeild expected results. Load rig setting when rig-top is selected isn't working - Fixed. Update Rig isn't updating Rig-Top attributes- Fixed. OC Group is created for all ctrls- Fixed. Transition Log Please use the centralized \"Update Rig\" utility button in Block's utility tab to update rigs built with previous versions of Mansur-Rig. mnsMayaPlugins v 1.1.1 Parametrically Uniform mode in mnsPointsOnCurve Node Periodic form mode in buildTransformsCurveNode","title":"V1.5.0"},{"location":"releaseNotes/v1.5.0/#mansur-rig-150","text":"Released 14 Jan 2022","title":"Mansur-Rig 1.5.0"},{"location":"releaseNotes/v1.5.0/#features","text":"LODs Tool \"Update Rig\" Method is now connected to the main progress bar. Limb modules- added new Mute-Root-Twist attribute. You can now choose whether you want to root interpolation to twist with the shoulder root or not, and anywhere in between. New \"leave settings window open\" value in preferences, to choose not to close the module settings window when pressing \"update\". The preferences value affects the default value for the new checkbox added in the settings window. Control-Shapes import/export CNS Tool Documentation added Predefined CNS Ctrls Added to rig top attributes. Often it is needed to create CNS controls for animators. As it is slightly inconvenient to do so manually or using custom scripts, a new predefined-CNS controls attribute was added. A CNS control will be created automatically post-construction for every input control within the new attribute list. Update-Rig utility was added to Block's main static section as well as the old location in Utility tab. Custom-Scripts relative paths- In some cases, relative paths for custom scripts can be very useful. When working in a non-production environment, it is sometimes useful to point to a custom script using a relative path to the Maya Project root directory. In case the selected custom script path is within the current Maya Project directory, a new pop-up question window will load, allowing users to choose to convert the selected path to a relative path format. This new relative path will be re-converted to the absolute path dynamically pre-execution.","title":"Features"},{"location":"releaseNotes/v1.5.0/#bug-fixes","text":"Twisting Issues with upper limb up node are now resolved. In previous versions, there were a few scenarios where the shoulder flipped. This has been resolved both in Limb & Hind-Limb modules, and the upper section of the limb is now fully stable. Errors when trying to batch render a scene with a Block-Rig present- Fixed. Batch rendering with a Block rig within the scene is now fully supported. Squash module decendents behaviour- Squash module decentent behaviour was fully stabalized and will now yeild expected results. Load rig setting when rig-top is selected isn't working - Fixed. Update Rig isn't updating Rig-Top attributes- Fixed. OC Group is created for all ctrls- Fixed.","title":"Bug fixes"},{"location":"releaseNotes/v1.5.0/#transition-log","text":"Please use the centralized \"Update Rig\" utility button in Block's utility tab to update rigs built with previous versions of Mansur-Rig.","title":"Transition Log"},{"location":"releaseNotes/v1.5.0/#mnsmayaplugins-v-111","text":"Parametrically Uniform mode in mnsPointsOnCurve Node Periodic form mode in buildTransformsCurveNode","title":"mnsMayaPlugins v 1.1.1"},{"location":"releaseNotes/v1.5.1/","text":"Mansur-Rig 1.5.1 Released 18 Jan 2022 Features LODs Tool - Please see the full documentation here for full info. LODs Tool UI \"Update Rig\" Method is now connected to the main progress bar. Limb modules- added new Mute-Root-Twist attribute. You can now choose whether you want to root interpolation to twist with the shoulder root or not, and anywhere in between. Mute Root Twist Demo New \"leave settings window open\" value in preferences, to choose not to close the module settings window when pressing \"update\". The preferences value affects the default value for the new checkbox added in the settings window. Leave Setting Open Choice Control-Shapes import/export Control-Shapes Import/Export CNS Tool Documentation added Predefined CNS Ctrls Added to rig top attributes. Often it is needed to create CNS controls for animators. As it is slightly inconvenient to do so manually or using custom scripts, a new predefined-CNS controls attribute was added. A CNS control will be created automatically post-construction for every input control within the new attribute list. Predefined CNS Controls Attribute Update-Rig utility was added to Block's main static section as well as the old location in Utility tab. New Update-Rig Button Custom-Scripts relative paths- In some cases, relative paths for custom scripts can be very useful. When working in a non-production environment, it is sometimes useful to point to a custom script using a relative path to the Maya Project root directory. In case the selected custom script path is within the current Maya Project directory, a new pop-up question window will load, allowing users to choose to convert the selected path to a relative path format. This new relative path will be re-converted to the absolute path dynamically pre-execution. Custom Scripts Relative Paths New version available indication in main menu Rig info feature- rig construction will now log construction data. To load rig-info post construction use the new \"Rig Info\" button in block Rig Info Button Custom Guides Shapes Posing- Saving poses will now store custom guides shape when relevant. curveZipB Module now supports bind tweaks for deforming eyelids pre-construction. This was created mainly to allow rigging a closed eyes model. Use the new \"doBindTweaks\" attribute within the curveZipB module- that will create edittable curves that can be editted pre-construction. Bug fixes Twisting Issues with upper limb up node are now resolved. In previous versions, there were a few scenarios where the shoulder flipped. This has been resolved both in Limb & Hind-Limb modules, and the upper section of the limb is now fully stable. Errors when trying to batch render a scene with a Block-Rig present- Fixed. Batch rendering with a Block rig within the scene is now fully supported. Squash module decendents behaviour- Squash module decentent behaviour was fully stabalized and will now yeild expected results. Squash Module Decendents Load rig setting when rig-top is selected isn't working - Fixed. Update Rig isn't updating Rig-Top attributes- Fixed. OC Group is created for all ctrls- Fixed. Regained Maya 2017 support. Some limb related un-wanted warnings in construction and deconsruction were removed. FK Chain Module- Some issues were found with embeddedIK to FK controls inheritence. These issues are now resolved and the embedded IK layer was stabalized. Transition Log Please restore Mansur-Rig default preferences. Go to Mansur-Rig Main Menu -> Preferences -> Restore Defaults Please use the centralized \"Update Rig\" utility button in Block's utility tab to update rigs built with previous versions of Mansur-Rig. mnsMayaPlugins v 1.1.1 Parametrically Uniform mode in mnsPointsOnCurve Node Periodic form mode in buildTransformsCurveNode","title":"V1.5.1"},{"location":"releaseNotes/v1.5.1/#mansur-rig-151","text":"Released 18 Jan 2022","title":"Mansur-Rig 1.5.1"},{"location":"releaseNotes/v1.5.1/#features","text":"LODs Tool - Please see the full documentation here for full info. LODs Tool UI \"Update Rig\" Method is now connected to the main progress bar. Limb modules- added new Mute-Root-Twist attribute. You can now choose whether you want to root interpolation to twist with the shoulder root or not, and anywhere in between. Mute Root Twist Demo New \"leave settings window open\" value in preferences, to choose not to close the module settings window when pressing \"update\". The preferences value affects the default value for the new checkbox added in the settings window. Leave Setting Open Choice Control-Shapes import/export Control-Shapes Import/Export CNS Tool Documentation added Predefined CNS Ctrls Added to rig top attributes. Often it is needed to create CNS controls for animators. As it is slightly inconvenient to do so manually or using custom scripts, a new predefined-CNS controls attribute was added. A CNS control will be created automatically post-construction for every input control within the new attribute list. Predefined CNS Controls Attribute Update-Rig utility was added to Block's main static section as well as the old location in Utility tab. New Update-Rig Button Custom-Scripts relative paths- In some cases, relative paths for custom scripts can be very useful. When working in a non-production environment, it is sometimes useful to point to a custom script using a relative path to the Maya Project root directory. In case the selected custom script path is within the current Maya Project directory, a new pop-up question window will load, allowing users to choose to convert the selected path to a relative path format. This new relative path will be re-converted to the absolute path dynamically pre-execution. Custom Scripts Relative Paths New version available indication in main menu Rig info feature- rig construction will now log construction data. To load rig-info post construction use the new \"Rig Info\" button in block Rig Info Button Custom Guides Shapes Posing- Saving poses will now store custom guides shape when relevant. curveZipB Module now supports bind tweaks for deforming eyelids pre-construction. This was created mainly to allow rigging a closed eyes model. Use the new \"doBindTweaks\" attribute within the curveZipB module- that will create edittable curves that can be editted pre-construction.","title":"Features"},{"location":"releaseNotes/v1.5.1/#bug-fixes","text":"Twisting Issues with upper limb up node are now resolved. In previous versions, there were a few scenarios where the shoulder flipped. This has been resolved both in Limb & Hind-Limb modules, and the upper section of the limb is now fully stable. Errors when trying to batch render a scene with a Block-Rig present- Fixed. Batch rendering with a Block rig within the scene is now fully supported. Squash module decendents behaviour- Squash module decentent behaviour was fully stabalized and will now yeild expected results. Squash Module Decendents Load rig setting when rig-top is selected isn't working - Fixed. Update Rig isn't updating Rig-Top attributes- Fixed. OC Group is created for all ctrls- Fixed. Regained Maya 2017 support. Some limb related un-wanted warnings in construction and deconsruction were removed. FK Chain Module- Some issues were found with embeddedIK to FK controls inheritence. These issues are now resolved and the embedded IK layer was stabalized.","title":"Bug fixes"},{"location":"releaseNotes/v1.5.1/#transition-log","text":"Please restore Mansur-Rig default preferences. Go to Mansur-Rig Main Menu -> Preferences -> Restore Defaults Please use the centralized \"Update Rig\" utility button in Block's utility tab to update rigs built with previous versions of Mansur-Rig.","title":"Transition Log"},{"location":"releaseNotes/v1.5.1/#mnsmayaplugins-v-111","text":"Parametrically Uniform mode in mnsPointsOnCurve Node Periodic form mode in buildTransformsCurveNode","title":"mnsMayaPlugins v 1.1.1"},{"location":"releaseNotes/v1.5.2/","text":"Mansur-Rig 1.5.2 Released 6 Feb 2022 Features Symmetrize Custom-Guide shape utility - A new utility to symetrize a custom guides Nurbs-Curve Shape. Symmetrize Custom Guide Shape Utility Module Preset Editor - Please see the full documentation here for full info. Module Preset Edit Dialog #97 - Mirror Skin To Detached Component Utility- A new method for mirroring skin to a detached symetrical mesh. Mirror Skin To Detached component tool Transition Log Please use the centralized \"Update Rig\" utility button in Block's utility tab to update rigs built with previous versions of Mansur-Rig. mnsMayaPlugins v 1.1.1","title":"V1.5.2"},{"location":"releaseNotes/v1.5.2/#mansur-rig-152","text":"Released 6 Feb 2022","title":"Mansur-Rig 1.5.2"},{"location":"releaseNotes/v1.5.2/#features","text":"Symmetrize Custom-Guide shape utility - A new utility to symetrize a custom guides Nurbs-Curve Shape. Symmetrize Custom Guide Shape Utility Module Preset Editor - Please see the full documentation here for full info. Module Preset Edit Dialog #97 - Mirror Skin To Detached Component Utility- A new method for mirroring skin to a detached symetrical mesh. Mirror Skin To Detached component tool","title":"Features"},{"location":"releaseNotes/v1.5.2/#transition-log","text":"Please use the centralized \"Update Rig\" utility button in Block's utility tab to update rigs built with previous versions of Mansur-Rig.","title":"Transition Log"},{"location":"releaseNotes/v1.5.2/#mnsmayaplugins-v-111","text":"","title":"mnsMayaPlugins v 1.1.1"},{"location":"releaseNotes/v2.0.0/","text":"Mansur-Rig 2.0.0 Released 20 Sep 2022 Features Web-App upgrade, with a new license management system. This new app upgrade will now allow you to get as many seats as you want, as well as assign these seats to any Mansur-Rig user on your team. All Mansur-Rig versions prior to v2.0.0 are now depricated New License types : Gold - This is the best license for riggers. This license gives you full-edit capabilities and full access to all tools and the entire node-library. Silver - This is the best license for animators. This license is a Read-Only license, and can be used only to use rigs, but not edit them. This license includes all animation related tools, but not the node library. Trial - This is a full license (equivalent to Gold), 30-Days Free. Does not require any payment information. One Trial is allowed per user, and only once. This license can not be assigned. New modules! LipsB - A much stronger and stabler version of the Lips module. chassis - A simple module to create a chassis behaviour. This will create a joint with 4 IK controls at chosen positions to calculate the highet and rotation of the chassis joint. This will allow you to control estimate a chassis position and orientation along a given surface very easily. Hydrolic Piston - Create a piston behaviour with ease. Sphere Roll - First of its kind! Calculate a sphere roll based on global position. This is mainly used to create a B-88 style characters. Curve Attachment - Attach a control to any given curve Wheel - Create a wheel behaviour with great ease. Wheel rotation based on global position as well as rotation, works in all directions. Link Chain - Create a link chain behaviour. Used for bike chains, tank treads, conveyor belts or any type of closed link chain deformation. Local Clump - Create a clump control to any group of controls. This will connect using local channels to your clump slaves so it will not break any hierarchy based behaviour. Lips module is now deprecated and replaced by the LipsB module Free-Control module- spring layer- added a new ability to spring specific axes only Multi-row attributes symmetry behaviour improved. Rig-Info- Added Maya version PLG - Select PLGs post projection CurveZipB - Default \"Remote-Control-Style\" controls position were normalized. licensing UI- \"Always On Top\" behaviour removed. Window parenting issues resolved. Mansur-Rig will no longer support Maya 2017. Mansur-Rig now supports Maya 2023. Bug Fixes Attribute hosts were not constructed at chosen positions - Fixed. Module duplicate- CG Shapes duplication behaviour fixed and normalized. Module symmetry- CG Shapes symmetry behaviour fixed and normalized. Foot module - Construction fails when choosing to create a dynamic control layer without the roll layer - Fixed. FK Chain module- Scaling with interp-joints on Fixed-Length mode- behaves incorrectly- Fixed. Free Control Module - create joint feature is loosing authority over related joint after construction in off mode Module symmetry- Spaces symmetry wasn't behaving as expected - Fixed. Partial construction isn't skipping unfound spaces - Fixed. curveZipB module - uShift ins't connected correctly post construction - Fixed Lips, curveZip - vertex to edges conversions, on a mesh-related input attribute are failing on related meshes with namespaces - Fixed. Module Symmetry - FK Chain - post construction orientation for symmetrized module is inconsistent - Fixed Lips module control mirroring issues were fixed on the new LipsB module PLGs - most actions were not undoable - Fixed. All actions wrapped into proper undo chunks. curveZipB module- bind curves creation direction normalized Module preset tool - Custom preset paths were not working - Fixed. mnsMayaPlugins v 2.0 mnsAutoWheelDrive Node released mnsSphereRoll node released mnsPointOnCurve - Object-Orient Up mode mnsPointsOnCurve - Curve Aim Mode mnsPointsOnCurve - objectOrientAim rotate mode Transition Log Please use the centralized \"Update Rig\" utility button in Block's utility tab to update rigs built with previous versions of Mansur-Rig.","title":"V2.0.0"},{"location":"releaseNotes/v2.0.0/#mansur-rig-200","text":"Released 20 Sep 2022","title":"Mansur-Rig 2.0.0"},{"location":"releaseNotes/v2.0.0/#features","text":"Web-App upgrade, with a new license management system. This new app upgrade will now allow you to get as many seats as you want, as well as assign these seats to any Mansur-Rig user on your team. All Mansur-Rig versions prior to v2.0.0 are now depricated New License types : Gold - This is the best license for riggers. This license gives you full-edit capabilities and full access to all tools and the entire node-library. Silver - This is the best license for animators. This license is a Read-Only license, and can be used only to use rigs, but not edit them. This license includes all animation related tools, but not the node library. Trial - This is a full license (equivalent to Gold), 30-Days Free. Does not require any payment information. One Trial is allowed per user, and only once. This license can not be assigned. New modules! LipsB - A much stronger and stabler version of the Lips module. chassis - A simple module to create a chassis behaviour. This will create a joint with 4 IK controls at chosen positions to calculate the highet and rotation of the chassis joint. This will allow you to control estimate a chassis position and orientation along a given surface very easily. Hydrolic Piston - Create a piston behaviour with ease. Sphere Roll - First of its kind! Calculate a sphere roll based on global position. This is mainly used to create a B-88 style characters. Curve Attachment - Attach a control to any given curve Wheel - Create a wheel behaviour with great ease. Wheel rotation based on global position as well as rotation, works in all directions. Link Chain - Create a link chain behaviour. Used for bike chains, tank treads, conveyor belts or any type of closed link chain deformation. Local Clump - Create a clump control to any group of controls. This will connect using local channels to your clump slaves so it will not break any hierarchy based behaviour. Lips module is now deprecated and replaced by the LipsB module Free-Control module- spring layer- added a new ability to spring specific axes only Multi-row attributes symmetry behaviour improved. Rig-Info- Added Maya version PLG - Select PLGs post projection CurveZipB - Default \"Remote-Control-Style\" controls position were normalized. licensing UI- \"Always On Top\" behaviour removed. Window parenting issues resolved. Mansur-Rig will no longer support Maya 2017. Mansur-Rig now supports Maya 2023.","title":"Features"},{"location":"releaseNotes/v2.0.0/#bug-fixes","text":"Attribute hosts were not constructed at chosen positions - Fixed. Module duplicate- CG Shapes duplication behaviour fixed and normalized. Module symmetry- CG Shapes symmetry behaviour fixed and normalized. Foot module - Construction fails when choosing to create a dynamic control layer without the roll layer - Fixed. FK Chain module- Scaling with interp-joints on Fixed-Length mode- behaves incorrectly- Fixed. Free Control Module - create joint feature is loosing authority over related joint after construction in off mode Module symmetry- Spaces symmetry wasn't behaving as expected - Fixed. Partial construction isn't skipping unfound spaces - Fixed. curveZipB module - uShift ins't connected correctly post construction - Fixed Lips, curveZip - vertex to edges conversions, on a mesh-related input attribute are failing on related meshes with namespaces - Fixed. Module Symmetry - FK Chain - post construction orientation for symmetrized module is inconsistent - Fixed Lips module control mirroring issues were fixed on the new LipsB module PLGs - most actions were not undoable - Fixed. All actions wrapped into proper undo chunks. curveZipB module- bind curves creation direction normalized Module preset tool - Custom preset paths were not working - Fixed.","title":"Bug Fixes"},{"location":"releaseNotes/v2.0.0/#mnsmayaplugins-v-20","text":"mnsAutoWheelDrive Node released mnsSphereRoll node released mnsPointOnCurve - Object-Orient Up mode mnsPointsOnCurve - Curve Aim Mode mnsPointsOnCurve - objectOrientAim rotate mode","title":"mnsMayaPlugins v 2.0"},{"location":"releaseNotes/v2.0.0/#transition-log","text":"Please use the centralized \"Update Rig\" utility button in Block's utility tab to update rigs built with previous versions of Mansur-Rig.","title":"Transition Log"},{"location":"releaseNotes/v2.1.0/","text":"Mansur-Rig 2.1.0 Released 09 Feb 2023 Features Module compounds introduced - It is now possible to create module compounds. Meaning, it is possible combining additional modules to be a part of a new module structure. Wing module (beta) is finally released! Missing PyMel installation is now cought with an informative info-box to avoid confusion after installing Mansur-Rig on Maya 2022 and above. Link Chain - Added Rotation mode setting. Bug Fixes Underscores in rig names is now prvented to avoid system errors FKChain build breaks when disabling scale/translate using channel control on the FK layer - Fixed LipsB module not building correctly due to naming issues- Fixed Limb modules - sofness and pinToMid attributes bug- Fixed Insert guides not working with interp joints- Fixed Delete guides not working with interp joints- Fixed Picker Data save/load not working on Python 3- Fixed Trello Development Board Discord BOT is now back in working order mnsMayaPlugins v 2.1 mnsPointsOnCurve - manual parameters adjustments introduced (both posision parameters and aim parameters) Transition Log Please use the centralized \"Update Rig\" utility button in Block's utility tab to update rigs built with previous versions of Mansur-Rig.","title":"V2.1.0"},{"location":"releaseNotes/v2.1.0/#mansur-rig-210","text":"Released 09 Feb 2023","title":"Mansur-Rig 2.1.0"},{"location":"releaseNotes/v2.1.0/#features","text":"Module compounds introduced - It is now possible to create module compounds. Meaning, it is possible combining additional modules to be a part of a new module structure. Wing module (beta) is finally released! Missing PyMel installation is now cought with an informative info-box to avoid confusion after installing Mansur-Rig on Maya 2022 and above. Link Chain - Added Rotation mode setting.","title":"Features"},{"location":"releaseNotes/v2.1.0/#bug-fixes","text":"Underscores in rig names is now prvented to avoid system errors FKChain build breaks when disabling scale/translate using channel control on the FK layer - Fixed LipsB module not building correctly due to naming issues- Fixed Limb modules - sofness and pinToMid attributes bug- Fixed Insert guides not working with interp joints- Fixed Delete guides not working with interp joints- Fixed Picker Data save/load not working on Python 3- Fixed Trello Development Board Discord BOT is now back in working order","title":"Bug Fixes"},{"location":"releaseNotes/v2.1.0/#mnsmayaplugins-v-21","text":"mnsPointsOnCurve - manual parameters adjustments introduced (both posision parameters and aim parameters)","title":"mnsMayaPlugins v 2.1"},{"location":"releaseNotes/v2.1.0/#transition-log","text":"Please use the centralized \"Update Rig\" utility button in Block's utility tab to update rigs built with previous versions of Mansur-Rig.","title":"Transition Log"},{"location":"userGuides/Asset-Scaling/","text":"Mansur-Rig\u2019s default scale is based on: Human-male character- 180cm in Height. There are three values that dictate Asset scaling: Preferences - \u201cBase Scale\u201d, or \u201cProject Scale\u201d- Global scale multiplier. Rig-Top Setting - \u201cAsset Scale\u201d, Asset specific scale multiplier. Preferences - \u201cRoot Guide Scale\u201d - This will dictate the multiplier for the \u201cRoot Guide\u201d only. Variables used internally : mnsProjectScale - Located in \"Preferences\", is set by the user using the preferences UI, which can be accesed through Mansur's main menu. assetScale - Rig-Top's attribute, can be accessed when creating a new Rig-Top, or via the \"Rig settings\" in Mansur BLOCK's main UI. gScale - Compiled in MnsBuildModule Class = mnsProjectScale * assetScale spacing - This variable dictates the spacing (distance) between guides when creating them. This variable is gScale * 10 examples (Recommended Values): Environment Scale Asset Height Base Scale Asset Scale Root Guide Scale 1:1 (Real-Scale) 180 cm 1.0 1.0 50.0 1:1 (Real-Scale) 135 cm 1.0 0.75 50.0 1:1 (Real-Scale) 45 cm 1.0 0.25 50.0 1:2 (Half-Scale) 180 cm 0.5 1.0 50.0 1:4 (Quarter-Scale) 135 cm 0.25 0.75 50.0","title":"Asset Scaling"},{"location":"userGuides/CNS-Tool/","text":"User-Guide This tool was created to allow animators to create offset additional control for any control within block rig, if they have a need to constrain the control to a different object. Often, animators need to constrain a control to a different object to create the required animation. Since this operation will result in locking the control's transform channels, it is neccessary to create an aditional offset control above in order to constrain the offset control, maintaining animation ability on the child control. This tool is operational both in normal rig state as well as in a referenced rig state. UI Access this Tool via Mansur-Rig main Maya menu Menu Entry Workflow Open the tool. The UI will list all existing CNS controls within the scene. Select any control and click Create CNS (1). This will create the offset CNS, maintining the selected control's transforms. In case you want to remove an existing CNS, use Remove CNS (2). Legend CNS Tool- UI Create CNS - Create a CNS for selected controls. Delete CNS - Delete an existing CNS for selected controls. Scene CNS Controls - Existing scene CNS controls display.","title":"CNS Tool"},{"location":"userGuides/CNS-Tool/#user-guide","text":"This tool was created to allow animators to create offset additional control for any control within block rig, if they have a need to constrain the control to a different object. Often, animators need to constrain a control to a different object to create the required animation. Since this operation will result in locking the control's transform channels, it is neccessary to create an aditional offset control above in order to constrain the offset control, maintaining animation ability on the child control. This tool is operational both in normal rig state as well as in a referenced rig state.","title":"User-Guide"},{"location":"userGuides/CNS-Tool/#ui","text":"Access this Tool via Mansur-Rig main Maya menu Menu Entry","title":"UI"},{"location":"userGuides/CNS-Tool/#workflow","text":"Open the tool. The UI will list all existing CNS controls within the scene. Select any control and click Create CNS (1). This will create the offset CNS, maintining the selected control's transforms. In case you want to remove an existing CNS, use Remove CNS (2).","title":"Workflow"},{"location":"userGuides/CNS-Tool/#legend","text":"CNS Tool- UI Create CNS - Create a CNS for selected controls. Delete CNS - Delete an existing CNS for selected controls. Scene CNS Controls - Existing scene CNS controls display.","title":"Legend"},{"location":"userGuides/IK-FK-Match/","text":"How To Match Limb Module IK & FK Controls In order to switch & match IK and FK controls of a limb module, please use the following code snippets. The following code is selection based. Select any control related to the limb module you want to switch and run the method. Mode 0: Match IK Controls to the FK controls Mode 1: Match FK Controls to the IK controls IK to FK (Python) #import Mansur-Rig's Block-Utility python module, to access the method from mansur.block.core import blockUtility as blkUtils #Mode 0 - Match IK to FK blkUtils . limbMatchFkIK ( pm . ls ( sl = True )[ 0 ], 0 ) FK to IK (Python) #import Mansur-Rig's Block-Utility python module, to access the method from mansur.block.core import blockUtility as blkUtils #Mode 1 - Match FK to IK blkUtils . limbMatchFkIK ( pm . ls ( sl = True )[ 0 ], 1 ) Using the code snippet as a picker button In case you are creating a picker, it is recommended to add FK & IK switch buttons for easy access in animation. The way to do so is simply to insert the above snippets as a \"custom script\" into a picker button. Open Block Builder, and move to \"Picker\" tab. Picker Tab While any control is selected, click \"Edit Picker Layout\" to open the picker layout editor. Click \"Create Free PLG\" to create a new free picker button, and position it within your picker layout. While the new PLG is selected, click \"PLG Settings\" to open it's attributes. In the opened UI, insert any of the above code snippets. Optionally add a text in the \"button text\" line edit to indicate it's behaviour- for example: \"To FK\" or \"To IK\". Optionally add the Module's UI control into the controls select list. PLG Settings Repeat the process for the reverse operation. test the buttons by openning the picker, and clicking the button. Result Example","title":"IK FK Match"},{"location":"userGuides/IK-FK-Match/#how-to-match-limb-module-ik-fk-controls","text":"In order to switch & match IK and FK controls of a limb module, please use the following code snippets. The following code is selection based. Select any control related to the limb module you want to switch and run the method. Mode 0: Match IK Controls to the FK controls Mode 1: Match FK Controls to the IK controls IK to FK (Python) #import Mansur-Rig's Block-Utility python module, to access the method from mansur.block.core import blockUtility as blkUtils #Mode 0 - Match IK to FK blkUtils . limbMatchFkIK ( pm . ls ( sl = True )[ 0 ], 0 ) FK to IK (Python) #import Mansur-Rig's Block-Utility python module, to access the method from mansur.block.core import blockUtility as blkUtils #Mode 1 - Match FK to IK blkUtils . limbMatchFkIK ( pm . ls ( sl = True )[ 0 ], 1 )","title":"How To Match Limb Module IK &amp; FK Controls"},{"location":"userGuides/IK-FK-Match/#using-the-code-snippet-as-a-picker-button","text":"In case you are creating a picker, it is recommended to add FK & IK switch buttons for easy access in animation. The way to do so is simply to insert the above snippets as a \"custom script\" into a picker button. Open Block Builder, and move to \"Picker\" tab. Picker Tab While any control is selected, click \"Edit Picker Layout\" to open the picker layout editor. Click \"Create Free PLG\" to create a new free picker button, and position it within your picker layout. While the new PLG is selected, click \"PLG Settings\" to open it's attributes. In the opened UI, insert any of the above code snippets. Optionally add a text in the \"button text\" line edit to indicate it's behaviour- for example: \"To FK\" or \"To IK\". Optionally add the Module's UI control into the controls select list. PLG Settings Repeat the process for the reverse operation. test the buttons by openning the picker, and clicking the button. Result Example","title":"Using the code snippet as a picker button"},{"location":"userGuides/LODs-Tool/","text":"User-Guide LODs Tool is a simple way for managing visibility switches between model states. Often, a given model has different states, or different resolutions, which can be switched while animating to gain performance. These states are most commonly known as LOD (Level-Of-Detail) modes. Using this tool you can simply create LOD grouping (as many as you need) and input transforms into these groups to switch visibility states using a simple Enum attribute that will be created automatically (both in deconstructed and constructed states of Block rig). This tool can also be used to switch between model variations, or clothing variations of a model. UI Access this Tool via Mansur-Rig main Maya menu Menu Entry Workflow Open the tool. Select any component of a Block rig. If any previous LOD setting were created for this rig, they will be displayed within the UI. If not, only the Rig (1) indication will display the name of the selected rig. Start with adding a LOD group by clicking Add LOD (6). A new LOD column will be created in the LOD groups section (5). Repeat the previous step to add more LOD groups (columns). Use the Right-Click Menu (8-11) (using right click in the LOD groups section) to edit the contents of each group (selection based). Any transfom can be added here. Once you are done editting your LOD groups, click Apply Changes . This will write the data into the rig, and UI will refresh. Now you should see that the Current LOD (2) drop-down now contains an item for each LOD group you selected. You will also notice that the visibility channels for the nodes you selected are already connected. Using the Current LOD (2) drop down you can now switch between states. In case you want to switch states in deconstructed state without using the UI, simply look for the LOD Vis attribute created on the root guide. For the constructed state- the default attribute host will be the world control. In case you want to change the host in constructed state, simply open the UI again, and input the host into the LOD Attribute Host (3) box. Once you re-construct, the LOD Vis attribute will be created on your selected host. You can edit/change this data at any time. Legend LODs Tool- UI Rig - Selected Rig indication. Current LOD - Switch between existing LODs using the UI. LODs Attribute Host - Input the constructed state attribute host for the LOD switch. LOD Naming Style - Select your prefered naming style. Alphabetical will result in lodA, lodB, lodC... style naming. Numeric will result in lod1, lod2, lod3... naming style. LODs Defenition - This is where the LOD groups data is displayed and editted. Edit your LOD groups using the righ-click menu (8-11). Add LOD - Add LOD group, increasing the amount of LOD groups. Delete Last LOD - Remove the last LOD group, decreasing the amount of LOD groups. Set Selected Items - For the selected LOD group (column), set the selected scene nodes as the group's content. This will replace any existing members of the group. Add Selected Items - For the selected LOD group (column), add the selected scene nodes as the group's content. Existing members of the group will be kept. Remove Selected Items - For the selected LOD group (column), remove any UI selected members from the group. Clear ALL - Clear ALL Data. All LOD groups and members will be removed. Apply Changes - Once you are happy with your data, apply (write) it into the rig.","title":"LODs Tool"},{"location":"userGuides/LODs-Tool/#user-guide","text":"LODs Tool is a simple way for managing visibility switches between model states. Often, a given model has different states, or different resolutions, which can be switched while animating to gain performance. These states are most commonly known as LOD (Level-Of-Detail) modes. Using this tool you can simply create LOD grouping (as many as you need) and input transforms into these groups to switch visibility states using a simple Enum attribute that will be created automatically (both in deconstructed and constructed states of Block rig). This tool can also be used to switch between model variations, or clothing variations of a model.","title":"User-Guide"},{"location":"userGuides/LODs-Tool/#ui","text":"Access this Tool via Mansur-Rig main Maya menu Menu Entry","title":"UI"},{"location":"userGuides/LODs-Tool/#workflow","text":"Open the tool. Select any component of a Block rig. If any previous LOD setting were created for this rig, they will be displayed within the UI. If not, only the Rig (1) indication will display the name of the selected rig. Start with adding a LOD group by clicking Add LOD (6). A new LOD column will be created in the LOD groups section (5). Repeat the previous step to add more LOD groups (columns). Use the Right-Click Menu (8-11) (using right click in the LOD groups section) to edit the contents of each group (selection based). Any transfom can be added here. Once you are done editting your LOD groups, click Apply Changes . This will write the data into the rig, and UI will refresh. Now you should see that the Current LOD (2) drop-down now contains an item for each LOD group you selected. You will also notice that the visibility channels for the nodes you selected are already connected. Using the Current LOD (2) drop down you can now switch between states. In case you want to switch states in deconstructed state without using the UI, simply look for the LOD Vis attribute created on the root guide. For the constructed state- the default attribute host will be the world control. In case you want to change the host in constructed state, simply open the UI again, and input the host into the LOD Attribute Host (3) box. Once you re-construct, the LOD Vis attribute will be created on your selected host. You can edit/change this data at any time.","title":"Workflow"},{"location":"userGuides/LODs-Tool/#legend","text":"LODs Tool- UI Rig - Selected Rig indication. Current LOD - Switch between existing LODs using the UI. LODs Attribute Host - Input the constructed state attribute host for the LOD switch. LOD Naming Style - Select your prefered naming style. Alphabetical will result in lodA, lodB, lodC... style naming. Numeric will result in lod1, lod2, lod3... naming style. LODs Defenition - This is where the LOD groups data is displayed and editted. Edit your LOD groups using the righ-click menu (8-11). Add LOD - Add LOD group, increasing the amount of LOD groups. Delete Last LOD - Remove the last LOD group, decreasing the amount of LOD groups. Set Selected Items - For the selected LOD group (column), set the selected scene nodes as the group's content. This will replace any existing members of the group. Add Selected Items - For the selected LOD group (column), add the selected scene nodes as the group's content. Existing members of the group will be kept. Remove Selected Items - For the selected LOD group (column), remove any UI selected members from the group. Clear ALL - Clear ALL Data. All LOD groups and members will be removed. Apply Changes - Once you are happy with your data, apply (write) it into the rig.","title":"Legend"},{"location":"userGuides/License-Management/","text":"Video Overview In this video, I want to explain how to use Mansur-Rig's enterprise-level license manager. We will go through the recently upgraded web app and all actions within it, which you can use to manage your Mansur-Rig licenses. I'm sure you are already aware that Mansur-Rig's toolset and rigs require an active subscription to function properly. Whether you are working alone, within a team, or managing a team, our web app is got you covered. https://app.mansur-rig.com/ Covered subjects in this video: Starting a free trial Aquiring a new license License types Assigning a license Retreiving a license Remote Log-Out","title":"License Management"},{"location":"userGuides/License-Management/#video-overview","text":"In this video, I want to explain how to use Mansur-Rig's enterprise-level license manager. We will go through the recently upgraded web app and all actions within it, which you can use to manage your Mansur-Rig licenses. I'm sure you are already aware that Mansur-Rig's toolset and rigs require an active subscription to function properly. Whether you are working alone, within a team, or managing a team, our web app is got you covered. https://app.mansur-rig.com/","title":"Video Overview"},{"location":"userGuides/License-Management/#covered-subjects-in-this-video","text":"Starting a free trial Aquiring a new license License types Assigning a license Retreiving a license Remote Log-Out","title":"Covered subjects in this video:"},{"location":"userGuides/Log-In/","text":"In order for Mansur-Rig toolset to work properly, you must be logged in using an account connected to an active subscription. In case you haven't already, please visit Mansur-Rig.com to create an account and subscribe to a plan of your choosing. Once you have an account and an active subscription, you will be able to successfully log-in and activate the product. To do so, please open My-Account dialog via Mansur-Rig's main menu: How to use My-Account Via Mansur main menu, click the My-Account item to open the dialog. Use the same credentials you used to open your account to fill-in the form. Optianally, fill in a Machine-Name. This field is for your convenience in case you have a multi-seat subscription, and you want to easily identify active machines. Click the Log-In button. If the credentials are valid, a clear indication will be showen and the dialog will switch to an Active state. Once the account is active, the entire toolset will be active. Enjoy! Auto-log-in Once you entered your credentials and successfully activated the product, your credentials will be saved and the product will be activated automatically when you restart Maya. If that isn't your preference, feel free to disable this behavior using Mansur-Rig's Preferences dialog. Using a multi-seat subscription In case you have a multi-seat subscription, a few more features will be of your interest. Logging in with multiple machines at the same time You are will be able to log-in with multiple machines at the same time. The ammount of seats that are available within your subscription will be listed under your profile within the website. You can also see some of your license details via My-Account dialog, under License-Details dropdown menu Managing Users In case you have multiple machines, your credentials can be used in two ways: As an Admin (Account Owner) As a User , which was given user credentials. In case you own a multi-seat subscription, you might be interested in allowing multiple users, who are not yourself, to use your subscription (a member of your team most-likely). In case you don't want to give your full credentials which can be used to do actions within your account, you can alternatively use the User Password field of your account. This field can be edited via Mansur-Rig's website, in My-Profile section. Now, the user you want to give access to your account can log-in as a User , which will give him \"read-only\" access to your account. You, as an Admin are able to control access to your account, and even force log-out any user using the Manage-Users section in My-Account dialog: Logging in with different machines In case you have a single seat subscription and wish to use it on different machines (i.e Home, Office), you are welcome to do so. If in any case you did not log-out a machine, and want to use a second one, you can always log-out machines as an Admin remotely in order to release the seat using Manage-Users section in My-Account dialog.","title":"Log In"},{"location":"userGuides/Log-In/#how-to-use-my-account","text":"Via Mansur main menu, click the My-Account item to open the dialog. Use the same credentials you used to open your account to fill-in the form. Optianally, fill in a Machine-Name. This field is for your convenience in case you have a multi-seat subscription, and you want to easily identify active machines. Click the Log-In button. If the credentials are valid, a clear indication will be showen and the dialog will switch to an Active state. Once the account is active, the entire toolset will be active. Enjoy! Auto-log-in Once you entered your credentials and successfully activated the product, your credentials will be saved and the product will be activated automatically when you restart Maya. If that isn't your preference, feel free to disable this behavior using Mansur-Rig's Preferences dialog.","title":"How to use My-Account"},{"location":"userGuides/Log-In/#using-a-multi-seat-subscription","text":"In case you have a multi-seat subscription, a few more features will be of your interest.","title":"Using a multi-seat subscription"},{"location":"userGuides/Log-In/#logging-in-with-multiple-machines-at-the-same-time","text":"You are will be able to log-in with multiple machines at the same time. The ammount of seats that are available within your subscription will be listed under your profile within the website. You can also see some of your license details via My-Account dialog, under License-Details dropdown menu","title":"Logging in with multiple machines at the same time"},{"location":"userGuides/Log-In/#managing-users","text":"In case you have multiple machines, your credentials can be used in two ways: As an Admin (Account Owner) As a User , which was given user credentials. In case you own a multi-seat subscription, you might be interested in allowing multiple users, who are not yourself, to use your subscription (a member of your team most-likely). In case you don't want to give your full credentials which can be used to do actions within your account, you can alternatively use the User Password field of your account. This field can be edited via Mansur-Rig's website, in My-Profile section. Now, the user you want to give access to your account can log-in as a User , which will give him \"read-only\" access to your account. You, as an Admin are able to control access to your account, and even force log-out any user using the Manage-Users section in My-Account dialog:","title":"Managing Users"},{"location":"userGuides/Log-In/#logging-in-with-different-machines","text":"In case you have a single seat subscription and wish to use it on different machines (i.e Home, Office), you are welcome to do so. If in any case you did not log-out a machine, and want to use a second one, you can always log-out machines as an Admin remotely in order to release the seat using Manage-Users section in My-Account dialog.","title":"Logging in with different machines"},{"location":"userGuides/Mocap-And-Game-Tools/","text":"Mansur-Rig is equipped with a full toll-set to manage Mocap data as well as manipulate rigs to be game-engine ready. This guide will cover the entire tool-set, and some example use-scenarions/workflows. Block Builder- Mocap/Game tab Mocap Tab Legend Offset-Rig Section Guide Preset section - Mnausr-Rig is delivered with pre-existing guide presets for ease of use. Use the Import button to gather the guide prset of you choice. Create Offset Rig - A Block-Offset-Rig, is a joint skeleton, created from the base joint-structure, that can be used to control the puppet. In essence reversing the puppet structure. Instead of the puppet controling the skeleton, this new skeleton will control the puppet. The puppet will of course still control the base-skeleton which drives the deformations. This behaviour is used to import mocap data onto the offset skeleton, which drives the puppet. This in turn will allow you to bake the animation into the puppet-controls- for post-editting the animation/cleanup, mainaing the kinematics of the puppet. The joint-control relationship is set within Block's internal contruct process, so you don't need to define it, the offset skeleton will know how to connect to the puppet automatically. Note that the control isn't automatically transferred- use Authority To Skeleton (4). Offset Skeleton Example Delete Offset Rig - Delete the Offset-Rig, if it exists. Authority To Skeleton - Use this utilty to constrain the puppet controls to the offset-Skeleton. Make sure the puppet and offset-skeleton are in the same pose. Authority To Puppet - If the puppet controls are constrained to the offset skeleton, use this utility to release that connection, restorinng normal bahvaviour. Select Slave Controls - Select all controls that are set to be driven by the offset-rig connection. Bake Controls - Bake the slave controls, within the current animation range. If require further bakinng options, use Select Slave Controls (6) to select the slave controls, then use Maya's Bake-Animation utility. Utilities Section Rest Puppet - Reset all puppet controls. Rest Offset-Rig - Reset the offset-skeleton. Joint Rotate To Orient - Attempt to transfer all joint rotation values into the joint orient values, to \"zero out\" the rotation values. This action will be performed on the entire seleted heirarchy. Character Definition Section Character Definition - Load the Character-Definition Tool- which will allow you to charactraize your pupprts/skeletons into HumanIK, in order to retarget mocap data. Extract Skeleton Section Extract Skeleton - Use this utility to easily extract your puppet's skeleton, in order to export it. Once you extracted your skeleton, you will be able to delete Block's rig, leaving only the skeleton (with or without animation) and your geometry (with it's deformation). This will make exporting using any tool of your choosing fast and easy. Snap Extracted Skeleton To Base - Match extracted skeleton transformations to the base skeleton Pose Edit Section - Use these utilities to save\\load dagPoses onto your extracted skeleton. Character Definition Tool This tool was created to enhance mocap data retargeting to Block rigs. Using this tool, you can easily Characterize your puppets into Maya's Human-IK tool. The goal behind this tool is to speed up your motion-capture data import workflow. Not only Mansur-Rig is equipped with many mocap-data presents, it will also allow you to create custom presets easily and export them to re-use. Character Definition UI Legend Presets import/Export Presets dropdown - Choose a predefined naming preset to import. Target Column dropdown - Choose which column to import the preset to, or export from. Humak-IK column will be exported always along side the column selected. Import - Improt from the predifined preset selecter, into the selected column. Import From File - Improt from a custom preset file exported previously, into the selected column. Export - Export the select column, as well as it's related Human-IK defintion into a file. Use this preset later-on using the Import From File (4) utility. Display Settings Filter - Filter UI display to easily find the component you are after. Update Selection - When this checkbox is ON, the main scene selection will update based on the selected rows, in case any of the objects within it exists. When OFF, scene selection will not be changed. Reset UI - Clear the entire UI. Data Section Data Viewer - This is where all of the data is displayed. Data in this UI can be editted, not only viewed. In case you need to create a preset, you can always start with a similar preset and edit it to your needs to avoid creating it from scratch. Right-Click - Edit menu Double-Click - Free edit Column description Component Column - This culomn is the name of the component. This name is entirly up to you- it is simply an indetifier for the row. Block Skeleton Column - This column represent the Block joint related to this component row. Objects in this Column must be from Block's rig base skeleton- NOT the offset-skeleton. Target Skeleton Column - This column represets a joint from an external source (not block). The target skeleton may be a skeleton you wish to retarget data from, or retarget data to. This skeleton can be any skeleton. In case a preset doesn't exist for your target skeleton, you can always create a custom one yourself. Human-IK Column - This column represents the Human-IK slot this row is related to. Since Human-IK slots are pre-defined, this column can not be editted freely. Please use the right-click menu to access all Human-IK slots. Name-Sapces - In case your target/block contain a namespace, input it into the correct boxed. In case a namespace exists for a target/block skeleton and they are not inputed correctly, the objects won't be found and the characterazation process will fail. For ease, simply select one of your name-spaced objects and press the arrow button to the right of the box you want to input it to. Match Section In case you have a skeleton you wish to animate (Metahuman for example), and you need a puppet for it, you can use this section. Match Block Guides To Target - Match the Block guides position to the target skeleton. Simply input all of the data into the UI, using presets/edit, while your Block-skeleton column is set to an existing Block-Rig (in deconstructed state), and match the guides' position to the target skeleton you want to animate. Once again, The Block column input should contain base skeleton objects. When using this utility, the system will find the correct guides automatically. Then, you can construct your rig to aquire a fully functioning puppet. Then simply use Connect Target Skeleton (12) to connect your target skeleton to the base skeleton. Now you have a fully functional animation puppet you can animate your skeleton with. Connect Target Skeleton - Connect a Block puppet to the target skeleton in order to animate. Disconnect Target Skeleton - Break the connection between Blok puppet and the target skeleton (if exists). When you finish animating, you can simply bake your target skeleton animation, disconnect the connection to Block's puppet. Human-IK section Humak-IK UI - Open Maya's Human-IK tool. Characterize - Create a Human-IK character definition based on the current data. You can do this for both Block skeleton and the target skeleton. This process will create a new character definition in Human-IK, and attempt the connect all objects to their related slot within that character definition.","title":"Mocap And Game Tools"},{"location":"userGuides/Mocap-And-Game-Tools/#block-builder-mocapgame-tab","text":"Mocap Tab Legend","title":"Block Builder- Mocap/Game tab"},{"location":"userGuides/Mocap-And-Game-Tools/#offset-rig-section","text":"Guide Preset section - Mnausr-Rig is delivered with pre-existing guide presets for ease of use. Use the Import button to gather the guide prset of you choice. Create Offset Rig - A Block-Offset-Rig, is a joint skeleton, created from the base joint-structure, that can be used to control the puppet. In essence reversing the puppet structure. Instead of the puppet controling the skeleton, this new skeleton will control the puppet. The puppet will of course still control the base-skeleton which drives the deformations. This behaviour is used to import mocap data onto the offset skeleton, which drives the puppet. This in turn will allow you to bake the animation into the puppet-controls- for post-editting the animation/cleanup, mainaing the kinematics of the puppet. The joint-control relationship is set within Block's internal contruct process, so you don't need to define it, the offset skeleton will know how to connect to the puppet automatically. Note that the control isn't automatically transferred- use Authority To Skeleton (4). Offset Skeleton Example Delete Offset Rig - Delete the Offset-Rig, if it exists. Authority To Skeleton - Use this utilty to constrain the puppet controls to the offset-Skeleton. Make sure the puppet and offset-skeleton are in the same pose. Authority To Puppet - If the puppet controls are constrained to the offset skeleton, use this utility to release that connection, restorinng normal bahvaviour. Select Slave Controls - Select all controls that are set to be driven by the offset-rig connection. Bake Controls - Bake the slave controls, within the current animation range. If require further bakinng options, use Select Slave Controls (6) to select the slave controls, then use Maya's Bake-Animation utility.","title":"Offset-Rig Section"},{"location":"userGuides/Mocap-And-Game-Tools/#utilities-section","text":"Rest Puppet - Reset all puppet controls. Rest Offset-Rig - Reset the offset-skeleton. Joint Rotate To Orient - Attempt to transfer all joint rotation values into the joint orient values, to \"zero out\" the rotation values. This action will be performed on the entire seleted heirarchy.","title":"Utilities Section"},{"location":"userGuides/Mocap-And-Game-Tools/#character-definition-section","text":"Character Definition - Load the Character-Definition Tool- which will allow you to charactraize your pupprts/skeletons into HumanIK, in order to retarget mocap data.","title":"Character Definition Section"},{"location":"userGuides/Mocap-And-Game-Tools/#extract-skeleton-section","text":"Extract Skeleton - Use this utility to easily extract your puppet's skeleton, in order to export it. Once you extracted your skeleton, you will be able to delete Block's rig, leaving only the skeleton (with or without animation) and your geometry (with it's deformation). This will make exporting using any tool of your choosing fast and easy. Snap Extracted Skeleton To Base - Match extracted skeleton transformations to the base skeleton Pose Edit Section - Use these utilities to save\\load dagPoses onto your extracted skeleton.","title":"Extract Skeleton Section"},{"location":"userGuides/Mocap-And-Game-Tools/#character-definition-tool","text":"This tool was created to enhance mocap data retargeting to Block rigs. Using this tool, you can easily Characterize your puppets into Maya's Human-IK tool. The goal behind this tool is to speed up your motion-capture data import workflow. Not only Mansur-Rig is equipped with many mocap-data presents, it will also allow you to create custom presets easily and export them to re-use. Character Definition UI Legend","title":"Character Definition Tool"},{"location":"userGuides/Mocap-And-Game-Tools/#presets-importexport","text":"Presets dropdown - Choose a predefined naming preset to import. Target Column dropdown - Choose which column to import the preset to, or export from. Humak-IK column will be exported always along side the column selected. Import - Improt from the predifined preset selecter, into the selected column. Import From File - Improt from a custom preset file exported previously, into the selected column. Export - Export the select column, as well as it's related Human-IK defintion into a file. Use this preset later-on using the Import From File (4) utility.","title":"Presets import/Export"},{"location":"userGuides/Mocap-And-Game-Tools/#display-settings","text":"Filter - Filter UI display to easily find the component you are after. Update Selection - When this checkbox is ON, the main scene selection will update based on the selected rows, in case any of the objects within it exists. When OFF, scene selection will not be changed. Reset UI - Clear the entire UI.","title":"Display Settings"},{"location":"userGuides/Mocap-And-Game-Tools/#data-section","text":"Data Viewer - This is where all of the data is displayed. Data in this UI can be editted, not only viewed. In case you need to create a preset, you can always start with a similar preset and edit it to your needs to avoid creating it from scratch. Right-Click - Edit menu Double-Click - Free edit Column description Component Column - This culomn is the name of the component. This name is entirly up to you- it is simply an indetifier for the row. Block Skeleton Column - This column represent the Block joint related to this component row. Objects in this Column must be from Block's rig base skeleton- NOT the offset-skeleton. Target Skeleton Column - This column represets a joint from an external source (not block). The target skeleton may be a skeleton you wish to retarget data from, or retarget data to. This skeleton can be any skeleton. In case a preset doesn't exist for your target skeleton, you can always create a custom one yourself. Human-IK Column - This column represents the Human-IK slot this row is related to. Since Human-IK slots are pre-defined, this column can not be editted freely. Please use the right-click menu to access all Human-IK slots. Name-Sapces - In case your target/block contain a namespace, input it into the correct boxed. In case a namespace exists for a target/block skeleton and they are not inputed correctly, the objects won't be found and the characterazation process will fail. For ease, simply select one of your name-spaced objects and press the arrow button to the right of the box you want to input it to.","title":"Data Section"},{"location":"userGuides/Mocap-And-Game-Tools/#match-section","text":"In case you have a skeleton you wish to animate (Metahuman for example), and you need a puppet for it, you can use this section. Match Block Guides To Target - Match the Block guides position to the target skeleton. Simply input all of the data into the UI, using presets/edit, while your Block-skeleton column is set to an existing Block-Rig (in deconstructed state), and match the guides' position to the target skeleton you want to animate. Once again, The Block column input should contain base skeleton objects. When using this utility, the system will find the correct guides automatically. Then, you can construct your rig to aquire a fully functioning puppet. Then simply use Connect Target Skeleton (12) to connect your target skeleton to the base skeleton. Now you have a fully functional animation puppet you can animate your skeleton with. Connect Target Skeleton - Connect a Block puppet to the target skeleton in order to animate. Disconnect Target Skeleton - Break the connection between Blok puppet and the target skeleton (if exists). When you finish animating, you can simply bake your target skeleton animation, disconnect the connection to Block's puppet.","title":"Match Section"},{"location":"userGuides/Mocap-And-Game-Tools/#human-ik-section","text":"Humak-IK UI - Open Maya's Human-IK tool. Characterize - Create a Human-IK character definition based on the current data. You can do this for both Block skeleton and the target skeleton. This process will create a new character definition in Human-IK, and attempt the connect all objects to their related slot within that character definition.","title":"Human-IK section"},{"location":"userGuides/Module-Preset-Editor/","text":"User-Guide This tool was designed to manage module presets. As Mansur-Rig modules comatin many attrbiutes, it is sometimes more convenient to use a predefined preset to speed up the wrokflow. Mansur-Rig includes some module presets, although this was designed mainly to allow usesrs to create their own presets, essentially saving the module settings' state in order to re-use later. Important Module preset actions are only relevant to the Module Settings tab within the module settings window. All common attributes (first tab) will be ignored. UI Access this Tool via the \"Preset Editor\" button within any module settings window. Tool Load Button Module Preset Editor Dialog Preferences setup In case you want to use custom-presets, it is recomended to setup a local folder which you want to save your presets in, and add the path to Mansur-Rig's module preset paths variable. At deafult, the tool will list presets within the UI only out of Mansur-Rig predefined preset folder <$MNS_INSTALL_PATH>/scripts/mansur/block/modulePresetEditor/mnsModulePresets Since the system has no way of knowing where to find additional custom presets, you need to tell the system where to look. The process is very easy: Open Block Builder from Mansur's main menu. Move to Utility tab. Open the Module Presets Paths dropdown menu. Press the Add Path (+) button Navigate to the custom directory you want to add and click Select-Folder The directory will be added to the main preset directories list. Click Apply . The path you selected is now added into Mansur-Rig's preferences as a variable, and once you reload Module Presets Editor , presets you saved within this folder will be listed in the UI. You will not need to repeat this step when restarting Block, nor when restarting Maya, this prefernce will be saved locally within Mansur-Rig's preferences folder. You can add as many paths as you require. Also, you can always go back to this dropdown menu to edit your custom preset paths. Custom Presets Paths UI Export Workflow Edit your module settings to best represent your preset. Open the module preset editor. Click Export . Input required information in the prompted dialog (Author, Preset Description). Press Export in the dialog. Chose the file name and the location where you ant to save it. Your new preset is now saved and ready to be re-used. Import Workflow Open any module's settings. Open the module preset editor. It is recommended to follow Preferences Setup guide above to load custom presets folders information into the UI. Select the preset you want to use. Click Load button. The settings window will now consist of all data saved in your selected preset. To finalize, click Update Settings in the module settings window to apply your changes. Alternatively, if your preset isn't found in the UI, you can manually load it from file using the Import button. Legend Module Preset Editor Legend Available Presets - All available presets, within all Module Presets Paths. Only relevant module preset types will be displayed. Meaning that if you loaded the preset editor from an FKChain type module settings window, only presets saved for FKChain type module will be displayed. Preset Author and Description - Information about the current selected module preset. Load - Update the module settings window with the currently selected preset. Import - Import module preset from a file. Export - Export the current module settings values into a module preset file. Close - Close Dialog.","title":"Module Preset Editor"},{"location":"userGuides/Module-Preset-Editor/#user-guide","text":"This tool was designed to manage module presets. As Mansur-Rig modules comatin many attrbiutes, it is sometimes more convenient to use a predefined preset to speed up the wrokflow. Mansur-Rig includes some module presets, although this was designed mainly to allow usesrs to create their own presets, essentially saving the module settings' state in order to re-use later. Important Module preset actions are only relevant to the Module Settings tab within the module settings window. All common attributes (first tab) will be ignored.","title":"User-Guide"},{"location":"userGuides/Module-Preset-Editor/#ui","text":"Access this Tool via the \"Preset Editor\" button within any module settings window. Tool Load Button Module Preset Editor Dialog","title":"UI"},{"location":"userGuides/Module-Preset-Editor/#preferences-setup","text":"In case you want to use custom-presets, it is recomended to setup a local folder which you want to save your presets in, and add the path to Mansur-Rig's module preset paths variable. At deafult, the tool will list presets within the UI only out of Mansur-Rig predefined preset folder <$MNS_INSTALL_PATH>/scripts/mansur/block/modulePresetEditor/mnsModulePresets Since the system has no way of knowing where to find additional custom presets, you need to tell the system where to look. The process is very easy: Open Block Builder from Mansur's main menu. Move to Utility tab. Open the Module Presets Paths dropdown menu. Press the Add Path (+) button Navigate to the custom directory you want to add and click Select-Folder The directory will be added to the main preset directories list. Click Apply . The path you selected is now added into Mansur-Rig's preferences as a variable, and once you reload Module Presets Editor , presets you saved within this folder will be listed in the UI. You will not need to repeat this step when restarting Block, nor when restarting Maya, this prefernce will be saved locally within Mansur-Rig's preferences folder. You can add as many paths as you require. Also, you can always go back to this dropdown menu to edit your custom preset paths. Custom Presets Paths UI","title":"Preferences setup"},{"location":"userGuides/Module-Preset-Editor/#export-workflow","text":"Edit your module settings to best represent your preset. Open the module preset editor. Click Export . Input required information in the prompted dialog (Author, Preset Description). Press Export in the dialog. Chose the file name and the location where you ant to save it. Your new preset is now saved and ready to be re-used.","title":"Export Workflow"},{"location":"userGuides/Module-Preset-Editor/#import-workflow","text":"Open any module's settings. Open the module preset editor. It is recommended to follow Preferences Setup guide above to load custom presets folders information into the UI. Select the preset you want to use. Click Load button. The settings window will now consist of all data saved in your selected preset. To finalize, click Update Settings in the module settings window to apply your changes. Alternatively, if your preset isn't found in the UI, you can manually load it from file using the Import button.","title":"Import Workflow"},{"location":"userGuides/Module-Preset-Editor/#legend","text":"Module Preset Editor Legend Available Presets - All available presets, within all Module Presets Paths. Only relevant module preset types will be displayed. Meaning that if you loaded the preset editor from an FKChain type module settings window, only presets saved for FKChain type module will be displayed. Preset Author and Description - Information about the current selected module preset. Load - Update the module settings window with the currently selected preset. Import - Import module preset from a file. Export - Export the current module settings values into a module preset file. Close - Close Dialog.","title":"Legend"},{"location":"userGuides/Naming-Convention/","text":"Mansur-Rig is following strict naming convention rules. These rules are followed throught the toolset and in most cases the provided tools will handle the names so you won't have to. The naming convention format is as follows (components seperated by an underscore): Component Valid Examples Comments Constructed Name Side c, l, r Lower case. Only the three listed components are valid. l_ ... Body arm, spine, frontHair, indexFinger ANY camel-cased name is valid. l_arm_ ... Alpha ID A, F, KB, DAC, G All upper case, base 26, up to 3 letters. l_arm_A ... Component ID 001, 039, 014, 005, 147 Integer index, represneted in 3 numbers. This component isn't seperated l_arm_A001 ... Suffix ctrl, grp, plg, blkRig This suffix represents the type of object. l_arm_A001_ctrl","title":"Naming Convention"},{"location":"userGuides/Scripted-Builds/","text":"If you need to operate on Block rigs externaly, use this article to guide you through the few simple Python commands in order to do so. In some cases, you may need to operate on Block rigs extarnaly, without using Block UI. Use the simple steps described below to operate on any rig using python commands. Mansur-Rig Python Libraries In order to use Mansur-Rig's external commands, you'll first need to import the Python module containing the methods. Python module import from mansur.block.core import blockUtility as blkUtils This simple import command will import Mansur-Rig's Block-Utility library, which contains the methods you'll require. Global methods Use these methods to operate on Block Rig's or specific components within it: gatherMnsRigObject() - Use this command to gather a MnsRig class object to operate on. collectPartialModules() - Most of Block's main methods can operate on an entire rig, as well as module branches, and indevidual modules. In order to utelize this ability, use this method to collect the modules you want to operate on. This method will collect module root objects based on the input data. In case fromNodes argument is Null, this method will return data based on the current scene selection. fromNodes is a list argument. In case any input is passed, this method will attempt to aquire the modules to construct based on the mode selected. You can pass in any Block-Node names into this method. mode 0 = ALL mode 1 = Branch mode 2 = Module constructRig(fromNodes = [], mode = 0) - Use this simple command to construct a rig using a Python command. deconstructRig(fromNodes = [], mode = 0) - Use this simple command to deconstruct a rig using a Python command. Examples Constructing a Rig from selection # Library import from mansur.block.core import blockUtility as blkUtils #construct command with default arguments- selection based(fromNodes = Null, mode = 0) blkUtils . constructRig () Constructing a Specific Rig based on a Rig-Top node name # Library import from mansur.block.core import blockUtility as blkUtils #construct command with input fromNodes argument, with default construction mode = 0 blkUtils . constructRig ( \"c_maleDummy_A001_blkRig\" ) Constructing a Specific Rig based on a Rig-Top node name, in branch mode # Library import from mansur.block.core import blockUtility as blkUtils #construct command with input fromNodes argument, with branch construction mode = 1 blkUtils . constructRig ( \"c_maleDummy_A001_blkRig\" , 1 ) Constructing a single component of a rig # Library import from mansur.block.core import blockUtility as blkUtils #construct command with input fromNodes argument, with module construction mode = 2 blkUtils . constructRig ( \"l_arm_A001_rCtrl\" , 2 ) Deconstructing a Rig from selection # Library import from mansur.block.core import blockUtility as blkUtils #construct command with default arguments- selection based(fromNodes = Null, mode = 0) blkUtils . deconstructRig () Altering Module settings via the API Some settings require an action post change (like joint structure members), so changing the attributes only isn't sufficiant, you need to run an update command. The update command has a few requirements - settings update need to come in a dictionary format, passed in with a double asterisk (**) keyword arguments. The settings must contain a \"settingsHolder\" definition, which is the root guide, a \"rigTop\" which is the rig top node, and \"originalArguments\" dictionary that define the settings format, in order to update the module correctly. Some settings have very specific data format (like channel control) and you'll need to be very accurate when changing settings of this type. Altering Module settings via the API # Libraries import from mansur.block import blockBuildUI from mansur.core import utility as mnsUtils blockWin = blockBuildUI . MnsBlockBuildUI () #defining mandatory variables for the update settings command rigTop = mnsUtils . validateNameStd ( \"c_blkChar_A001_blkRig\" ) rootGuide = mnsUtils . validateNameStd ( \"c_FKChain_A001_rCtrl\" ) origArgs , split = blockWin . getModuleSettings ( rootGuide ) #creating the settings dictionary settings = { \"settingsHolder\" : rootGuide , #mandatory \"origArgs\" : origArgs , #mandatory \"rigTop\" : rigTop , #mandatory \"doInterpolationJoints\" : True , #exmaple change \"interpolationJoints\" : 10 } #example change #running the update command blockWin . updateSettings ( ** settings ) In this example, I created an FK chain module with all default settings. Now I want to update the settings and change \"doInterpJoints\" and the number of interpJoints. I passed all required data, and then the settings I want to change. Once you run this code, you'll see that not only the attributes have changed, the joint structure is being rebuilt correctly as these are jointStruct members attributes.","title":"Scripted Builds"},{"location":"userGuides/Scripted-Builds/#mansur-rig-python-libraries","text":"In order to use Mansur-Rig's external commands, you'll first need to import the Python module containing the methods. Python module import from mansur.block.core import blockUtility as blkUtils This simple import command will import Mansur-Rig's Block-Utility library, which contains the methods you'll require.","title":"Mansur-Rig Python Libraries"},{"location":"userGuides/Scripted-Builds/#global-methods","text":"Use these methods to operate on Block Rig's or specific components within it: gatherMnsRigObject() - Use this command to gather a MnsRig class object to operate on. collectPartialModules() - Most of Block's main methods can operate on an entire rig, as well as module branches, and indevidual modules. In order to utelize this ability, use this method to collect the modules you want to operate on. This method will collect module root objects based on the input data. In case fromNodes argument is Null, this method will return data based on the current scene selection. fromNodes is a list argument. In case any input is passed, this method will attempt to aquire the modules to construct based on the mode selected. You can pass in any Block-Node names into this method. mode 0 = ALL mode 1 = Branch mode 2 = Module constructRig(fromNodes = [], mode = 0) - Use this simple command to construct a rig using a Python command. deconstructRig(fromNodes = [], mode = 0) - Use this simple command to deconstruct a rig using a Python command.","title":"Global methods"},{"location":"userGuides/Scripted-Builds/#examples","text":"Constructing a Rig from selection # Library import from mansur.block.core import blockUtility as blkUtils #construct command with default arguments- selection based(fromNodes = Null, mode = 0) blkUtils . constructRig () Constructing a Specific Rig based on a Rig-Top node name # Library import from mansur.block.core import blockUtility as blkUtils #construct command with input fromNodes argument, with default construction mode = 0 blkUtils . constructRig ( \"c_maleDummy_A001_blkRig\" ) Constructing a Specific Rig based on a Rig-Top node name, in branch mode # Library import from mansur.block.core import blockUtility as blkUtils #construct command with input fromNodes argument, with branch construction mode = 1 blkUtils . constructRig ( \"c_maleDummy_A001_blkRig\" , 1 ) Constructing a single component of a rig # Library import from mansur.block.core import blockUtility as blkUtils #construct command with input fromNodes argument, with module construction mode = 2 blkUtils . constructRig ( \"l_arm_A001_rCtrl\" , 2 ) Deconstructing a Rig from selection # Library import from mansur.block.core import blockUtility as blkUtils #construct command with default arguments- selection based(fromNodes = Null, mode = 0) blkUtils . deconstructRig ()","title":"Examples"},{"location":"userGuides/Scripted-Builds/#altering-module-settings-via-the-api","text":"Some settings require an action post change (like joint structure members), so changing the attributes only isn't sufficiant, you need to run an update command. The update command has a few requirements - settings update need to come in a dictionary format, passed in with a double asterisk (**) keyword arguments. The settings must contain a \"settingsHolder\" definition, which is the root guide, a \"rigTop\" which is the rig top node, and \"originalArguments\" dictionary that define the settings format, in order to update the module correctly. Some settings have very specific data format (like channel control) and you'll need to be very accurate when changing settings of this type. Altering Module settings via the API # Libraries import from mansur.block import blockBuildUI from mansur.core import utility as mnsUtils blockWin = blockBuildUI . MnsBlockBuildUI () #defining mandatory variables for the update settings command rigTop = mnsUtils . validateNameStd ( \"c_blkChar_A001_blkRig\" ) rootGuide = mnsUtils . validateNameStd ( \"c_FKChain_A001_rCtrl\" ) origArgs , split = blockWin . getModuleSettings ( rootGuide ) #creating the settings dictionary settings = { \"settingsHolder\" : rootGuide , #mandatory \"origArgs\" : origArgs , #mandatory \"rigTop\" : rigTop , #mandatory \"doInterpolationJoints\" : True , #exmaple change \"interpolationJoints\" : 10 } #example change #running the update command blockWin . updateSettings ( ** settings ) In this example, I created an FK chain module with all default settings. Now I want to update the settings and change \"doInterpJoints\" and the number of interpJoints. I passed all required data, and then the settings I want to change. Once you run this code, you'll see that not only the attributes have changed, the joint structure is being rebuilt correctly as these are jointStruct members attributes.","title":"Altering Module settings via the API"},{"location":"userGuides/Spaces-IK-FK-Tool/","text":"This simple animation tool was created to allow animators to space switch and IK->FK switch easily. This tool is selection based. Please select controls to enable relevant capabilities. For spaces, simply select the controls you want to act upon, choose your target spaces, and press \"switch\". This will switch the space, while maintaining the controls's transforms, using keys created automatically. For Limbs, simply select any control/s for the limbs that you wish to act upon, and press the relevant button- To-IK or To-FK. This will switch the limb/controls to the selected state. This tool also includes Auto-Key switches, as well as a sequence and bake modes. Spaces/IK-FK Tool Load Spaces/FK-IK Tool Menu Item How to use The spaces tool is quite standard, but if ever you get confused, here are a few guidelines. Spaces/FK-IK Tool Legend Auto-Key Button - When this button is checked, keys will be inserted automatically when performing actions. Bake Button - When this button is checked, the auto-key button is checked, and the sequence mode is selected, every frame within the frame range selected will be keyed- \"baking\" the switch for the selected frame-range, Current-Frame/Sequence Mode - In case the \"Current-Frame\" mode is selected, any action will be performed on the current frame selected. In case \"Sequence\" mode is selected, any action will be performed on the selected frame-range. Frame-Range Section - This section will determine the frame range to act upon, when \"Sequence\" is selected. Spaces/IK-FK Tabs - This tool has two modes- Spaces, and IK-FK. Choose the relevant tab based on the action you are interested in. Please read the two next bullets (6A & 6B) for additional information on both modes. Tool Modes: Spaces-Mode - This mode is for switching control spaces. In contrast of switching a space using the channel box, this tool will switch to the selected space while maintaining the control's transform. On Current-Frame Mode - The space of the control will be switched for the current frame, maintaining the control's transform. When \"Auto-Key\" button is checked, a key of the current frame will be inserted automatically. On Sequence Mode: On Non-Bake mode: - A key will be inserted for every frame the space-switch attribute in question has a key, within the selected range. The current tranform for the control/s in question will be maintained. On Bake mode: - A key will be inserted for every frame within the selected range. The current tranform for the control/s in question (at the relevant frame) will be maintained- \"Baking\" the switch. IK-FK-Mode - This mode is for switching IK-FK modes for limbs. In contrast of switching FK-IK modes for limbs using the channel box, this tool will switch to the selected kinematics while maintaining the limb controls' transforms. On Current-Frame Mode - The kinematic state of the limb will be switched for the current frame, maintaining the limb controls' transform. When \"Auto-Key\" button is checked, a key of the current frame will be inserted automatically. On Sequence Mode: On Non-Bake mode: - A key will be inserted for every frame the kinematic-switch attribute in question has a key, within the selected range. The current limb controls' in question will be maintained. On Bake mode: - A key will be inserted for every frame within the selected range. The current limb controls' in question (at the relevant frame) will be maintained- \"Baking\" the switch. Select Host: - Select the kinematic switch attribute control holder for the selected limb modules.","title":"Spaces IK FK Tool"},{"location":"userGuides/Spaces-IK-FK-Tool/#spacesik-fk-tool-load","text":"Spaces/FK-IK Tool Menu Item","title":"Spaces/IK-FK Tool Load"},{"location":"userGuides/Spaces-IK-FK-Tool/#how-to-use","text":"The spaces tool is quite standard, but if ever you get confused, here are a few guidelines. Spaces/FK-IK Tool Legend Auto-Key Button - When this button is checked, keys will be inserted automatically when performing actions. Bake Button - When this button is checked, the auto-key button is checked, and the sequence mode is selected, every frame within the frame range selected will be keyed- \"baking\" the switch for the selected frame-range, Current-Frame/Sequence Mode - In case the \"Current-Frame\" mode is selected, any action will be performed on the current frame selected. In case \"Sequence\" mode is selected, any action will be performed on the selected frame-range. Frame-Range Section - This section will determine the frame range to act upon, when \"Sequence\" is selected. Spaces/IK-FK Tabs - This tool has two modes- Spaces, and IK-FK. Choose the relevant tab based on the action you are interested in. Please read the two next bullets (6A & 6B) for additional information on both modes. Tool Modes: Spaces-Mode - This mode is for switching control spaces. In contrast of switching a space using the channel box, this tool will switch to the selected space while maintaining the control's transform. On Current-Frame Mode - The space of the control will be switched for the current frame, maintaining the control's transform. When \"Auto-Key\" button is checked, a key of the current frame will be inserted automatically. On Sequence Mode: On Non-Bake mode: - A key will be inserted for every frame the space-switch attribute in question has a key, within the selected range. The current tranform for the control/s in question will be maintained. On Bake mode: - A key will be inserted for every frame within the selected range. The current tranform for the control/s in question (at the relevant frame) will be maintained- \"Baking\" the switch. IK-FK-Mode - This mode is for switching IK-FK modes for limbs. In contrast of switching FK-IK modes for limbs using the channel box, this tool will switch to the selected kinematics while maintaining the limb controls' transforms. On Current-Frame Mode - The kinematic state of the limb will be switched for the current frame, maintaining the limb controls' transform. When \"Auto-Key\" button is checked, a key of the current frame will be inserted automatically. On Sequence Mode: On Non-Bake mode: - A key will be inserted for every frame the kinematic-switch attribute in question has a key, within the selected range. The current limb controls' in question will be maintained. On Bake mode: - A key will be inserted for every frame within the selected range. The current limb controls' in question (at the relevant frame) will be maintained- \"Baking\" the switch. Select Host: - Select the kinematic switch attribute control holder for the selected limb modules.","title":"How to use"},{"location":"userGuides/Spring-Tool/","text":"In Mansur-Rig, springs are extremely easy to create. Using this tool, you'll be able to control spring values comfortably while animating. This guide will cover the entire tool and how to use it. Spring Tool Load Spring Tool Menu Item How to use The spring tool is quite intuative, but if ever you get confused, here are a few guidelines. Spring Tool Legend Rig List - The tool is being initalized everytime you open it. When it is initialized, it first looks for any Block-Rigs that exist within the scene (referenced or not). The found rigs will be listed at the puppet combo box at the top of the UI. Spring Nodes List - Once a rig is selected from the list, a list of spring nodes associated with the selected rig will be displayed. You can select multiple items, the edit section will be updated according to the selection. In case you have multiple nodes selected, remember that edits within the UI will affect all selected nodes. Display - Use these view filters to display only the nodes you need. Auto-Symmetry - When this checkbox is selected, the tool will attempt to find a symmetrical spring node within the rig, and match all attribute changes to it as well, automatically. If a symmetrical node is found, it is painted light-green within the list above. Common Attributes - This edit section is the common attributes. These attributes exists for all spring node types. Any changes made will affect all selected nodes. Specific Attributes - This edit section is the updated based on the selected node(s) type(s). Based on the type(s) selected, an edit UI will be displayed. Any changes made will affect all selected nodes.","title":"Spring Tool"},{"location":"userGuides/Spring-Tool/#spring-tool-load","text":"Spring Tool Menu Item","title":"Spring Tool Load"},{"location":"userGuides/Spring-Tool/#how-to-use","text":"The spring tool is quite intuative, but if ever you get confused, here are a few guidelines. Spring Tool Legend Rig List - The tool is being initalized everytime you open it. When it is initialized, it first looks for any Block-Rigs that exist within the scene (referenced or not). The found rigs will be listed at the puppet combo box at the top of the UI. Spring Nodes List - Once a rig is selected from the list, a list of spring nodes associated with the selected rig will be displayed. You can select multiple items, the edit section will be updated according to the selection. In case you have multiple nodes selected, remember that edits within the UI will affect all selected nodes. Display - Use these view filters to display only the nodes you need. Auto-Symmetry - When this checkbox is selected, the tool will attempt to find a symmetrical spring node within the rig, and match all attribute changes to it as well, automatically. If a symmetrical node is found, it is painted light-green within the list above. Common Attributes - This edit section is the common attributes. These attributes exists for all spring node types. Any changes made will affect all selected nodes. Specific Attributes - This edit section is the updated based on the selected node(s) type(s). Based on the type(s) selected, an edit UI will be displayed. Any changes made will affect all selected nodes.","title":"How to use"},{"location":"userGuides/System-Requirements/","text":"Compatible Platforms Windows Linux (Tested on CentOS 7.9) Compatible Maya versions Maya 2018 Maya 2019 Maya 2020 Maya 2022 Maya 2023 Win Linux Win Linux Win Linux Win Linux Win Linux 2.0.0+ \u2726 \u2726 \u2726 \u2726 \u2726 \u2726 \u2726 \u2726 \u2726 \u2726 1.5.2- Windows - System requirements Microsoft Visual C++ Redistributable for Visual Studio 2015-2022 Important Microsoft Visual C++ Redistributable for Visual Studio 2015-2022 is a part of the native Maya installation. In most cases, no action is required to use Mansur-Rig in Maya. In some rare cases (incomplete Maya installation), if missing this component needs to be installed manually. Maya 2022 (and above) requirements Mansur-Rig requires a native Maya python module - PyMel . For an unknown reason, Maya 2022 (and above) installation has this module for Python 3 presented as an optional feature. Worse then that, it is un-checked by default: Maya 2022 installation dialog example In case you installed Maya 2022 (and above) without this checked, Mansur-Rig manu would not show up once you install it. To check whether you have this component installed, simply run 'import pymel.core' (without the qoutes) in a Python tab within Maya's script editor. if an error is logged, it means this reuqired component is NOT installed, and Mansur-Rig will not function. If this is the case for you, you have a few options available to resolve this issue: Install PyMel for Python 3 on an existing Maya installation using this guide . Re-installing Maya, making sure you tick the PyMel checkbox.","title":"System Requirements"},{"location":"userGuides/System-Requirements/#compatible-platforms","text":"Windows Linux (Tested on CentOS 7.9)","title":"Compatible Platforms"},{"location":"userGuides/System-Requirements/#compatible-maya-versions","text":"Maya 2018 Maya 2019 Maya 2020 Maya 2022 Maya 2023 Win Linux Win Linux Win Linux Win Linux Win Linux 2.0.0+ \u2726 \u2726 \u2726 \u2726 \u2726 \u2726 \u2726 \u2726 \u2726 \u2726 1.5.2-","title":"Compatible Maya versions"},{"location":"userGuides/System-Requirements/#windows-system-requirements","text":"Microsoft Visual C++ Redistributable for Visual Studio 2015-2022 Important Microsoft Visual C++ Redistributable for Visual Studio 2015-2022 is a part of the native Maya installation. In most cases, no action is required to use Mansur-Rig in Maya. In some rare cases (incomplete Maya installation), if missing this component needs to be installed manually.","title":"Windows - System requirements"},{"location":"userGuides/System-Requirements/#maya-2022-and-above-requirements","text":"Mansur-Rig requires a native Maya python module - PyMel . For an unknown reason, Maya 2022 (and above) installation has this module for Python 3 presented as an optional feature. Worse then that, it is un-checked by default: Maya 2022 installation dialog example In case you installed Maya 2022 (and above) without this checked, Mansur-Rig manu would not show up once you install it. To check whether you have this component installed, simply run 'import pymel.core' (without the qoutes) in a Python tab within Maya's script editor. if an error is logged, it means this reuqired component is NOT installed, and Mansur-Rig will not function. If this is the case for you, you have a few options available to resolve this issue: Install PyMel for Python 3 on an existing Maya installation using this guide . Re-installing Maya, making sure you tick the PyMel checkbox.","title":"Maya 2022 (and above) requirements"},{"location":"userGuides/The-Picker/","text":"User-Guide Example Picker - Body Tab Example Picker - Face Tab Example General Move between characters using to top combo box. When a character is first drawn into the picker, it may take a few seconds, but once it is drawn, you will be able to switch back to it intantly. Selected controls will be displayed with gray background, and a light-blue outline. Scene selection will automatically update the picker selection, and vice versa. Selection Picker - Selection Legend Keyboard Shortcuts Picker - Keyboard Shortcuts Legend Navigation Picker - Navigation Legend","title":"The Picker"},{"location":"userGuides/The-Picker/#user-guide","text":"","title":"User-Guide"},{"location":"userGuides/The-Picker/#example","text":"Picker - Body Tab Example Picker - Face Tab Example","title":"Example"},{"location":"userGuides/The-Picker/#general","text":"Move between characters using to top combo box. When a character is first drawn into the picker, it may take a few seconds, but once it is drawn, you will be able to switch back to it intantly. Selected controls will be displayed with gray background, and a light-blue outline. Scene selection will automatically update the picker selection, and vice versa.","title":"General"},{"location":"userGuides/The-Picker/#selection","text":"Picker - Selection Legend","title":"Selection"},{"location":"userGuides/The-Picker/#keyboard-shortcuts","text":"Picker - Keyboard Shortcuts Legend","title":"Keyboard Shortcuts"},{"location":"userGuides/The-Picker/#navigation","text":"Picker - Navigation Legend","title":"Navigation"},{"location":"userGuides/Version-Updates/","text":"For your ease of use, Mansur-Rig is equipped with a Version-Manager tool How to use the Version-Manager Via Mansur main menu, click the Version-Manager item to open the tool. Current Mansur-Rig version will be visibly marked with a green V icon. To upgrade/downgrade to a version, you will need to make sure the version is Install Available . In case it isn't, you can easily download it using the download button. Once a version is Install Available , simply select the version you wish to upgrade/downgrade to, and click Install . Once the installation is complete, a message will be displayed stating the process finished. Restart Maya Version-Update is complete. Manual-verison-updates In case you wish to manually change a version, please follow the Install Guide using any version of your choosing. Installing a new version of Mansur-Rig when any version is installed will result in an upgrade/downgrade to the newly installed version.","title":"Version Updates"},{"location":"userGuides/Version-Updates/#how-to-use-the-version-manager","text":"Via Mansur main menu, click the Version-Manager item to open the tool. Current Mansur-Rig version will be visibly marked with a green V icon. To upgrade/downgrade to a version, you will need to make sure the version is Install Available . In case it isn't, you can easily download it using the download button. Once a version is Install Available , simply select the version you wish to upgrade/downgrade to, and click Install . Once the installation is complete, a message will be displayed stating the process finished. Restart Maya Version-Update is complete. Manual-verison-updates In case you wish to manually change a version, please follow the Install Guide using any version of your choosing. Installing a new version of Mansur-Rig when any version is installed will result in an upgrade/downgrade to the newly installed version.","title":"How to use the Version-Manager"},{"location":"userGuides/Volume-Joints/","text":"User-Guide Create volume joints to refine and enhence you deformations. These joints are driven by 2 parent & child joints. Using the new UI, you can choose actions (translation/scale) to take for every angle direction between the 2 joint drivers. Example Volume-Joints- Example UI Access this UI via Mansur-Rig main Maya menu Menu Entry Legend Volume-Joints- UI Volume-Joint List - List of all Volume joints within the current scene. Use the Refresh(4) button to refresh. Create - Creation button. This will create a volume joint, based on the current scene selection. The selected object should be the \"child\" item- meaning, if you want to create a volume joint for a knee, select an object relating to the lower leg section. This will create a volume joint between the upper-leg, and lower leg. Valid selection object types are- Joints, Guides, Ctrls. In case a joint wasn't selected, the system will attemp to retreive the joint related to the selection. If the system did not find a related joint, nothing will be created. Important note : Volume joints have a \"Rest state\"- which is the base state or \"Zero\" state- where nothing is triggered- when creating a volume joint, the current state will be set as the rest state. In case you want to update the rest position, use the \"Set current as rest position\" button undeer the General tab when the requested volume-joint is selected. In case Auto-Symmetry(7) is selected, the system will attempt to create a symmetrical volume-joint (if relevant). The amount of Volume-Joints is unlimited . Delete - Delete the selected volume joint. In case Auto-Symmetry(7) is selected, the system will attempt to delete the symmetrical volume-joint (if one exists). Refresh - Refresh the UI. Rescan the current scene. Symmetrize - Attempt to create/update a symmetrical volume joint based on the selected colume joint. Symmetrize ALL - Attempt to create/update ALL volume joints in the scene. Auto-Symmetry - In case this is checked ON, all actions will attempt to symmetrize. That includes- Creation, Deletion, Symmetry, any value edit. This is recommended to be kept on. Current-State-Display - This section was design to minimize confusion when dealing with volume joints. Based on the UI-selected volume joint, this display will update based on the current state of the angle relationship between the two master (source) joints. When editting a volume joint's behaviour, it is very convenient to visually determine the current angle state the sources are in. Since the angles are based on the guide's original orientation, this changes between modules. For example, if you need to create a volume joint for an elbow, create it in rest-state, the \"bend\" the elbow- the display will indicate which direction the elbow bend is set to, so you can open the correct dropdown menu to edit the behaviour. Edit Section - This is where the behaviour for each volume joint is set. General Section- Rotation-Blend attribute, which will determine the orientation blend between the parent and the child joints for the selected volume joint. Set Current As Rest utility. Rest Section- Rest-Translation attributes All Angle Sections- Translation-Target attributes Scale-Target attributes Translation-Limit attributes Scale-Limit attributes Current Values display","title":"Volume Joints"},{"location":"userGuides/Volume-Joints/#user-guide","text":"Create volume joints to refine and enhence you deformations. These joints are driven by 2 parent & child joints. Using the new UI, you can choose actions (translation/scale) to take for every angle direction between the 2 joint drivers.","title":"User-Guide"},{"location":"userGuides/Volume-Joints/#example","text":"Volume-Joints- Example","title":"Example"},{"location":"userGuides/Volume-Joints/#ui","text":"Access this UI via Mansur-Rig main Maya menu Menu Entry","title":"UI"},{"location":"userGuides/Volume-Joints/#legend","text":"Volume-Joints- UI Volume-Joint List - List of all Volume joints within the current scene. Use the Refresh(4) button to refresh. Create - Creation button. This will create a volume joint, based on the current scene selection. The selected object should be the \"child\" item- meaning, if you want to create a volume joint for a knee, select an object relating to the lower leg section. This will create a volume joint between the upper-leg, and lower leg. Valid selection object types are- Joints, Guides, Ctrls. In case a joint wasn't selected, the system will attemp to retreive the joint related to the selection. If the system did not find a related joint, nothing will be created. Important note : Volume joints have a \"Rest state\"- which is the base state or \"Zero\" state- where nothing is triggered- when creating a volume joint, the current state will be set as the rest state. In case you want to update the rest position, use the \"Set current as rest position\" button undeer the General tab when the requested volume-joint is selected. In case Auto-Symmetry(7) is selected, the system will attempt to create a symmetrical volume-joint (if relevant). The amount of Volume-Joints is unlimited . Delete - Delete the selected volume joint. In case Auto-Symmetry(7) is selected, the system will attempt to delete the symmetrical volume-joint (if one exists). Refresh - Refresh the UI. Rescan the current scene. Symmetrize - Attempt to create/update a symmetrical volume joint based on the selected colume joint. Symmetrize ALL - Attempt to create/update ALL volume joints in the scene. Auto-Symmetry - In case this is checked ON, all actions will attempt to symmetrize. That includes- Creation, Deletion, Symmetry, any value edit. This is recommended to be kept on. Current-State-Display - This section was design to minimize confusion when dealing with volume joints. Based on the UI-selected volume joint, this display will update based on the current state of the angle relationship between the two master (source) joints. When editting a volume joint's behaviour, it is very convenient to visually determine the current angle state the sources are in. Since the angles are based on the guide's original orientation, this changes between modules. For example, if you need to create a volume joint for an elbow, create it in rest-state, the \"bend\" the elbow- the display will indicate which direction the elbow bend is set to, so you can open the correct dropdown menu to edit the behaviour. Edit Section - This is where the behaviour for each volume joint is set. General Section- Rotation-Blend attribute, which will determine the orientation blend between the parent and the child joints for the selected volume joint. Set Current As Rest utility. Rest Section- Rest-Translation attributes All Angle Sections- Translation-Target attributes Scale-Target attributes Translation-Limit attributes Scale-Limit attributes Current Values display","title":"Legend"},{"location":"userGuides/installation/","text":"Go to Mansur-Rig.com and create an account (if you haven't already). Log in to your account. Subscribe to any plan that fits you best Download the latest version of Mansur-Rig. Extract the .zip library to your preferred location. If you have another version already installed, preferably extract to the same location (version root folder should be placed in the same root folder of the previous version) .../ANY_DIRECTORY .../ANY_DIRECTORY/mansurRig_1.0.1 .../ANY_DIRECTORY/mansurRig_1.0.2 .../ANY_DIRECTORY/mansurRig_1.0.3 Go into the main version directory Drag and Drop the \"mansurRig_DragAndDrop_install.mel\" into any supported Maya version Follow the prompt instructions Restart Maya Updates Please make sure to update as appropriate. Version Updates Guide Manual Installation Download and extract Mansur-Rig as described above. For the target Maya version, locate \"Maya.env\" file. For example (On Windows): \"C:\\Users\\xxx\\Documents\\maya\\2022\\Maya.env\" Open the file for editting using any text editor software (e.g. Notepad) Insert the following variable, changing the directory to your Mansur-Rig extracted version location: MAYA_MODULE_PATH = D:\\mansurRig\\mansurRig_1.3.6 Uninstallation Locate any installation directory of Mansur-Rig in your file system Go into the main version (any version) directory Drag and Drop the \"mansurRig_DragAndDrop_UNINSTALL.mel\" into any supported Maya version Follow the prompt instructions Restart Maya Linux Notes As opposed to the Windows installer, the Linux version will install Mansur-Rig on the choosen maya version only. The Linux installer is using the local Maya.env file to append the new envioronment variable instead of installing a system-wide persistant variable, as the installer can not assume system write permissions. In case you want to install Mansur-Rig on multiple versions of Maya, please repeat the installation (drag-drop) on every required Maya version.","title":"Installation"},{"location":"userGuides/installation/#manual-installation","text":"Download and extract Mansur-Rig as described above. For the target Maya version, locate \"Maya.env\" file. For example (On Windows): \"C:\\Users\\xxx\\Documents\\maya\\2022\\Maya.env\" Open the file for editting using any text editor software (e.g. Notepad) Insert the following variable, changing the directory to your Mansur-Rig extracted version location: MAYA_MODULE_PATH = D:\\mansurRig\\mansurRig_1.3.6","title":"Manual Installation"},{"location":"userGuides/installation/#uninstallation","text":"Locate any installation directory of Mansur-Rig in your file system Go into the main version (any version) directory Drag and Drop the \"mansurRig_DragAndDrop_UNINSTALL.mel\" into any supported Maya version Follow the prompt instructions Restart Maya","title":"Uninstallation"},{"location":"userGuides/installation/#linux-notes","text":"As opposed to the Windows installer, the Linux version will install Mansur-Rig on the choosen maya version only. The Linux installer is using the local Maya.env file to append the new envioronment variable instead of installing a system-wide persistant variable, as the installer can not assume system write permissions. In case you want to install Mansur-Rig on multiple versions of Maya, please repeat the installation (drag-drop) on every required Maya version.","title":"Linux Notes"},{"location":"userGuides/license/","text":"End User License Agreement: Mansur-Rig's EULA Privacy-Policy: Mansur-Rig's Privacy-Policy","title":"License"},{"location":"userGuides/tutorials/Creating-A-Picker/","text":"Video Overview A picker can be the difference between a good rig, and a great one! In this video I want to show you how you can easily create a picker for your rigs, using Mansur-Rig. Covered subjects in this video: Picker Layout Picker Background Images Creating a related PLG Creating a Free-PLG Adjusting PLG Settings Body/Facial tabs Delivery Creating FK-IK Switch PLG Picker Images Naming Convention Picker-Body-Image: \"%image_name% _pickerBody.png \" Picker-Face-Image: \"%image_name% _pickerFace.png \" Picker-Thumbnail-Image: \"%image_name% _pickerThumbnail.png \" Delivery Folder Example","title":"Creating A Picker"},{"location":"userGuides/tutorials/Creating-A-Picker/#video-overview","text":"A picker can be the difference between a good rig, and a great one! In this video I want to show you how you can easily create a picker for your rigs, using Mansur-Rig.","title":"Video Overview"},{"location":"userGuides/tutorials/Creating-A-Picker/#covered-subjects-in-this-video","text":"Picker Layout Picker Background Images Creating a related PLG Creating a Free-PLG Adjusting PLG Settings Body/Facial tabs Delivery Creating FK-IK Switch PLG","title":"Covered subjects in this video:"},{"location":"userGuides/tutorials/Creating-A-Picker/#picker-images-naming-convention","text":"Picker-Body-Image: \"%image_name% _pickerBody.png \" Picker-Face-Image: \"%image_name% _pickerFace.png \" Picker-Thumbnail-Image: \"%image_name% _pickerThumbnail.png \" Delivery Folder Example","title":"Picker Images Naming Convention"},{"location":"userGuides/tutorials/Variable-FK-Tail/","text":"Video Overview In this Mansur-Rig speed-rigging tutorial, we are going to rig a tail with a Variable-FK setup, using the FKChain module in about 3 minutes. To make things even nicer we will add a spring behavior to the tail with only a few clicks. Covered subjects in this video: Rigging a Variable-FK-Tail from scratch","title":"Variable FK Tail"},{"location":"userGuides/tutorials/Variable-FK-Tail/#video-overview","text":"In this Mansur-Rig speed-rigging tutorial, we are going to rig a tail with a Variable-FK setup, using the FKChain module in about 3 minutes. To make things even nicer we will add a spring behavior to the tail with only a few clicks.","title":"Video Overview"},{"location":"userGuides/tutorials/Variable-FK-Tail/#covered-subjects-in-this-video","text":"Rigging a Variable-FK-Tail from scratch","title":"Covered subjects in this video:"},{"location":"userGuides/tutorials/mansurRig101/01_Introduction/","text":"Series Overview Welcome to Mansur-Rig 101 Tutorial Series! In this series i'm going to go over the basics of how to use Mansur-Rig to build your puppets. We are going to build a complete character from the ground up, so at the end of this series you will have a clear idea on how to use the product. Covered subjects in this video: Product overview Global Flow Covered subjects in this series: Product overview Global Flow Block UI Sections Rig Top Creation Rig Top Settings Custom Scripts Tab Module Creation Module Settings Window Guides Creation Rig Top Creation Rig Top Sub Groups Root Guide Root Joint Joint-guide relationship Selection Dependence Guide Parenting Module Creation Number of guides Attribute Tool tips and documentation of modules Module Layers FKChain Module - embedded IK layer Anim Tech control Attribute Host controls scale multiplier Limb Module Custom Guides Foot module Spaces/space switching Guide Creation Orientation Space splitting Meta Module Finger Splays Guides editting Utilities Duplicate Module duplicate Branch symmetrize branch Promote module Add/Remove Guides guide posing Control shapes Control shapes symmetry Control shapes extract controls grouping Controls default values Picker Basics Documentation page","title":"01 Introduction"},{"location":"userGuides/tutorials/mansurRig101/01_Introduction/#series-overview","text":"Welcome to Mansur-Rig 101 Tutorial Series! In this series i'm going to go over the basics of how to use Mansur-Rig to build your puppets. We are going to build a complete character from the ground up, so at the end of this series you will have a clear idea on how to use the product.","title":"Series Overview"},{"location":"userGuides/tutorials/mansurRig101/01_Introduction/#covered-subjects-in-this-video","text":"Product overview Global Flow","title":"Covered subjects in this video:"},{"location":"userGuides/tutorials/mansurRig101/01_Introduction/#covered-subjects-in-this-series","text":"Product overview Global Flow Block UI Sections Rig Top Creation Rig Top Settings Custom Scripts Tab Module Creation Module Settings Window Guides Creation Rig Top Creation Rig Top Sub Groups Root Guide Root Joint Joint-guide relationship Selection Dependence Guide Parenting Module Creation Number of guides Attribute Tool tips and documentation of modules Module Layers FKChain Module - embedded IK layer Anim Tech control Attribute Host controls scale multiplier Limb Module Custom Guides Foot module Spaces/space switching Guide Creation Orientation Space splitting Meta Module Finger Splays Guides editting Utilities Duplicate Module duplicate Branch symmetrize branch Promote module Add/Remove Guides guide posing Control shapes Control shapes symmetry Control shapes extract controls grouping Controls default values Picker Basics Documentation page","title":"Covered subjects in this series:"},{"location":"userGuides/tutorials/mansurRig101/02_The-Basics/","text":"Video Overview In this video, we are going to cover Block UI's basics, Rig-Creation Settings, Module settings, and some icon indications to keep an eye out for. Covered subjects in this video: Block UI Sections Rig Top Creation Rig Top Settings Custom Scripts Tab Module Creation Module Settings Window Guides Creation","title":"02 The Basics"},{"location":"userGuides/tutorials/mansurRig101/02_The-Basics/#video-overview","text":"In this video, we are going to cover Block UI's basics, Rig-Creation Settings, Module settings, and some icon indications to keep an eye out for.","title":"Video Overview"},{"location":"userGuides/tutorials/mansurRig101/02_The-Basics/#covered-subjects-in-this-video","text":"Block UI Sections Rig Top Creation Rig Top Settings Custom Scripts Tab Module Creation Module Settings Window Guides Creation","title":"Covered subjects in this video:"},{"location":"userGuides/tutorials/mansurRig101/03_Getting-Started/","text":"Video Overview We're finally going to get started with rigging our character. Covered subjects in this video: Rig Top Creation Rig Top Sub Groups Root Guide Root Joint Joint-guide relationship Selection Dependence Guide Parenting Module Creation Number of guides Attribute Tool tips and documentation of modules Module Layers FKChain Module - embedded IK layer Anim Tech control Attribute Host","title":"03 Getting Started"},{"location":"userGuides/tutorials/mansurRig101/03_Getting-Started/#video-overview","text":"We're finally going to get started with rigging our character.","title":"Video Overview"},{"location":"userGuides/tutorials/mansurRig101/03_Getting-Started/#covered-subjects-in-this-video","text":"Rig Top Creation Rig Top Sub Groups Root Guide Root Joint Joint-guide relationship Selection Dependence Guide Parenting Module Creation Number of guides Attribute Tool tips and documentation of modules Module Layers FKChain Module - embedded IK layer Anim Tech control Attribute Host","title":"Covered subjects in this video:"},{"location":"userGuides/tutorials/mansurRig101/04_Building-The-Leg-And-Foot/","text":"Video Overview In this video, we are going to build the leg & foot, and learn more about custom guides and space switching in Block. Covered subjects in this video: controls scale multiplier Limb Module Custom Guides Foot module Spaces/space switching","title":"04 Building The Leg And Foot"},{"location":"userGuides/tutorials/mansurRig101/04_Building-The-Leg-And-Foot/#video-overview","text":"In this video, we are going to build the leg & foot, and learn more about custom guides and space switching in Block.","title":"Video Overview"},{"location":"userGuides/tutorials/mansurRig101/04_Building-The-Leg-And-Foot/#covered-subjects-in-this-video","text":"controls scale multiplier Limb Module Custom Guides Foot module Spaces/space switching","title":"Covered subjects in this video:"},{"location":"userGuides/tutorials/mansurRig101/05_Building-The-Arm-And-Fingers/","text":"Video Overview In this video, we are going to set up the arm and fingers as well as learn about space splitting and a few more Block components. Covered subjects in this video: Guide Creation Orientation Space splitting Meta Module Finger Splays","title":"05 Building The Arm And Fingers"},{"location":"userGuides/tutorials/mansurRig101/05_Building-The-Arm-And-Fingers/#video-overview","text":"In this video, we are going to set up the arm and fingers as well as learn about space splitting and a few more Block components.","title":"Video Overview"},{"location":"userGuides/tutorials/mansurRig101/05_Building-The-Arm-And-Fingers/#covered-subjects-in-this-video","text":"Guide Creation Orientation Space splitting Meta Module Finger Splays","title":"Covered subjects in this video:"},{"location":"userGuides/tutorials/mansurRig101/06_Completing-The-Guides/","text":"Video Overview In this video, we are going to finalize our guides, learn about Block's guide editing utilities, and start deforming our geometry. Covered subjects in this video: Guides editting Utilities Duplicate Module duplicate Branch symmetrize branch Promote module Add/Remove Guides","title":"06 Completing The Guides"},{"location":"userGuides/tutorials/mansurRig101/06_Completing-The-Guides/#video-overview","text":"In this video, we are going to finalize our guides, learn about Block's guide editing utilities, and start deforming our geometry.","title":"Video Overview"},{"location":"userGuides/tutorials/mansurRig101/06_Completing-The-Guides/#covered-subjects-in-this-video","text":"Guides editting Utilities Duplicate Module duplicate Branch symmetrize branch Promote module Add/Remove Guides","title":"Covered subjects in this video:"},{"location":"userGuides/tutorials/mansurRig101/07_Puppet-Finish/","text":"Video Overview In this video, we are going to finish our puppet and finalize it for delivery. We are going to create a T-Pose for our guides, adjust the control shapes, and set our default values. Covered subjects in this video: guide posing Control shapes Control shapes symmetry Control shapes extract controls grouping Controls default values Picker Basics","title":"07 Puppet Finish"},{"location":"userGuides/tutorials/mansurRig101/07_Puppet-Finish/#video-overview","text":"In this video, we are going to finish our puppet and finalize it for delivery. We are going to create a T-Pose for our guides, adjust the control shapes, and set our default values.","title":"Video Overview"},{"location":"userGuides/tutorials/mansurRig101/07_Puppet-Finish/#covered-subjects-in-this-video","text":"guide posing Control shapes Control shapes symmetry Control shapes extract controls grouping Controls default values Picker Basics","title":"Covered subjects in this video:"},{"location":"userGuides/tutorials/mansurRig101/08_Conclusion/","text":"Video Overview Thanks for watching the series! Any questions and feedback are most welcome in the comments!","title":"08 Conclusion"},{"location":"userGuides/tutorials/mansurRig101/08_Conclusion/#video-overview","text":"Thanks for watching the series! Any questions and feedback are most welcome in the comments!","title":"Video Overview"},{"location":"userGuides/tutorials/mansurRig_FacialRigging/01_Intro/","text":"Video Overview Welcome to Mansur-Rig's Facial Rigging Tutorial Series! Learn how to build facial rigs using Mansur-Rig easily and efficiently! Covered subjects in this video: Intro Credits Series Overview Material and Support","title":"01 Intro"},{"location":"userGuides/tutorials/mansurRig_FacialRigging/01_Intro/#video-overview","text":"Welcome to Mansur-Rig's Facial Rigging Tutorial Series! Learn how to build facial rigs using Mansur-Rig easily and efficiently!","title":"Video Overview"},{"location":"userGuides/tutorials/mansurRig_FacialRigging/01_Intro/#covered-subjects-in-this-video","text":"Intro Credits Series Overview Material and Support","title":"Covered subjects in this video:"},{"location":"userGuides/tutorials/mansurRig_FacialRigging/02_Rigging-The-Eyes/","text":"Video Overview In this video, we are going to start rigging the eyes. Covered subjects in this video: Eye Setup Global IK Aim Control","title":"02 Rigging The Eyes"},{"location":"userGuides/tutorials/mansurRig_FacialRigging/02_Rigging-The-Eyes/#video-overview","text":"In this video, we are going to start rigging the eyes.","title":"Video Overview"},{"location":"userGuides/tutorials/mansurRig_FacialRigging/02_Rigging-The-Eyes/#covered-subjects-in-this-video","text":"Eye Setup Global IK Aim Control","title":"Covered subjects in this video:"},{"location":"userGuides/tutorials/mansurRig_FacialRigging/03_Rigging-The-Eyelids/","text":"Video Overview In this video, we are going to rig the eyelids Covered subjects in this video: Eyelids Setup Input Mesh Guidelines Creating The Module Skinning The Eyelids Finalizing The Setup","title":"03 Rigging The Eyelids"},{"location":"userGuides/tutorials/mansurRig_FacialRigging/03_Rigging-The-Eyelids/#video-overview","text":"In this video, we are going to rig the eyelids","title":"Video Overview"},{"location":"userGuides/tutorials/mansurRig_FacialRigging/03_Rigging-The-Eyelids/#covered-subjects-in-this-video","text":"Eyelids Setup Input Mesh Guidelines Creating The Module Skinning The Eyelids Finalizing The Setup","title":"Covered subjects in this video:"},{"location":"userGuides/tutorials/mansurRig_FacialRigging/04_Rigging-The-Eyelashes/","text":"Video Overview In this video, we are going to rig the eyelashes Covered subjects in this video: Eyelashes Setup Skinning The Eyelashes","title":"04 Rigging The Eyelashes"},{"location":"userGuides/tutorials/mansurRig_FacialRigging/04_Rigging-The-Eyelashes/#video-overview","text":"In this video, we are going to rig the eyelashes","title":"Video Overview"},{"location":"userGuides/tutorials/mansurRig_FacialRigging/04_Rigging-The-Eyelashes/#covered-subjects-in-this-video","text":"Eyelashes Setup Skinning The Eyelashes","title":"Covered subjects in this video:"},{"location":"userGuides/tutorials/mansurRig_FacialRigging/05_Finalizing-The-Eye/","text":"Video Overview In this video, we are going to finalize our eye rig Covered subjects in this video: Improving The Eyelids Range Pupil & Iris Shapes Control Shapes Adjustments","title":"05 Finalizing The Eye"},{"location":"userGuides/tutorials/mansurRig_FacialRigging/05_Finalizing-The-Eye/#video-overview","text":"In this video, we are going to finalize our eye rig","title":"Video Overview"},{"location":"userGuides/tutorials/mansurRig_FacialRigging/05_Finalizing-The-Eye/#covered-subjects-in-this-video","text":"Improving The Eyelids Range Pupil & Iris Shapes Control Shapes Adjustments","title":"Covered subjects in this video:"},{"location":"userGuides/tutorials/mansurRig_FacialRigging/06_Rigging-The-Eyebrows/","text":"Video Overview In this video, we are going to rig the eyebrows. In this video, I also want to take you through my thought process when rigging the eyebrows. I want to show you that in most cases, there is more then one solution to rig a component in Block. So I want to create two types of setups for the eyebrows, I'll let you decide which one you think is best- let me know in the comments. That will also be a good chance to see a few more attributes and features we didn't use so far. Covered subjects in this video: Eyebrows Setup A Surface Follow Feature Eyebrows Setup B","title":"06 Rigging The Eyebrows"},{"location":"userGuides/tutorials/mansurRig_FacialRigging/06_Rigging-The-Eyebrows/#video-overview","text":"In this video, we are going to rig the eyebrows. In this video, I also want to take you through my thought process when rigging the eyebrows. I want to show you that in most cases, there is more then one solution to rig a component in Block. So I want to create two types of setups for the eyebrows, I'll let you decide which one you think is best- let me know in the comments. That will also be a good chance to see a few more attributes and features we didn't use so far.","title":"Video Overview"},{"location":"userGuides/tutorials/mansurRig_FacialRigging/06_Rigging-The-Eyebrows/#covered-subjects-in-this-video","text":"Eyebrows Setup A Surface Follow Feature Eyebrows Setup B","title":"Covered subjects in this video:"},{"location":"userGuides/tutorials/mansurRig_FacialRigging/07_Nose-And-Cheek-Rig/","text":"Video Overview In this video, we are going to rig the nose and cheek. Covered subjects in this video: Rigging The Nose And Cheek Extra-Channels Feature Cheek Puff Shapes","title":"07 Nose And Cheek Rig"},{"location":"userGuides/tutorials/mansurRig_FacialRigging/07_Nose-And-Cheek-Rig/#video-overview","text":"In this video, we are going to rig the nose and cheek.","title":"Video Overview"},{"location":"userGuides/tutorials/mansurRig_FacialRigging/07_Nose-And-Cheek-Rig/#covered-subjects-in-this-video","text":"Rigging The Nose And Cheek Extra-Channels Feature Cheek Puff Shapes","title":"Covered subjects in this video:"},{"location":"userGuides/tutorials/mansurRig_FacialRigging/08_Rigging-The_Mouth/","text":"Video Overview In this video, we are going to rig the lips and inner mouth. Covered subjects in this video: Lips Setup Skinning The Lips Cheek Raise Feature Inner Mouth Setup Mouth Rig Review","title":"08 Rigging The Mouth"},{"location":"userGuides/tutorials/mansurRig_FacialRigging/08_Rigging-The_Mouth/#video-overview","text":"In this video, we are going to rig the lips and inner mouth.","title":"Video Overview"},{"location":"userGuides/tutorials/mansurRig_FacialRigging/08_Rigging-The_Mouth/#covered-subjects-in-this-video","text":"Lips Setup Skinning The Lips Cheek Raise Feature Inner Mouth Setup Mouth Rig Review","title":"Covered subjects in this video:"},{"location":"userGuides/tutorials/mansurRig_FacialRigging/09_Tweakers-And-Symmetry/","text":"Video Overview In this video, we are going to create additional facial tweak controls, and symmetrize all of our modules. Covered subjects in this video: Mesh Tweaker Types Overview Creating The Tweakers Symmetry Types Overview Modules Symmetry Skin Weights Mirror Symmetry Finalize","title":"09 Tweakers And Symmetry"},{"location":"userGuides/tutorials/mansurRig_FacialRigging/09_Tweakers-And-Symmetry/#video-overview","text":"In this video, we are going to create additional facial tweak controls, and symmetrize all of our modules.","title":"Video Overview"},{"location":"userGuides/tutorials/mansurRig_FacialRigging/09_Tweakers-And-Symmetry/#covered-subjects-in-this-video","text":"Mesh Tweaker Types Overview Creating The Tweakers Symmetry Types Overview Modules Symmetry Skin Weights Mirror Symmetry Finalize","title":"Covered subjects in this video:"},{"location":"userGuides/tutorials/mansurRig_FacialRigging/10_Finalizing-The-Rig/","text":"Video Overview In this video, we are going to finalize our rig. Let's press on and get this rig ready for delivery Covered subjects in this video: Rigging Missing Components Adding Squash Ability Tweaker Positions Update Conclusion And Overview","title":"10 Finalizing The Rig"},{"location":"userGuides/tutorials/mansurRig_FacialRigging/10_Finalizing-The-Rig/#video-overview","text":"In this video, we are going to finalize our rig. Let's press on and get this rig ready for delivery","title":"Video Overview"},{"location":"userGuides/tutorials/mansurRig_FacialRigging/10_Finalizing-The-Rig/#covered-subjects-in-this-video","text":"Rigging Missing Components Adding Squash Ability Tweaker Positions Update Conclusion And Overview","title":"Covered subjects in this video:"}]}